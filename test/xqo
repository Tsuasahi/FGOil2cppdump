	// RVA: 0xF706D8 Offset: 0xF706D8 VA: 0xF706D8
	public void set_NoOperation(bool value) { }

	// RVA: 0xF706E4 Offset: 0xF706E4 VA: 0xF706E4
	public bool isReflectedDamageSideEffect(int uniqueSvtId) { }

	// RVA: 0xF70754 Offset: 0xF70754 VA: 0xF70754
	public void addReflectDamageSideEffect(int uniqueSvtId) { }

	// RVA: 0xF707C4 Offset: 0xF707C4 VA: 0xF707C4
	public bool isReflectedAttackSideEffect(KeyValuePair<int, int> pairAttackAndTarget) { }

	// RVA: 0xF70834 Offset: 0xF70834 VA: 0xF70834
	public void addReflectAttackSideEffect(KeyValuePair<int, int> pairAttackAndTarget) { }

	// RVA: 0xF6EEA4 Offset: 0xF6EEA4 VA: 0xF6EEA4
	public void addReflectLogicResultServantIds(List<BattleActionData.ServantLogicResultData> addLogicResultList) { }

	// RVA: 0xF708A4 Offset: 0xF708A4 VA: 0xF708A4
	public void addReflectLogicResultServantId(int uniqueSvtId) { }

	// RVA: 0xF709E4 Offset: 0xF709E4 VA: 0xF709E4
	public void saveServantLogicResult(BattleData data) { }

	// RVA: 0xF70B1C Offset: 0xF70B1C VA: 0xF70B1C
	public void reflectServantLogicResult(BattleData data) { }

	// RVA: 0xF70CD4 Offset: 0xF70CD4 VA: 0xF70CD4
	public void servantLogicResultClear() { }

	// RVA: 0xF70D6C Offset: 0xF70D6C VA: 0xF70D6C
	public void initFuncTargetPlayerType(int length) { }

	// RVA: 0xF70DE4 Offset: 0xF70DE4 VA: 0xF70DE4
	public void setFuncTargetPlayerType(int index, bool isTargetEnemy) { }

	// RVA: 0xF70EEC Offset: 0xF70EEC VA: 0xF70EEC
	public Target.PlayerTypeFlag getFuncTargetPlayerType(int index) { }

	// RVA: 0xF71070 Offset: 0xF71070 VA: 0xF71070
	public void AddAfterActionData(BattleActionData _afterActionData, bool isPreActCheckDead = False) { }

	// RVA: 0xF71084 Offset: 0xF71084 VA: 0xF71084
	public bool ExistsAddableAfterAction(BattleData data) { }

	// RVA: 0xF710EC Offset: 0xF710EC VA: 0xF710EC
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC168 Offset: 0xCCC168 VA: 0xCCC168
	// RVA: 0xF711CC Offset: 0xF711CC VA: 0xF711CC
	private static bool <PreActionProcess>m__0(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC178 Offset: 0xCCC178 VA: 0xCCC178
	// RVA: 0xF711F8 Offset: 0xF711F8 VA: 0xF711F8
	private static bool <ExecUnappliedProcess>m__1(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC188 Offset: 0xCCC188 VA: 0xCCC188
	// RVA: 0xF71224 Offset: 0xF71224 VA: 0xF71224
	private static int <GetExecOrderArray>m__2(BattleActionData.BaseData x, BattleActionData.BaseData y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC198 Offset: 0xCCC198 VA: 0xCCC198
	// RVA: 0xF71278 Offset: 0xF71278 VA: 0xF71278
	private static void <ResetAllCheckDead>m__3(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1A8 Offset: 0xCCC1A8 VA: 0xCCC1A8
	// RVA: 0xF712A4 Offset: 0xF712A4 VA: 0xF712A4
	private static int <getListFunctionIndex>m__4(BattleActionData.BuffData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1B8 Offset: 0xCCC1B8 VA: 0xCCC1B8
	// RVA: 0xF712CC Offset: 0xF712CC VA: 0xF712CC
	private static int <getListFunctionIndex>m__5(BattleActionData.HealData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1C8 Offset: 0xCCC1C8 VA: 0xCCC1C8
	// RVA: 0xF712F4 Offset: 0xF712F4 VA: 0xF712F4
	private static int <getListFunctionIndex>m__6(int a, int b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1D8 Offset: 0xCCC1D8 VA: 0xCCC1D8
	// RVA: 0xF712FC Offset: 0xF712FC VA: 0xF712FC
	private static int <getListFunctionIndexEx>m__7(BattleActionData.BuffData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1E8 Offset: 0xCCC1E8 VA: 0xCCC1E8
	// RVA: 0xF71324 Offset: 0xF71324 VA: 0xF71324
	private static int <getListFunctionIndexEx>m__8(BattleActionData.HealData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC1F8 Offset: 0xCCC1F8 VA: 0xCCC1F8
	// RVA: 0xF7134C Offset: 0xF7134C VA: 0xF7134C
	private static int <getListFunctionIndexEx>m__9(BattleActionData.DamageData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC208 Offset: 0xCCC208 VA: 0xCCC208
	// RVA: 0xF71374 Offset: 0xF71374 VA: 0xF71374
	private static int <getListFunctionIndexEx>m__A(BattleActionData.DamageData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC218 Offset: 0xCCC218 VA: 0xCCC218
	// RVA: 0xF713A0 Offset: 0xF713A0 VA: 0xF713A0
	private static int <getListFunctionIndexEx>m__B(int a, int b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC228 Offset: 0xCCC228 VA: 0xCCC228
	// RVA: 0xF713A8 Offset: 0xF713A8 VA: 0xF713A8
	private static BattleActionData <AddSideEffectAfterAction>m__C(BattleActionData act) { }
}

// Namespace: 
public enum BattleActionData.STATE // TypeDefIndex: 8717
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.STATE ACTORS = 0;
	public const BattleActionData.STATE SYSTEM = 1;
	public const BattleActionData.STATE FIELD = 2;
	public const BattleActionData.STATE MOTION = 3;
	public const BattleActionData.STATE ENEMY_MASTER = 4;
	public const BattleActionData.STATE LOAD_IMMEDIATE_ENTRY_SERVANT = 5;
	public const BattleActionData.STATE WAIT_COND = 6;
}

// Namespace: 
public enum BattleActionData.DamageHitType // TypeDefIndex: 8718
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.DamageHitType NORMAL = 0;
	public const BattleActionData.DamageHitType INVINCIBLE = 1;
	public const BattleActionData.DamageHitType AVOIDANCE = 2;
	public const BattleActionData.DamageHitType PIERCE_INVINCIBLE = 3;
	public const BattleActionData.DamageHitType BREAK_AVOIDANCE = 4;
}

// Namespace: 
public class BattleActionData.ServantLogicResultData // TypeDefIndex: 8719
{
	// Fields
	public int uniqueId; // 0x10
	public int hp; // 0x14

	// Methods

	// RVA: 0x1989B6C Offset: 0x1989B6C VA: 0x1989B6C
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.SideEffectData // TypeDefIndex: 8720
{
	// Fields
	public int targetId; // 0x10
	public BuffList.ACTION[] sideEffectActs; // 0x18

	// Methods

	// RVA: 0x1989DB4 Offset: 0x1989DB4 VA: 0x1989DB4
	public void .ctor(int targetId, BuffList.ACTION[] sideEffectActs) { }
}

// Namespace: 
public class BattleActionData.BaseData // TypeDefIndex: 8721
{
	// Fields
	public int functionIndex; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC5FC74 Offset: 0xC5FC74 VA: 0xC5FC74
	[DebuggerBrowsableAttribute] // RVA: 0xC5FC74 Offset: 0xC5FC74 VA: 0xC5FC74
	private int <AddOrder>k__BackingField; // 0x14

	// Properties
	public int AddOrder { get; set; }

	// Methods

	// RVA: 0x1988E48 Offset: 0x1988E48 VA: 0x1988E48
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC238 Offset: 0xCCC238 VA: 0xCCC238
	// RVA: 0x1988E50 Offset: 0x1988E50 VA: 0x1988E50
	private void set_AddOrder(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC248 Offset: 0xCCC248 VA: 0xCCC248
	// RVA: 0x1988E58 Offset: 0x1988E58 VA: 0x1988E58
	public int get_AddOrder() { }

	// RVA: 0x1988E60 Offset: 0x1988E60 VA: 0x1988E60
	public void InitAddOrder() { }
}

// Namespace: 
public class BattleActionData.DamageData : BattleActionData.BaseData // TypeDefIndex: 8722
{
	// Fields
	public int targetId; // 0x18
	public bool critical; // 0x1C
	public bool weak; // 0x1D
	public bool regist; // 0x1E
	public BattleActionData.DamageHitType hitStates; // 0x20
	public bool sphit; // 0x24
	public int sphitEffectId; // 0x28
	public int multiatk; // 0x2C
	public bool isCriticalMiss; // 0x30
	public bool noDamage; // 0x31
	public int defNoDamageBuffId; // 0x34
	public BattleBuffData.ShowBuffData[] atkbufflist; // 0x38
	public BattleBuffData.ShowBuffData[] defbufflist; // 0x40
	private List<BuffList.ACTION> attackSideEffectActList; // 0x48
	public int overkillIndex; // 0x50
	public int[] damagelist; // 0x58
	public int[] atknplist; // 0x60
	public int[] defnplist; // 0x68
	public int[] starlist; // 0x70
	public bool noAccumulation; // 0x78
	public bool isOverCharge; // 0x79
	public bool isNobleIndividualAtk; // 0x7A
	public bool isNobleRareAtk; // 0x7B
	public int[] damageValueEffectIds; // 0x80
	public Vector3 offSet; // 0x88
	public bool isSpecialInvincible; // 0x94

	// Methods

	// RVA: 0x19893EC Offset: 0x19893EC VA: 0x19893EC
	public void .ctor() { }

	// RVA: 0x198946C Offset: 0x198946C VA: 0x198946C
	public bool getCritical() { }

	// RVA: 0x1989474 Offset: 0x1989474 VA: 0x1989474
	public bool getWeak() { }

	// RVA: 0x198947C Offset: 0x198947C VA: 0x198947C
	public bool getRegist() { }

	// RVA: 0x1989484 Offset: 0x1989484 VA: 0x1989484
	public bool getInvincible() { }

	// RVA: 0x1989494 Offset: 0x1989494 VA: 0x1989494
	public bool getAvoidance() { }

	// RVA: 0x19894A4 Offset: 0x19894A4 VA: 0x19894A4
	public int getAttackCount() { }

	// RVA: 0x19894D0 Offset: 0x19894D0 VA: 0x19894D0
	public int[] getDamageList() { }

	// RVA: 0x19894D8 Offset: 0x19894D8 VA: 0x19894D8
	public int getDamage(int index, bool isCheckCount = True) { }

	// RVA: 0x1989530 Offset: 0x1989530 VA: 0x1989530
	public int getAtkNp(int index) { }

	// RVA: 0x1989588 Offset: 0x1989588 VA: 0x1989588
	public int getDefNp(int index) { }

	// RVA: 0x19895E0 Offset: 0x19895E0 VA: 0x19895E0
	public bool getCriticalPoint(int index) { }

	// RVA: 0x1989640 Offset: 0x1989640 VA: 0x1989640
	public int getCriticalPointCount(int index) { }

	// RVA: 0x1989698 Offset: 0x1989698 VA: 0x1989698
	public void addAttackSideEffectAction(BuffList.ACTION act) { }

	// RVA: 0x1989744 Offset: 0x1989744 VA: 0x1989744
	public List<BuffList.ACTION> getAttackSideEffectActionList() { }

	// RVA: 0x198974C Offset: 0x198974C VA: 0x198974C
	public int GetAttackCountExceptFirst() { }
}

// Namespace: 
public class BattleActionData.BuffData : BattleActionData.BaseData // TypeDefIndex: 8723
{
	// Fields
	public BattleActionData.BuffData.BuffProcType procType; // 0x18
	public int procValue; // 0x1C
	private int updateType; // 0x20
	public int targetId; // 0x24
	public int buffId; // 0x28
	public int auraEffectId; // 0x2C
	public string popLabel; // 0x30
	public int popIcon; // 0x38
	public int popColor; // 0x3C
	public int[] effectList; // 0x40
	public bool isMiss; // 0x48
	public bool noAccumulation; // 0x49
	public bool isCommandAfter; // 0x4A
	[CompilerGeneratedAttribute] // RVA: 0xC5FCB0 Offset: 0xC5FCB0 VA: 0xC5FCB0
	[DebuggerBrowsableAttribute] // RVA: 0xC5FCB0 Offset: 0xC5FCB0 VA: 0xC5FCB0
	private int <saveNpValue>k__BackingField; // 0x4C
	public bool isOverCharge; // 0x50
	public bool IsNoEffect; // 0x51
	public bool isHideEffect; // 0x52
	[CompilerGeneratedAttribute] // RVA: 0xC5FCEC Offset: 0xC5FCEC VA: 0xC5FCEC
	[DebuggerBrowsableAttribute] // RVA: 0xC5FCEC Offset: 0xC5FCEC VA: 0xC5FCEC
	private bool <IsCheckHideWhenDead>k__BackingField; // 0x53
	public DataVals dataVals; // 0x58
	public int statusEffectId; // 0x60
	public bool isShowBuffAuraUpdate; // 0x64
	public bool isBuffEffectTargetMaster; // 0x65
	public bool isUpdateShowBuffAfter; // 0x66
	private BattleActionEffect.Base EffectProc; // 0x68
	public int addOrder; // 0x70
	public int[] withAddOrderArray; // 0x78
	public int popDelay; // 0x80
	public List<BattleBuffData.BuffData> removeBuffList; // 0x88
	public bool isPopped; // 0x90
	public bool isOncePop; // 0x91

	// Properties
	public bool IsSetUpdateBuffType { get; }
	public int saveNpValue { get; set; }
	public bool IsCheckHideWhenDead { get; set; }
	public bool ExistEffectProc { get; }

	// Methods

	// RVA: 0x19891C8 Offset: 0x19891C8 VA: 0x19891C8
	public void .ctor() { }

	// RVA: 0x1989248 Offset: 0x1989248 VA: 0x1989248
	public bool get_IsSetUpdateBuffType() { }

	// RVA: 0x1989258 Offset: 0x1989258 VA: 0x1989258
	public void OnUpdateBuffType(BattleActionData.BuffData.UpdateBuffType type) { }

	// RVA: 0x1989268 Offset: 0x1989268 VA: 0x1989268
	public bool IsUpdateBuffType(BattleActionData.BuffData.UpdateBuffType type) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC258 Offset: 0xCCC258 VA: 0xCCC258
	// RVA: 0x1989278 Offset: 0x1989278 VA: 0x1989278
	public int get_saveNpValue() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC268 Offset: 0xCCC268 VA: 0xCCC268
	// RVA: 0x1989280 Offset: 0x1989280 VA: 0x1989280
	protected void set_saveNpValue(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC278 Offset: 0xCCC278 VA: 0xCCC278
	// RVA: 0x1989288 Offset: 0x1989288 VA: 0x1989288
	private void set_IsCheckHideWhenDead(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC288 Offset: 0xCCC288 VA: 0xCCC288
	// RVA: 0x1989294 Offset: 0x1989294 VA: 0x1989294
	public bool get_IsCheckHideWhenDead() { }

	// RVA: 0x198929C Offset: 0x198929C VA: 0x198929C
	public bool get_ExistEffectProc() { }

	// RVA: 0x19892AC Offset: 0x19892AC VA: 0x19892AC
	public void setSaveNp(int value) { }

	// RVA: 0x19892B4 Offset: 0x19892B4 VA: 0x19892B4
	public void SetCheckHideWhenDeadInfo(DataVals vals) { }

	// RVA: 0x198935C Offset: 0x198935C VA: 0x198935C
	public void ResetCheckHideWhenDead() { }

	// RVA: 0x1989364 Offset: 0x1989364 VA: 0x1989364
	public void SetActionEffectProc(BattleActionEffect.Base effectProc) { }

	// RVA: 0x1988A08 Offset: 0x1988A08 VA: 0x1988A08
	public void ExecPreActionProc(BattleData data) { }

	// RVA: 0x19886A4 Offset: 0x19886A4 VA: 0x19886A4
	public void ExecAfterEffectProc(BattleData data) { }

	// RVA: 0x198936C Offset: 0x198936C VA: 0x198936C
	public bool IsPopLabel() { }
}

// Namespace: 
public enum BattleActionData.BuffData.BuffProcType // TypeDefIndex: 8724
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BuffData.BuffProcType NONE = 0;
	public const BattleActionData.BuffData.BuffProcType INSTANT_DEATH = 1;
	public const BattleActionData.BuffData.BuffProcType UPDATE_HP = 2;
	public const BattleActionData.BuffData.BuffProcType UPDATE_NP = 3;
	public const BattleActionData.BuffData.BuffProcType UPDATE_CRITICAL = 4;
	public const BattleActionData.BuffData.BuffProcType UPDATE_NPTURN = 5;
}

// Namespace: 
public enum BattleActionData.BuffData.UpdateBuffType // TypeDefIndex: 8725
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BuffData.UpdateBuffType SKILL_RANK = 1;
}

// Namespace: 
public class BattleActionData.HealData : BattleActionData.BaseData // TypeDefIndex: 8726
{
	// Fields
	public int targetId; // 0x18
	public int healPoint; // 0x1C
	public int buffId; // 0x20
	public bool isOverCharge; // 0x24
	public bool isCommandAfter; // 0x25
	public bool isShowForcedHeal; // 0x26
	public BattleActionData.BuffData effect; // 0x28
	public int popDelay; // 0x30

	// Methods

	// RVA: 0x1989AB0 Offset: 0x1989AB0 VA: 0x1989AB0
	public void .ctor() { }

	// RVA: 0x1989AB8 Offset: 0x1989AB8 VA: 0x1989AB8
	public bool CheckExecHeal() { }
}

// Namespace: 
public class BattleActionData.ReplaceMember : BattleActionData.BaseData // TypeDefIndex: 8727
{
	// Fields
	public int index; // 0x18
	public int outUniqeId; // 0x1C
	public int inUniqeId; // 0x20

	// Methods

	// RVA: 0x1989B64 Offset: 0x1989B64 VA: 0x1989B64
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.MoveToSubMember : BattleActionData.BaseData // TypeDefIndex: 8728
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC5FD28 Offset: 0xC5FD28 VA: 0xC5FD28
	[DebuggerBrowsableAttribute] // RVA: 0xC5FD28 Offset: 0xC5FD28 VA: 0xC5FD28
	private int <index>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC5FD64 Offset: 0xC5FD64 VA: 0xC5FD64
	[DebuggerBrowsableAttribute] // RVA: 0xC5FD64 Offset: 0xC5FD64 VA: 0xC5FD64
	private int <uniqueId>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC5FDA0 Offset: 0xC5FDA0 VA: 0xC5FDA0
	[DebuggerBrowsableAttribute] // RVA: 0xC5FDA0 Offset: 0xC5FDA0 VA: 0xC5FDA0
	private bool <isSucceeded>k__BackingField; // 0x20

	// Properties
	public int index { get; set; }
	public int uniqueId { get; set; }
	public bool isSucceeded { get; set; }

	// Methods

	// RVA: 0x1989ADC Offset: 0x1989ADC VA: 0x1989ADC
	public void .ctor(int index, int uniqueId, int funcIndex, bool isSucceeded) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC298 Offset: 0xCCC298 VA: 0xCCC298
	// RVA: 0x1989B4C Offset: 0x1989B4C VA: 0x1989B4C
	public int get_index() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2A8 Offset: 0xCCC2A8 VA: 0xCCC2A8
	// RVA: 0x1989B30 Offset: 0x1989B30 VA: 0x1989B30
	private void set_index(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2B8 Offset: 0xCCC2B8 VA: 0xCCC2B8
	// RVA: 0x1989B54 Offset: 0x1989B54 VA: 0x1989B54
	public int get_uniqueId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2C8 Offset: 0xCCC2C8 VA: 0xCCC2C8
	// RVA: 0x1989B38 Offset: 0x1989B38 VA: 0x1989B38
	private void set_uniqueId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2D8 Offset: 0xCCC2D8 VA: 0xCCC2D8
	// RVA: 0x1989B5C Offset: 0x1989B5C VA: 0x1989B5C
	public bool get_isSucceeded() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2E8 Offset: 0xCCC2E8 VA: 0xCCC2E8
	// RVA: 0x1989B40 Offset: 0x1989B40 VA: 0x1989B40
	private void set_isSucceeded(bool value) { }
}

// Namespace: 
public class BattleActionData.TransformServant : BattleActionData.BaseData // TypeDefIndex: 8729
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC5FDDC Offset: 0xC5FDDC VA: 0xC5FDDC
	[DebuggerBrowsableAttribute] // RVA: 0xC5FDDC Offset: 0xC5FDDC VA: 0xC5FDDC
	private int <Index>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC5FE18 Offset: 0xC5FE18 VA: 0xC5FE18
	[DebuggerBrowsableAttribute] // RVA: 0xC5FE18 Offset: 0xC5FE18 VA: 0xC5FE18
	private int <UniqueId>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC5FE54 Offset: 0xC5FE54 VA: 0xC5FE54
	[DebuggerBrowsableAttribute] // RVA: 0xC5FE54 Offset: 0xC5FE54 VA: 0xC5FE54
	private int <OverwriteLimitCount>k__BackingField; // 0x20

	// Properties
	public int Index { get; set; }
	public int UniqueId { get; set; }
	public int OverwriteLimitCount { get; set; }

	// Methods

	// RVA: 0x198A068 Offset: 0x198A068 VA: 0x198A068
	public void .ctor(int index, int uniqueId, int funcIndex, int overwriteLimitCount) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC2F8 Offset: 0xCCC2F8 VA: 0xCCC2F8
	// RVA: 0x198A0D0 Offset: 0x198A0D0 VA: 0x198A0D0
	public int get_Index() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC308 Offset: 0xCCC308 VA: 0xCCC308
	// RVA: 0x198A0B8 Offset: 0x198A0B8 VA: 0x198A0B8
	private void set_Index(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC318 Offset: 0xCCC318 VA: 0xCCC318
	// RVA: 0x198A0D8 Offset: 0x198A0D8 VA: 0x198A0D8
	public int get_UniqueId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC328 Offset: 0xCCC328 VA: 0xCCC328
	// RVA: 0x198A0C0 Offset: 0x198A0C0 VA: 0x198A0C0
	private void set_UniqueId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC338 Offset: 0xCCC338 VA: 0xCCC338
	// RVA: 0x198A0E0 Offset: 0x198A0E0 VA: 0x198A0E0
	public int get_OverwriteLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC348 Offset: 0xCCC348 VA: 0xCCC348
	// RVA: 0x198A0C8 Offset: 0x198A0C8 VA: 0x198A0C8
	private void set_OverwriteLimitCount(int value) { }
}

// Namespace: 
public class BattleActionData.SummonServant : BattleActionData.BaseData // TypeDefIndex: 8730
{
	// Fields
	public int uniqueId; // 0x18
	public int unloadUniqueId; // 0x1C
	public bool isEffectSummon; // 0x20
	public int callSvtEffectId; // 0x24

	// Methods

	// RVA: 0x198A00C Offset: 0x198A00C VA: 0x198A00C
	public void .ctor(int inUniqueId, int inUnloadUniqueId, int inFuncIndex, bool isEffect, int callSvtEffectId) { }
}

// Namespace: 
public class BattleActionData.ShiftServant : BattleActionData.BaseData // TypeDefIndex: 8731
{
	// Fields
	public int uniqueId; // 0x18
	public int svtId; // 0x1C
	public int limit; // 0x20
	public int weapon; // 0x24
	public int effectFolder; // 0x28
	public int cameraId; // 0x2C
	public int overwriteSvtVoiceId; // 0x30
	public bool isChange; // 0x34
	public bool isNoVoice; // 0x35
	public bool isHideShadow; // 0x36
	public ServantAssetArgs loadedAssetArgs; // 0x38

	// Methods

	// RVA: 0x1989B7C Offset: 0x1989B7C VA: 0x1989B7C
	public void .ctor() { }

	// RVA: 0x1989B84 Offset: 0x1989B84 VA: 0x1989B84
	public void setBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1989D1C Offset: 0x1989D1C VA: 0x1989D1C
	public void setCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1989DA8 Offset: 0x1989DA8 VA: 0x1989DA8 Slot: 4
	protected virtual void SetAddBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1989DAC Offset: 0x1989DAC VA: 0x1989DAC Slot: 5
	protected virtual void SetAddCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1989DB0 Offset: 0x1989DB0 VA: 0x1989DB0 Slot: 6
	public virtual void UpdateAfterShiftData(BattleServantData targetData) { }
}

// Namespace: 
public class BattleActionData.SkillShiftServant : BattleActionData.ShiftServant // TypeDefIndex: 8732
{
	// Fields
	protected BattleData data; // 0x40
	protected int npcId; // 0x48
	protected int displayType; // 0x4C

	// Methods

	// RVA: 0x1989E30 Offset: 0x1989E30 VA: 0x1989E30
	public void .ctor(BattleData data, int shiftNpcId) { }

	// RVA: 0x1989E74 Offset: 0x1989E74 VA: 0x1989E74 Slot: 4
	protected override void SetAddBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1989EA8 Offset: 0x1989EA8 VA: 0x1989EA8 Slot: 5
	protected override void SetAddCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1989EF8 Offset: 0x1989EF8 VA: 0x1989EF8 Slot: 6
	public override void UpdateAfterShiftData(BattleServantData targetData) { }
}

// Namespace: 
public abstract class BattleActionData.BaseShiftGaugeData : BattleActionData.BaseData // TypeDefIndex: 8733
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC5FE90 Offset: 0xC5FE90 VA: 0xC5FE90
	[DebuggerBrowsableAttribute] // RVA: 0xC5FE90 Offset: 0xC5FE90 VA: 0xC5FE90
	private int <PlayedState>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC5FECC Offset: 0xC5FECC VA: 0xC5FECC
	[DebuggerBrowsableAttribute] // RVA: 0xC5FECC Offset: 0xC5FECC VA: 0xC5FECC
	private int <NotShiftUpdateState>k__BackingField; // 0x1C
	protected int hpDataIndex; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC5FF08 Offset: 0xC5FF08 VA: 0xC5FF08
	[DebuggerBrowsableAttribute] // RVA: 0xC5FF08 Offset: 0xC5FF08 VA: 0xC5FF08
	private List<ShiftHpData> <ShiftHpDataList>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC5FF44 Offset: 0xC5FF44 VA: 0xC5FF44
	[DebuggerBrowsableAttribute] // RVA: 0xC5FF44 Offset: 0xC5FF44 VA: 0xC5FF44
	private int <TargetId>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC5FF80 Offset: 0xC5FF80 VA: 0xC5FF80
	private static Action<ShiftHpData> <>f__am$cache0; // 0x0

	// Properties
	public int PlayedState { get; set; }
	public int NotShiftUpdateState { get; set; }
	public abstract BasePlayShiftGauge PlayMain { get; }
	public List<ShiftHpData> ShiftHpDataList { get; set; }
	public int TargetId { get; set; }
	public abstract string Motion { get; }

	// Methods

	// RVA: 0x1988ED8 Offset: 0x1988ED8 VA: 0x1988ED8
	protected void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC358 Offset: 0xCCC358 VA: 0xCCC358
	// RVA: 0x1988EE0 Offset: 0x1988EE0 VA: 0x1988EE0
	private void set_PlayedState(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC368 Offset: 0xCCC368 VA: 0xCCC368
	// RVA: 0x1988EE8 Offset: 0x1988EE8 VA: 0x1988EE8
	public int get_PlayedState() { }

	// RVA: 0x1988EF0 Offset: 0x1988EF0 VA: 0x1988EF0
	public void OnState(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	// RVA: 0x1988F00 Offset: 0x1988F00 VA: 0x1988F00
	public void OffState(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	// RVA: 0x1988F10 Offset: 0x1988F10 VA: 0x1988F10
	public bool IsPlaying(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC378 Offset: 0xCCC378 VA: 0xCCC378
	// RVA: 0x1988F20 Offset: 0x1988F20 VA: 0x1988F20
	private void set_NotShiftUpdateState(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC388 Offset: 0xCCC388 VA: 0xCCC388
	// RVA: 0x1988F28 Offset: 0x1988F28 VA: 0x1988F28
	public int get_NotShiftUpdateState() { }

	// RVA: 0x1988F30 Offset: 0x1988F30 VA: 0x1988F30
	public void OnNotUpdateState(BattleActionData.BaseShiftGaugeData.NotUpdateFlag state) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract BasePlayShiftGauge get_PlayMain();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract BattleServantHpShiftComponent.EffectData GetMainEffectData();

	// RVA: 0x1988F40 Offset: 0x1988F40 VA: 0x1988F40 Slot: 6
	public virtual BattleServantHpShiftComponent.EffectData GetBeforeEffectData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC398 Offset: 0xCCC398 VA: 0xCCC398
	// RVA: 0x1988FB8 Offset: 0x1988FB8 VA: 0x1988FB8
	protected void set_ShiftHpDataList(List<ShiftHpData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3A8 Offset: 0xCCC3A8 VA: 0xCCC3A8
	// RVA: 0x1988FC0 Offset: 0x1988FC0 VA: 0x1988FC0
	public List<ShiftHpData> get_ShiftHpDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3B8 Offset: 0xCCC3B8 VA: 0xCCC3B8
	// RVA: 0x1988FC8 Offset: 0x1988FC8 VA: 0x1988FC8
	protected void set_TargetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3C8 Offset: 0xCCC3C8 VA: 0xCCC3C8
	// RVA: 0x1988FD0 Offset: 0x1988FD0 VA: 0x1988FD0
	public int get_TargetId() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Motion();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool IsInvalid(BattleServantData svtData);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int GetShiftValue(BattleServantData svtData, int baseValue);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp);

	// RVA: 0x1988FD8 Offset: 0x1988FD8 VA: 0x1988FD8 Slot: 12
	public virtual void Init(BattleServantData svtData) { }

	// RVA: 0x1989068 Offset: 0x1989068 VA: 0x1989068 Slot: 13
	public virtual void InitShiftHpPos() { }

	// RVA: 0x198913C Offset: 0x198913C VA: 0x198913C
	public ShiftHpData GetHpData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3D8 Offset: 0xCCC3D8 VA: 0xCCC3D8
	// RVA: 0x198919C Offset: 0x198919C VA: 0x198919C
	private static void <InitShiftHpPos>m__0(ShiftHpData x) { }
}

// Namespace: 
public enum BattleActionData.BaseShiftGaugeData.PlayedStateFlag // TypeDefIndex: 8734
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BaseShiftGaugeData.PlayedStateFlag SHIFT_GAUGE_MAIN = 1;
}

// Namespace: 
public enum BattleActionData.BaseShiftGaugeData.NotUpdateFlag // TypeDefIndex: 8735
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BaseShiftGaugeData.NotUpdateFlag TD_GAUGE = 1;
}

// Namespace: 
public class BattleActionData.UpShiftGaugeData : BattleActionData.BaseShiftGaugeData // TypeDefIndex: 8736
{
	// Properties
	public override string Motion { get; }
	public override BasePlayShiftGauge PlayMain { get; }

	// Methods

	// RVA: 0x198A0E8 Offset: 0x198A0E8 VA: 0x198A0E8
	public void .ctor() { }

	// RVA: 0x198A0F0 Offset: 0x198A0F0 VA: 0x198A0F0 Slot: 7
	public override string get_Motion() { }

	// RVA: 0x198A138 Offset: 0x198A138 VA: 0x198A138 Slot: 4
	public override BasePlayShiftGauge get_PlayMain() { }

	// RVA: 0x198A1B0 Offset: 0x198A1B0 VA: 0x198A1B0 Slot: 8
	public override bool IsInvalid(BattleServantData svtData) { }

	// RVA: 0x198A1E4 Offset: 0x198A1E4 VA: 0x198A1E4 Slot: 9
	public override int GetShiftValue(BattleServantData svtData, int baseValue) { }

	// RVA: 0x198A278 Offset: 0x198A278 VA: 0x198A278 Slot: 5
	public override BattleServantHpShiftComponent.EffectData GetMainEffectData() { }

	// RVA: 0x198A2F0 Offset: 0x198A2F0 VA: 0x198A2F0 Slot: 10
	public override void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge) { }

	// RVA: 0x198A3B4 Offset: 0x198A3B4 VA: 0x198A3B4 Slot: 11
	public override void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }
}

// Namespace: 
public class BattleActionData.DownShiftGaugeData : BattleActionData.BaseShiftGaugeData // TypeDefIndex: 8737
{
	// Properties
	public override string Motion { get; }
	public override BasePlayShiftGauge PlayMain { get; }

	// Methods

	// RVA: 0x19897D4 Offset: 0x19897D4 VA: 0x19897D4
	public void .ctor() { }

	// RVA: 0x19897DC Offset: 0x19897DC VA: 0x19897DC Slot: 7
	public override string get_Motion() { }

	// RVA: 0x1989824 Offset: 0x1989824 VA: 0x1989824 Slot: 4
	public override BasePlayShiftGauge get_PlayMain() { }

	// RVA: 0x198989C Offset: 0x198989C VA: 0x198989C Slot: 8
	public override bool IsInvalid(BattleServantData svtData) { }

	// RVA: 0x19898D8 Offset: 0x19898D8 VA: 0x19898D8 Slot: 9
	public override int GetShiftValue(BattleServantData svtData, int baseValue) { }

	// RVA: 0x198997C Offset: 0x198997C VA: 0x198997C Slot: 5
	public override BattleServantHpShiftComponent.EffectData GetMainEffectData() { }

	// RVA: 0x19899F4 Offset: 0x19899F4 VA: 0x19899F4 Slot: 10
	public override void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge) { }

	// RVA: 0x19899F8 Offset: 0x19899F8 VA: 0x19899F8 Slot: 11
	public override void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }
}

// Namespace: 
public class BattleActionData.ChangeBg : BattleActionData.BaseData // TypeDefIndex: 8738
{
	// Fields
	public int bgNo; // 0x18
	public int bgTp; // 0x1C

	// Methods

	// RVA: 0x19893E4 Offset: 0x19893E4 VA: 0x19893E4
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.GimmickData : BattleActionData.BaseData // TypeDefIndex: 8739
{
	// Fields
	public int[] indexArray; // 0x18
	public string[] startVoiceIdArray; // 0x20
	public object[] resultVoiceIdArray; // 0x28
	public int[] animationTypes; // 0x30

	// Methods

	// RVA: 0x1989AA8 Offset: 0x1989AA8 VA: 0x1989AA8
	public void .ctor() { }
}

// Namespace: 
public enum BattleActionData.ACTTYPE // TypeDefIndex: 8740
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.ACTTYPE NOMAL = 0;
	public const BattleActionData.ACTTYPE ATTACK = 1;
	public const BattleActionData.ACTTYPE DAMAGE = 2;
	public const BattleActionData.ACTTYPE ATTACK_BEFORE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43A64 Offset: 0xC43A64 VA: 0xC43A64
private sealed class BattleActionData.<PreActionProcess>c__AnonStorey0 // TypeDefIndex: 8741
{
	// Fields
	internal BattleData data; // 0x10

	// Methods

	// RVA: 0x19889B4 Offset: 0x19889B4 VA: 0x19889B4
	public void .ctor() { }

	// RVA: 0x19889BC Offset: 0x19889BC VA: 0x19889BC
	internal void <>m__0(BattleActionData.BuffData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43A74 Offset: 0xC43A74 VA: 0xC43A74
private sealed class BattleActionData.<ExecUnappliedProcess>c__AnonStorey1 // TypeDefIndex: 8742
{
	// Fields
	internal BattleData data; // 0x10

	// Methods

	// RVA: 0x1988654 Offset: 0x1988654 VA: 0x1988654
	public void .ctor() { }

	// RVA: 0x198865C Offset: 0x198865C VA: 0x198865C
	internal void <>m__0(BattleActionData.BuffData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43A84 Offset: 0xC43A84 VA: 0xC43A84
private sealed class BattleActionData.<GetExecOrderArray>c__AnonStorey2 // TypeDefIndex: 8743
{
	// Fields
	internal List<BattleActionData.BaseData> execOrderList; // 0x10

	// Methods

	// RVA: 0x198872C Offset: 0x198872C VA: 0x198872C
	public void .ctor() { }

	// RVA: 0x1988734 Offset: 0x1988734 VA: 0x1988734
	internal void <>m__0(BattleActionData.BuffData x) { }

	// RVA: 0x19887A4 Offset: 0x19887A4 VA: 0x19887A4
	internal void <>m__1(BattleActionData.HealData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43A94 Offset: 0xC43A94 VA: 0xC43A94
private sealed class BattleActionData.<getDamageList>c__AnonStorey3 // TypeDefIndex: 8744
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1988CF4 Offset: 0x1988CF4 VA: 0x1988CF4
	public void .ctor() { }

	// RVA: 0x1988CFC Offset: 0x1988CFC VA: 0x1988CFC
	internal bool <>m__0(BattleActionData.DamageData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AA4 Offset: 0xC43AA4 VA: 0xC43AA4
private sealed class BattleActionData.<GetDamageArrayDistinctIndex>c__AnonStorey4 // TypeDefIndex: 8745
{
	// Fields
	internal BattleActionData.DamageData damage; // 0x10

	// Methods

	// RVA: 0x19886D8 Offset: 0x19886D8 VA: 0x19886D8
	public void .ctor() { }

	// RVA: 0x19886E0 Offset: 0x19886E0 VA: 0x19886E0
	internal bool <>m__0(BattleActionData.DamageData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AB4 Offset: 0xC43AB4 VA: 0xC43AB4
private sealed class BattleActionData.<getBuffList>c__AnonStorey5 // TypeDefIndex: 8746
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1988CB0 Offset: 0x1988CB0 VA: 0x1988CB0
	public void .ctor() { }

	// RVA: 0x1988CB8 Offset: 0x1988CB8 VA: 0x1988CB8
	internal bool <>m__0(BattleActionData.BuffData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AC4 Offset: 0xC43AC4 VA: 0xC43AC4
private sealed class BattleActionData.<getHealList>c__AnonStorey6 // TypeDefIndex: 8747
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1988D38 Offset: 0x1988D38 VA: 0x1988D38
	public void .ctor() { }

	// RVA: 0x1988D40 Offset: 0x1988D40 VA: 0x1988D40
	internal bool <>m__0(BattleActionData.HealData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AD4 Offset: 0xC43AD4 VA: 0xC43AD4
private sealed class BattleActionData.<getReplaceMember>c__AnonStorey7 // TypeDefIndex: 8748
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1988D7C Offset: 0x1988D7C VA: 0x1988D7C
	public void .ctor() { }

	// RVA: 0x1988D84 Offset: 0x1988D84 VA: 0x1988D84
	internal bool <>m__0(BattleActionData.ReplaceMember s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AE4 Offset: 0xC43AE4 VA: 0xC43AE4
private sealed class BattleActionData.<getSummonServant>c__AnonStorey8 // TypeDefIndex: 8749
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1988E04 Offset: 0x1988E04 VA: 0x1988E04
	public void .ctor() { }

	// RVA: 0x1988E0C Offset: 0x1988E0C VA: 0x1988E0C
	internal bool <>m__0(BattleActionData.SummonServant s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43AF4 Offset: 0xC43AF4 VA: 0xC43AF4
private sealed class BattleActionData.<GetFunctionIndexArrayNearByCuriousFunc>c__AnonStorey9 // TypeDefIndex: 8750
{
	// Fields
	internal Nullable<int> curiousFuncIndex; // 0x10

	// Methods

	// RVA: 0x1988814 Offset: 0x1988814 VA: 0x1988814
	public void .ctor() { }

	// RVA: 0x198881C Offset: 0x198881C VA: 0x198881C
	internal bool <>m__0(int x) { }

	// RVA: 0x1988884 Offset: 0x1988884 VA: 0x1988884
	internal bool <>m__1(int x) { }

	// RVA: 0x19888EC Offset: 0x19888EC VA: 0x19888EC
	internal bool <>m__2(int x) { }
}
