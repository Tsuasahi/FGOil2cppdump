	internal bool <>m__0(int x) { }

	// RVA: 0x1E935FC Offset: 0x1E935FC VA: 0x1E935FC
	internal bool <>m__1(int x) { }

	// RVA: 0x1E93664 Offset: 0x1E93664 VA: 0x1E93664
	internal bool <>m__2(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBA0 Offset: 0xCAFBA0 VA: 0xCAFBA0
private sealed class BattleActionData.<GetMaxSideEffectCountByTarget>c__AnonStoreyA // TypeDefIndex: 8727
{
	// Fields
	internal Dictionary<int, int> dicTarget; // 0x10
	internal bool isAtkFirst; // 0x18
	internal bool isAtkLast; // 0x19

	// Methods

	// RVA: 0x1E936CC Offset: 0x1E936CC VA: 0x1E936CC
	public void .ctor() { }

	// RVA: 0x1E936D4 Offset: 0x1E936D4 VA: 0x1E936D4
	internal void <>m__0(BattleActionData data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBB0 Offset: 0xCAFBB0 VA: 0xCAFBB0
private sealed class BattleActionData.<SetSideEffectCountByTarget>c__AnonStoreyB // TypeDefIndex: 8728
{
	// Fields
	internal List<int> targetList; // 0x10
	internal BattleActionData $this; // 0x18
	private static Func<BattleActionData.BuffData, int> <>f__am$cache0; // 0x0
	private static Func<BattleActionData.HealData, int> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1E93798 Offset: 0x1E93798 VA: 0x1E93798
	public void .ctor() { }

	// RVA: 0x1E937A0 Offset: 0x1E937A0 VA: 0x1E937A0
	internal void <>m__0() { }

	// RVA: 0x1E93994 Offset: 0x1E93994 VA: 0x1E93994
	private static int <>m__1(BattleActionData.BuffData x) { }

	// RVA: 0x1E939BC Offset: 0x1E939BC VA: 0x1E939BC
	private static int <>m__2(BattleActionData.HealData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBC0 Offset: 0xCAFBC0 VA: 0xCAFBC0
private sealed class BattleActionData.<getSideEffectList>c__AnonStoreyC // TypeDefIndex: 8729
{
	// Fields
	internal BattleActionData.ACTTYPE actType; // 0x10

	// Methods

	// RVA: 0x1E93B38 Offset: 0x1E93B38 VA: 0x1E93B38
	public void .ctor() { }

	// RVA: 0x1E93B40 Offset: 0x1E93B40 VA: 0x1E93B40
	internal bool <>m__0(BattleActionData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBD0 Offset: 0xCAFBD0 VA: 0xCAFBD0
private sealed class BattleActionData.<AddSideEffectAfterAction>c__AnonStoreyD // TypeDefIndex: 8730
{
	// Fields
	internal BattlePerformance perf; // 0x10

	// Methods

	// RVA: 0x1E9337C Offset: 0x1E9337C VA: 0x1E9337C
	public void .ctor() { }

	// RVA: 0x1E93384 Offset: 0x1E93384 VA: 0x1E93384
	internal bool <>m__0(BattleActionData act) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBE0 Offset: 0xCAFBE0 VA: 0xCAFBE0
private sealed class BattleActionData.<addReflectLogicResultServantId>c__AnonStoreyE // TypeDefIndex: 8731
{
	// Fields
	internal int uniqueSvtId; // 0x10

	// Methods

	// RVA: 0x1E939E4 Offset: 0x1E939E4 VA: 0x1E939E4
	public void .ctor() { }

	// RVA: 0x1E939EC Offset: 0x1E939EC VA: 0x1E939EC
	internal bool <>m__0(BattleActionData.ServantLogicResultData x) { }
}

// Namespace: 
public class BattleActionEffect // TypeDefIndex: 8732
{
	// Methods

	// RVA: 0x1E951DC Offset: 0x1E951DC VA: 0x1E951DC
	public void .ctor() { }
}

// Namespace: 
public class BattleActionEffect.Base // TypeDefIndex: 8733
{
	// Methods

	// RVA: 0x1E952F8 Offset: 0x1E952F8 VA: 0x1E952F8
	public void .ctor() { }

	// RVA: 0x1E95300 Offset: 0x1E95300 VA: 0x1E95300 Slot: 4
	public virtual void PreActionProc(BattleData data) { }

	// RVA: 0x1E95304 Offset: 0x1E95304 VA: 0x1E95304 Slot: 5
	public virtual void AfterEffectProc(BattleData data) { }
}

// Namespace: 
public class BattleActionEffect.BaseServant : BattleActionEffect.Base // TypeDefIndex: 8734
{
	// Fields
	protected int targetId; // 0x10

	// Methods

	// RVA: 0x1E95310 Offset: 0x1E95310 VA: 0x1E95310
	public void .ctor() { }

	// RVA: 0x1E95318 Offset: 0x1E95318 VA: 0x1E95318
	protected BattleServantData GetServant(BattleData data) { }

	// RVA: 0x1E95350 Offset: 0x1E95350 VA: 0x1E95350 Slot: 5
	public override void AfterEffectProc(BattleData data) { }

	// RVA: 0x1E9539C Offset: 0x1E9539C VA: 0x1E9539C Slot: 6
	protected virtual void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.MaxHpBuffServant : BattleActionEffect.BaseServant // TypeDefIndex: 8735
{
	// Fields
	protected BattleBuffData.BuffData[] buffArray; // 0x18
	protected int diffVal; // 0x20

	// Methods

	// RVA: 0x1E951EC Offset: 0x1E951EC VA: 0x1E951EC
	public void .ctor() { }

	// RVA: 0x1E9545C Offset: 0x1E9545C VA: 0x1E9545C Slot: 7
	public virtual BattleActionEffect.MaxHpBuffServant InitBuff(BattleBuffData.BuffData[] buffArray, int targetId, int diffVal) { }

	// RVA: 0x1E9546C Offset: 0x1E9546C VA: 0x1E9546C Slot: 4
	public override void PreActionProc(BattleData data) { }

	// RVA: 0x1E954FC Offset: 0x1E954FC VA: 0x1E954FC Slot: 8
	protected virtual void PartialPreActionProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.AddChangeMaxHpBuff : BattleActionEffect.MaxHpBuffServant // TypeDefIndex: 8736
{
	// Methods

	// RVA: 0x1E951E4 Offset: 0x1E951E4 VA: 0x1E951E4
	public void .ctor() { }

	// RVA: 0x1E951F4 Offset: 0x1E951F4 VA: 0x1E951F4 Slot: 8
	protected override void PartialPreActionProc(BattleData data, BattleServantData svt) { }

	// RVA: 0x1E95240 Offset: 0x1E95240 VA: 0x1E95240 Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.SubChangeMaxHpBuff : BattleActionEffect.MaxHpBuffServant // TypeDefIndex: 8737
{
	// Methods

	// RVA: 0x1E95500 Offset: 0x1E95500 VA: 0x1E95500
	public void .ctor() { }

	// RVA: 0x1E95508 Offset: 0x1E95508 VA: 0x1E95508 Slot: 8
	protected override void PartialPreActionProc(BattleData data, BattleServantData svt) { }

	// RVA: 0x1E95554 Offset: 0x1E95554 VA: 0x1E95554 Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.BaseFuncServant : BattleActionEffect.BaseServant // TypeDefIndex: 8738
{
	// Methods

	// RVA: 0x1E95308 Offset: 0x1E95308 VA: 0x1E95308
	public void .ctor() { }
}

// Namespace: 
public class BattleActionEffect.LossHPFunc : BattleActionEffect.BaseFuncServant // TypeDefIndex: 8739
{
	// Fields
	private int lossHp; // 0x14
	private bool isSafe; // 0x18

	// Methods

	// RVA: 0x1E953A0 Offset: 0x1E953A0 VA: 0x1E953A0
	public void .ctor(int targetId, int lossHp, bool isSafe) { }

	// RVA: 0x1E953E4 Offset: 0x1E953E4 VA: 0x1E953E4 Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: BattleAction
public abstract class ShiftHpData // TypeDefIndex: 8740
{
	// Fields
	protected int hpDetailIndex; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCCE18 Offset: 0xCCCE18 VA: 0xCCCE18
	[DebuggerBrowsableAttribute] // RVA: 0xCCCE18 Offset: 0xCCCE18 VA: 0xCCCE18
	private List<ShiftHpData.HpDetail> <HpDetailList>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCCE54 Offset: 0xCCCE54 VA: 0xCCCE54
	[DebuggerBrowsableAttribute] // RVA: 0xCCCE54 Offset: 0xCCCE54 VA: 0xCCCE54
	private int <CurGaugeIndex>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCCE90 Offset: 0xCCCE90 VA: 0xCCCE90
	[DebuggerBrowsableAttribute] // RVA: 0xCCCE90 Offset: 0xCCCE90 VA: 0xCCCE90
	private int <MaxGaugeIconIndex>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xCCCECC Offset: 0xCCCECC VA: 0xCCCECC
	private static Func<ShiftHpData.HpDetail, float> <>f__am$cache0; // 0x0

	// Properties
	public List<ShiftHpData.HpDetail> HpDetailList { get; set; }
	public int CurGaugeIndex { get; set; }
	public int MaxGaugeIconIndex { get; set; }
	public abstract int PlayGaugeIndex { get; }
	public float TotalMovePer { get; }

	// Methods

	// RVA: 0x1485180 Offset: 0x1485180 VA: 0x1485180
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A0C Offset: 0xD39A0C VA: 0xD39A0C
	// RVA: 0x14852E4 Offset: 0x14852E4 VA: 0x14852E4
	protected void set_HpDetailList(List<ShiftHpData.HpDetail> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A1C Offset: 0xD39A1C VA: 0xD39A1C
	// RVA: 0x1485208 Offset: 0x1485208 VA: 0x1485208
	public List<ShiftHpData.HpDetail> get_HpDetailList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A2C Offset: 0xD39A2C VA: 0xD39A2C
	// RVA: 0x14852D4 Offset: 0x14852D4 VA: 0x14852D4
	protected void set_CurGaugeIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A3C Offset: 0xD39A3C VA: 0xD39A3C
	// RVA: 0x1484CF8 Offset: 0x1484CF8 VA: 0x1484CF8
	public int get_CurGaugeIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A4C Offset: 0xD39A4C VA: 0xD39A4C
	// RVA: 0x14852DC Offset: 0x14852DC VA: 0x14852DC
	protected void set_MaxGaugeIconIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A5C Offset: 0xD39A5C VA: 0xD39A5C
	// RVA: 0x1484FB4 Offset: 0x1484FB4 VA: 0x1484FB4
	public int get_MaxGaugeIconIndex() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_PlayGaugeIndex();

	// RVA: 0x14848C0 Offset: 0x14848C0 VA: 0x14848C0
	public float get_TotalMovePer() { }

	// RVA: 0x1484C90 Offset: 0x1484C90 VA: 0x1484C90
	public ShiftHpData.HpDetail GetHpDetail() { }

	// RVA: 0x14852EC Offset: 0x14852EC VA: 0x14852EC
	public void InitHpIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A6C Offset: 0xD39A6C VA: 0xD39A6C
	// RVA: 0x14852F4 Offset: 0x14852F4 VA: 0x14852F4
	private static float <get_TotalMovePer>m__0(ShiftHpData.HpDetail x) { }
}

// Namespace: 
public class ShiftHpData.HpDetail // TypeDefIndex: 8741
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCCEDC Offset: 0xCCCEDC VA: 0xCCCEDC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCEDC Offset: 0xCCCEDC VA: 0xCCCEDC
	private int <StartHp>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCCF18 Offset: 0xCCCF18 VA: 0xCCCF18
	[DebuggerBrowsableAttribute] // RVA: 0xCCCF18 Offset: 0xCCCF18 VA: 0xCCCF18
	private int <EndHp>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCCCF54 Offset: 0xCCCF54 VA: 0xCCCF54
	[DebuggerBrowsableAttribute] // RVA: 0xCCCF54 Offset: 0xCCCF54 VA: 0xCCCF54
	private int <MaxHp>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCCF90 Offset: 0xCCCF90 VA: 0xCCCF90
	[DebuggerBrowsableAttribute] // RVA: 0xCCCF90 Offset: 0xCCCF90 VA: 0xCCCF90
	private float <MovePer>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCCCFCC Offset: 0xCCCFCC VA: 0xCCCFCC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCFCC Offset: 0xCCCFCC VA: 0xCCCFCC
	private bool <IsHpChange>k__BackingField; // 0x20

	// Properties
	public int StartHp { get; set; }
	public int EndHp { get; set; }
	public int MaxHp { get; set; }
	public float MovePer { get; set; }
	public bool IsHpChange { get; set; }

	// Methods

	// RVA: 0x1485210 Offset: 0x1485210 VA: 0x1485210
	public void .ctor(int startHp, int endHp, int maxHp, bool isHpChange = False) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A7C Offset: 0xD39A7C VA: 0xD39A7C
	// RVA: 0x148531C Offset: 0x148531C VA: 0x148531C
	private void set_StartHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A8C Offset: 0xD39A8C VA: 0xD39A8C
	// RVA: 0x1484D00 Offset: 0x1484D00 VA: 0x1484D00
	public int get_StartHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39A9C Offset: 0xD39A9C VA: 0xD39A9C
	// RVA: 0x1485324 Offset: 0x1485324 VA: 0x1485324
	private void set_EndHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39AAC Offset: 0xD39AAC VA: 0xD39AAC
	// RVA: 0x1484D08 Offset: 0x1484D08 VA: 0x1484D08
	public int get_EndHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39ABC Offset: 0xD39ABC VA: 0xD39ABC
	// RVA: 0x148532C Offset: 0x148532C VA: 0x148532C
	private void set_MaxHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39ACC Offset: 0xD39ACC VA: 0xD39ACC
	// RVA: 0x1484D10 Offset: 0x1484D10 VA: 0x1484D10
	public int get_MaxHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39ADC Offset: 0xD39ADC VA: 0xD39ADC
	// RVA: 0x1485340 Offset: 0x1485340 VA: 0x1485340
	private void set_MovePer(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39AEC Offset: 0xD39AEC VA: 0xD39AEC
	// RVA: 0x1484D18 Offset: 0x1484D18 VA: 0x1484D18
	public float get_MovePer() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39AFC Offset: 0xD39AFC VA: 0xD39AFC
	// RVA: 0x1485334 Offset: 0x1485334 VA: 0x1485334
	private void set_IsHpChange(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B0C Offset: 0xD39B0C VA: 0xD39B0C
	// RVA: 0x1484CF0 Offset: 0x1484CF0 VA: 0x1484CF0
	public bool get_IsHpChange() { }
}

// Namespace: BattleAction
public class ShiftUpHpData : ShiftHpData // TypeDefIndex: 8742
{
	// Properties
	public override int PlayGaugeIndex { get; }

	// Methods

	// RVA: 0x1485348 Offset: 0x1485348 VA: 0x1485348
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }

	// RVA: 0x148550C Offset: 0x148550C VA: 0x148550C Slot: 4
	public override int get_PlayGaugeIndex() { }
}

// Namespace: BattleAction
public class ShiftDownHpData : ShiftHpData // TypeDefIndex: 8743
{
	// Properties
	public override int PlayGaugeIndex { get; }

	// Methods

	// RVA: 0x1484FBC Offset: 0x1484FBC VA: 0x1484FBC
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }

	// RVA: 0x14852CC Offset: 0x14852CC VA: 0x14852CC Slot: 4
	public override int get_PlayGaugeIndex() { }
}

// Namespace: BattleAction
public abstract class BasePlayShiftGauge // TypeDefIndex: 8744
{
	// Fields
	protected BattleActionData.BaseShiftGaugeData shiftData; // 0x10
	protected Action<int> callBack; // 0x18

	// Properties
	protected abstract BattleActionData.BaseShiftGaugeData.PlayedStateFlag PlayedFlag { get; }

	// Methods

	// RVA: 0x1484504 Offset: 0x1484504 VA: 0x1484504
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract BattleActionData.BaseShiftGaugeData.PlayedStateFlag get_PlayedFlag();

	// RVA: 0x148450C Offset: 0x148450C VA: 0x148450C Slot: 5
	protected virtual void StartPlayEffect(BattlePerformanceStatus status) { }

	// RVA: 0x1484510 Offset: 0x1484510 VA: 0x1484510 Slot: 6
	public virtual void OnCompleteChangeHp(BattleServantParamComponent comp) { }

	// RVA: 0x1484514 Offset: 0x1484514 VA: 0x1484514 Slot: 7
	public virtual BasePlayShiftGauge Init(BattleActionData.BaseShiftGaugeData data) { }

	// RVA: 0x148451C Offset: 0x148451C VA: 0x148451C
	public void Start(BattlePerformanceStatus status, Action<int> callBack) { }

	// RVA: 0x148458C Offset: 0x148458C VA: 0x148458C
	protected void End() { }
}

// Namespace: BattleAction
public class PlayShiftGaugeMain : BasePlayShiftGauge // TypeDefIndex: 8745
{
	// Fields
	protected float hpGaugeSpeed; // 0x20
	protected ShiftHpData curShiftHp; // 0x28

	// Properties
	protected override BattleActionData.BaseShiftGaugeData.PlayedStateFlag PlayedFlag { get; }

	// Methods

	// RVA: 0x148464C Offset: 0x148464C VA: 0x148464C
	public void .ctor() { }

	// RVA: 0x1484988 Offset: 0x1484988 VA: 0x1484988 Slot: 4
	protected override BattleActionData.BaseShiftGaugeData.PlayedStateFlag get_PlayedFlag() { }

	// RVA: 0x1484990 Offset: 0x1484990 VA: 0x1484990 Slot: 8
	protected virtual void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0x1484994 Offset: 0x1484994 VA: 0x1484994 Slot: 5
	protected override void StartPlayEffect(BattlePerformanceStatus status) { }

	// RVA: 0x1484A9C Offset: 0x1484A9C VA: 0x1484A9C Slot: 9
	protected virtual void NextPlayEffect(BattleServantParamComponent comp) { }

	// RVA: 0x1484B14 Offset: 0x1484B14 VA: 0x1484B14 Slot: 10
	protected virtual void StartHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0x1484BA4 Offset: 0x1484BA4 VA: 0x1484BA4 Slot: 11
	protected virtual void NextHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0x1484D20 Offset: 0x1484D20 VA: 0x1484D20 Slot: 6
	public override void OnCompleteChangeHp(BattleServantParamComponent comp) { }

	// RVA: 0x14847AC Offset: 0x14847AC VA: 0x14847AC
	protected void InitNextTdGauge(BattleServantParamComponent comp) { }
}

// Namespace: BattleAction
public class PlayUpShiftGaugeUpMain : PlayShiftGaugeMain // TypeDefIndex: 8746
{
	// Methods

	// RVA: 0x1484D30 Offset: 0x1484D30 VA: 0x1484D30
	public void .ctor() { }

	// RVA: 0x1484D44 Offset: 0x1484D44 VA: 0x1484D44 Slot: 8
	protected override void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0x1484EAC Offset: 0x1484EAC VA: 0x1484EAC
	protected void DelayStartHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }
}

// Namespace: BattleAction
public class PlayDownShiftGaugeMain : PlayShiftGaugeMain // TypeDefIndex: 8747
{
	// Methods

	// RVA: 0x1484638 Offset: 0x1484638 VA: 0x1484638
	public void .ctor() { }

	// RVA: 0x1484660 Offset: 0x1484660 VA: 0x1484660 Slot: 8
	protected override void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0x1484800 Offset: 0x1484800 VA: 0x1484800
	protected void DelayPlayDownShiftEffect(BattleServantParamComponent comp, ShiftHpData hpData) { }
}

// Namespace: 
public class BattleActionWaitCond // TypeDefIndex: 8748
{
	// Methods

	// RVA: 0x1E95E70 Offset: 0x1E95E70 VA: 0x1E95E70
	public void .ctor() { }
}

// Namespace: 
public class BattleActionWaitCond.Base // TypeDefIndex: 8749
{
	// Methods

	// RVA: 0x1E95E78 Offset: 0x1E95E78 VA: 0x1E95E78
	public void .ctor() { }

	// RVA: 0x1E95E80 Offset: 0x1E95E80 VA: 0x1E95E80 Slot: 4
	public virtual bool IsWait(float elapsedTime) { }
}

// Namespace: 
public class BattleActionWaitCond.LimitTime : BattleActionWaitCond.Base // TypeDefIndex: 8750
{
	// Fields
	protected float limit; // 0x10

	// Methods

	// RVA: 0x1E95E88 Offset: 0x1E95E88 VA: 0x1E95E88
	public void .ctor(float limit) { }

	// RVA: 0x1E95EBC Offset: 0x1E95EBC VA: 0x1E95EBC Slot: 5
	protected virtual bool IsWaitCond() { }

	// RVA: 0x1E95EC4 Offset: 0x1E95EC4 VA: 0x1E95EC4
	protected bool IsInLimitTime(float elapsedTime) { }

	// RVA: 0x1E95ED4 Offset: 0x1E95ED4 VA: 0x1E95ED4 Slot: 4
	public override bool IsWait(float elapsedTime) { }
}

// Namespace: 
public class BattleActionWaitCond.UntilSideEffectInvisible : BattleActionWaitCond.LimitTime // TypeDefIndex: 8751
{
	// Fields
	private BattlePerformance perf; // 0x18

	// Methods

	// RVA: 0x1E95EF4 Offset: 0x1E95EF4 VA: 0x1E95EF4
	public void .ctor(BattlePerformance perf) { }

	// RVA: 0x1E95F28 Offset: 0x1E95F28 VA: 0x1E95F28 Slot: 5
	protected override bool IsWaitCond() { }
}

// Namespace: 
public class BattleActorEffectMesh : MonoBehaviour // TypeDefIndex: 8752
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCD008 Offset: 0xCCD008 VA: 0xCCD008
	public ParticleSystem[] particles; // 0x18
	public BattleActorEffectMesh.MeshType type; // 0x20
	[TooltipAttribute] // RVA: 0xCCD040 Offset: 0xCCD040 VA: 0xCCD040
	public string topNodeName; // 0x28
	[TooltipAttribute] // RVA: 0xCCD078 Offset: 0xCCD078 VA: 0xCCD078
	public string meshObjName; // 0x30

	// Methods

	// RVA: 0x1D532F4 Offset: 0x1D532F4 VA: 0x1D532F4
	public void .ctor() { }

	// RVA: 0x1D5337C Offset: 0x1D5337C VA: 0x1D5337C
	private void OnTransformParentChanged() { }
}

// Namespace: 
public enum BattleActorEffectMesh.MeshType // TypeDefIndex: 8753
{
	// Fields
	public int value__; // 0x0
	public const BattleActorEffectMesh.MeshType SkinnedMeshRenderer = 0;
	public const BattleActorEffectMesh.MeshType MeshRenderer = 1;
}

// Namespace: 
public class BattleActorNodeLookAt : MonoBehaviour // TypeDefIndex: 8754
{
	// Fields
	public BattleActorNodeLookAt.Type type; // 0x18
	public Vector3 lookWorldVec; // 0x1C
	public Transform lookTargetObj; // 0x28
	public float speed; // 0x30
	private Transform selfTransform; // 0x38

	// Methods

	// RVA: 0x1D537D0 Offset: 0x1D537D0 VA: 0x1D537D0
	public void .ctor() { }

	// RVA: 0x1D537E0 Offset: 0x1D537E0 VA: 0x1D537E0
	private void Awake() { }

	// RVA: 0x1D53808 Offset: 0x1D53808 VA: 0x1D53808
	private void LateUpdate() { }
}

// Namespace: 
public enum BattleActorNodeLookAt.Type // TypeDefIndex: 8755
{
	// Fields
	public int value__; // 0x0
	public const BattleActorNodeLookAt.Type WorldLook = 0;
	public const BattleActorNodeLookAt.Type TargetLook = 1;
}

// Namespace: 
public class BattleActorRotationComponent : MonoBehaviour // TypeDefIndex: 8756
{
	// Fields
	[HeaderAttribute] // RVA: 0xCCD0B0 Offset: 0xCCD0B0 VA: 0xCCD0B0
	public bool IsRotation; // 0x18
	[HeaderAttribute] // RVA: 0xCCD0E8 Offset: 0xCCD0E8 VA: 0xCCD0E8
	public float RotationSpeed_Y; // 0x1C
	private float RotationY; // 0x20
	private float ResetRotationY; // 0x24

	// Methods

	// RVA: 0x1D53AD8 Offset: 0x1D53AD8 VA: 0x1D53AD8
	public void .ctor() { }

	// RVA: 0x1D53AE8 Offset: 0x1D53AE8 VA: 0x1D53AE8
	private void Start() { }

	// RVA: 0x1D53B48 Offset: 0x1D53B48 VA: 0x1D53B48
	private void Update() { }

	// RVA: 0x1D53C40 Offset: 0x1D53C40 VA: 0x1D53C40
	public void RotationStop() { }

	// RVA: 0x1D53D14 Offset: 0x1D53D14 VA: 0x1D53D14
	public void RotationReStart() { }
}

// Namespace: 
public class BattleActorShakeComponent : MonoBehaviour // TypeDefIndex: 8757
{
	// Fields
	[HeaderAttribute] // RVA: 0xCCD120 Offset: 0xCCD120 VA: 0xCCD120
	public bool IsAnimation; // 0x18
	[HeaderAttribute] // RVA: 0xCCD158 Offset: 0xCCD158 VA: 0xCCD158
	public AnimationCurve animationCurvel; // 0x20
	[HeaderAttribute] // RVA: 0xCCD190 Offset: 0xCCD190 VA: 0xCCD190
	public float animationSpeed; // 0x28
	private float elapsedTime; // 0x2C
	[HeaderAttribute] // RVA: 0xCCD1C8 Offset: 0xCCD1C8 VA: 0xCCD1C8
	public Vector3 vector; // 0x30

	// Methods

	// RVA: 0x1D53D20 Offset: 0x1D53D20 VA: 0x1D53D20
	public void .ctor() { }

	// RVA: 0x1D53D30 Offset: 0x1D53D30 VA: 0x1D53D30
	private void Update() { }
}

// Namespace: 
public abstract class BattleAttack // TypeDefIndex: 8758
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCD200 Offset: 0xCCD200 VA: 0xCCD200
	[DebuggerBrowsableAttribute] // RVA: 0xCCD200 Offset: 0xCCD200 VA: 0xCCD200
	private int <AttackedInAction>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCD23C Offset: 0xCCD23C VA: 0xCCD23C
	[DebuggerBrowsableAttribute] // RVA: 0xCCD23C Offset: 0xCCD23C VA: 0xCCD23C
	private BattleLogic.LOGICTYPE[] <LogicArray>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCD278 Offset: 0xCCD278 VA: 0xCCD278
	private static Func<BattleLogic.LOGICTYPE, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCCD288 Offset: 0xCCD288 VA: 0xCCD288
	private static Func<BattleLogic.LOGICTYPE, bool> <>f__am$cache1; // 0x8

	// Properties
	public abstract bool IsEnemy { get; }
	public int AttackedInAction { get; set; }
	public BattleLogic.LOGICTYPE[] LogicArray { get; set; }

	// Methods

	// RVA: 0x1D53EE0 Offset: 0x1D53EE0 VA: 0x1D53EE0
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_IsEnemy();

	[CompilerGeneratedAttribute] // RVA: 0xD39B1C Offset: 0xD39B1C VA: 0xD39B1C
	// RVA: 0x1D54054 Offset: 0x1D54054 VA: 0x1D54054
	private void set_AttackedInAction(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B2C Offset: 0xD39B2C VA: 0xD39B2C
	// RVA: 0x1D5404C Offset: 0x1D5404C VA: 0x1D5404C
	public int get_AttackedInAction() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B3C Offset: 0xD39B3C VA: 0xD39B3C
	// RVA: 0x1D54044 Offset: 0x1D54044 VA: 0x1D54044
	private void set_LogicArray(BattleLogic.LOGICTYPE[] value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B4C Offset: 0xD39B4C VA: 0xD39B4C
	// RVA: 0x1D5405C Offset: 0x1D5405C VA: 0x1D5405C
	public BattleLogic.LOGICTYPE[] get_LogicArray() { }

	// RVA: 0x1D54064 Offset: 0x1D54064 VA: 0x1D54064
	public bool IsActionAttacked(bool isEnemy) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B5C Offset: 0xD39B5C VA: 0xD39B5C
	// RVA: 0x1D54080 Offset: 0x1D54080 VA: 0x1D54080
	private static bool <BattleAttack>m__0(BattleLogic.LOGICTYPE x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B6C Offset: 0xD39B6C VA: 0xD39B6C
	// RVA: 0x1D5408C Offset: 0x1D5408C VA: 0x1D5408C
	private static bool <BattleAttack>m__1(BattleLogic.LOGICTYPE x) { }
}

// Namespace: 
public enum BattleAttack.SideType // TypeDefIndex: 8759
{
	// Fields
	public int value__; // 0x0
	public const BattleAttack.SideType PLAYER = 1;
	public const BattleAttack.SideType ENEMY = 2;
	public const BattleAttack.SideType ALL = 3;
}

// Namespace: 
public class BattleAttackPlayer : BattleAttack // TypeDefIndex: 8760
{
	// Properties
	public override bool IsEnemy { get; }

	// Methods

	// RVA: 0x1D54410 Offset: 0x1D54410 VA: 0x1D54410
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: 0x1D54634 Offset: 0x1D54634 VA: 0x1D54634 Slot: 4
	public override bool get_IsEnemy() { }
}

// Namespace: 
public class BattleAttackEnemy : BattleAttack // TypeDefIndex: 8761
{
	// Properties
	public override bool IsEnemy { get; }

	// Methods

	// RVA: 0x1D54098 Offset: 0x1D54098 VA: 0x1D54098
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: 0x1D5409C Offset: 0x1D5409C VA: 0x1D5409C Slot: 4
	public override bool get_IsEnemy() { }
}

// Namespace: 
public class BattleAttackManager // TypeDefIndex: 8762
{
	// Fields
	protected int attackIndex; // 0x10
	protected List<BattleAttack> attackList; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCD298 Offset: 0xCCD298 VA: 0xCCD298
	[DebuggerBrowsableAttribute] // RVA: 0xCCD298 Offset: 0xCCD298 VA: 0xCCD298
	private bool <IsTurnEnd>k__BackingField; // 0x20

	// Properties
	public bool IsTurnStart { get; }
	public bool IsTurnEnd { get; set; }
	public bool IsEnemyAttack { get; }
	protected BattleAttack Current { get; }
	protected BattleAttack Previous { get; }
	protected virtual bool IsTurnLastAttackPlayer { get; }

	// Methods

	// RVA: 0x1D540A4 Offset: 0x1D540A4 VA: 0x1D540A4
	public void .ctor() { }

	// RVA: 0x1D54124 Offset: 0x1D54124 VA: 0x1D54124
	public static BattleAttackManager Make(bool isPrecedingPlayer, BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x1D541D0 Offset: 0x1D541D0 VA: 0x1D541D0
	public bool get_IsTurnStart() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B7C Offset: 0xD39B7C VA: 0xD39B7C
	// RVA: 0x1D541E0 Offset: 0x1D541E0 VA: 0x1D541E0
	private void set_IsTurnEnd(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39B8C Offset: 0xD39B8C VA: 0xD39B8C
	// RVA: 0x1D541EC Offset: 0x1D541EC VA: 0x1D541EC
	public bool get_IsTurnEnd() { }

	// RVA: 0x1D541F4 Offset: 0x1D541F4 VA: 0x1D541F4
	public bool get_IsEnemyAttack() { }

	// RVA: 0x1D54244 Offset: 0x1D54244 VA: 0x1D54244
	protected BattleAttack get_Current() { }

	// RVA: 0x1D5429C Offset: 0x1D5429C VA: 0x1D5429C
	protected BattleAttack get_Previous() { }

	// RVA: 0x1D54374 Offset: 0x1D54374 VA: 0x1D54374 Slot: 4
	protected virtual bool get_IsTurnLastAttackPlayer() { }

	// RVA: 0x1D5437C Offset: 0x1D5437C VA: 0x1D5437C Slot: 5
	public virtual BattleAttackManager Init(BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x1D54414 Offset: 0x1D54414 VA: 0x1D54414
	public BattleLogic.LOGICTYPE GetLogicType(int index) { }

	// RVA: 0x1D544AC Offset: 0x1D544AC VA: 0x1D544AC
	public bool IsNextActionAttacked(bool isEnemy) { }

	// RVA: 0x1D54500 Offset: 0x1D54500 VA: 0x1D54500
	public bool IsPrevActionAttacked(bool isEnemy) { }

	// RVA: 0x1D54300 Offset: 0x1D54300 VA: 0x1D54300
	protected int PrevIndex() { }

	// RVA: 0x1D54554 Offset: 0x1D54554 VA: 0x1D54554
	public void Next() { }

	// RVA: 0x1D54578 Offset: 0x1D54578 VA: 0x1D54578 Slot: 6
	public virtual void Reset() { }

	// RVA: 0x1D54580 Offset: 0x1D54580 VA: 0x1D54580 Slot: 7
	public virtual void InitTurn() { }

	// RVA: 0x1D54588 Offset: 0x1D54588 VA: 0x1D54588
	public void SetEndActionAttack(bool isPlayer) { }

	// RVA: 0x1D545C8 Offset: 0x1D545C8 VA: 0x1D545C8 Slot: 8
	public virtual void GetSaveData(BattleData.SaveData save) { }

	// RVA: 0x1D545F8 Offset: 0x1D545F8 VA: 0x1D545F8 Slot: 9
	public virtual void SetSaveData(BattleData.SaveData save) { }

	// RVA: 0x1D5462C Offset: 0x1D5462C VA: 0x1D5462C Slot: 10
	public virtual void PrevProcTactical(BattleData data) { }

	// RVA: 0x1D54630 Offset: 0x1D54630 VA: 0x1D54630 Slot: 11
	public virtual void AfterLoadQuest(BattleData data) { }
}

// Namespace: 
public class PlayerFirstAttackManager : BattleAttackManager // TypeDefIndex: 8763
{
	// Methods

	// RVA: 0x1BD492C Offset: 0x1BD492C VA: 0x1BD492C
	public void .ctor() { }
}

// Namespace: 
public class EnemyFirstAttackManager : BattleAttackManager // TypeDefIndex: 8764
{
	// Properties
	protected override bool IsTurnLastAttackPlayer { get; }

	// Methods

	// RVA: 0x1CD1778 Offset: 0x1CD1778 VA: 0x1CD1778
	public void .ctor() { }

	// RVA: 0x1CD1780 Offset: 0x1CD1780 VA: 0x1CD1780 Slot: 4
	protected override bool get_IsTurnLastAttackPlayer() { }

	// RVA: 0x1CD1788 Offset: 0x1CD1788 VA: 0x1CD1788 Slot: 5
	public override BattleAttackManager Init(BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x1CD1990 Offset: 0x1CD1990 VA: 0x1CD1990 Slot: 10
	public override void PrevProcTactical(BattleData data) { }
}

// Namespace: 
public class BattleBgComponent : MonoBehaviour // TypeDefIndex: 8765
{
	// Fields
	public bool isRecAnimation; // 0x18
	public string motionKey; // 0x20
	public bool isLoadEndPlay; // 0x28
	public bool isCutNodeNoble; // 0x29
	private BattleActionCamera actionCamera; // 0x30

	// Methods

	// RVA: 0x1D5463C Offset: 0x1D5463C VA: 0x1D5463C
	public void .ctor() { }

	// RVA: 0x1D54644 Offset: 0x1D54644 VA: 0x1D54644
	public bool checkKey(string key) { }

	// RVA: 0x1D54658 Offset: 0x1D54658 VA: 0x1D54658
	public void playAnimation(string animName, float timeline) { }

	// RVA: 0x1D548E4 Offset: 0x1D548E4 VA: 0x1D548E4
	public void playLoadEndAnimation() { }

	// RVA: 0x1D54A70 Offset: 0x1D54A70 VA: 0x1D54A70
	public void setCutNodeNoble(bool flg) { }

	// RVA: 0x1D54AB0 Offset: 0x1D54AB0 VA: 0x1D54AB0
	public void setActionCamera(BattleActionCamera inActionCamera) { }

	// RVA: 0x1D54AB8 Offset: 0x1D54AB8 VA: 0x1D54AB8
	public void shakeCamera(float power) { }

	// RVA: 0x1D54BD8 Offset: 0x1D54BD8 VA: 0x1D54BD8
	public void playCameraAnimation(string name) { }

	// RVA: 0x1D54C88 Offset: 0x1D54C88 VA: 0x1D54C88
	public bool isSave() { }

	// RVA: 0x1D54C90 Offset: 0x1D54C90 VA: 0x1D54C90
	public BattleBgComponent.SaveData getSaveData() { }

	// RVA: 0x1D55510 Offset: 0x1D55510 VA: 0x1D55510
	public void loadSaveData(BattleBgComponent.SaveData save) { }
}

// Namespace: 
public class BattleBgComponent.SaveData // TypeDefIndex: 8766
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCD2D4 Offset: 0xCCD2D4 VA: 0xCCD2D4
	public string animName; // 0x10
	[PackKeyAttribute] // RVA: 0xCCD30C Offset: 0xCCD30C VA: 0xCCD30C
	public float timeline; // 0x18

	// Methods

	// RVA: 0x1D55498 Offset: 0x1D55498 VA: 0x1D55498
	public void .ctor() { }
}

// Namespace: 
public class BattleBoostItem // TypeDefIndex: 8767
{
	// Fields
	public ItemEntity item; // 0x10
	public int skillId; // 0x18

	// Methods

	// RVA: 0x1D55BD0 Offset: 0x1D55BD0 VA: 0x1D55BD0
	public void .ctor(ItemEntity item, int skillId) { }

	// RVA: 0x1D55C0C Offset: 0x1D55C0C VA: 0x1D55C0C
	public bool checkEffectTiming(BattleBoostItemInfoData.EFFECT_TIMING timing) { }
}

// Namespace: 
public class BattleBoostItemInfoData : BattleSkillInfoData // TypeDefIndex: 8768
{
	// Fields
	public static readonly string KEY_SCRIPT_BOOST_EFFECT_ICON; // 0x0
	public static readonly string KEY_SCRIPT_BOOST_EFFECT_TIMING; // 0x8
	public BattleBoostItemInfoData.EFFECT_TIMING effectTiming; // 0x70
	public ItemEntity boostItemEntity; // 0x78

	// Methods

	// RVA: 0x1D55CB0 Offset: 0x1D55CB0 VA: 0x1D55CB0
	public void .ctor() { }

	// RVA: 0x1D55CB8 Offset: 0x1D55CB8 VA: 0x1D55CB8
	public bool checkEffectTiming(BattleBoostItemInfoData.EFFECT_TIMING timing) { }

	// RVA: 0x1D55D5C Offset: 0x1D55D5C VA: 0x1D55D5C
	public bool useCustomEffectIcon() { }

	// RVA: 0x1D55DF4 Offset: 0x1D55DF4 VA: 0x1D55DF4
	public int effectIconAtlasImageId() { }

	// RVA: 0x1D55E9C Offset: 0x1D55E9C VA: 0x1D55E9C
	public string infoMessage() { }

	// RVA: 0x1D55F60 Offset: 0x1D55F60 VA: 0x1D55F60
	private static void .cctor() { }
}

// Namespace: 
public enum BattleBoostItemInfoData.EFFECT_TIMING // TypeDefIndex: 8769
{
	// Fields
	public int value__; // 0x0
	public const BattleBoostItemInfoData.EFFECT_TIMING BATTLE_ACTION = 0;
	public const BattleBoostItemInfoData.EFFECT_TIMING BATTLE_START = 1;
}

