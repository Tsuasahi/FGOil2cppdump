	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC1A0 Offset: 0xCDC1A0 VA: 0xCDC1A0
	// RVA: 0x14DFD18 Offset: 0x14DFD18 VA: 0x14DFD18 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC1B0 Offset: 0xCDC1B0 VA: 0xCDC1B0
	// RVA: 0x14DFD2C Offset: 0x14DFD2C VA: 0x14DFD2C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44894 Offset: 0xC44894 VA: 0xC44894
private sealed class CRIMoviePlayer.<StopSequence>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9720
{
	// Fields
	internal CRIMoviePlayer $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC1C0 Offset: 0xCDC1C0 VA: 0xCDC1C0
	// RVA: 0x14DF16C Offset: 0x14DF16C VA: 0x14DF16C
	public void .ctor() { }

	// RVA: 0x14E03D0 Offset: 0x14E03D0 VA: 0x14E03D0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC1D0 Offset: 0xCDC1D0 VA: 0xCDC1D0
	// RVA: 0x14E04B8 Offset: 0x14E04B8 VA: 0x14E04B8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC1E0 Offset: 0xCDC1E0 VA: 0xCDC1E0
	// RVA: 0x14E04C0 Offset: 0x14E04C0 VA: 0x14E04C0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC1F0 Offset: 0xCDC1F0 VA: 0xCDC1F0
	// RVA: 0x14E04C8 Offset: 0x14E04C8 VA: 0x14E04C8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC200 Offset: 0xCDC200 VA: 0xCDC200
	// RVA: 0x14E04DC Offset: 0x14E04DC VA: 0x14E04DC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448A4 Offset: 0xC448A4 VA: 0xC448A4
private sealed class CRIMoviePlayer.<SeekSequence>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9721
{
	// Fields
	internal int frame; // 0x10
	internal bool <isPaused>__0; // 0x14
	internal bool <retry>__0; // 0x15
	internal WaitForEndOfFrame <waitForEOF>__1; // 0x18
	internal float <prevTime>__1; // 0x20
	internal CRIMoviePlayer $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC210 Offset: 0xCDC210 VA: 0xCDC210
	// RVA: 0x14DF174 Offset: 0x14DF174 VA: 0x14DF174
	public void .ctor() { }

	// RVA: 0x14DFD94 Offset: 0x14DFD94 VA: 0x14DFD94 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC220 Offset: 0xCDC220 VA: 0xCDC220
	// RVA: 0x14E029C Offset: 0x14E029C VA: 0x14E029C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC230 Offset: 0xCDC230 VA: 0xCDC230
	// RVA: 0x14E02A4 Offset: 0x14E02A4 VA: 0x14E02A4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC240 Offset: 0xCDC240 VA: 0xCDC240
	// RVA: 0x14E02AC Offset: 0x14E02AC VA: 0x14E02AC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC250 Offset: 0xCDC250 VA: 0xCDC250
	// RVA: 0x14E02C0 Offset: 0x14E02C0 VA: 0x14E02C0 Slot: 6
	public void Reset() { }

	// RVA: 0x14E0328 Offset: 0x14E0328 VA: 0x14E0328
	internal bool <>m__0() { }

	// RVA: 0x14E037C Offset: 0x14E037C VA: 0x14E037C
	internal bool <>m__1() { }
}

// Namespace: 
public class OnClickEvent : MonoBehaviour // TypeDefIndex: 9722
{
	// Fields
	public List<EventDelegate> onSingleClick; // 0x18
	public List<EventDelegate> onDoubleClick; // 0x20
	private bool clickFlag; // 0x28
	private float clickTime; // 0x2C

	// Methods

	// RVA: 0x1A926CC Offset: 0x1A926CC VA: 0x1A926CC
	public void .ctor() { }

	// RVA: 0x1A9275C Offset: 0x1A9275C VA: 0x1A9275C
	private void OnEnable() { }

	// RVA: 0x1A92768 Offset: 0x1A92768 VA: 0x1A92768
	private void Update() { }

	// RVA: 0x1A9280C Offset: 0x1A9280C VA: 0x1A9280C
	private void OnClick() { }

	// RVA: 0x1A92844 Offset: 0x1A92844 VA: 0x1A92844
	private void OnDoubleClick() { }
}

// Namespace: 
public class OnPressEvent : MonoBehaviour // TypeDefIndex: 9723
{
	// Fields
	public List<EventDelegate> onPressDown; // 0x18
	public List<EventDelegate> onPressUp; // 0x20

	// Methods

	// RVA: 0x1A928CC Offset: 0x1A928CC VA: 0x1A928CC
	public void .ctor() { }

	// RVA: 0x1A9295C Offset: 0x1A9295C VA: 0x1A9295C
	private void OnPress(bool isPressed) { }
}

// Namespace: 
public class EndrolContentItem : MonoBehaviour // TypeDefIndex: 9724
{
	// Fields
	[SerializeField] // RVA: 0xC6CF70 Offset: 0xC6CF70 VA: 0xC6CF70
	private UILabel textLabel; // 0x18
	[SerializeField] // RVA: 0xC6CF80 Offset: 0xC6CF80 VA: 0xC6CF80
	private UISprite imgSprite; // 0x20
	[SerializeField] // RVA: 0xC6CF90 Offset: 0xC6CF90 VA: 0xC6CF90
	private UIWidget contentItemWidget; // 0x28
	[SerializeField] // RVA: 0xC6CFA0 Offset: 0xC6CFA0 VA: 0xC6CFA0
	private UILabel[] columnTextLabel; // 0x30
	private EndrolRootComponent rootComponent; // 0x38
	public EndrolContentItem.displayObjectType nowType; // 0x40

	// Properties
	public int contentHeight { get; }

	// Methods

	// RVA: 0x16F86EC Offset: 0x16F86EC VA: 0x16F86EC
	public void .ctor() { }

	// RVA: 0x16F86F4 Offset: 0x16F86F4 VA: 0x16F86F4
	public int get_contentHeight() { }

	// RVA: 0x16F873C Offset: 0x16F873C VA: 0x16F873C
	private void OnTriggerEnter(Collider coll) { }

	// RVA: 0x16F8950 Offset: 0x16F8950 VA: 0x16F8950
	public void SetText(int posY, string txt, int fontSize, UIWidget.Pivot pivot, EndrolRootComponent rootComp) { }

	// RVA: 0x16F9074 Offset: 0x16F9074 VA: 0x16F9074
	public void SetImage(int posY, string spName, Vector2 size, EndrolRootComponent root) { }

	// RVA: 0x16F9228 Offset: 0x16F9228 VA: 0x16F9228
	public void SetDoubleColumnText(int posY, string[] txt, int fontSize, EndrolRootComponent rootComp) { }

	// RVA: 0x16F94A0 Offset: 0x16F94A0 VA: 0x16F94A0
	public void SetTripleColumnText(int posY, string[] txt, int fontSize, EndrolRootComponent rootComp) { }

	// RVA: 0x16F8B08 Offset: 0x16F8B08 VA: 0x16F8B08
	public void ChangeDisplayItems() { }

	// RVA: 0x16F98A0 Offset: 0x16F98A0 VA: 0x16F98A0
	public void OpenSkipConfirmWindow() { }
}

// Namespace: 
public enum EndrolContentItem.displayObjectType // TypeDefIndex: 9725
{
	// Fields
	public int value__; // 0x0
	public const EndrolContentItem.displayObjectType NONE = 0;
	public const EndrolContentItem.displayObjectType TEXT = 1;
	public const EndrolContentItem.displayObjectType IMAGE = 2;
	public const EndrolContentItem.displayObjectType COLUMN_TEXT_2 = 3;
	public const EndrolContentItem.displayObjectType COLUMN_TEXT_3 = 4;
}

// Namespace: 
public class EndrolEffectItem : MonoBehaviour // TypeDefIndex: 9726
{
	// Fields
	private ParticleSystem particle; // 0x18

	// Methods

	// RVA: 0x16F9A38 Offset: 0x16F9A38 VA: 0x16F9A38
	public void .ctor() { }

	// RVA: 0x16F9A40 Offset: 0x16F9A40 VA: 0x16F9A40
	private void Start() { }

	// RVA: 0x16F9AB0 Offset: 0x16F9AB0 VA: 0x16F9AB0
	private void LateUpdate() { }
}

// Namespace: 
public class EndrolEffectManager : SingletonMonoBehaviour<EndrolEffectManager> // TypeDefIndex: 9727
{
	// Fields
	private const int SCREEN_WITDH = 1024;
	private const int SCREEN_HEIGHT = 576;
	public static readonly int nonEffectAreaStart; // 0x0
	public static readonly int nonEffectAreaEnd; // 0x4
	[SerializeField] // RVA: 0xC6CFB0 Offset: 0xC6CFB0 VA: 0xC6CFB0
	private GameObject[] effectObject; // 0x18
	private float totalTime; // 0x20
	private EndrolRootComponent objectParent; // 0x28
	private const float DiamondWidth = 44.5;
	private const float DiamondHeight = 44.5;
	private const float shiftHorizontalSize = 0;
	private const float shiftVerticalSize = 0.5;
	private List<double> effectOccurrenceTime; // 0x30
	private List<Vector2> bgGridPointList; // 0x38
	private float passageTime; // 0x40
	private double truncateTime; // 0x48
	private bool isForceEnd; // 0x50
	private int nowPlayEffectNumber; // 0x54

	// Methods

	// RVA: 0x16F9B58 Offset: 0x16F9B58 VA: 0x16F9B58
	public void .ctor() { }

	// RVA: 0x16F9BA8 Offset: 0x16F9BA8 VA: 0x16F9BA8
	private void Update() { }

	// RVA: 0x16FA13C Offset: 0x16FA13C VA: 0x16FA13C
	public void SetEndRollTimes(float allTime, float waitTime, float x, float z, int miny, int maxy, EndrolRootComponent parent) { }

	// RVA: 0x16FA32C Offset: 0x16FA32C VA: 0x16FA32C
	private void CalcGridPoint() { }

	// RVA: 0x16F9EFC Offset: 0x16F9EFC VA: 0x16F9EFC
	private void InstansiateEffect(Vector2 pos) { }

	// RVA: 0x16F9DC4 Offset: 0x16F9DC4 VA: 0x16F9DC4
	private int CheckOverlap(double checkTime) { }

	// RVA: 0x16FA4D8 Offset: 0x16FA4D8 VA: 0x16FA4D8
	public void EndEffect() { }

	// RVA: 0x16FA55C Offset: 0x16FA55C VA: 0x16FA55C
	private static void .cctor() { }
}

// Namespace: 
public class EndrolRootComponent : BaseMonoBehaviour // TypeDefIndex: 9728
{
	// Fields
	[SerializeField] // RVA: 0xC6CFC0 Offset: 0xC6CFC0 VA: 0xC6CFC0
	private EndrolContentItem contentPref; // 0x18
	[SerializeField] // RVA: 0xC6CFD0 Offset: 0xC6CFD0 VA: 0xC6CFD0
	private GameObject endrolContentParent; // 0x20
	[SerializeField] // RVA: 0xC6CFE0 Offset: 0xC6CFE0 VA: 0xC6CFE0
	private UIPanel panel; // 0x28
	[SerializeField] // RVA: 0xC6CFF0 Offset: 0xC6CFF0 VA: 0xC6CFF0
	private EndrolEffectManager effectManager; // 0x30
	private const int DISPLAY_OBJECT_NUM = 30;
	private const float MOVE_DISPLAY_HEIGHT = 580;
	private int defaultFontSize; // 0x38
	private int defaultClearance; // 0x3C
	private string defaultTextColor; // 0x40
	private float endrolTotalTime; // 0x48
	private int txtLength; // 0x4C
	private float startTime; // 0x50
	private string bgmName; // 0x58
	private int lastObjectPosY; // 0x60
	private int nowDispIndex; // 0x64
	private string[] allCreditText; // 0x68
	private List<string> creditText; // 0x70
	private float startWaitTime; // 0x78
	private float endWaitTime; // 0x7C
	private bool isScroll; // 0x80
	private float effectTime; // 0x84
	private float effectOverlap; // 0x88
	private int[] effectWave; // 0x90
	private float lastPostion; // 0x98
	private bool isBgmPlay; // 0x9C
	private Action mEndAct; // 0xA0

	// Methods

	// RVA: 0x16FA5C0 Offset: 0x16FA5C0 VA: 0x16FA5C0
	public void .ctor() { }

	// RVA: 0x16FA628 Offset: 0x16FA628 VA: 0x16FA628
	private void StartEndroll() { }

	// RVA: 0x16FA87C Offset: 0x16FA87C VA: 0x16FA87C
	private void OnUpdateScroll(float value) { }

	// RVA: 0x16FA95C Offset: 0x16FA95C VA: 0x16FA95C
	private void OnScrollEnd() { }

	// RVA: 0x16FAA80 Offset: 0x16FAA80 VA: 0x16FAA80
	private void SetAssetStorageData(AssetData data, Action endCallback) { }

	// RVA: 0x16FABFC Offset: 0x16FABFC VA: 0x16FABFC
	public void Open(AssetData assetData, Action endCallback) { }

	// RVA: 0x16FACF0 Offset: 0x16FACF0 VA: 0x16FACF0
	private void StopEndrol() { }

	// RVA: 0x16FADD0 Offset: 0x16FADD0 VA: 0x16FADD0
	private void EndFadeout() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCFCF0 Offset: 0xCCFCF0 VA: 0xCCFCF0
	// RVA: 0x16FA9EC Offset: 0x16FA9EC VA: 0x16FA9EC
	private IEnumerator Wait(float waitTime, Action callback) { }

	// RVA: 0x16FAE60 Offset: 0x16FAE60 VA: 0x16FAE60
	private void CreateText(int index) { }

	// RVA: 0x16F8824 Offset: 0x16F8824 VA: 0x16F8824
	public void ClippingItem(EndrolContentItem item) { }

	// RVA: 0x16FAFC8 Offset: 0x16FAFC8 VA: 0x16FAFC8
	private EndrolRootComponent.textType CheckNextDispContent(string nextDispText) { }

	// RVA: 0x16FB0F8 Offset: 0x16FB0F8 VA: 0x16FB0F8
	private EndrolContentItem SetItemInfo(string nextDispString, EndrolContentItem item, EndrolRootComponent.textType type) { }

	// RVA: 0x16FC404 Offset: 0x16FC404 VA: 0x16FC404
	public void callbackConfirmDlg(bool isSkip) { }

	// RVA: 0x16F98CC Offset: 0x16F98CC VA: 0x16F98CC
	public void OnClickEndrol() { }

	// RVA: 0x16FAB1C Offset: 0x16FAB1C VA: 0x16FAB1C
	private void OpenTextFile(TextAsset assetData) { }

	// RVA: 0x16FC490 Offset: 0x16FC490 VA: 0x16FC490
	private void CheckOrderEndrol() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFD00 Offset: 0xCCFD00 VA: 0xCCFD00
	// RVA: 0x16FD63C Offset: 0x16FD63C VA: 0x16FD63C
	private void <OnScrollEnd>m__0() { }
}

// Namespace: 
private enum EndrolRootComponent.textType // TypeDefIndex: 9729
{
	// Fields
	public int value__; // 0x0
	public const EndrolRootComponent.textType NONE = 0;
	public const EndrolRootComponent.textType TEXT = 1;
	public const EndrolRootComponent.textType IMAGE = 2;
	public const EndrolRootComponent.textType ORDER = 3;
	public const EndrolRootComponent.textType DESIGN_TEXT = 4;
	public const EndrolRootComponent.textType COLUMN_TEXT = 5;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448B4 Offset: 0xC448B4 VA: 0xC448B4
private sealed class EndrolRootComponent.<Open>c__AnonStorey1 // TypeDefIndex: 9730
{
	// Fields
	internal Action endCallback; // 0x10
	internal EndrolRootComponent $this; // 0x18

	// Methods

	// RVA: 0x16FACE8 Offset: 0x16FACE8 VA: 0x16FACE8
	public void .ctor() { }

	// RVA: 0x16FD640 Offset: 0x16FD640 VA: 0x16FD640
	internal void <>m__0() { }

	// RVA: 0x16FD88C Offset: 0x16FD88C VA: 0x16FD88C
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448C4 Offset: 0xC448C4 VA: 0xC448C4
private sealed class EndrolRootComponent.<Wait>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9731
{
	// Fields
	internal float waitTime; // 0x10
	internal Action callback; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC260 Offset: 0xCDC260 VA: 0xCDC260
	// RVA: 0x16FAE58 Offset: 0x16FAE58 VA: 0x16FAE58
	public void .ctor() { }

	// RVA: 0x16FD8B8 Offset: 0x16FD8B8 VA: 0x16FD8B8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC270 Offset: 0xCDC270 VA: 0xCDC270
	// RVA: 0x16FD9A0 Offset: 0x16FD9A0 VA: 0x16FD9A0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC280 Offset: 0xCDC280 VA: 0xCDC280
	// RVA: 0x16FD9A8 Offset: 0x16FD9A8 VA: 0x16FD9A8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC290 Offset: 0xCDC290 VA: 0xCDC290
	// RVA: 0x16FD9B0 Offset: 0x16FD9B0 VA: 0x16FD9B0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC2A0 Offset: 0xCDC2A0 VA: 0xCDC2A0
	// RVA: 0x16FD9C4 Offset: 0x16FD9C4 VA: 0x16FD9C4 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class EventBoardGameDiceCounter : MonoBehaviour // TypeDefIndex: 9732
{
	// Fields
	[SerializeField] // RVA: 0xC6D000 Offset: 0xC6D000 VA: 0xC6D000
	private string spriteName; // 0x18
	[SerializeField] // RVA: 0xC6D010 Offset: 0xC6D010 VA: 0xC6D010
	private UISprite counterSp; // 0x20
	[SerializeField] // RVA: 0xC6D020 Offset: 0xC6D020 VA: 0xC6D020
	private float delayTime; // 0x28
	private int currentNum; // 0x2C

	// Methods

	// RVA: 0x1869DC0 Offset: 0x1869DC0 VA: 0x1869DC0
	public void .ctor() { }

	// RVA: 0x1869E24 Offset: 0x1869E24 VA: 0x1869E24
	public void Setup(int num) { }

	// RVA: 0x1869F04 Offset: 0x1869F04 VA: 0x1869F04
	public void CountDown() { }

	// RVA: 0x1869E40 Offset: 0x1869E40 VA: 0x1869E40
	private void SetNumSprite(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCFD10 Offset: 0xCCFD10 VA: 0xCCFD10
	// RVA: 0x1869F4C Offset: 0x1869F4C VA: 0x1869F4C
	private IEnumerator SetNum(int num) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448D4 Offset: 0xC448D4 VA: 0xC448D4
private sealed class EventBoardGameDiceCounter.<SetNum>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9733
{
	// Fields
	internal int num; // 0x10
	internal EventBoardGameDiceCounter $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC2B0 Offset: 0xCDC2B0 VA: 0xCDC2B0
	// RVA: 0x1869FE0 Offset: 0x1869FE0 VA: 0x1869FE0
	public void .ctor() { }

	// RVA: 0x1869FE8 Offset: 0x1869FE8 VA: 0x1869FE8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC2C0 Offset: 0xCDC2C0 VA: 0xCDC2C0
	// RVA: 0x186A0EC Offset: 0x186A0EC VA: 0x186A0EC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC2D0 Offset: 0xCDC2D0 VA: 0xCDC2D0
	// RVA: 0x186A0F4 Offset: 0x186A0F4 VA: 0x186A0F4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC2E0 Offset: 0xCDC2E0 VA: 0xCDC2E0
	// RVA: 0x186A0FC Offset: 0x186A0FC VA: 0x186A0FC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC2F0 Offset: 0xCDC2F0 VA: 0xCDC2F0
	// RVA: 0x186A110 Offset: 0x186A110 VA: 0x186A110 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class EventBoardGameDiceEffectAction : MonoBehaviour // TypeDefIndex: 9734
{
	// Fields
	[SerializeField] // RVA: 0xC6D030 Offset: 0xC6D030 VA: 0xC6D030
	private GameObject rootDiceObj; // 0x18
	[SerializeField] // RVA: 0xC6D040 Offset: 0xC6D040 VA: 0xC6D040
	private GameObject[] diceModelObjList; // 0x20
	private int servantId; // 0x28
	private string voiceCueName; // 0x30
	private Action endAction; // 0x38
	private GameObject modelObj; // 0x40

	// Methods

	// RVA: 0x186A178 Offset: 0x186A178 VA: 0x186A178
	public void .ctor() { }

	// RVA: 0x186A180 Offset: 0x186A180 VA: 0x186A180
	public void Setup(AssetData asset, int diceType, int diceNum, int servantId, string voiceCueName, Action endAction) { }

	// RVA: 0x186A2A4 Offset: 0x186A2A4 VA: 0x186A2A4
	public void PlayDiceVoice() { }

	// RVA: 0x186A3D4 Offset: 0x186A3D4 VA: 0x186A3D4
	public void EndAnimation() { }
}

// Namespace: 
public class EventConquestGetDialog : BaseDialog // TypeDefIndex: 9735
{
	// Fields
	private readonly float ICON_SCALE_SIZE; // 0x58
	private readonly float TYPE_SPRITE_POS_Y; // 0x5C
	private readonly int NORMAL_FONT_SIZE; // 0x60
	private readonly int SMALL_FONT_SIZE; // 0x64
	[SerializeField] // RVA: 0xC6D050 Offset: 0xC6D050 VA: 0xC6D050
	protected GameObject itemIcon; // 0x68
	[SerializeField] // RVA: 0xC6D060 Offset: 0xC6D060 VA: 0xC6D060
	protected UILabel titleLabel; // 0x70
	[SerializeField] // RVA: 0xC6D070 Offset: 0xC6D070 VA: 0xC6D070
	protected UILabel itemGetDetailLabel; // 0x78
	[SerializeField] // RVA: 0xC6D080 Offset: 0xC6D080 VA: 0xC6D080
	protected UIGrid itemIconGrid; // 0x80
	protected EventConquestGetDialog.State state; // 0x88
	protected EventConquestGetDialog.ClickDelegate closeFunc; // 0x90
	protected Action closeCallbackFunc; // 0x98

	// Methods

	// RVA: 0x187346C Offset: 0x187346C VA: 0x187346C
	public void .ctor() { }

	// RVA: 0x18734EC Offset: 0x18734EC VA: 0x18734EC
	public void Init() { }

	// RVA: 0x1873888 Offset: 0x1873888 VA: 0x1873888
	public void Open(GiftEntity[] rewards, string title, string detail, EventConquestGetDialog.ClickDelegate closeCb) { }

	// RVA: 0x18743BC Offset: 0x18743BC VA: 0x18743BC
	public void Open(EventRewardSetEntity reward, string detail, EventConquestGetDialog.ClickDelegate closeCb) { }

	// RVA: 0x1874470 Offset: 0x1874470 VA: 0x1874470
	protected void EndOpen() { }

	// RVA: 0x187447C Offset: 0x187447C VA: 0x187447C
	public void Close() { }

	// RVA: 0x1874484 Offset: 0x1874484 VA: 0x1874484
	public void Close(Action callback) { }

	// RVA: 0x1874514 Offset: 0x1874514 VA: 0x1874514
	protected void EndClose() { }

	// RVA: 0x1874550 Offset: 0x1874550 VA: 0x1874550
	public void OnClickClose() { }
}

// Namespace: 
protected enum EventConquestGetDialog.State // TypeDefIndex: 9736
{
	// Fields
	public int value__; // 0x0
	public const EventConquestGetDialog.State INIT = 0;
	public const EventConquestGetDialog.State OPEN = 1;
	public const EventConquestGetDialog.State INPUT = 2;
	public const EventConquestGetDialog.State CLOSE = 3;
}

// Namespace: 
public sealed class EventConquestGetDialog.ClickDelegate : MulticastDelegate // TypeDefIndex: 9737
{
	// Methods

	// RVA: 0x18747EC Offset: 0x18747EC VA: 0x18747EC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x18745EC Offset: 0x18745EC VA: 0x18745EC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x18747FC Offset: 0x18747FC VA: 0x18747FC Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1874830 Offset: 0x1874830 VA: 0x1874830 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class EventConquestGetIconComponent : ItemIconComponent // TypeDefIndex: 9738
{
	// Fields
	[SerializeField] // RVA: 0xC6D090 Offset: 0xC6D090 VA: 0xC6D090
	protected UILabel possessionCounterLabel; // 0x80
	[SerializeField] // RVA: 0xC6D0A0 Offset: 0xC6D0A0 VA: 0xC6D0A0
	protected UILabel possessionNameLabel; // 0x88
	[SerializeField] // RVA: 0xC6D0B0 Offset: 0xC6D0B0 VA: 0xC6D0B0
	protected int possesionCouterLabelMaxWidth; // 0x90
	[SerializeField] // RVA: 0xC6D0C0 Offset: 0xC6D0C0 VA: 0xC6D0C0
	protected UISprite possessionLabelBG; // 0x98

	// Methods

	// RVA: 0x187483C Offset: 0x187483C VA: 0x187483C
	public void .ctor() { }

	// RVA: 0x1874028 Offset: 0x1874028 VA: 0x1874028
	public void setPossessionCounterLabel(int posCount, int getCount, bool isMax = False) { }
}

// Namespace: 
public class EventPointGaugeChangeEffectAction : MonoBehaviour // TypeDefIndex: 9739
{
	// Fields
	private CommonEffectComponent commonEffectComponent; // 0x18
	private SimpleAnimation simpleAnimation; // 0x20
	private Animation animation; // 0x28
	private Action gaugeChangeAction; // 0x30
	private Action endAction; // 0x38

	// Methods

	// RVA: 0x197EF80 Offset: 0x197EF80 VA: 0x197EF80
	public void .ctor() { }

	// RVA: 0x197EF88 Offset: 0x197EF88 VA: 0x197EF88
	private void Update() { }

	// RVA: 0x197F18C Offset: 0x197F18C VA: 0x197F18C
	public void Setup(Action gaugeChangeAct, Action endAct) { }

	// RVA: 0x197EFC8 Offset: 0x197EFC8 VA: 0x197EFC8
	public bool IsEnd() { }

	// RVA: 0x197F270 Offset: 0x197F270 VA: 0x197F270
	public void OnChangeGauge() { }
}

// Namespace: 
public class EventPointGaugeEffectAction : MonoBehaviour // TypeDefIndex: 9740
{
	// Fields
	private Action gaugeStartAction; // 0x18

	// Methods

	// RVA: 0x197F28C Offset: 0x197F28C VA: 0x197F28C
	public void .ctor() { }

	// RVA: 0x197F294 Offset: 0x197F294 VA: 0x197F294
	public void Setup(Action gaugeStartAct) { }

	// RVA: 0x197F29C Offset: 0x197F29C VA: 0x197F29C
	public void OnPlayGaugeBarAnime() { }
}

// Namespace: 
public class EventSpotMoveManager // TypeDefIndex: 9741
{
	// Fields
	private static readonly float MOVE_SPEED; // 0x0
	private List<EventSpotMoveManager.SpotMoveData> eventSpotMoveDataList; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC6D0D0 Offset: 0xC6D0D0 VA: 0xC6D0D0
	private static Func<EventSpotMoveManager.SpotMoveData, bool> <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x16ECD08 Offset: 0x16ECD08 VA: 0x16ECD08
	public void .ctor() { }

	// RVA: 0x16ECD78 Offset: 0x16ECD78 VA: 0x16ECD78
	public void Init() { }

	// RVA: 0x16ECD7C Offset: 0x16ECD7C VA: 0x16ECD7C
	public void Clear() { }

	// RVA: 0x16ECED8 Offset: 0x16ECED8 VA: 0x16ECED8
	public List<EventSpotMoveManager.SpotMoveData> GetEventSpotMoveDataList() { }

	// RVA: 0x16ECEE0 Offset: 0x16ECEE0 VA: 0x16ECEE0
	public void Add(EventSpotMoveManager.SpotMoveData data) { }

	// RVA: 0x16ECF50 Offset: 0x16ECF50 VA: 0x16ECF50
	public void UpdateAllSpotPosition(bool isFocedMove = False) { }

	// RVA: 0x16ED074 Offset: 0x16ED074 VA: 0x16ED074
	public void UpdateSpotPosition(EventSpotMoveManager.SpotMoveData data, bool isFocedMove = False) { }

	// RVA: 0x16ED6F0 Offset: 0x16ED6F0 VA: 0x16ED6F0
	public static float CalcSpotPathRate(int eventId, int raidId, SpotPathEntity spotPathEnt) { }

	// RVA: 0x16ED9A0 Offset: 0x16ED9A0 VA: 0x16ED9A0
	public float CalcDistance(float x1, float y1, float x2, float y2) { }

	// RVA: 0x16EDA54 Offset: 0x16EDA54 VA: 0x16EDA54
	public bool IsSpotObjectMoving() { }

	// RVA: 0x16ED5FC Offset: 0x16ED5FC VA: 0x16ED5FC
	public SpotPathEntity GetSpotPathEntity(int spotId) { }

	// RVA: 0x16EDB58 Offset: 0x16EDB58 VA: 0x16EDB58
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFD20 Offset: 0xCCFD20 VA: 0xCCFD20
	// RVA: 0x16EDBAC Offset: 0x16EDBAC VA: 0x16EDBAC
	private static bool <IsSpotObjectMoving>m__0(EventSpotMoveManager.SpotMoveData x) { }
}

// Namespace: 
public enum EventSpotMoveManager.STATE // TypeDefIndex: 9742
{
	// Fields
	public int value__; // 0x0
	public const EventSpotMoveManager.STATE NONE = 0;
	public const EventSpotMoveManager.STATE MOVE = 1;
}

// Namespace: 
public class EventSpotMoveManager.SpotMoveData // TypeDefIndex: 9743
{
	// Fields
	public int SpotId; // 0x10
	public GameObject SpotObject; // 0x18
	public Custom2dSplineMesh SpotPathMesh; // 0x20
	public EventSpotMoveManager.STATE State; // 0x28

	// Methods

	// RVA: 0x16EDC30 Offset: 0x16EDC30 VA: 0x16EDC30
	public void .ctor() { }

	// RVA: 0x16ECEC8 Offset: 0x16ECEC8 VA: 0x16ECEC8
	public void Clear() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448E4 Offset: 0xC448E4 VA: 0xC448E4
private sealed class EventSpotMoveManager.<UpdateSpotPosition>c__AnonStorey0 // TypeDefIndex: 9744
{
	// Fields
	internal EventSpotMoveManager.SpotMoveData data; // 0x10
	internal Vector3 endPos; // 0x18

	// Methods

	// RVA: 0x16ED5F4 Offset: 0x16ED5F4 VA: 0x16ED5F4
	public void .ctor() { }

	// RVA: 0x16EDBDC Offset: 0x16EDBDC VA: 0x16EDBDC
	internal void <>m__0() { }
}

// Namespace: 
public class EventBoardGameTokenInfoDialog : BaseDialog // TypeDefIndex: 9745
{
	// Fields
	private const string bgImageFileName = "token_balloon";
	[SerializeField] // RVA: 0xC6D0E0 Offset: 0xC6D0E0 VA: 0xC6D0E0
	private GameObject tokenPrefab; // 0x58
	[SerializeField] // RVA: 0xC6D0F0 Offset: 0xC6D0F0 VA: 0xC6D0F0
	private UILabel tokenNameLabel; // 0x60
	[SerializeField] // RVA: 0xC6D100 Offset: 0xC6D100 VA: 0xC6D100
	private UISprite bgImage; // 0x68
	protected Action closeCallbackFunc; // 0x70
	public UIAtlas eventAtlas; // 0x78
	protected EventBoardGameTokenInfoDialog.State state; // 0x80

	// Methods

	// RVA: 0x186A4F4 Offset: 0x186A4F4 VA: 0x186A4F4
	public void .ctor() { }

	// RVA: 0x186A55C Offset: 0x186A55C VA: 0x186A55C
	public void Init() { }

	// RVA: 0x186A628 Offset: 0x186A628 VA: 0x186A628
	public void OpenInfo(EventBoardGameTokenItem item) { }

	// RVA: 0x186A940 Offset: 0x186A940 VA: 0x186A940
	public void Close(Action callback) { }

	// RVA: 0x186AA04 Offset: 0x186AA04 VA: 0x186AA04
	protected void EndClose() { }
}

// Namespace: 
protected enum EventBoardGameTokenInfoDialog.State // TypeDefIndex: 9746
{
	// Fields
	public int value__; // 0x0
	public const EventBoardGameTokenInfoDialog.State INIT = 0;
	public const EventBoardGameTokenInfoDialog.State OPEN = 1;
}

// Namespace: 
public class EventBoardGameTokenItem : MonoBehaviour // TypeDefIndex: 9747
{
	// Fields
	private const string emptyImageFileName = "token_enpty";
	private int index; // 0x18
	private bool haved; // 0x1C
	private string tokenName; // 0x20
	private string tokenImageId; // 0x28
	private Action<int> callback; // 0x30
	[SerializeField] // RVA: 0xC6D110 Offset: 0xC6D110 VA: 0xC6D110
	private UISprite tokenImage; // 0x38
	[SerializeField] // RVA: 0xC6D120 Offset: 0xC6D120 VA: 0xC6D120
	private UILabel tokenNameLabel; // 0x40
	public UIAtlas eventAtlas; // 0x48

	// Properties
	public string TokenName { get; }

	// Methods

	// RVA: 0x186AA60 Offset: 0x186AA60 VA: 0x186AA60
	public void .ctor() { }

	// RVA: 0x186AA68 Offset: 0x186AA68 VA: 0x186AA68
	public void Init() { }

	// RVA: 0x186AB20 Offset: 0x186AB20 VA: 0x186AB20
	public void SetItem(ref EventBoardGameTokenItem item, EventBoardGameTokenEntity ent, bool haved, Action<int> callback) { }

	// RVA: 0x186A790 Offset: 0x186A790 VA: 0x186A790
	public void SetTokenInfo(EventBoardGameTokenItem item, bool dispNo = True) { }

	// RVA: 0x186AC3C Offset: 0x186AC3C VA: 0x186AC3C
	public void OnClickItem() { }

	// RVA: 0x186ACEC Offset: 0x186ACEC VA: 0x186ACEC
	public void DestroyItem() { }

	// RVA: 0x186A788 Offset: 0x186A788 VA: 0x186A788
	public string get_TokenName() { }
}

// Namespace: 
public class EventBoardGameTokenManager : MonoBehaviour // TypeDefIndex: 9748
{
	// Fields
	public const string ATLAS_PATH = "EventUI/Prefabs/80285";
	public const string ATLAS_NAME = "DownloadEventUIAtlas8028500";
	protected bool isEventUILoad; // 0x18
	protected Action eventUILoadCallbackFunc; // 0x20
	protected AssetData eventUIAssetData; // 0x28
	protected UIAtlas eventUIDownloadAtlas; // 0x30
	private const string bgImageFileName = "token_bg";
	private const float topIndent = 22;
	private const int maxRowItemCount = 11;
	private const int maxListCount = 52;
	private Vector2 arrangementPich; // 0x38
	private EventBoardGameTokenInfoDialog tokenInfoDialog; // 0x40
	private List<EventBoardGameTokenItem> tokenList; // 0x48
	[SerializeField] // RVA: 0xC6D130 Offset: 0xC6D130 VA: 0xC6D130
	private UISprite bgImage; // 0x50
	[SerializeField] // RVA: 0xC6D140 Offset: 0xC6D140 VA: 0xC6D140
	private GameObject tokenPrefab; // 0x58
	[SerializeField] // RVA: 0xC6D150 Offset: 0xC6D150 VA: 0xC6D150
	private GameObject parentObject; // 0x60
	[SerializeField] // RVA: 0xC6D160 Offset: 0xC6D160 VA: 0xC6D160
	private GameObject tokenInfoDialogPrefab; // 0x68

	// Methods

	// RVA: 0x186AD68 Offset: 0x186AD68 VA: 0x186AD68
	public void .ctor() { }

	// RVA: 0x186ADB8 Offset: 0x186ADB8 VA: 0x186ADB8
	public void Awake() { }

	// RVA: 0x186ADC8 Offset: 0x186ADC8 VA: 0x186ADC8
	public void Init(int eventId) { }

	// RVA: 0x186B02C Offset: 0x186B02C VA: 0x186B02C
	public void SetArrangement(int eventId) { }

	// RVA: 0x186B4C0 Offset: 0x186B4C0 VA: 0x186B4C0
	private void checkTokenInfo(int tokenId) { }

	// RVA: 0x186B824 Offset: 0x186B824 VA: 0x186B824
	private void closeTokenInfo() { }

	// RVA: 0x186B5CC Offset: 0x186B5CC VA: 0x186B5CC
	private GameObject CreateMenu(GameObject prefab) { }

	// RVA: 0x186B8F0 Offset: 0x186B8F0 VA: 0x186B8F0
	public void DestoryList() { }

	// RVA: 0x186AE98 Offset: 0x186AE98 VA: 0x186AE98
	protected void LoadEventUI(Action callback, int loadParallelMax = 1) { }

	// RVA: 0x186BAE8 Offset: 0x186BAE8 VA: 0x186BAE8
	protected void LoadEventUIEnd(AssetData assetData) { }

	// RVA: 0x186BB7C Offset: 0x186BB7C VA: 0x186BB7C
	protected UIAtlas CreateUIAtlasFromAssetData(AssetData assetData, string name) { }

	// RVA: 0x186BA18 Offset: 0x186BA18 VA: 0x186BA18
	protected void ReleaseEventUI() { }

	// RVA: 0x186BC44 Offset: 0x186BC44 VA: 0x186BC44
	public bool SetEventUI(UISprite sprite, string spriteName) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC448F4 Offset: 0xC448F4 VA: 0xC448F4
private sealed class EventBoardGameTokenManager.<Init>c__AnonStorey0 // TypeDefIndex: 9749
{
	// Fields
	internal int eventId; // 0x10
	internal EventBoardGameTokenManager $this; // 0x18

	// Methods

	// RVA: 0x186AE90 Offset: 0x186AE90 VA: 0x186AE90
	public void .ctor() { }

	// RVA: 0x186BDAC Offset: 0x186BDAC VA: 0x186BDAC
	internal void <>m__0() { }
}

// Namespace: 
public class BoxGachaItemComponent : MonoBehaviour // TypeDefIndex: 9750
{
	// Fields
	[SerializeField] // RVA: 0xC6D170 Offset: 0xC6D170 VA: 0xC6D170
	protected ItemIconComponent itemIcon; // 0x18
	[SerializeField] // RVA: 0xC6D180 Offset: 0xC6D180 VA: 0xC6D180
	protected UILabel dataLabel; // 0x20

	// Methods

	// RVA: 0x19BF768 Offset: 0x19BF768 VA: 0x19BF768
	public void .ctor() { }

	// RVA: 0x19BF770 Offset: 0x19BF770 VA: 0x19BF770
	public void Clear() { }

	// RVA: 0x19BF814 Offset: 0x19BF814 VA: 0x19BF814
	public void Set(int itemId, int payNum) { }
}

// Namespace: 
public class BoxGachaItemListViewItem : ListViewItem // TypeDefIndex: 9751
{
	// Fields
	protected BoxGachaBaseEntity gachaBaseData; // 0x70
	protected GiftEntity giftEnt; // 0x78
	protected ServantEntity svtEnt; // 0x80
	protected ItemEntity itemEnt; // 0x88
	protected CommandCodeEntity commandCodeEntity; // 0x90
	protected int currentEventId; // 0x98
	protected int targetObjectId; // 0x9C
	protected int targetImgId; // 0xA0
	protected string nameTxt; // 0xA8
	protected int rewardNum; // 0xB0
	protected int giftType; // 0xB4
	protected bool isRare; // 0xB8
	protected int currenNum; // 0xBC
	protected int maxNum; // 0xC0
	protected string detailTxt; // 0xC8
	protected string extraDetailTxt; // 0xD0
	protected bool isDraw; // 0xD8
	protected int currentBoxGachaId; // 0xDC

	// Properties
	public RewardType.Type GachaBaseType { get; }
