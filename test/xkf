{
	// Fields
	private readonly Asn1StreamParser _parser; // 0x18
	private bool _first; // 0x20
	private Stream _currentStream; // 0x28

	// Methods

	// RVA: 0x206B3C0 Offset: 0x206B3C0 VA: 0x206B3C0
	internal void .ctor(Asn1StreamParser parser) { }

	// RVA: 0x206CB00 Offset: 0x206CB00 VA: 0x206CB00 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x206CE14 Offset: 0x206CE14 VA: 0x206CE14 Slot: 20
	public override int ReadByte() { }
}

// Namespace: Org.BouncyCastle.Asn1.CryptoPro
public abstract class CryptoProObjectIdentifiers // TypeDefIndex: 4434
{
	// Fields
	public const string GostID = "1.2.643.2.2";
	public static readonly DerObjectIdentifier GostR3411; // 0x0
	public static readonly DerObjectIdentifier GostR3411Hmac; // 0x8
	public static readonly DerObjectIdentifier GostR28147Cbc; // 0x10
	public static readonly DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet; // 0x18
	public static readonly DerObjectIdentifier GostR3410x94; // 0x20
	public static readonly DerObjectIdentifier GostR3410x2001; // 0x28
	public static readonly DerObjectIdentifier GostR3411x94WithGostR3410x94; // 0x30
	public static readonly DerObjectIdentifier GostR3411x94WithGostR3410x2001; // 0x38
	public static readonly DerObjectIdentifier GostR3411x94CryptoProParamSet; // 0x40
	public static readonly DerObjectIdentifier GostR3410x94CryptoProA; // 0x48
	public static readonly DerObjectIdentifier GostR3410x94CryptoProB; // 0x50
	public static readonly DerObjectIdentifier GostR3410x94CryptoProC; // 0x58
	public static readonly DerObjectIdentifier GostR3410x94CryptoProD; // 0x60
	public static readonly DerObjectIdentifier GostR3410x94CryptoProXchA; // 0x68
	public static readonly DerObjectIdentifier GostR3410x94CryptoProXchB; // 0x70
	public static readonly DerObjectIdentifier GostR3410x94CryptoProXchC; // 0x78
	public static readonly DerObjectIdentifier GostR3410x2001CryptoProA; // 0x80
	public static readonly DerObjectIdentifier GostR3410x2001CryptoProB; // 0x88
	public static readonly DerObjectIdentifier GostR3410x2001CryptoProC; // 0x90
	public static readonly DerObjectIdentifier GostR3410x2001CryptoProXchA; // 0x98
	public static readonly DerObjectIdentifier GostR3410x2001CryptoProXchB; // 0xA0
	public static readonly DerObjectIdentifier GostElSgDH3410Default; // 0xA8
	public static readonly DerObjectIdentifier GostElSgDH3410x1; // 0xB0

	// Methods

	// RVA: 0x206D070 Offset: 0x206D070 VA: 0x206D070
	protected void .ctor() { }

	// RVA: 0x206D078 Offset: 0x206D078 VA: 0x206D078
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.CryptoPro
public sealed class ECGost3410NamedCurves // TypeDefIndex: 4435
{
	// Fields
	internal static readonly IDictionary objIds; // 0x0
	internal static readonly IDictionary parameters; // 0x8
	internal static readonly IDictionary names; // 0x10

	// Properties
	public static IEnumerable Names { get; }

	// Methods

	// RVA: 0x206D4B8 Offset: 0x206D4B8 VA: 0x206D4B8
	private void .ctor() { }

	// RVA: 0x206D4C0 Offset: 0x206D4C0 VA: 0x206D4C0
	private static void .cctor() { }

	// RVA: 0x206E544 Offset: 0x206E544 VA: 0x206E544
	public static ECDomainParameters GetByOid(DerObjectIdentifier oid) { }

	// RVA: 0x206E6B4 Offset: 0x206E6B4 VA: 0x206E6B4
	public static IEnumerable get_Names() { }

	// RVA: 0x206E7C0 Offset: 0x206E7C0 VA: 0x206E7C0
	public static ECDomainParameters GetByName(string name) { }

	// RVA: 0x206EA48 Offset: 0x206EA48 VA: 0x206EA48
	public static string GetName(DerObjectIdentifier oid) { }

	// RVA: 0x206EB9C Offset: 0x206EB9C VA: 0x206EB9C
	public static DerObjectIdentifier GetOid(string name) { }
}

// Namespace: Org.BouncyCastle.Asn1.CryptoPro
public sealed class Gost3410NamedParameters // TypeDefIndex: 4436
{
	// Fields
	private static readonly IDictionary objIds; // 0x0
	private static readonly IDictionary parameters; // 0x8
	private static readonly Gost3410ParamSetParameters cryptoProA; // 0x10
	private static readonly Gost3410ParamSetParameters cryptoProB; // 0x18
	private static readonly Gost3410ParamSetParameters cryptoProXchA; // 0x20

	// Properties
	public static IEnumerable Names { get; }

	// Methods

	// RVA: 0x206ED0C Offset: 0x206ED0C VA: 0x206ED0C
	private void .ctor() { }

	// RVA: 0x206ED14 Offset: 0x206ED14 VA: 0x206ED14
	private static void .cctor() { }

	// RVA: 0x206F3F0 Offset: 0x206F3F0 VA: 0x206F3F0
	public static Gost3410ParamSetParameters GetByOid(DerObjectIdentifier oid) { }

	// RVA: 0x206F560 Offset: 0x206F560 VA: 0x206F560
	public static IEnumerable get_Names() { }

	// RVA: 0x206F66C Offset: 0x206F66C VA: 0x206F66C
	public static Gost3410ParamSetParameters GetByName(string name) { }

	// RVA: 0x206F8F4 Offset: 0x206F8F4 VA: 0x206F8F4
	public static DerObjectIdentifier GetOid(string name) { }
}

// Namespace: Org.BouncyCastle.Asn1.CryptoPro
public class Gost3410ParamSetParameters : Asn1Encodable // TypeDefIndex: 4437
{
	// Fields
	private readonly int keySize; // 0x10
	private readonly DerInteger p; // 0x18
	private readonly DerInteger q; // 0x20
	private readonly DerInteger a; // 0x28

	// Properties
	public int KeySize { get; }
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger A { get; }

	// Methods

	// RVA: 0x206F324 Offset: 0x206F324 VA: 0x206F324
	public void .ctor(int keySize, BigInteger p, BigInteger q, BigInteger a) { }

	// RVA: 0x206FA64 Offset: 0x206FA64 VA: 0x206FA64
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x206FBE0 Offset: 0x206FBE0 VA: 0x206FBE0
	public static Gost3410ParamSetParameters GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x206FBF8 Offset: 0x206FBF8 VA: 0x206FBF8
	public static Gost3410ParamSetParameters GetInstance(object obj) { }

	// RVA: 0x206FDE4 Offset: 0x206FDE4 VA: 0x206FDE4
	public int get_KeySize() { }

	// RVA: 0x206FDEC Offset: 0x206FDEC VA: 0x206FDEC
	public BigInteger get_P() { }

	// RVA: 0x206FE1C Offset: 0x206FE1C VA: 0x206FE1C
	public BigInteger get_Q() { }

	// RVA: 0x206FE4C Offset: 0x206FE4C VA: 0x206FE4C
	public BigInteger get_A() { }

	// RVA: 0x206FE7C Offset: 0x206FE7C VA: 0x206FE7C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.CryptoPro
public class Gost3410PublicKeyAlgParameters : Asn1Encodable // TypeDefIndex: 4438
{
	// Fields
	private DerObjectIdentifier publicKeyParamSet; // 0x10
	private DerObjectIdentifier digestParamSet; // 0x18
	private DerObjectIdentifier encryptionParamSet; // 0x20

	// Properties
	public DerObjectIdentifier PublicKeyParamSet { get; }
	public DerObjectIdentifier DigestParamSet { get; }
	public DerObjectIdentifier EncryptionParamSet { get; }

	// Methods

	// RVA: 0x2070064 Offset: 0x2070064 VA: 0x2070064
	public void .ctor(DerObjectIdentifier publicKeyParamSet, DerObjectIdentifier digestParamSet) { }

	// RVA: 0x207006C Offset: 0x207006C VA: 0x207006C
	public void .ctor(DerObjectIdentifier publicKeyParamSet, DerObjectIdentifier digestParamSet, DerObjectIdentifier encryptionParamSet) { }

	// RVA: 0x2070144 Offset: 0x2070144 VA: 0x2070144
	public void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2070370 Offset: 0x2070370 VA: 0x2070370
	public static Gost3410PublicKeyAlgParameters GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2070388 Offset: 0x2070388 VA: 0x2070388
	public static Gost3410PublicKeyAlgParameters GetInstance(object obj) { }

	// RVA: 0x2070574 Offset: 0x2070574 VA: 0x2070574
	public DerObjectIdentifier get_PublicKeyParamSet() { }

	// RVA: 0x207057C Offset: 0x207057C VA: 0x207057C
	public DerObjectIdentifier get_DigestParamSet() { }

	// RVA: 0x2070584 Offset: 0x2070584 VA: 0x2070584
	public DerObjectIdentifier get_EncryptionParamSet() { }

	// RVA: 0x207058C Offset: 0x207058C VA: 0x207058C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1
internal class DefiniteLengthInputStream : LimitedInputStream // TypeDefIndex: 4439
{
	// Fields
	private static readonly byte[] EmptyBytes; // 0x0
	private readonly int _originalLength; // 0x24
	private int _remaining; // 0x28

	// Properties
	internal int Remaining { get; }

	// Methods

	// RVA: 0x206186C Offset: 0x206186C VA: 0x206186C
	internal void .ctor(Stream inStream, int length) { }

	// RVA: 0x2070748 Offset: 0x2070748 VA: 0x2070748
	internal int get_Remaining() { }

	// RVA: 0x2070750 Offset: 0x2070750 VA: 0x2070750 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2070A10 Offset: 0x2070A10 VA: 0x2070A10 Slot: 19
	public override int Read(byte[] buf, int off, int len) { }

	// RVA: 0x2063884 Offset: 0x2063884 VA: 0x2063884
	internal void ReadAllIntoByteArray(byte[] buf) { }

	// RVA: 0x2061950 Offset: 0x2061950 VA: 0x2061950
	internal byte[] ToArray() { }

	// RVA: 0x2070CF0 Offset: 0x2070CF0 VA: 0x2070CF0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerApplicationSpecific : Asn1Object // TypeDefIndex: 4440
{
	// Fields
	private readonly bool isConstructed; // 0x10
	private readonly int tag; // 0x14
	private readonly byte[] octets; // 0x18

	// Properties
	public int ApplicationTag { get; }

	// Methods

	// RVA: 0x2061C34 Offset: 0x2061C34 VA: 0x2061C34
	internal void .ctor(bool isConstructed, int tag, byte[] octets) { }

	// RVA: 0x2070D54 Offset: 0x2070D54 VA: 0x2070D54
	public void .ctor(int tag, byte[] octets) { }

	// RVA: 0x2070D94 Offset: 0x2070D94 VA: 0x2070D94
	public void .ctor(int tag, Asn1Encodable obj) { }

	// RVA: 0x2070DAC Offset: 0x2070DAC VA: 0x2070DAC
	public void .ctor(bool isExplicit, int tag, Asn1Encodable obj) { }

	// RVA: 0x2069D20 Offset: 0x2069D20 VA: 0x2069D20
	public void .ctor(int tagNo, Asn1EncodableVector vec) { }

	// RVA: 0x2070EC8 Offset: 0x2070EC8 VA: 0x2070EC8
	private int GetLengthOfHeader(byte[] data) { }

	// RVA: 0x2071008 Offset: 0x2071008 VA: 0x2071008
	public bool IsConstructed() { }

	// RVA: 0x2071010 Offset: 0x2071010 VA: 0x2071010
	public byte[] GetContents() { }

	// RVA: 0x2071018 Offset: 0x2071018 VA: 0x2071018
	public int get_ApplicationTag() { }

	// RVA: 0x2071020 Offset: 0x2071020 VA: 0x2071020
	public Asn1Object GetObject() { }

	// RVA: 0x2071028 Offset: 0x2071028 VA: 0x2071028
	public Asn1Object GetObject(int derTagNo) { }

	// RVA: 0x2071318 Offset: 0x2071318 VA: 0x2071318 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2071378 Offset: 0x2071378 VA: 0x2071378 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x207145C Offset: 0x207145C VA: 0x207145C Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x207113C Offset: 0x207113C VA: 0x207113C
	private byte[] ReplaceTagNumber(int newTag, byte[] input) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerBitString : DerStringBase // TypeDefIndex: 4441
{
	// Fields
	private static readonly char[] table; // 0x0
	protected readonly byte[] mData; // 0x10
	protected readonly int mPadBits; // 0x18

	// Properties
	public virtual int PadBits { get; }
	public virtual int IntValue { get; }

	// Methods

	// RVA: 0x2069FD0 Offset: 0x2069FD0 VA: 0x2069FD0
	public void .ctor(byte[] data, int padBits) { }

	// RVA: 0x206A178 Offset: 0x206A178 VA: 0x206A178
	public void .ctor(byte[] data) { }

	// RVA: 0x206A1F4 Offset: 0x206A1F4 VA: 0x206A1F4
	public void .ctor(int namedBits) { }

	// RVA: 0x206A3DC Offset: 0x206A3DC VA: 0x206A3DC
	public void .ctor(Asn1Encodable obj) { }

	// RVA: 0x20714C8 Offset: 0x20714C8 VA: 0x20714C8
	public static DerBitString GetInstance(object obj) { }

	// RVA: 0x20717C4 Offset: 0x20717C4 VA: 0x20717C4
	public static DerBitString GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x20719D8 Offset: 0x20719D8 VA: 0x20719D8 Slot: 11
	public virtual byte[] GetOctets() { }

	// RVA: 0x2071A6C Offset: 0x2071A6C VA: 0x2071A6C Slot: 12
	public virtual byte[] GetBytes() { }

	// RVA: 0x2071B08 Offset: 0x2071B08 VA: 0x2071B08 Slot: 13
	public virtual int get_PadBits() { }

	// RVA: 0x2071B10 Offset: 0x2071B10 VA: 0x2071B10 Slot: 14
	public virtual int get_IntValue() { }

	// RVA: 0x206A4F8 Offset: 0x206A4F8 VA: 0x206A4F8 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2071C2C Offset: 0x2071C2C VA: 0x2071C2C Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2071C74 Offset: 0x2071C74 VA: 0x2071C74 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x2071D38 Offset: 0x2071D38 VA: 0x2071D38 Slot: 10
	public override string GetString() { }

	// RVA: 0x2063EE0 Offset: 0x2063EE0 VA: 0x2063EE0
	internal static DerBitString FromAsn1Octets(byte[] octets) { }

	// RVA: 0x2071F20 Offset: 0x2071F20 VA: 0x2071F20
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerBmpString : DerStringBase // TypeDefIndex: 4442
{
	// Fields
	private readonly string str; // 0x10

	// Methods

	// RVA: 0x206403C Offset: 0x206403C VA: 0x206403C
	public void .ctor(byte[] str) { }

	// RVA: 0x2071F9C Offset: 0x2071F9C VA: 0x2071F9C
	public void .ctor(string str) { }

	// RVA: 0x2072040 Offset: 0x2072040 VA: 0x2072040
	public static DerBmpString GetInstance(object obj) { }

	// RVA: 0x207216C Offset: 0x207216C VA: 0x207216C
	public static DerBmpString GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2072264 Offset: 0x2072264 VA: 0x2072264 Slot: 10
	public override string GetString() { }

	// RVA: 0x207226C Offset: 0x207226C VA: 0x207226C Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x2072334 Offset: 0x2072334 VA: 0x2072334 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerBoolean : Asn1Object // TypeDefIndex: 4443
{
	// Fields
	private readonly byte value; // 0x10
	public static readonly DerBoolean False; // 0x0
	public static readonly DerBoolean True; // 0x8

	// Properties
	public bool IsTrue { get; }

	// Methods

	// RVA: 0x20724BC Offset: 0x20724BC VA: 0x20724BC
	public void .ctor(byte[] val) { }

	// RVA: 0x2072584 Offset: 0x2072584 VA: 0x2072584
	private void .ctor(bool value) { }

	// RVA: 0x20725C0 Offset: 0x20725C0 VA: 0x20725C0
	public static DerBoolean GetInstance(object obj) { }

	// RVA: 0x20726EC Offset: 0x20726EC VA: 0x20726EC
	public static DerBoolean GetInstance(bool value) { }

	// RVA: 0x207277C Offset: 0x207277C VA: 0x207277C
	public static DerBoolean GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2072990 Offset: 0x2072990 VA: 0x2072990
	public bool get_IsTrue() { }

	// RVA: 0x20729A0 Offset: 0x20729A0 VA: 0x20729A0 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2072A48 Offset: 0x2072A48 VA: 0x2072A48 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x2072B04 Offset: 0x2072B04 VA: 0x2072B04 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2072B38 Offset: 0x2072B38 VA: 0x2072B38 Slot: 3
	public override string ToString() { }

	// RVA: 0x2063B68 Offset: 0x2063B68 VA: 0x2063B68
	internal static DerBoolean FromOctetString(byte[] value) { }

	// RVA: 0x2072B98 Offset: 0x2072B98 VA: 0x2072B98
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerEnumerated : Asn1Object // TypeDefIndex: 4444
{
	// Fields
	private readonly byte[] bytes; // 0x10
	private static readonly DerEnumerated[] cache; // 0x0

	// Properties
	public BigInteger Value { get; }

	// Methods

	// RVA: 0x2072C40 Offset: 0x2072C40 VA: 0x2072C40
	public void .ctor(int val) { }

	// RVA: 0x2072CE0 Offset: 0x2072CE0 VA: 0x2072CE0
	public void .ctor(BigInteger val) { }

	// RVA: 0x2072D24 Offset: 0x2072D24 VA: 0x2072D24
	public void .ctor(byte[] bytes) { }

	// RVA: 0x2072D50 Offset: 0x2072D50 VA: 0x2072D50
	public static DerEnumerated GetInstance(object obj) { }

	// RVA: 0x2072E7C Offset: 0x2072E7C VA: 0x2072E7C
	public static DerEnumerated GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2073090 Offset: 0x2073090 VA: 0x2073090
	public BigInteger get_Value() { }

	// RVA: 0x20730F8 Offset: 0x20730F8 VA: 0x20730F8 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2073134 Offset: 0x2073134 VA: 0x2073134 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x20731EC Offset: 0x20731EC VA: 0x20731EC Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2063CA0 Offset: 0x2063CA0 VA: 0x2063CA0
	internal static DerEnumerated FromOctetString(byte[] enc) { }

	// RVA: 0x20731F8 Offset: 0x20731F8 VA: 0x20731F8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerExternal : Asn1Object // TypeDefIndex: 4445
{
	// Fields
	private DerObjectIdentifier directReference; // 0x10
	private DerInteger indirectReference; // 0x18
	private Asn1Object dataValueDescriptor; // 0x20
	private int encoding; // 0x28
	private Asn1Object externalContent; // 0x30

	// Properties
	public Asn1Object DataValueDescriptor { get; set; }
	public DerObjectIdentifier DirectReference { get; set; }
	public int Encoding { get; set; }
	public Asn1Object ExternalContent { get; set; }
	public DerInteger IndirectReference { get; set; }

	// Methods

	// RVA: 0x2061F7C Offset: 0x2061F7C VA: 0x2061F7C
	public void .ctor(Asn1EncodableVector vector) { }

	// RVA: 0x207343C Offset: 0x207343C VA: 0x207343C
	public void .ctor(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, DerTaggedObject externalData) { }

	// RVA: 0x20734C4 Offset: 0x20734C4 VA: 0x20734C4
	public void .ctor(DerObjectIdentifier directReference, DerInteger indirectReference, Asn1Object dataValueDescriptor, int encoding, Asn1Object externalData) { }

	// RVA: 0x2073560 Offset: 0x2073560 VA: 0x2073560 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x20736D4 Offset: 0x20736D4 VA: 0x20736D4 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2073764 Offset: 0x2073764 VA: 0x2073764 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x2073880 Offset: 0x2073880 VA: 0x2073880
	public Asn1Object get_DataValueDescriptor() { }

	// RVA: 0x2073550 Offset: 0x2073550 VA: 0x2073550
	public void set_DataValueDescriptor(Asn1Object value) { }

	// RVA: 0x2073888 Offset: 0x2073888 VA: 0x2073888
	public DerObjectIdentifier get_DirectReference() { }

	// RVA: 0x2073540 Offset: 0x2073540 VA: 0x2073540
	public void set_DirectReference(DerObjectIdentifier value) { }

	// RVA: 0x2073890 Offset: 0x2073890 VA: 0x2073890
	public int get_Encoding() { }

	// RVA: 0x2073344 Offset: 0x2073344 VA: 0x2073344
	public void set_Encoding(int value) { }

	// RVA: 0x2073898 Offset: 0x2073898 VA: 0x2073898
	public Asn1Object get_ExternalContent() { }

	// RVA: 0x2073558 Offset: 0x2073558 VA: 0x2073558
	public void set_ExternalContent(Asn1Object value) { }

	// RVA: 0x20738A0 Offset: 0x20738A0 VA: 0x20738A0
	public DerInteger get_IndirectReference() { }

	// RVA: 0x2073548 Offset: 0x2073548 VA: 0x2073548
	public void set_IndirectReference(DerInteger value) { }

	// RVA: 0x207325C Offset: 0x207325C VA: 0x207325C
	private static Asn1Object GetObjFromVector(Asn1EncodableVector v, int index) { }

	// RVA: 0x2073664 Offset: 0x2073664 VA: 0x2073664
	private static void WriteEncodable(MemoryStream ms, Asn1Encodable e) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerExternalParser : Asn1Encodable // TypeDefIndex: 4446
{
	// Fields
	private readonly Asn1StreamParser _parser; // 0x10

	// Methods

	// RVA: 0x2063718 Offset: 0x2063718 VA: 0x2063718
	public void .ctor(Asn1StreamParser parser) { }

	// RVA: 0x20738A8 Offset: 0x20738A8 VA: 0x20738A8
	public IAsn1Convertible ReadObject() { }

	// RVA: 0x20738DC Offset: 0x20738DC VA: 0x20738DC Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerGeneralizedTime : Asn1Object // TypeDefIndex: 4447
{
	// Fields
	private readonly string time; // 0x10

	// Properties
	public string TimeString { get; }
	private bool HasFractionalSeconds { get; }

	// Methods

	// RVA: 0x2073E50 Offset: 0x2073E50 VA: 0x2073E50
	public void .ctor(string time) { }

	// RVA: 0x20742F0 Offset: 0x20742F0 VA: 0x20742F0
	public void .ctor(DateTime time) { }

	// RVA: 0x20641D0 Offset: 0x20641D0 VA: 0x20641D0
	internal void .ctor(byte[] bytes) { }

	// RVA: 0x2074364 Offset: 0x2074364 VA: 0x2074364
	public static DerGeneralizedTime GetInstance(object obj) { }

	// RVA: 0x207449C Offset: 0x207449C VA: 0x207449C
	public static DerGeneralizedTime GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x207469C Offset: 0x207469C VA: 0x207469C
	public string get_TimeString() { }

	// RVA: 0x20746A4 Offset: 0x20746A4 VA: 0x20746A4
	public string GetTime() { }

	// RVA: 0x2074BB8 Offset: 0x2074BB8 VA: 0x2074BB8
	private string CalculateGmtOffset() { }

	// RVA: 0x2074EF0 Offset: 0x2074EF0 VA: 0x2074EF0
	private static string Convert(int time) { }

	// RVA: 0x2073FC0 Offset: 0x2073FC0 VA: 0x2073FC0
	public DateTime ToDateTime() { }

	// RVA: 0x2074FEC Offset: 0x2074FEC VA: 0x2074FEC
	private string FString(int count) { }

	// RVA: 0x207508C Offset: 0x207508C VA: 0x207508C
	private DateTime ParseDateString(string s, string format, bool makeUniversal) { }

	// RVA: 0x2074FAC Offset: 0x2074FAC VA: 0x2074FAC
	private bool get_HasFractionalSeconds() { }

	// RVA: 0x2075300 Offset: 0x2075300 VA: 0x2075300
	private byte[] GetOctets() { }

	// RVA: 0x207530C Offset: 0x207530C VA: 0x207530C Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2075354 Offset: 0x2075354 VA: 0x2075354 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x207541C Offset: 0x207541C VA: 0x207541C Slot: 8
	protected override int Asn1GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerGeneralString : DerStringBase // TypeDefIndex: 4448
{
	// Fields
	private readonly string str; // 0x10

	// Methods

	// RVA: 0x2064208 Offset: 0x2064208 VA: 0x2064208
	public void .ctor(byte[] str) { }

	// RVA: 0x207395C Offset: 0x207395C VA: 0x207395C
	public void .ctor(string str) { }

	// RVA: 0x2073A00 Offset: 0x2073A00 VA: 0x2073A00
	public static DerGeneralString GetInstance(object obj) { }

	// RVA: 0x2073B2C Offset: 0x2073B2C VA: 0x2073B2C
	public static DerGeneralString GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2073D2C Offset: 0x2073D2C VA: 0x2073D2C Slot: 10
	public override string GetString() { }

	// RVA: 0x2073D34 Offset: 0x2073D34 VA: 0x2073D34
	public byte[] GetOctets() { }

	// RVA: 0x2073D40 Offset: 0x2073D40 VA: 0x2073D40 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2073D88 Offset: 0x2073D88 VA: 0x2073D88 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }
}

// Namespace: Org.BouncyCastle.Asn1
public abstract class DerGenerator : Asn1Generator // TypeDefIndex: 4449
{
	// Fields
	private bool _tagged; // 0x18
	private bool _isExplicit; // 0x19
	private int _tagNo; // 0x1C

	// Methods

	// RVA: 0x2296F24 Offset: 0x2296F24 VA: 0x2296F24
	protected void .ctor(Stream outStream) { }

	// RVA: 0x2296F2C Offset: 0x2296F2C VA: 0x2296F2C
	protected void .ctor(Stream outStream, int tagNo, bool isExplicit) { }

	// RVA: 0x2296F74 Offset: 0x2296F74 VA: 0x2296F74
	private static void WriteLength(Stream outStr, int length) { }

	// RVA: 0x229703C Offset: 0x229703C VA: 0x229703C
	internal static void WriteDerEncoded(Stream outStream, int tag, byte[] bytes) { }

	// RVA: 0x22970C8 Offset: 0x22970C8 VA: 0x22970C8
	internal void WriteDerEncoded(int tag, byte[] bytes) { }

	// RVA: 0x22971C8 Offset: 0x22971C8 VA: 0x22971C8
	internal static void WriteDerEncoded(Stream outStr, int tag, Stream inStr) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerGraphicString : DerStringBase // TypeDefIndex: 4450
{
	// Fields
	private readonly byte[] mString; // 0x10

	// Methods

	// RVA: 0x2297200 Offset: 0x2297200 VA: 0x2297200
	public void .ctor(byte[] encoding) { }

	// RVA: 0x2297240 Offset: 0x2297240 VA: 0x2297240
	public static DerGraphicString GetInstance(object obj) { }

	// RVA: 0x229754C Offset: 0x229754C VA: 0x229754C
	public static DerGraphicString GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2297738 Offset: 0x2297738 VA: 0x2297738 Slot: 10
	public override string GetString() { }

	// RVA: 0x2297744 Offset: 0x2297744 VA: 0x2297744
	public byte[] GetOctets() { }

	// RVA: 0x2297750 Offset: 0x2297750 VA: 0x2297750 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x22977F8 Offset: 0x22977F8 VA: 0x22977F8 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2297804 Offset: 0x2297804 VA: 0x2297804 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerIA5String : DerStringBase // TypeDefIndex: 4451
{
	// Fields
	private readonly string str; // 0x10

	// Methods

	// RVA: 0x22978BC Offset: 0x22978BC VA: 0x22978BC
	public void .ctor(byte[] str) { }

	// RVA: 0x22979E0 Offset: 0x22979E0 VA: 0x22979E0
	public void .ctor(string str) { }

	// RVA: 0x22978F0 Offset: 0x22978F0 VA: 0x22978F0
	public void .ctor(string str, bool validate) { }

	// RVA: 0x2297A60 Offset: 0x2297A60 VA: 0x2297A60
	public static DerIA5String GetInstance(object obj) { }

	// RVA: 0x2297B8C Offset: 0x2297B8C VA: 0x2297B8C
	public static DerIA5String GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2297D7C Offset: 0x2297D7C VA: 0x2297D7C Slot: 10
	public override string GetString() { }

	// RVA: 0x2297D84 Offset: 0x2297D84 VA: 0x2297D84
	public byte[] GetOctets() { }

	// RVA: 0x2297D90 Offset: 0x2297D90 VA: 0x2297D90 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2297DD4 Offset: 0x2297DD4 VA: 0x2297DD4 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2297E08 Offset: 0x2297E08 VA: 0x2297E08 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x22979E8 Offset: 0x22979E8 VA: 0x22979E8
	public static bool IsIA5String(string str) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerInteger : Asn1Object // TypeDefIndex: 4452
{
	// Fields
	private readonly byte[] bytes; // 0x10

	// Properties
	public BigInteger Value { get; }
	public BigInteger PositiveValue { get; }

	// Methods

	// RVA: 0x2297ED0 Offset: 0x2297ED0 VA: 0x2297ED0
	public void .ctor(int value) { }

	// RVA: 0x2297F70 Offset: 0x2297F70 VA: 0x2297F70
	public void .ctor(BigInteger value) { }

	// RVA: 0x2298020 Offset: 0x2298020 VA: 0x2298020
	public void .ctor(byte[] bytes) { }

	// RVA: 0x229804C Offset: 0x229804C VA: 0x229804C
	public static DerInteger GetInstance(object obj) { }

	// RVA: 0x2298178 Offset: 0x2298178 VA: 0x2298178
	public static DerInteger GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x22982AC Offset: 0x22982AC VA: 0x22982AC
	public BigInteger get_Value() { }

	// RVA: 0x2298314 Offset: 0x2298314 VA: 0x2298314
	public BigInteger get_PositiveValue() { }

	// RVA: 0x2298380 Offset: 0x2298380 VA: 0x2298380 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x22983B8 Offset: 0x22983B8 VA: 0x22983B8 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x22983C4 Offset: 0x22983C4 VA: 0x22983C4 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x229847C Offset: 0x229847C VA: 0x229847C Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerNull : Asn1Null // TypeDefIndex: 4453
{
	// Fields
	public static readonly DerNull Instance; // 0x0
	private byte[] zeroBytes; // 0x10

	// Methods

	[ObsoleteAttribute] // RVA: 0xD34A78 Offset: 0xD34A78 VA: 0xD34A78
	// RVA: 0x22984B0 Offset: 0x22984B0 VA: 0x22984B0
	public void .ctor() { }

	// RVA: 0x2298510 Offset: 0x2298510 VA: 0x2298510
	protected internal void .ctor(int dummy) { }

	// RVA: 0x2298570 Offset: 0x2298570 VA: 0x2298570 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x22985A8 Offset: 0x22985A8 VA: 0x22985A8 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x2298628 Offset: 0x2298628 VA: 0x2298628 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x2298630 Offset: 0x2298630 VA: 0x2298630
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerNumericString : DerStringBase // TypeDefIndex: 4454
{
	// Fields
	private readonly string str; // 0x10

	// Methods

	// RVA: 0x2298690 Offset: 0x2298690 VA: 0x2298690
	public void .ctor(byte[] str) { }

	// RVA: 0x22987B4 Offset: 0x22987B4 VA: 0x22987B4
	public void .ctor(string str) { }

	// RVA: 0x22986C4 Offset: 0x22986C4 VA: 0x22986C4
	public void .ctor(string str, bool validate) { }

	// RVA: 0x22988A0 Offset: 0x22988A0 VA: 0x22988A0
	public static DerNumericString GetInstance(object obj) { }

	// RVA: 0x22989CC Offset: 0x22989CC VA: 0x22989CC
	public static DerNumericString GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x2298AD4 Offset: 0x2298AD4 VA: 0x2298AD4 Slot: 10
	public override string GetString() { }

	// RVA: 0x2298ADC Offset: 0x2298ADC VA: 0x2298ADC
	public byte[] GetOctets() { }

	// RVA: 0x2298AE8 Offset: 0x2298AE8 VA: 0x2298AE8 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x2298B2C Offset: 0x2298B2C VA: 0x2298B2C Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x22987BC Offset: 0x22987BC VA: 0x22987BC
	public static bool IsNumericString(string str) { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerObjectIdentifier : Asn1Object // TypeDefIndex: 4455
{
	// Fields
	private readonly string identifier; // 0x10
	private byte[] body; // 0x18
	private const long LONG_LIMIT = 72057594037927808;
	private static readonly DerObjectIdentifier[] cache; // 0x0

	// Properties
	public string Id { get; }

	// Methods

	// RVA: 0x2298BF4 Offset: 0x2298BF4 VA: 0x2298BF4
	public void .ctor(string identifier) { }

	// RVA: 0x2298E2C Offset: 0x2298E2C VA: 0x2298E2C
	internal void .ctor(DerObjectIdentifier oid, string branchID) { }

	// RVA: 0x2299054 Offset: 0x2299054 VA: 0x2299054
	internal void .ctor(byte[] bytes) { }

	// RVA: 0x2299414 Offset: 0x2299414 VA: 0x2299414
	public static DerObjectIdentifier GetInstance(object obj) { }

	// RVA: 0x2299800 Offset: 0x2299800 VA: 0x2299800
	public static DerObjectIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x229904C Offset: 0x229904C VA: 0x229904C
	public string get_Id() { }

	// RVA: 0x2299884 Offset: 0x2299884 VA: 0x2299884 Slot: 9
	public virtual DerObjectIdentifier Branch(string branchID) { }

	// RVA: 0x22998F4 Offset: 0x22998F4 VA: 0x22998F4 Slot: 10
	public virtual bool On(DerObjectIdentifier stem) { }

	// RVA: 0x2299A14 Offset: 0x2299A14 VA: 0x2299A14
	private void WriteField(Stream outputStream, long fieldValue) { }

	// RVA: 0x2299B20 Offset: 0x2299B20 VA: 0x2299B20
	private void WriteField(Stream outputStream, BigInteger fieldValue) { }

	// RVA: 0x2299D08 Offset: 0x2299D08 VA: 0x2299D08
	private void DoOutput(MemoryStream bOut) { }

	// RVA: 0x2299FE8 Offset: 0x2299FE8 VA: 0x2299FE8
	internal byte[] GetBody() { }

	// RVA: 0x229A0E4 Offset: 0x229A0E4 VA: 0x229A0E4 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x229A120 Offset: 0x229A120 VA: 0x229A120 Slot: 8
	protected override int Asn1GetHashCode() { }

	// RVA: 0x229A154 Offset: 0x229A154 VA: 0x229A154 Slot: 7
	protected override bool Asn1Equals(Asn1Object asn1Object) { }

	// RVA: 0x229A21C Offset: 0x229A21C VA: 0x229A21C Slot: 3
	public override string ToString() { }

	// RVA: 0x2298F9C Offset: 0x2298F9C VA: 0x2298F9C
	private static bool IsValidBranchID(string branchID, int start) { }

	// RVA: 0x2298D40 Offset: 0x2298D40 VA: 0x2298D40
	private static bool IsValidIdentifier(string identifier) { }

	// RVA: 0x22990E8 Offset: 0x22990E8 VA: 0x22990E8
	private static string MakeOidStringFromBytes(byte[] bytes) { }

	// RVA: 0x22995F0 Offset: 0x22995F0 VA: 0x22995F0
	internal static DerObjectIdentifier FromOctetString(byte[] enc) { }

	// RVA: 0x229A224 Offset: 0x229A224 VA: 0x229A224
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1
public class DerOctetString : Asn1OctetString // TypeDefIndex: 4456
{
	// Methods

	// RVA: 0x229A288 Offset: 0x229A288 VA: 0x229A288
	public void .ctor(byte[] str) { }

	// RVA: 0x229A290 Offset: 0x229A290 VA: 0x229A290
	public void .ctor(Asn1Encodable obj) { }

	// RVA: 0x229A298 Offset: 0x229A298 VA: 0x229A298 Slot: 6
	internal override void Encode(DerOutputStream derOut) { }

	// RVA: 0x229A2D0 Offset: 0x229A2D0 VA: 0x229A2D0
	internal static void Encode(DerOutputStream derOut, byte[] bytes, int offset, int length) { }
}

// Namespace: Org.BouncyCastle.Asn1
