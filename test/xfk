	public override int DefaultTtl { get; }
	public override bool ForwardingEnabled { get; }
	public override int NumberOfInterfaces { get; }
	public override int NumberOfIPAddresses { get; }
	public override int NumberOfRoutes { get; }
	public override long OutputPacketRequests { get; }
	public override long OutputPacketRoutingDiscards { get; }
	public override long OutputPacketsDiscarded { get; }
	public override long OutputPacketsWithNoRoute { get; }
	public override long PacketFragmentFailures { get; }
	public override long PacketReassembliesRequired { get; }
	public override long PacketReassemblyFailures { get; }
	public override long PacketReassemblyTimeout { get; }
	public override long PacketsFragmented { get; }
	public override long PacketsReassembled { get; }
	public override long ReceivedPackets { get; }
	public override long ReceivedPacketsDelivered { get; }
	public override long ReceivedPacketsDiscarded { get; }
	public override long ReceivedPacketsForwarded { get; }
	public override long ReceivedPacketsWithAddressErrors { get; }
	public override long ReceivedPacketsWithHeadersErrors { get; }
	public override long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0xF72520 Offset: 0xF72520 VA: 0xF72520
	public void .ctor(Win32_MIB_IPSTATS info) { }

	// RVA: 0xF72EBC Offset: 0xF72EBC VA: 0xF72EBC Slot: 4
	public override int get_DefaultTtl() { }

	// RVA: 0xF72EC4 Offset: 0xF72EC4 VA: 0xF72EC4 Slot: 5
	public override bool get_ForwardingEnabled() { }

	// RVA: 0xF72ED4 Offset: 0xF72ED4 VA: 0xF72ED4 Slot: 6
	public override int get_NumberOfInterfaces() { }

	// RVA: 0xF72EDC Offset: 0xF72EDC VA: 0xF72EDC Slot: 7
	public override int get_NumberOfIPAddresses() { }

	// RVA: 0xF72EE4 Offset: 0xF72EE4 VA: 0xF72EE4 Slot: 8
	public override int get_NumberOfRoutes() { }

	// RVA: 0xF72EEC Offset: 0xF72EEC VA: 0xF72EEC Slot: 9
	public override long get_OutputPacketRequests() { }

	// RVA: 0xF72EF4 Offset: 0xF72EF4 VA: 0xF72EF4 Slot: 10
	public override long get_OutputPacketRoutingDiscards() { }

	// RVA: 0xF72EFC Offset: 0xF72EFC VA: 0xF72EFC Slot: 11
	public override long get_OutputPacketsDiscarded() { }

	// RVA: 0xF72F04 Offset: 0xF72F04 VA: 0xF72F04 Slot: 12
	public override long get_OutputPacketsWithNoRoute() { }

	// RVA: 0xF72F0C Offset: 0xF72F0C VA: 0xF72F0C Slot: 13
	public override long get_PacketFragmentFailures() { }

	// RVA: 0xF72F14 Offset: 0xF72F14 VA: 0xF72F14 Slot: 14
	public override long get_PacketReassembliesRequired() { }

	// RVA: 0xF72F1C Offset: 0xF72F1C VA: 0xF72F1C Slot: 15
	public override long get_PacketReassemblyFailures() { }

	// RVA: 0xF72F24 Offset: 0xF72F24 VA: 0xF72F24 Slot: 16
	public override long get_PacketReassemblyTimeout() { }

	// RVA: 0xF72F2C Offset: 0xF72F2C VA: 0xF72F2C Slot: 17
	public override long get_PacketsFragmented() { }

	// RVA: 0xF72F34 Offset: 0xF72F34 VA: 0xF72F34 Slot: 18
	public override long get_PacketsReassembled() { }

	// RVA: 0xF72F3C Offset: 0xF72F3C VA: 0xF72F3C Slot: 19
	public override long get_ReceivedPackets() { }

	// RVA: 0xF72F44 Offset: 0xF72F44 VA: 0xF72F44 Slot: 20
	public override long get_ReceivedPacketsDelivered() { }

	// RVA: 0xF72F4C Offset: 0xF72F4C VA: 0xF72F4C Slot: 21
	public override long get_ReceivedPacketsDiscarded() { }

	// RVA: 0xF72F54 Offset: 0xF72F54 VA: 0xF72F54 Slot: 22
	public override long get_ReceivedPacketsForwarded() { }

	// RVA: 0xF72F5C Offset: 0xF72F5C VA: 0xF72F5C Slot: 23
	public override long get_ReceivedPacketsWithAddressErrors() { }

	// RVA: 0xF72F64 Offset: 0xF72F64 VA: 0xF72F64 Slot: 24
	public override long get_ReceivedPacketsWithHeadersErrors() { }

	// RVA: 0xF72F6C Offset: 0xF72F6C VA: 0xF72F6C Slot: 25
	public override long get_ReceivedPacketsWithUnknownProtocol() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_IPSTATS // TypeDefIndex: 1359
{
	// Fields
	public int Forwarding; // 0x0
	public int DefaultTTL; // 0x4
	public uint InReceives; // 0x8
	public uint InHdrErrors; // 0xC
	public uint InAddrErrors; // 0x10
	public uint ForwDatagrams; // 0x14
	public uint InUnknownProtos; // 0x18
	public uint InDiscards; // 0x1C
	public uint InDelivers; // 0x20
	public uint OutRequests; // 0x24
	public uint RoutingDiscards; // 0x28
	public uint OutDiscards; // 0x2C
	public uint OutNoRoutes; // 0x30
	public uint ReasmTimeout; // 0x34
	public uint ReasmReqds; // 0x38
	public uint ReasmOks; // 0x3C
	public uint ReasmFails; // 0x40
	public uint FragOks; // 0x44
	public uint FragFails; // 0x48
	public uint FragCreates; // 0x4C
	public int NumIf; // 0x50
	public int NumAddr; // 0x54
	public int NumRoutes; // 0x58
}

// Namespace: System.Net.NetworkInformation
public abstract class IPInterfaceProperties // TypeDefIndex: 1360
{
	// Properties
	public abstract IPAddressInformationCollection AnycastAddresses { get; }
	public abstract IPAddressCollection DhcpServerAddresses { get; }
	public abstract IPAddressCollection DnsAddresses { get; }
	public abstract string DnsSuffix { get; }
	public abstract GatewayIPAddressInformationCollection GatewayAddresses { get; }
	public abstract bool IsDnsEnabled { get; }
	public abstract bool IsDynamicDnsEnabled { get; }
	public abstract MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public abstract UnicastIPAddressInformationCollection UnicastAddresses { get; }
	public abstract IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0xF5F4C0 Offset: 0xF5F4C0 VA: 0xF5F4C0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPv4InterfaceProperties GetIPv4Properties();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPv6InterfaceProperties GetIPv6Properties();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IPAddressInformationCollection get_AnycastAddresses();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IPAddressCollection get_DhcpServerAddresses();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract IPAddressCollection get_DnsAddresses();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_DnsSuffix();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract GatewayIPAddressInformationCollection get_GatewayAddresses();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool get_IsDnsEnabled();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool get_IsDynamicDnsEnabled();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract MulticastIPAddressInformationCollection get_MulticastAddresses();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract UnicastIPAddressInformationCollection get_UnicastAddresses();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract IPAddressCollection get_WinsServersAddresses();
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixIPInterfaceProperties : IPInterfaceProperties // TypeDefIndex: 1361
{
	// Fields
	protected IPv4InterfaceProperties ipv4iface_properties; // 0x10
	protected UnixNetworkInterface iface; // 0x18
	private List<IPAddress> addresses; // 0x20
	private IPAddressCollection dns_servers; // 0x28
	private IPAddressCollection gateways; // 0x30
	private string dns_suffix; // 0x38
	private DateTime last_parse; // 0x40
	private static Regex ns; // 0x0
	private static Regex search; // 0x8

	// Properties
	public override IPAddressInformationCollection AnycastAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xC3F454 Offset: 0xC3F454 VA: 0xC3F454
	public override IPAddressCollection DhcpServerAddresses { get; }
	public override IPAddressCollection DnsAddresses { get; }
	public override string DnsSuffix { get; }
	public override GatewayIPAddressInformationCollection GatewayAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xC3F48C Offset: 0xC3F48C VA: 0xC3F48C
	public override bool IsDnsEnabled { get; }
	[MonoTODOAttribute] // RVA: 0xC3F4C4 Offset: 0xC3F4C4 VA: 0xC3F4C4
	public override bool IsDynamicDnsEnabled { get; }
	public override MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public override UnicastIPAddressInformationCollection UnicastAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xC3F4FC Offset: 0xC3F4FC VA: 0xC3F4FC
	public override IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0xF62798 Offset: 0xF62798 VA: 0xF62798
	public void .ctor(UnixNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0xF6E7A0 Offset: 0xF6E7A0 VA: 0xF6E7A0
	private static void .cctor() { }

	// RVA: 0xF6E84C Offset: 0xF6E84C VA: 0xF6E84C Slot: 5
	public override IPv6InterfaceProperties GetIPv6Properties() { }

	// RVA: 0xF6E8B4 Offset: 0xF6E8B4 VA: 0xF6E8B4
	private void ParseRouteInfo(string iface) { }

	// RVA: 0xF6EDE4 Offset: 0xF6EDE4 VA: 0xF6EDE4
	private void ParseResolvConf() { }

	// RVA: 0xF6F570 Offset: 0xF6F570 VA: 0xF6F570 Slot: 6
	public override IPAddressInformationCollection get_AnycastAddresses() { }

	// RVA: 0xF6F5F8 Offset: 0xF6F5F8 VA: 0xF6F5F8 Slot: 7
	public override IPAddressCollection get_DhcpServerAddresses() { }

	// RVA: 0xF6F66C Offset: 0xF6F66C VA: 0xF6F66C Slot: 8
	public override IPAddressCollection get_DnsAddresses() { }

	// RVA: 0xF6F690 Offset: 0xF6F690 VA: 0xF6F690 Slot: 9
	public override string get_DnsSuffix() { }

	// RVA: 0xF6F6B4 Offset: 0xF6F6B4 VA: 0xF6F6B4 Slot: 10
	public override GatewayIPAddressInformationCollection get_GatewayAddresses() { }

	// RVA: 0xF6F7BC Offset: 0xF6F7BC VA: 0xF6F7BC Slot: 11
	public override bool get_IsDnsEnabled() { }

	// RVA: 0xF6F7C4 Offset: 0xF6F7C4 VA: 0xF6F7C4 Slot: 12
	public override bool get_IsDynamicDnsEnabled() { }

	// RVA: 0xF6F7CC Offset: 0xF6F7CC VA: 0xF6F7CC Slot: 13
	public override MulticastIPAddressInformationCollection get_MulticastAddresses() { }

	// RVA: 0xF6FA14 Offset: 0xF6FA14 VA: 0xF6FA14 Slot: 14
	public override UnicastIPAddressInformationCollection get_UnicastAddresses() { }

	// RVA: 0xF6FCA8 Offset: 0xF6FCA8 VA: 0xF6FCA8 Slot: 15
	public override IPAddressCollection get_WinsServersAddresses() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxIPInterfaceProperties : UnixIPInterfaceProperties // TypeDefIndex: 1362
{
	// Methods

	// RVA: 0xF5F814 Offset: 0xF5F814 VA: 0xF5F814
	public void .ctor(LinuxNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0xF5F894 Offset: 0xF5F894 VA: 0xF5F894 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }
}

// Namespace: System.Net.NetworkInformation
internal class MacOsIPInterfaceProperties : UnixIPInterfaceProperties // TypeDefIndex: 1363
{
	// Methods

	// RVA: 0xF62718 Offset: 0xF62718 VA: 0xF62718
	public void .ctor(MacOsNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0xF627D0 Offset: 0xF627D0 VA: 0xF627D0 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPInterfaceProperties2 : IPInterfaceProperties // TypeDefIndex: 1364
{
	// Fields
	private readonly Win32_IP_ADAPTER_ADDRESSES addr; // 0x10
	private readonly Win32_MIB_IFROW mib4; // 0x18
	private readonly Win32_MIB_IFROW mib6; // 0x88

	// Properties
	public override IPAddressInformationCollection AnycastAddresses { get; }
	public override IPAddressCollection DhcpServerAddresses { get; }
	public override IPAddressCollection DnsAddresses { get; }
	public override string DnsSuffix { get; }
	public override GatewayIPAddressInformationCollection GatewayAddresses { get; }
	public override bool IsDnsEnabled { get; }
	public override bool IsDynamicDnsEnabled { get; }
	public override MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public override UnicastIPAddressInformationCollection UnicastAddresses { get; }
	public override IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0xF72F74 Offset: 0xF72F74 VA: 0xF72F74
	public void .ctor(Win32_IP_ADAPTER_ADDRESSES addr, Win32_MIB_IFROW mib4, Win32_MIB_IFROW mib6) { }

	// RVA: 0xF72FD0 Offset: 0xF72FD0 VA: 0xF72FD0 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }

	// RVA: 0xF731FC Offset: 0xF731FC VA: 0xF731FC Slot: 5
	public override IPv6InterfaceProperties GetIPv6Properties() { }

	// RVA: 0xF732D0 Offset: 0xF732D0 VA: 0xF732D0 Slot: 6
	public override IPAddressInformationCollection get_AnycastAddresses() { }

	// RVA: 0xF7334C Offset: 0xF7334C VA: 0xF7334C Slot: 7
	public override IPAddressCollection get_DhcpServerAddresses() { }

	// RVA: 0xF7344C Offset: 0xF7344C VA: 0xF7344C Slot: 8
	public override IPAddressCollection get_DnsAddresses() { }

	// RVA: 0xF734C4 Offset: 0xF734C4 VA: 0xF734C4 Slot: 9
	public override string get_DnsSuffix() { }

	// RVA: 0xF734F0 Offset: 0xF734F0 VA: 0xF734F0 Slot: 10
	public override GatewayIPAddressInformationCollection get_GatewayAddresses() { }

	// RVA: 0xF735F0 Offset: 0xF735F0 VA: 0xF735F0 Slot: 11
	public override bool get_IsDnsEnabled() { }

	// RVA: 0xF73624 Offset: 0xF73624 VA: 0xF73624 Slot: 12
	public override bool get_IsDynamicDnsEnabled() { }

	// RVA: 0xF73660 Offset: 0xF73660 VA: 0xF73660 Slot: 13
	public override MulticastIPAddressInformationCollection get_MulticastAddresses() { }

	// RVA: 0xF736D8 Offset: 0xF736D8 VA: 0xF736D8 Slot: 14
	public override UnicastIPAddressInformationCollection get_UnicastAddresses() { }

	// RVA: 0xF7379C Offset: 0xF7379C VA: 0xF7379C Slot: 15
	public override IPAddressCollection get_WinsServersAddresses() { }
}

// Namespace: System.Net.NetworkInformation
public enum IPStatus // TypeDefIndex: 1365
{
	// Fields
	public int value__; // 0x0
	public const IPStatus Unknown = -1;
	public const IPStatus Success = 0;
	public const IPStatus DestinationNetworkUnreachable = 11002;
	public const IPStatus DestinationHostUnreachable = 11003;
	public const IPStatus DestinationProhibited = 11004;
	public const IPStatus DestinationProtocolUnreachable = 11004;
	public const IPStatus DestinationPortUnreachable = 11005;
	public const IPStatus NoResources = 11006;
	public const IPStatus BadOption = 11007;
	public const IPStatus HardwareError = 11008;
	public const IPStatus PacketTooBig = 11009;
	public const IPStatus TimedOut = 11010;
	public const IPStatus BadRoute = 11012;
	public const IPStatus TtlExpired = 11013;
	public const IPStatus TtlReassemblyTimeExceeded = 11014;
	public const IPStatus ParameterProblem = 11015;
	public const IPStatus SourceQuench = 11016;
	public const IPStatus BadDestination = 11018;
	public const IPStatus DestinationUnreachable = 11040;
	public const IPStatus TimeExceeded = 11041;
	public const IPStatus BadHeader = 11042;
	public const IPStatus UnrecognizedNextHeader = 11043;
	public const IPStatus IcmpError = 11044;
	public const IPStatus DestinationScopeMismatch = 11045;
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv4InterfaceProperties // TypeDefIndex: 1366
{
	// Properties
	public abstract int Index { get; }
	public abstract bool IsAutomaticPrivateAddressingActive { get; }
	public abstract bool IsAutomaticPrivateAddressingEnabled { get; }
	public abstract bool IsDhcpEnabled { get; }
	public abstract bool IsForwardingEnabled { get; }
	public abstract int Mtu { get; }
	public abstract bool UsesWins { get; }

	// Methods

	// RVA: 0xF5F4C8 Offset: 0xF5F4C8 VA: 0xF5F4C8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Index();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsAutomaticPrivateAddressingActive();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsAutomaticPrivateAddressingEnabled();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_IsDhcpEnabled();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_IsForwardingEnabled();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int get_Mtu();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_UsesWins();
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixIPv4InterfaceProperties : IPv4InterfaceProperties // TypeDefIndex: 1367
{
	// Fields
	protected UnixNetworkInterface iface; // 0x10

	// Properties
	public override int Index { get; }
	public override bool IsAutomaticPrivateAddressingActive { get; }
	public override bool IsAutomaticPrivateAddressingEnabled { get; }
	public override bool IsDhcpEnabled { get; }
	public override bool UsesWins { get; }

	// Methods

	// RVA: 0xF628BC Offset: 0xF628BC VA: 0xF628BC
	public void .ctor(UnixNetworkInterface iface) { }

	// RVA: 0xF6FD04 Offset: 0xF6FD04 VA: 0xF6FD04 Slot: 4
	public override int get_Index() { }

	// RVA: 0xF6FD3C Offset: 0xF6FD3C VA: 0xF6FD3C Slot: 5
	public override bool get_IsAutomaticPrivateAddressingActive() { }

	// RVA: 0xF6FD44 Offset: 0xF6FD44 VA: 0xF6FD44 Slot: 6
	public override bool get_IsAutomaticPrivateAddressingEnabled() { }

	// RVA: 0xF6FD4C Offset: 0xF6FD4C VA: 0xF6FD4C Slot: 7
	public override bool get_IsDhcpEnabled() { }

	// RVA: 0xF6FD54 Offset: 0xF6FD54 VA: 0xF6FD54 Slot: 10
	public override bool get_UsesWins() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class LinuxIPv4InterfaceProperties : UnixIPv4InterfaceProperties // TypeDefIndex: 1368
{
	// Properties
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0xF5F950 Offset: 0xF5F950 VA: 0xF5F950
	public void .ctor(LinuxNetworkInterface iface) { }

	// RVA: 0xF5F958 Offset: 0xF5F958 VA: 0xF5F958 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0xF5FA84 Offset: 0xF5FA84 VA: 0xF5FA84 Slot: 9
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class MacOsIPv4InterfaceProperties : UnixIPv4InterfaceProperties // TypeDefIndex: 1369
{
	// Properties
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0xF62890 Offset: 0xF62890 VA: 0xF62890
	public void .ctor(MacOsNetworkInterface iface) { }

	// RVA: 0xF628E8 Offset: 0xF628E8 VA: 0xF628E8 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0xF628F0 Offset: 0xF628F0 VA: 0xF628F0 Slot: 9
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class Win32IPv4InterfaceProperties : IPv4InterfaceProperties // TypeDefIndex: 1370
{
	// Fields
	private Win32_IP_ADAPTER_INFO ainfo; // 0x10
	private Win32_IP_PER_ADAPTER_INFO painfo; // 0x18
	private Win32_MIB_IFROW mib; // 0x20

	// Properties
	public override int Index { get; }
	public override bool IsAutomaticPrivateAddressingActive { get; }
	public override bool IsAutomaticPrivateAddressingEnabled { get; }
	public override bool IsDhcpEnabled { get; }
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }
	public override bool UsesWins { get; }

	// Methods

	// RVA: 0xF730FC Offset: 0xF730FC VA: 0xF730FC
	public void .ctor(Win32_IP_ADAPTER_INFO ainfo, Win32_MIB_IFROW mib) { }

	// RVA: 0xF738D8 Offset: 0xF738D8 VA: 0xF738D8
	private static extern int GetPerAdapterInfo(int IfIndex, Win32_IP_PER_ADAPTER_INFO pPerAdapterInfo, ref int pOutBufLen) { }

	// RVA: 0xF739BC Offset: 0xF739BC VA: 0xF739BC Slot: 4
	public override int get_Index() { }

	// RVA: 0xF739C4 Offset: 0xF739C4 VA: 0xF739C4 Slot: 5
	public override bool get_IsAutomaticPrivateAddressingActive() { }

	// RVA: 0xF739F8 Offset: 0xF739F8 VA: 0xF739F8 Slot: 6
	public override bool get_IsAutomaticPrivateAddressingEnabled() { }

	// RVA: 0xF73A2C Offset: 0xF73A2C VA: 0xF73A2C Slot: 7
	public override bool get_IsDhcpEnabled() { }

	// RVA: 0xF73A60 Offset: 0xF73A60 VA: 0xF73A60 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0xF73A94 Offset: 0xF73A94 VA: 0xF73A94 Slot: 9
	public override int get_Mtu() { }

	// RVA: 0xF73A9C Offset: 0xF73A9C VA: 0xF73A9C Slot: 10
	public override bool get_UsesWins() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_PER_ADAPTER_INFO // TypeDefIndex: 1371
{
	// Fields
	public uint AutoconfigEnabled; // 0x10
	public uint AutoconfigActive; // 0x14
	public IntPtr CurrentDnsServer; // 0x18
	public Win32_IP_ADDR_STRING DnsServerList; // 0x20

	// Methods

	// RVA: 0xF739B4 Offset: 0xF739B4 VA: 0xF739B4
	public void .ctor() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv4InterfaceStatistics // TypeDefIndex: 1372
{
	// Properties
	public abstract long BytesReceived { get; }
	public abstract long BytesSent { get; }
	public abstract long IncomingPacketsDiscarded { get; }
	public abstract long IncomingPacketsWithErrors { get; }
	public abstract long IncomingUnknownProtocolPackets { get; }
	public abstract long NonUnicastPacketsReceived { get; }
	public abstract long NonUnicastPacketsSent { get; }
	public abstract long OutgoingPacketsDiscarded { get; }
	public abstract long OutgoingPacketsWithErrors { get; }
	[MonoTODOAttribute] // RVA: 0xC3F534 Offset: 0xC3F534 VA: 0xC3F534
	public abstract long OutputQueueLength { get; }
	public abstract long UnicastPacketsReceived { get; }
	public abstract long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0xF5F4D0 Offset: 0xF5F4D0 VA: 0xF5F4D0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_BytesReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_BytesSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_IncomingPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_IncomingPacketsWithErrors();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_IncomingUnknownProtocolPackets();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_NonUnicastPacketsReceived();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_NonUnicastPacketsSent();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_OutgoingPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_OutgoingPacketsWithErrors();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_OutputQueueLength();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_UnicastPacketsReceived();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_UnicastPacketsSent();
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1373
{
	// Fields
	private Win32_MIB_IFROW info; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0xF73AC8 Offset: 0xF73AC8 VA: 0xF73AC8
	public void .ctor(Win32_MIB_IFROW info) { }

	// RVA: 0xF73B00 Offset: 0xF73B00 VA: 0xF73B00 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0xF73B08 Offset: 0xF73B08 VA: 0xF73B08 Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0xF73B10 Offset: 0xF73B10 VA: 0xF73B10 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0xF73B18 Offset: 0xF73B18 VA: 0xF73B18 Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0xF73B20 Offset: 0xF73B20 VA: 0xF73B20 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0xF73B28 Offset: 0xF73B28 VA: 0xF73B28 Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0xF73B30 Offset: 0xF73B30 VA: 0xF73B30 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0xF73B38 Offset: 0xF73B38 VA: 0xF73B38 Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0xF73B40 Offset: 0xF73B40 VA: 0xF73B40 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0xF73B48 Offset: 0xF73B48 VA: 0xF73B48 Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0xF73B50 Offset: 0xF73B50 VA: 0xF73B50 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0xF73B58 Offset: 0xF73B58 VA: 0xF73B58 Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxIPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1374
{
	// Fields
	private LinuxNetworkInterface linux; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0xF5FC24 Offset: 0xF5FC24 VA: 0xF5FC24
	public void .ctor(LinuxNetworkInterface parent) { }

	// RVA: 0xF5FC50 Offset: 0xF5FC50 VA: 0xF5FC50
	private long Read(string file) { }

	// RVA: 0xF5FD98 Offset: 0xF5FD98 VA: 0xF5FD98 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0xF5FDE8 Offset: 0xF5FDE8 VA: 0xF5FDE8 Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0xF5FE38 Offset: 0xF5FE38 VA: 0xF5FE38 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0xF5FE88 Offset: 0xF5FE88 VA: 0xF5FE88 Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0xF5FED8 Offset: 0xF5FED8 VA: 0xF5FED8 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0xF5FEE0 Offset: 0xF5FEE0 VA: 0xF5FEE0 Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0xF5FF30 Offset: 0xF5FF30 VA: 0xF5FF30 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0xF5FF80 Offset: 0xF5FF80 VA: 0xF5FF80 Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0xF5FFD0 Offset: 0xF5FFD0 VA: 0xF5FFD0 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0xF60020 Offset: 0xF60020 VA: 0xF60020 Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0xF60028 Offset: 0xF60028 VA: 0xF60028 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0xF60078 Offset: 0xF60078 VA: 0xF60078 Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class MacOsIPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1375
{
	// Fields
	private MacOsNetworkInterface macos; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0xF628F8 Offset: 0xF628F8 VA: 0xF628F8
	public void .ctor(MacOsNetworkInterface parent) { }

	// RVA: 0xF62924 Offset: 0xF62924 VA: 0xF62924 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0xF6292C Offset: 0xF6292C VA: 0xF6292C Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0xF62934 Offset: 0xF62934 VA: 0xF62934 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0xF6293C Offset: 0xF6293C VA: 0xF6293C Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0xF62944 Offset: 0xF62944 VA: 0xF62944 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0xF6294C Offset: 0xF6294C VA: 0xF6294C Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0xF62954 Offset: 0xF62954 VA: 0xF62954 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0xF6295C Offset: 0xF6295C VA: 0xF6295C Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0xF62964 Offset: 0xF62964 VA: 0xF62964 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0xF6296C Offset: 0xF6296C VA: 0xF6296C Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0xF62974 Offset: 0xF62974 VA: 0xF62974 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0xF6297C Offset: 0xF6297C VA: 0xF6297C Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv6InterfaceProperties // TypeDefIndex: 1376
{
	// Properties
	public abstract int Index { get; }
	public abstract int Mtu { get; }

	// Methods

	// RVA: 0xF5F4D8 Offset: 0xF5F4D8 VA: 0xF5F4D8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Index();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_Mtu();
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPv6InterfaceProperties : IPv6InterfaceProperties // TypeDefIndex: 1377
{
	// Fields
	private Win32_MIB_IFROW mib; // 0x10

	// Properties
	public override int Index { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0xF73298 Offset: 0xF73298 VA: 0xF73298
	public void .ctor(Win32_MIB_IFROW mib) { }

	// RVA: 0xF73B60 Offset: 0xF73B60 VA: 0xF73B60 Slot: 4
	public override int get_Index() { }

	// RVA: 0xF73B68 Offset: 0xF73B68 VA: 0xF73B68 Slot: 5
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IcmpV4Statistics // TypeDefIndex: 1378
{
	// Properties
	public abstract long AddressMaskRepliesReceived { get; }
	public abstract long AddressMaskRepliesSent { get; }
	public abstract long AddressMaskRequestsReceived { get; }
	public abstract long AddressMaskRequestsSent { get; }
	public abstract long DestinationUnreachableMessagesReceived { get; }
	public abstract long DestinationUnreachableMessagesSent { get; }
	public abstract long EchoRepliesReceived { get; }
	public abstract long EchoRepliesSent { get; }
	public abstract long EchoRequestsReceived { get; }
	public abstract long EchoRequestsSent { get; }
	public abstract long ErrorsReceived { get; }
	public abstract long ErrorsSent { get; }
	public abstract long MessagesReceived { get; }
	public abstract long MessagesSent { get; }
	public abstract long ParameterProblemsReceived { get; }
	public abstract long ParameterProblemsSent { get; }
	public abstract long RedirectsReceived { get; }
	public abstract long RedirectsSent { get; }
	public abstract long SourceQuenchesReceived { get; }
	public abstract long SourceQuenchesSent { get; }
	public abstract long TimeExceededMessagesReceived { get; }
	public abstract long TimeExceededMessagesSent { get; }
	public abstract long TimestampRepliesReceived { get; }
	public abstract long TimestampRepliesSent { get; }
	public abstract long TimestampRequestsReceived { get; }
	public abstract long TimestampRequestsSent { get; }

	// Methods

	// RVA: 0xF5F4E0 Offset: 0xF5F4E0 VA: 0xF5F4E0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_AddressMaskRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_AddressMaskRepliesSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_AddressMaskRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_AddressMaskRequestsSent();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_DestinationUnreachableMessagesReceived();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_DestinationUnreachableMessagesSent();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_EchoRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_EchoRepliesSent();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_EchoRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_EchoRequestsSent();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_ErrorsReceived();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_ErrorsSent();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long get_MessagesReceived();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract long get_MessagesSent();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract long get_ParameterProblemsReceived();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract long get_ParameterProblemsSent();

	// RVA: -1 Offset: -1 Slot: 20
	public abstract long get_RedirectsReceived();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract long get_RedirectsSent();

	// RVA: -1 Offset: -1 Slot: 22
	public abstract long get_SourceQuenchesReceived();

	// RVA: -1 Offset: -1 Slot: 23
	public abstract long get_SourceQuenchesSent();

	// RVA: -1 Offset: -1 Slot: 24
	public abstract long get_TimeExceededMessagesReceived();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract long get_TimeExceededMessagesSent();

	// RVA: -1 Offset: -1 Slot: 26
	public abstract long get_TimestampRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract long get_TimestampRepliesSent();

	// RVA: -1 Offset: -1 Slot: 28
	public abstract long get_TimestampRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 29
	public abstract long get_TimestampRequestsSent();
}

// Namespace: System.Net.NetworkInformation
internal class MibIcmpV4Statistics : IcmpV4Statistics // TypeDefIndex: 1379
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override long AddressMaskRepliesReceived { get; }
	public override long AddressMaskRepliesSent { get; }
	public override long AddressMaskRequestsReceived { get; }
	public override long AddressMaskRequestsSent { get; }
	public override long DestinationUnreachableMessagesReceived { get; }
	public override long DestinationUnreachableMessagesSent { get; }
	public override long EchoRepliesReceived { get; }
	public override long EchoRepliesSent { get; }
	public override long EchoRequestsReceived { get; }
	public override long EchoRequestsSent { get; }
	public override long ErrorsReceived { get; }
	public override long ErrorsSent { get; }
	public override long MessagesReceived { get; }
	public override long MessagesSent { get; }
	public override long ParameterProblemsReceived { get; }
	public override long ParameterProblemsSent { get; }
	public override long RedirectsReceived { get; }
	public override long RedirectsSent { get; }
	public override long SourceQuenchesReceived { get; }
	public override long SourceQuenchesSent { get; }
	public override long TimeExceededMessagesReceived { get; }
	public override long TimeExceededMessagesSent { get; }
	public override long TimestampRepliesReceived { get; }
	public override long TimestampRepliesSent { get; }
	public override long TimestampRequestsReceived { get; }
	public override long TimestampRequestsSent { get; }

	// Methods

	// RVA: 0xF64F60 Offset: 0xF64F60 VA: 0xF64F60
	public void .ctor(StringDictionary dic) { }

	// RVA: 0xF65E9C Offset: 0xF65E9C VA: 0xF65E9C
	private long Get(string name) { }

	// RVA: 0xF65F80 Offset: 0xF65F80 VA: 0xF65F80 Slot: 4
	public override long get_AddressMaskRepliesReceived() { }

	// RVA: 0xF65FD0 Offset: 0xF65FD0 VA: 0xF65FD0 Slot: 5
