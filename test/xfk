
	// RVA: 0x1FFB79C Offset: 0x1FFB79C VA: 0x1FFB79C Slot: 18
	public override long get_PacketsReassembled() { }

	// RVA: 0x1FFB7EC Offset: 0x1FFB7EC VA: 0x1FFB7EC Slot: 19
	public override long get_ReceivedPackets() { }

	// RVA: 0x1FFB83C Offset: 0x1FFB83C VA: 0x1FFB83C Slot: 20
	public override long get_ReceivedPacketsDelivered() { }

	// RVA: 0x1FFB88C Offset: 0x1FFB88C VA: 0x1FFB88C Slot: 21
	public override long get_ReceivedPacketsDiscarded() { }

	// RVA: 0x1FFB8DC Offset: 0x1FFB8DC VA: 0x1FFB8DC Slot: 22
	public override long get_ReceivedPacketsForwarded() { }

	// RVA: 0x1FFB92C Offset: 0x1FFB92C VA: 0x1FFB92C Slot: 23
	public override long get_ReceivedPacketsWithAddressErrors() { }

	// RVA: 0x1FFB97C Offset: 0x1FFB97C VA: 0x1FFB97C Slot: 24
	public override long get_ReceivedPacketsWithHeadersErrors() { }

	// RVA: 0x1FFB9CC Offset: 0x1FFB9CC VA: 0x1FFB9CC Slot: 25
	public override long get_ReceivedPacketsWithUnknownProtocol() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPGlobalStatistics : IPGlobalStatistics // TypeDefIndex: 1358
{
	// Fields
	private Win32_MIB_IPSTATS info; // 0x10

	// Properties
	public override int DefaultTtl { get; }
	public override bool ForwardingEnabled { get; }
	public override int NumberOfInterfaces { get; }
	public override int NumberOfIPAddresses { get; }
	public override int NumberOfRoutes { get; }
	public override long OutputPacketRequests { get; }
	public override long OutputPacketRoutingDiscards { get; }
	public override long OutputPacketsDiscarded { get; }
	public override long OutputPacketsWithNoRoute { get; }
	public override long PacketFragmentFailures { get; }
	public override long PacketReassembliesRequired { get; }
	public override long PacketReassemblyFailures { get; }
	public override long PacketReassemblyTimeout { get; }
	public override long PacketsFragmented { get; }
	public override long PacketsReassembled { get; }
	public override long ReceivedPackets { get; }
	public override long ReceivedPacketsDelivered { get; }
	public override long ReceivedPacketsDiscarded { get; }
	public override long ReceivedPacketsForwarded { get; }
	public override long ReceivedPacketsWithAddressErrors { get; }
	public override long ReceivedPacketsWithHeadersErrors { get; }
	public override long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0x20080A0 Offset: 0x20080A0 VA: 0x20080A0
	public void .ctor(Win32_MIB_IPSTATS info) { }

	// RVA: 0x2008A3C Offset: 0x2008A3C VA: 0x2008A3C Slot: 4
	public override int get_DefaultTtl() { }

	// RVA: 0x2008A44 Offset: 0x2008A44 VA: 0x2008A44 Slot: 5
	public override bool get_ForwardingEnabled() { }

	// RVA: 0x2008A54 Offset: 0x2008A54 VA: 0x2008A54 Slot: 6
	public override int get_NumberOfInterfaces() { }

	// RVA: 0x2008A5C Offset: 0x2008A5C VA: 0x2008A5C Slot: 7
	public override int get_NumberOfIPAddresses() { }

	// RVA: 0x2008A64 Offset: 0x2008A64 VA: 0x2008A64 Slot: 8
	public override int get_NumberOfRoutes() { }

	// RVA: 0x2008A6C Offset: 0x2008A6C VA: 0x2008A6C Slot: 9
	public override long get_OutputPacketRequests() { }

	// RVA: 0x2008A74 Offset: 0x2008A74 VA: 0x2008A74 Slot: 10
	public override long get_OutputPacketRoutingDiscards() { }

	// RVA: 0x2008A7C Offset: 0x2008A7C VA: 0x2008A7C Slot: 11
	public override long get_OutputPacketsDiscarded() { }

	// RVA: 0x2008A84 Offset: 0x2008A84 VA: 0x2008A84 Slot: 12
	public override long get_OutputPacketsWithNoRoute() { }

	// RVA: 0x2008A8C Offset: 0x2008A8C VA: 0x2008A8C Slot: 13
	public override long get_PacketFragmentFailures() { }

	// RVA: 0x2008A94 Offset: 0x2008A94 VA: 0x2008A94 Slot: 14
	public override long get_PacketReassembliesRequired() { }

	// RVA: 0x2008A9C Offset: 0x2008A9C VA: 0x2008A9C Slot: 15
	public override long get_PacketReassemblyFailures() { }

	// RVA: 0x2008AA4 Offset: 0x2008AA4 VA: 0x2008AA4 Slot: 16
	public override long get_PacketReassemblyTimeout() { }

	// RVA: 0x2008AAC Offset: 0x2008AAC VA: 0x2008AAC Slot: 17
	public override long get_PacketsFragmented() { }

	// RVA: 0x2008AB4 Offset: 0x2008AB4 VA: 0x2008AB4 Slot: 18
	public override long get_PacketsReassembled() { }

	// RVA: 0x2008ABC Offset: 0x2008ABC VA: 0x2008ABC Slot: 19
	public override long get_ReceivedPackets() { }

	// RVA: 0x2008AC4 Offset: 0x2008AC4 VA: 0x2008AC4 Slot: 20
	public override long get_ReceivedPacketsDelivered() { }

	// RVA: 0x2008ACC Offset: 0x2008ACC VA: 0x2008ACC Slot: 21
	public override long get_ReceivedPacketsDiscarded() { }

	// RVA: 0x2008AD4 Offset: 0x2008AD4 VA: 0x2008AD4 Slot: 22
	public override long get_ReceivedPacketsForwarded() { }

	// RVA: 0x2008ADC Offset: 0x2008ADC VA: 0x2008ADC Slot: 23
	public override long get_ReceivedPacketsWithAddressErrors() { }

	// RVA: 0x2008AE4 Offset: 0x2008AE4 VA: 0x2008AE4 Slot: 24
	public override long get_ReceivedPacketsWithHeadersErrors() { }

	// RVA: 0x2008AEC Offset: 0x2008AEC VA: 0x2008AEC Slot: 25
	public override long get_ReceivedPacketsWithUnknownProtocol() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_IPSTATS // TypeDefIndex: 1359
{
	// Fields
	public int Forwarding; // 0x0
	public int DefaultTTL; // 0x4
	public uint InReceives; // 0x8
	public uint InHdrErrors; // 0xC
	public uint InAddrErrors; // 0x10
	public uint ForwDatagrams; // 0x14
	public uint InUnknownProtos; // 0x18
	public uint InDiscards; // 0x1C
	public uint InDelivers; // 0x20
	public uint OutRequests; // 0x24
	public uint RoutingDiscards; // 0x28
	public uint OutDiscards; // 0x2C
	public uint OutNoRoutes; // 0x30
	public uint ReasmTimeout; // 0x34
	public uint ReasmReqds; // 0x38
	public uint ReasmOks; // 0x3C
	public uint ReasmFails; // 0x40
	public uint FragOks; // 0x44
	public uint FragFails; // 0x48
	public uint FragCreates; // 0x4C
	public int NumIf; // 0x50
	public int NumAddr; // 0x54
	public int NumRoutes; // 0x58
}

// Namespace: System.Net.NetworkInformation
public abstract class IPInterfaceProperties // TypeDefIndex: 1360
{
	// Properties
	public abstract IPAddressInformationCollection AnycastAddresses { get; }
	public abstract IPAddressCollection DhcpServerAddresses { get; }
	public abstract IPAddressCollection DnsAddresses { get; }
	public abstract string DnsSuffix { get; }
	public abstract GatewayIPAddressInformationCollection GatewayAddresses { get; }
	public abstract bool IsDnsEnabled { get; }
	public abstract bool IsDynamicDnsEnabled { get; }
	public abstract MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public abstract UnicastIPAddressInformationCollection UnicastAddresses { get; }
	public abstract IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0x1FF5040 Offset: 0x1FF5040 VA: 0x1FF5040
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPv4InterfaceProperties GetIPv4Properties();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPv6InterfaceProperties GetIPv6Properties();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IPAddressInformationCollection get_AnycastAddresses();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IPAddressCollection get_DhcpServerAddresses();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract IPAddressCollection get_DnsAddresses();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_DnsSuffix();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract GatewayIPAddressInformationCollection get_GatewayAddresses();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool get_IsDnsEnabled();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool get_IsDynamicDnsEnabled();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract MulticastIPAddressInformationCollection get_MulticastAddresses();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract UnicastIPAddressInformationCollection get_UnicastAddresses();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract IPAddressCollection get_WinsServersAddresses();
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixIPInterfaceProperties : IPInterfaceProperties // TypeDefIndex: 1361
{
	// Fields
	protected IPv4InterfaceProperties ipv4iface_properties; // 0x10
	protected UnixNetworkInterface iface; // 0x18
	private List<IPAddress> addresses; // 0x20
	private IPAddressCollection dns_servers; // 0x28
	private IPAddressCollection gateways; // 0x30
	private string dns_suffix; // 0x38
	private DateTime last_parse; // 0x40
	private static Regex ns; // 0x0
	private static Regex search; // 0x8

	// Properties
	public override IPAddressInformationCollection AnycastAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xBD332C Offset: 0xBD332C VA: 0xBD332C
	public override IPAddressCollection DhcpServerAddresses { get; }
	public override IPAddressCollection DnsAddresses { get; }
	public override string DnsSuffix { get; }
	public override GatewayIPAddressInformationCollection GatewayAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xBD3364 Offset: 0xBD3364 VA: 0xBD3364
	public override bool IsDnsEnabled { get; }
	[MonoTODOAttribute] // RVA: 0xBD339C Offset: 0xBD339C VA: 0xBD339C
	public override bool IsDynamicDnsEnabled { get; }
	public override MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public override UnicastIPAddressInformationCollection UnicastAddresses { get; }
	[MonoTODOAttribute] // RVA: 0xBD33D4 Offset: 0xBD33D4 VA: 0xBD33D4
	public override IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0x1FF8318 Offset: 0x1FF8318 VA: 0x1FF8318
	public void .ctor(UnixNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0x2004320 Offset: 0x2004320 VA: 0x2004320
	private static void .cctor() { }

	// RVA: 0x20043CC Offset: 0x20043CC VA: 0x20043CC Slot: 5
	public override IPv6InterfaceProperties GetIPv6Properties() { }

	// RVA: 0x2004434 Offset: 0x2004434 VA: 0x2004434
	private void ParseRouteInfo(string iface) { }

	// RVA: 0x2004964 Offset: 0x2004964 VA: 0x2004964
	private void ParseResolvConf() { }

	// RVA: 0x20050F0 Offset: 0x20050F0 VA: 0x20050F0 Slot: 6
	public override IPAddressInformationCollection get_AnycastAddresses() { }

	// RVA: 0x2005178 Offset: 0x2005178 VA: 0x2005178 Slot: 7
	public override IPAddressCollection get_DhcpServerAddresses() { }

	// RVA: 0x20051EC Offset: 0x20051EC VA: 0x20051EC Slot: 8
	public override IPAddressCollection get_DnsAddresses() { }

	// RVA: 0x2005210 Offset: 0x2005210 VA: 0x2005210 Slot: 9
	public override string get_DnsSuffix() { }

	// RVA: 0x2005234 Offset: 0x2005234 VA: 0x2005234 Slot: 10
	public override GatewayIPAddressInformationCollection get_GatewayAddresses() { }

	// RVA: 0x200533C Offset: 0x200533C VA: 0x200533C Slot: 11
	public override bool get_IsDnsEnabled() { }

	// RVA: 0x2005344 Offset: 0x2005344 VA: 0x2005344 Slot: 12
	public override bool get_IsDynamicDnsEnabled() { }

	// RVA: 0x200534C Offset: 0x200534C VA: 0x200534C Slot: 13
	public override MulticastIPAddressInformationCollection get_MulticastAddresses() { }

	// RVA: 0x2005594 Offset: 0x2005594 VA: 0x2005594 Slot: 14
	public override UnicastIPAddressInformationCollection get_UnicastAddresses() { }

	// RVA: 0x2005828 Offset: 0x2005828 VA: 0x2005828 Slot: 15
	public override IPAddressCollection get_WinsServersAddresses() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxIPInterfaceProperties : UnixIPInterfaceProperties // TypeDefIndex: 1362
{
	// Methods

	// RVA: 0x1FF5394 Offset: 0x1FF5394 VA: 0x1FF5394
	public void .ctor(LinuxNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0x1FF5414 Offset: 0x1FF5414 VA: 0x1FF5414 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }
}

// Namespace: System.Net.NetworkInformation
internal class MacOsIPInterfaceProperties : UnixIPInterfaceProperties // TypeDefIndex: 1363
{
	// Methods

	// RVA: 0x1FF8298 Offset: 0x1FF8298 VA: 0x1FF8298
	public void .ctor(MacOsNetworkInterface iface, List<IPAddress> addresses) { }

	// RVA: 0x1FF8350 Offset: 0x1FF8350 VA: 0x1FF8350 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPInterfaceProperties2 : IPInterfaceProperties // TypeDefIndex: 1364
{
	// Fields
	private readonly Win32_IP_ADAPTER_ADDRESSES addr; // 0x10
	private readonly Win32_MIB_IFROW mib4; // 0x18
	private readonly Win32_MIB_IFROW mib6; // 0x88

	// Properties
	public override IPAddressInformationCollection AnycastAddresses { get; }
	public override IPAddressCollection DhcpServerAddresses { get; }
	public override IPAddressCollection DnsAddresses { get; }
	public override string DnsSuffix { get; }
	public override GatewayIPAddressInformationCollection GatewayAddresses { get; }
	public override bool IsDnsEnabled { get; }
	public override bool IsDynamicDnsEnabled { get; }
	public override MulticastIPAddressInformationCollection MulticastAddresses { get; }
	public override UnicastIPAddressInformationCollection UnicastAddresses { get; }
	public override IPAddressCollection WinsServersAddresses { get; }

	// Methods

	// RVA: 0x2008AF4 Offset: 0x2008AF4 VA: 0x2008AF4
	public void .ctor(Win32_IP_ADAPTER_ADDRESSES addr, Win32_MIB_IFROW mib4, Win32_MIB_IFROW mib6) { }

	// RVA: 0x2008B50 Offset: 0x2008B50 VA: 0x2008B50 Slot: 4
	public override IPv4InterfaceProperties GetIPv4Properties() { }

	// RVA: 0x2008D7C Offset: 0x2008D7C VA: 0x2008D7C Slot: 5
	public override IPv6InterfaceProperties GetIPv6Properties() { }

	// RVA: 0x2008E50 Offset: 0x2008E50 VA: 0x2008E50 Slot: 6
	public override IPAddressInformationCollection get_AnycastAddresses() { }

	// RVA: 0x2008ECC Offset: 0x2008ECC VA: 0x2008ECC Slot: 7
	public override IPAddressCollection get_DhcpServerAddresses() { }

	// RVA: 0x2008FCC Offset: 0x2008FCC VA: 0x2008FCC Slot: 8
	public override IPAddressCollection get_DnsAddresses() { }

	// RVA: 0x2009044 Offset: 0x2009044 VA: 0x2009044 Slot: 9
	public override string get_DnsSuffix() { }

	// RVA: 0x2009070 Offset: 0x2009070 VA: 0x2009070 Slot: 10
	public override GatewayIPAddressInformationCollection get_GatewayAddresses() { }

	// RVA: 0x2009170 Offset: 0x2009170 VA: 0x2009170 Slot: 11
	public override bool get_IsDnsEnabled() { }

	// RVA: 0x20091A4 Offset: 0x20091A4 VA: 0x20091A4 Slot: 12
	public override bool get_IsDynamicDnsEnabled() { }

	// RVA: 0x20091E0 Offset: 0x20091E0 VA: 0x20091E0 Slot: 13
	public override MulticastIPAddressInformationCollection get_MulticastAddresses() { }

	// RVA: 0x2009258 Offset: 0x2009258 VA: 0x2009258 Slot: 14
	public override UnicastIPAddressInformationCollection get_UnicastAddresses() { }

	// RVA: 0x200931C Offset: 0x200931C VA: 0x200931C Slot: 15
	public override IPAddressCollection get_WinsServersAddresses() { }
}

// Namespace: System.Net.NetworkInformation
public enum IPStatus // TypeDefIndex: 1365
{
	// Fields
	public int value__; // 0x0
	public const IPStatus Unknown = -1;
	public const IPStatus Success = 0;
	public const IPStatus DestinationNetworkUnreachable = 11002;
	public const IPStatus DestinationHostUnreachable = 11003;
	public const IPStatus DestinationProhibited = 11004;
	public const IPStatus DestinationProtocolUnreachable = 11004;
	public const IPStatus DestinationPortUnreachable = 11005;
	public const IPStatus NoResources = 11006;
	public const IPStatus BadOption = 11007;
	public const IPStatus HardwareError = 11008;
	public const IPStatus PacketTooBig = 11009;
	public const IPStatus TimedOut = 11010;
	public const IPStatus BadRoute = 11012;
	public const IPStatus TtlExpired = 11013;
	public const IPStatus TtlReassemblyTimeExceeded = 11014;
	public const IPStatus ParameterProblem = 11015;
	public const IPStatus SourceQuench = 11016;
	public const IPStatus BadDestination = 11018;
	public const IPStatus DestinationUnreachable = 11040;
	public const IPStatus TimeExceeded = 11041;
	public const IPStatus BadHeader = 11042;
	public const IPStatus UnrecognizedNextHeader = 11043;
	public const IPStatus IcmpError = 11044;
	public const IPStatus DestinationScopeMismatch = 11045;
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv4InterfaceProperties // TypeDefIndex: 1366
{
	// Properties
	public abstract int Index { get; }
	public abstract bool IsAutomaticPrivateAddressingActive { get; }
	public abstract bool IsAutomaticPrivateAddressingEnabled { get; }
	public abstract bool IsDhcpEnabled { get; }
	public abstract bool IsForwardingEnabled { get; }
	public abstract int Mtu { get; }
	public abstract bool UsesWins { get; }

	// Methods

	// RVA: 0x1FF5048 Offset: 0x1FF5048 VA: 0x1FF5048
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Index();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsAutomaticPrivateAddressingActive();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsAutomaticPrivateAddressingEnabled();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_IsDhcpEnabled();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_IsForwardingEnabled();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int get_Mtu();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_UsesWins();
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixIPv4InterfaceProperties : IPv4InterfaceProperties // TypeDefIndex: 1367
{
	// Fields
	protected UnixNetworkInterface iface; // 0x10

	// Properties
	public override int Index { get; }
	public override bool IsAutomaticPrivateAddressingActive { get; }
	public override bool IsAutomaticPrivateAddressingEnabled { get; }
	public override bool IsDhcpEnabled { get; }
	public override bool UsesWins { get; }

	// Methods

	// RVA: 0x1FF843C Offset: 0x1FF843C VA: 0x1FF843C
	public void .ctor(UnixNetworkInterface iface) { }

	// RVA: 0x2005884 Offset: 0x2005884 VA: 0x2005884 Slot: 4
	public override int get_Index() { }

	// RVA: 0x20058BC Offset: 0x20058BC VA: 0x20058BC Slot: 5
	public override bool get_IsAutomaticPrivateAddressingActive() { }

	// RVA: 0x20058C4 Offset: 0x20058C4 VA: 0x20058C4 Slot: 6
	public override bool get_IsAutomaticPrivateAddressingEnabled() { }

	// RVA: 0x20058CC Offset: 0x20058CC VA: 0x20058CC Slot: 7
	public override bool get_IsDhcpEnabled() { }

	// RVA: 0x20058D4 Offset: 0x20058D4 VA: 0x20058D4 Slot: 10
	public override bool get_UsesWins() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class LinuxIPv4InterfaceProperties : UnixIPv4InterfaceProperties // TypeDefIndex: 1368
{
	// Properties
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0x1FF54D0 Offset: 0x1FF54D0 VA: 0x1FF54D0
	public void .ctor(LinuxNetworkInterface iface) { }

	// RVA: 0x1FF54D8 Offset: 0x1FF54D8 VA: 0x1FF54D8 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0x1FF5604 Offset: 0x1FF5604 VA: 0x1FF5604 Slot: 9
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class MacOsIPv4InterfaceProperties : UnixIPv4InterfaceProperties // TypeDefIndex: 1369
{
	// Properties
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0x1FF8410 Offset: 0x1FF8410 VA: 0x1FF8410
	public void .ctor(MacOsNetworkInterface iface) { }

	// RVA: 0x1FF8468 Offset: 0x1FF8468 VA: 0x1FF8468 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0x1FF8470 Offset: 0x1FF8470 VA: 0x1FF8470 Slot: 9
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
internal sealed class Win32IPv4InterfaceProperties : IPv4InterfaceProperties // TypeDefIndex: 1370
{
	// Fields
	private Win32_IP_ADAPTER_INFO ainfo; // 0x10
	private Win32_IP_PER_ADAPTER_INFO painfo; // 0x18
	private Win32_MIB_IFROW mib; // 0x20

	// Properties
	public override int Index { get; }
	public override bool IsAutomaticPrivateAddressingActive { get; }
	public override bool IsAutomaticPrivateAddressingEnabled { get; }
	public override bool IsDhcpEnabled { get; }
	public override bool IsForwardingEnabled { get; }
	public override int Mtu { get; }
	public override bool UsesWins { get; }

	// Methods

	// RVA: 0x2008C7C Offset: 0x2008C7C VA: 0x2008C7C
	public void .ctor(Win32_IP_ADAPTER_INFO ainfo, Win32_MIB_IFROW mib) { }

	// RVA: 0x2009458 Offset: 0x2009458 VA: 0x2009458
	private static extern int GetPerAdapterInfo(int IfIndex, Win32_IP_PER_ADAPTER_INFO pPerAdapterInfo, ref int pOutBufLen) { }

	// RVA: 0x200953C Offset: 0x200953C VA: 0x200953C Slot: 4
	public override int get_Index() { }

	// RVA: 0x2009544 Offset: 0x2009544 VA: 0x2009544 Slot: 5
	public override bool get_IsAutomaticPrivateAddressingActive() { }

	// RVA: 0x2009578 Offset: 0x2009578 VA: 0x2009578 Slot: 6
	public override bool get_IsAutomaticPrivateAddressingEnabled() { }

	// RVA: 0x20095AC Offset: 0x20095AC VA: 0x20095AC Slot: 7
	public override bool get_IsDhcpEnabled() { }

	// RVA: 0x20095E0 Offset: 0x20095E0 VA: 0x20095E0 Slot: 8
	public override bool get_IsForwardingEnabled() { }

	// RVA: 0x2009614 Offset: 0x2009614 VA: 0x2009614 Slot: 9
	public override int get_Mtu() { }

	// RVA: 0x200961C Offset: 0x200961C VA: 0x200961C Slot: 10
	public override bool get_UsesWins() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_PER_ADAPTER_INFO // TypeDefIndex: 1371
{
	// Fields
	public uint AutoconfigEnabled; // 0x10
	public uint AutoconfigActive; // 0x14
	public IntPtr CurrentDnsServer; // 0x18
	public Win32_IP_ADDR_STRING DnsServerList; // 0x20

	// Methods

	// RVA: 0x2009534 Offset: 0x2009534 VA: 0x2009534
	public void .ctor() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv4InterfaceStatistics // TypeDefIndex: 1372
{
	// Properties
	public abstract long BytesReceived { get; }
	public abstract long BytesSent { get; }
	public abstract long IncomingPacketsDiscarded { get; }
	public abstract long IncomingPacketsWithErrors { get; }
	public abstract long IncomingUnknownProtocolPackets { get; }
	public abstract long NonUnicastPacketsReceived { get; }
	public abstract long NonUnicastPacketsSent { get; }
	public abstract long OutgoingPacketsDiscarded { get; }
	public abstract long OutgoingPacketsWithErrors { get; }
	[MonoTODOAttribute] // RVA: 0xBD340C Offset: 0xBD340C VA: 0xBD340C
	public abstract long OutputQueueLength { get; }
	public abstract long UnicastPacketsReceived { get; }
	public abstract long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0x1FF5050 Offset: 0x1FF5050 VA: 0x1FF5050
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_BytesReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_BytesSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_IncomingPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_IncomingPacketsWithErrors();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_IncomingUnknownProtocolPackets();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_NonUnicastPacketsReceived();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_NonUnicastPacketsSent();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_OutgoingPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_OutgoingPacketsWithErrors();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_OutputQueueLength();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_UnicastPacketsReceived();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_UnicastPacketsSent();
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1373
{
	// Fields
	private Win32_MIB_IFROW info; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0x2009648 Offset: 0x2009648 VA: 0x2009648
	public void .ctor(Win32_MIB_IFROW info) { }

	// RVA: 0x2009680 Offset: 0x2009680 VA: 0x2009680 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0x2009688 Offset: 0x2009688 VA: 0x2009688 Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0x2009690 Offset: 0x2009690 VA: 0x2009690 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0x2009698 Offset: 0x2009698 VA: 0x2009698 Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0x20096A0 Offset: 0x20096A0 VA: 0x20096A0 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0x20096A8 Offset: 0x20096A8 VA: 0x20096A8 Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0x20096B0 Offset: 0x20096B0 VA: 0x20096B0 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0x20096B8 Offset: 0x20096B8 VA: 0x20096B8 Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0x20096C0 Offset: 0x20096C0 VA: 0x20096C0 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0x20096C8 Offset: 0x20096C8 VA: 0x20096C8 Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0x20096D0 Offset: 0x20096D0 VA: 0x20096D0 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0x20096D8 Offset: 0x20096D8 VA: 0x20096D8 Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxIPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1374
{
	// Fields
	private LinuxNetworkInterface linux; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0x1FF57A4 Offset: 0x1FF57A4 VA: 0x1FF57A4
	public void .ctor(LinuxNetworkInterface parent) { }

	// RVA: 0x1FF57D0 Offset: 0x1FF57D0 VA: 0x1FF57D0
	private long Read(string file) { }

	// RVA: 0x1FF5918 Offset: 0x1FF5918 VA: 0x1FF5918 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0x1FF5968 Offset: 0x1FF5968 VA: 0x1FF5968 Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0x1FF59B8 Offset: 0x1FF59B8 VA: 0x1FF59B8 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0x1FF5A08 Offset: 0x1FF5A08 VA: 0x1FF5A08 Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0x1FF5A58 Offset: 0x1FF5A58 VA: 0x1FF5A58 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0x1FF5A60 Offset: 0x1FF5A60 VA: 0x1FF5A60 Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0x1FF5AB0 Offset: 0x1FF5AB0 VA: 0x1FF5AB0 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0x1FF5B00 Offset: 0x1FF5B00 VA: 0x1FF5B00 Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0x1FF5B50 Offset: 0x1FF5B50 VA: 0x1FF5B50 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0x1FF5BA0 Offset: 0x1FF5BA0 VA: 0x1FF5BA0 Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0x1FF5BA8 Offset: 0x1FF5BA8 VA: 0x1FF5BA8 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0x1FF5BF8 Offset: 0x1FF5BF8 VA: 0x1FF5BF8 Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class MacOsIPv4InterfaceStatistics : IPv4InterfaceStatistics // TypeDefIndex: 1375
{
	// Fields
	private MacOsNetworkInterface macos; // 0x10

	// Properties
	public override long BytesReceived { get; }
	public override long BytesSent { get; }
	public override long IncomingPacketsDiscarded { get; }
	public override long IncomingPacketsWithErrors { get; }
	public override long IncomingUnknownProtocolPackets { get; }
	public override long NonUnicastPacketsReceived { get; }
	public override long NonUnicastPacketsSent { get; }
	public override long OutgoingPacketsDiscarded { get; }
	public override long OutgoingPacketsWithErrors { get; }
	public override long OutputQueueLength { get; }
	public override long UnicastPacketsReceived { get; }
	public override long UnicastPacketsSent { get; }

	// Methods

	// RVA: 0x1FF8478 Offset: 0x1FF8478 VA: 0x1FF8478
	public void .ctor(MacOsNetworkInterface parent) { }

	// RVA: 0x1FF84A4 Offset: 0x1FF84A4 VA: 0x1FF84A4 Slot: 4
	public override long get_BytesReceived() { }

	// RVA: 0x1FF84AC Offset: 0x1FF84AC VA: 0x1FF84AC Slot: 5
	public override long get_BytesSent() { }

	// RVA: 0x1FF84B4 Offset: 0x1FF84B4 VA: 0x1FF84B4 Slot: 6
	public override long get_IncomingPacketsDiscarded() { }

	// RVA: 0x1FF84BC Offset: 0x1FF84BC VA: 0x1FF84BC Slot: 7
	public override long get_IncomingPacketsWithErrors() { }

	// RVA: 0x1FF84C4 Offset: 0x1FF84C4 VA: 0x1FF84C4 Slot: 8
	public override long get_IncomingUnknownProtocolPackets() { }

	// RVA: 0x1FF84CC Offset: 0x1FF84CC VA: 0x1FF84CC Slot: 9
	public override long get_NonUnicastPacketsReceived() { }

	// RVA: 0x1FF84D4 Offset: 0x1FF84D4 VA: 0x1FF84D4 Slot: 10
	public override long get_NonUnicastPacketsSent() { }

	// RVA: 0x1FF84DC Offset: 0x1FF84DC VA: 0x1FF84DC Slot: 11
	public override long get_OutgoingPacketsDiscarded() { }

	// RVA: 0x1FF84E4 Offset: 0x1FF84E4 VA: 0x1FF84E4 Slot: 12
	public override long get_OutgoingPacketsWithErrors() { }

	// RVA: 0x1FF84EC Offset: 0x1FF84EC VA: 0x1FF84EC Slot: 13
	public override long get_OutputQueueLength() { }

	// RVA: 0x1FF84F4 Offset: 0x1FF84F4 VA: 0x1FF84F4 Slot: 14
	public override long get_UnicastPacketsReceived() { }

	// RVA: 0x1FF84FC Offset: 0x1FF84FC VA: 0x1FF84FC Slot: 15
	public override long get_UnicastPacketsSent() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPv6InterfaceProperties // TypeDefIndex: 1376
{
	// Properties
	public abstract int Index { get; }
	public abstract int Mtu { get; }

	// Methods

	// RVA: 0x1FF5058 Offset: 0x1FF5058 VA: 0x1FF5058
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Index();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_Mtu();
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPv6InterfaceProperties : IPv6InterfaceProperties // TypeDefIndex: 1377
{
	// Fields
	private Win32_MIB_IFROW mib; // 0x10

	// Properties
	public override int Index { get; }
	public override int Mtu { get; }

	// Methods

	// RVA: 0x2008E18 Offset: 0x2008E18 VA: 0x2008E18
	public void .ctor(Win32_MIB_IFROW mib) { }

	// RVA: 0x20096E0 Offset: 0x20096E0 VA: 0x20096E0 Slot: 4
	public override int get_Index() { }

	// RVA: 0x20096E8 Offset: 0x20096E8 VA: 0x20096E8 Slot: 5
	public override int get_Mtu() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IcmpV4Statistics // TypeDefIndex: 1378
{
	// Properties
	public abstract long AddressMaskRepliesReceived { get; }
	public abstract long AddressMaskRepliesSent { get; }
	public abstract long AddressMaskRequestsReceived { get; }
	public abstract long AddressMaskRequestsSent { get; }
	public abstract long DestinationUnreachableMessagesReceived { get; }
	public abstract long DestinationUnreachableMessagesSent { get; }
	public abstract long EchoRepliesReceived { get; }
	public abstract long EchoRepliesSent { get; }
	public abstract long EchoRequestsReceived { get; }
	public abstract long EchoRequestsSent { get; }
	public abstract long ErrorsReceived { get; }
	public abstract long ErrorsSent { get; }
	public abstract long MessagesReceived { get; }
	public abstract long MessagesSent { get; }
	public abstract long ParameterProblemsReceived { get; }
	public abstract long ParameterProblemsSent { get; }
	public abstract long RedirectsReceived { get; }
	public abstract long RedirectsSent { get; }
	public abstract long SourceQuenchesReceived { get; }
	public abstract long SourceQuenchesSent { get; }
	public abstract long TimeExceededMessagesReceived { get; }
	public abstract long TimeExceededMessagesSent { get; }
	public abstract long TimestampRepliesReceived { get; }
	public abstract long TimestampRepliesSent { get; }
	public abstract long TimestampRequestsReceived { get; }
	public abstract long TimestampRequestsSent { get; }

	// Methods

	// RVA: 0x1FF5060 Offset: 0x1FF5060 VA: 0x1FF5060
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_AddressMaskRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_AddressMaskRepliesSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_AddressMaskRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_AddressMaskRequestsSent();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_DestinationUnreachableMessagesReceived();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_DestinationUnreachableMessagesSent();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_EchoRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_EchoRepliesSent();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_EchoRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_EchoRequestsSent();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_ErrorsReceived();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_ErrorsSent();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long get_MessagesReceived();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract long get_MessagesSent();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract long get_ParameterProblemsReceived();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract long get_ParameterProblemsSent();

	// RVA: -1 Offset: -1 Slot: 20
	public abstract long get_RedirectsReceived();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract long get_RedirectsSent();

	// RVA: -1 Offset: -1 Slot: 22
	public abstract long get_SourceQuenchesReceived();

	// RVA: -1 Offset: -1 Slot: 23
	public abstract long get_SourceQuenchesSent();

	// RVA: -1 Offset: -1 Slot: 24
	public abstract long get_TimeExceededMessagesReceived();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract long get_TimeExceededMessagesSent();

	// RVA: -1 Offset: -1 Slot: 26
	public abstract long get_TimestampRepliesReceived();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract long get_TimestampRepliesSent();

	// RVA: -1 Offset: -1 Slot: 28
	public abstract long get_TimestampRequestsReceived();

	// RVA: -1 Offset: -1 Slot: 29
	public abstract long get_TimestampRequestsSent();
}

// Namespace: System.Net.NetworkInformation
internal class MibIcmpV4Statistics : IcmpV4Statistics // TypeDefIndex: 1379
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override long AddressMaskRepliesReceived { get; }
	public override long AddressMaskRepliesSent { get; }
	public override long AddressMaskRequestsReceived { get; }
	public override long AddressMaskRequestsSent { get; }
	public override long DestinationUnreachableMessagesReceived { get; }
	public override long DestinationUnreachableMessagesSent { get; }
