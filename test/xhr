	private readonly GUIContent m_Content; // 0x48
	private readonly float m_ForcedMinHeight; // 0x50
	private readonly float m_ForcedMaxHeight; // 0x54

	// Methods

	// RVA: 0x27DB480 Offset: 0x27DB480 VA: 0x27DB480
	public void .ctor(GUIStyle style, GUIContent content, GUILayoutOption[] options) { }

	// RVA: 0x27E061C Offset: 0x27E061C VA: 0x27E061C Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x27E06F4 Offset: 0x27E06F4 VA: 0x27E06F4 Slot: 9
	public override void CalcHeight() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xC66E70 Offset: 0xC66E70 VA: 0xC66E70
internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 2756
{
	// Fields
	public List<GUILayoutEntry> entries; // 0x48
	public bool isVertical; // 0x50
	public bool resetCoords; // 0x51
	public float spacing; // 0x54
	public bool sameSize; // 0x58
	public bool isWindow; // 0x59
	public int windowID; // 0x5C
	private int m_Cursor; // 0x60
	protected int m_StretchableCountX; // 0x64
	protected int m_StretchableCountY; // 0x68
	protected bool m_UserSpecifiedWidth; // 0x6C
	protected bool m_UserSpecifiedHeight; // 0x6D
	protected float m_ChildMinWidth; // 0x70
	protected float m_ChildMaxWidth; // 0x74
	protected float m_ChildMinHeight; // 0x78
	protected float m_ChildMaxHeight; // 0x7C
	protected int m_MarginLeft; // 0x80
	protected int m_MarginRight; // 0x84
	protected int m_MarginTop; // 0x88
	protected int m_MarginBottom; // 0x8C

	// Properties
	public override int marginLeft { get; }
	public override int marginRight { get; }
	public override int marginTop { get; }
	public override int marginBottom { get; }

	// Methods

	// RVA: 0x27D718C Offset: 0x27D718C VA: 0x27D718C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C50 Offset: 0xC68C50 VA: 0xC68C50
	// RVA: 0x27D7284 Offset: 0x27D7284 VA: 0x27D7284 Slot: 4
	public override int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C60 Offset: 0xC68C60 VA: 0xC68C60
	// RVA: 0x27D728C Offset: 0x27D728C VA: 0x27D728C Slot: 5
	public override int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C70 Offset: 0xC68C70 VA: 0xC68C70
	// RVA: 0x27D7294 Offset: 0x27D7294 VA: 0x27D7294 Slot: 6
	public override int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C80 Offset: 0xC68C80 VA: 0xC68C80
	// RVA: 0x27D729C Offset: 0x27D729C VA: 0x27D729C Slot: 7
	public override int get_marginBottom() { }

	// RVA: 0x27D72A4 Offset: 0x27D72A4 VA: 0x27D72A4 Slot: 13
	public override void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0x27D73C4 Offset: 0x27D73C4 VA: 0x27D73C4 Slot: 12
	protected override void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x27D7494 Offset: 0x27D7494 VA: 0x27D7494
	public void ResetCursor() { }

	// RVA: 0x27D749C Offset: 0x27D749C VA: 0x27D749C
	public GUILayoutEntry GetNext() { }

	// RVA: 0x27D78D4 Offset: 0x27D78D4 VA: 0x27D78D4
	public void Add(GUILayoutEntry e) { }

	// RVA: 0x27D7944 Offset: 0x27D7944 VA: 0x27D7944 Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x27D8198 Offset: 0x27D8198 VA: 0x27D8198 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x27D8BF4 Offset: 0x27D8BF4 VA: 0x27D8BF4 Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x27D934C Offset: 0x27D934C VA: 0x27D934C Slot: 11
	public override void SetVertical(float y, float height) { }

	// RVA: 0x27D9DAC Offset: 0x27D9DAC VA: 0x27D9DAC Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 2757
{
	// Fields
	public float calcMinWidth; // 0x90
	public float calcMaxWidth; // 0x94
	public float calcMinHeight; // 0x98
	public float calcMaxHeight; // 0x9C
	public float clientWidth; // 0xA0
	public float clientHeight; // 0xA4
	public bool allowHorizontalScroll; // 0xA8
	public bool allowVerticalScroll; // 0xA9
	public bool needsHorizontalScrollbar; // 0xAA
	public bool needsVerticalScrollbar; // 0xAB
	public GUIStyle horizontalScrollbar; // 0xB0
	public GUIStyle verticalScrollbar; // 0xB8

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC68C90 Offset: 0xC68C90 VA: 0xC68C90
	// RVA: 0x27DB990 Offset: 0x27DB990 VA: 0x27DB990
	public void .ctor() { }

	// RVA: 0x27DB99C Offset: 0x27DB99C VA: 0x27DB99C Slot: 8
	public override void CalcWidth() { }

	// RVA: 0x27DBA20 Offset: 0x27DBA20 VA: 0x27DBA20 Slot: 10
	public override void SetHorizontal(float x, float width) { }

	// RVA: 0x27DBB40 Offset: 0x27DBB40 VA: 0x27DBB40 Slot: 9
	public override void CalcHeight() { }

	// RVA: 0x27DBC3C Offset: 0x27DBC3C VA: 0x27DBC3C Slot: 11
	public override void SetVertical(float y, float height) { }
}

// Namespace: UnityEngine
internal class ScrollViewState // TypeDefIndex: 2758
{
	// Fields
	public Rect position; // 0x10
	public Rect visibleRect; // 0x20
	public Rect viewRect; // 0x30
	public Vector2 scrollPosition; // 0x40
	public bool apply; // 0x48

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC68CA0 Offset: 0xC68CA0 VA: 0xC68CA0
	// RVA: 0x27E0780 Offset: 0x27E0780 VA: 0x27E0780
	public void .ctor() { }
}

// Namespace: UnityEngine
internal class SliderState // TypeDefIndex: 2759
{
	// Fields
	public float dragStartPos; // 0x10
	public float dragStartValue; // 0x14
	public bool isDragging; // 0x18

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC68CB0 Offset: 0xC68CB0 VA: 0xC68CB0
	// RVA: 0x1363E0C Offset: 0x1363E0C VA: 0x1363E0C
	public void .ctor() { }
}

// Namespace: UnityEngine
internal struct SliderHandler // TypeDefIndex: 2760
{
	// Fields
	private readonly Rect position; // 0x0
	private readonly float currentValue; // 0x10
	private readonly float size; // 0x14
	private readonly float start; // 0x18
	private readonly float end; // 0x1C
	private readonly GUIStyle slider; // 0x20
	private readonly GUIStyle thumb; // 0x28
	private readonly bool horiz; // 0x30
	private readonly int id; // 0x34

	// Methods

	// RVA: 0xDD6660 Offset: 0xDD6660 VA: 0xDD6660
	public void .ctor(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id) { }

	// RVA: 0xDD6684 Offset: 0xDD6684 VA: 0xDD6684
	public float Handle() { }

	// RVA: 0xDD668C Offset: 0xDD668C VA: 0xDD668C
	private float OnMouseDown() { }

	// RVA: 0xDD6694 Offset: 0xDD6694 VA: 0xDD6694
	private float OnMouseDrag() { }

	// RVA: 0xDD669C Offset: 0xDD669C VA: 0xDD669C
	private float OnMouseUp() { }

	// RVA: 0xDD66A4 Offset: 0xDD66A4 VA: 0xDD66A4
	private float OnRepaint() { }

	// RVA: 0xDD66AC Offset: 0xDD66AC VA: 0xDD66AC
	private EventType CurrentEventType() { }

	// RVA: 0xDD66B4 Offset: 0xDD66B4 VA: 0xDD66B4
	private int CurrentScrollTroughSide() { }

	// RVA: 0xDD66BC Offset: 0xDD66BC VA: 0xDD66BC
	private bool IsEmptySlider() { }

	// RVA: 0xDD66CC Offset: 0xDD66CC VA: 0xDD66CC
	private bool SupportsPageMovements() { }

	// RVA: 0xDD66D4 Offset: 0xDD66D4 VA: 0xDD66D4
	private float PageMovementValue() { }

	// RVA: 0xDD66DC Offset: 0xDD66DC VA: 0xDD66DC
	private float PageUpMovementBound() { }

	// RVA: 0xDD66E4 Offset: 0xDD66E4 VA: 0xDD66E4
	private Event CurrentEvent() { }

	// RVA: 0xDD6734 Offset: 0xDD6734 VA: 0xDD6734
	private float ValueForCurrentMousePosition() { }

	// RVA: 0xDD673C Offset: 0xDD673C VA: 0xDD673C
	private float Clamp(float value) { }

	// RVA: 0xDD6744 Offset: 0xDD6744 VA: 0xDD6744
	private Rect ThumbSelectionRect() { }

	// RVA: 0xDD674C Offset: 0xDD674C VA: 0xDD674C
	private void StartDraggingWithValue(float dragStartValue) { }

	// RVA: 0xDD6754 Offset: 0xDD6754 VA: 0xDD6754
	private SliderState SliderState() { }

	// RVA: 0xDD675C Offset: 0xDD675C VA: 0xDD675C
	private Rect ThumbRect() { }

	// RVA: 0xDD6764 Offset: 0xDD6764 VA: 0xDD6764
	private Rect VerticalThumbRect() { }

	// RVA: 0xDD676C Offset: 0xDD676C VA: 0xDD676C
	private Rect HorizontalThumbRect() { }

	// RVA: 0xDD6774 Offset: 0xDD6774 VA: 0xDD6774
	private float ClampedCurrentValue() { }

	// RVA: 0xDD6780 Offset: 0xDD6780 VA: 0xDD6780
	private float MousePosition() { }

	// RVA: 0xDD6788 Offset: 0xDD6788 VA: 0xDD6788
	private float ValuesPerPixel() { }

	// RVA: 0xDD6790 Offset: 0xDD6790 VA: 0xDD6790
	private float ThumbSize() { }

	// RVA: 0xDD6798 Offset: 0xDD6798 VA: 0xDD6798
	private float MaxValue() { }

	// RVA: 0xDD67A0 Offset: 0xDD67A0 VA: 0xDD67A0
	private float MinValue() { }
}

// Namespace: UnityEngine
public class TextEditor // TypeDefIndex: 2761
{
	// Fields
	public TouchScreenKeyboard keyboardOnScreen; // 0x10
	public int controlID; // 0x18
	public GUIStyle style; // 0x20
	public bool multiline; // 0x28
	public bool hasHorizontalCursorPos; // 0x29
	public bool isPasswordField; // 0x2A
	[VisibleToOtherModulesAttribute] // RVA: 0xC679DC Offset: 0xC679DC VA: 0xC679DC
	internal bool m_HasFocus; // 0x2B
	public Vector2 scrollOffset; // 0x2C
	private GUIContent m_Content; // 0x38
	private Rect m_Position; // 0x40
	private int m_CursorIndex; // 0x50
	private int m_SelectIndex; // 0x54
	private bool m_RevealCursor; // 0x58
	public Vector2 graphicalCursorPos; // 0x5C
	public Vector2 graphicalSelectCursorPos; // 0x64
	private bool m_MouseDragSelectsWholeWords; // 0x6C
	private int m_DblClickInitPos; // 0x70
	private TextEditor.DblClickSnapping m_DblClickSnap; // 0x74
	private bool m_bJustSelected; // 0x75
	private int m_iAltCursorPos; // 0x78
	private string oldText; // 0x80
	private int oldPos; // 0x88
	private int oldSelectPos; // 0x8C
	private static Dictionary<Event, TextEditor.TextEditOp> s_Keyactions; // 0x0

	// Properties
	[ObsoleteAttribute] // RVA: 0xC69594 Offset: 0xC69594 VA: 0xC69594
	public GUIContent content { get; set; }
	public string text { get; set; }
	public Rect position { get; set; }
	internal virtual Rect localPosition { get; }
	public int cursorIndex { get; set; }
	public int selectIndex { get; set; }
	public bool hasSelection { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC68CC0 Offset: 0xC68CC0 VA: 0xC68CC0
	// RVA: 0x1363E14 Offset: 0x1363E14 VA: 0x1363E14
	public void .ctor() { }

	// RVA: 0x1363F00 Offset: 0x1363F00 VA: 0x1363F00
	public GUIContent get_content() { }

	// RVA: 0x1363F08 Offset: 0x1363F08 VA: 0x1363F08
	public void set_content(GUIContent value) { }

	// RVA: 0x1363F10 Offset: 0x1363F10 VA: 0x1363F10
	public string get_text() { }

	// RVA: 0x1363F40 Offset: 0x1363F40 VA: 0x1363F40
	public void set_text(string value) { }

	// RVA: 0x136403C Offset: 0x136403C VA: 0x136403C
	public Rect get_position() { }

	// RVA: 0x1364048 Offset: 0x1364048 VA: 0x1364048
	public void set_position(Rect value) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68CD0 Offset: 0xC68CD0 VA: 0xC68CD0
	// RVA: 0x13646AC Offset: 0x13646AC VA: 0x13646AC Slot: 4
	internal virtual Rect get_localPosition() { }

	// RVA: 0x13646B8 Offset: 0x13646B8 VA: 0x13646B8
	public int get_cursorIndex() { }

	// RVA: 0x13646C0 Offset: 0x13646C0 VA: 0x13646C0
	public void set_cursorIndex(int value) { }

	// RVA: 0x1364728 Offset: 0x1364728 VA: 0x1364728
	public int get_selectIndex() { }

	// RVA: 0x1364730 Offset: 0x1364730 VA: 0x1364730
	public void set_selectIndex(int value) { }

	// RVA: 0x1364790 Offset: 0x1364790 VA: 0x1364790
	private void ClearCursorPos() { }

	// RVA: 0x13647A0 Offset: 0x13647A0 VA: 0x13647A0
	public void OnFocus() { }

	// RVA: 0x136484C Offset: 0x136484C VA: 0x136484C
	public void OnLostFocus() { }

	// RVA: 0x13648BC Offset: 0x13648BC VA: 0x13648BC
	private void GrabGraphicalCursorPos() { }

	// RVA: 0x13649BC Offset: 0x13649BC VA: 0x13649BC
	public bool HandleKeyEvent(Event e) { }

	// RVA: 0x1365540 Offset: 0x1365540 VA: 0x1365540
	public bool DeleteLineBack() { }

	// RVA: 0x13658CC Offset: 0x13658CC VA: 0x13658CC
	public bool DeleteWordBack() { }

	// RVA: 0x1365A68 Offset: 0x1365A68 VA: 0x1365A68
	public bool DeleteWordForward() { }

	// RVA: 0x1365D20 Offset: 0x1365D20 VA: 0x1365D20
	public bool Delete() { }

	// RVA: 0x1365F00 Offset: 0x1365F00 VA: 0x1365F00
	public bool Backspace() { }

	// RVA: 0x13647F0 Offset: 0x13647F0 VA: 0x13647F0
	public void SelectAll() { }

	// RVA: 0x1366098 Offset: 0x1366098 VA: 0x1366098
	public void SelectNone() { }

	// RVA: 0x136565C Offset: 0x136565C VA: 0x136565C
	public bool get_hasSelection() { }

	// RVA: 0x136566C Offset: 0x136566C VA: 0x136566C
	public bool DeleteSelection() { }

	// RVA: 0x13660C8 Offset: 0x13660C8 VA: 0x13660C8
	public void ReplaceSelection(string replace) { }

	// RVA: 0x1366190 Offset: 0x1366190 VA: 0x1366190
	public void Insert(char c) { }

	// RVA: 0x13661C8 Offset: 0x13661C8 VA: 0x13661C8
	public void MoveRight() { }

	// RVA: 0x1366250 Offset: 0x1366250 VA: 0x1366250
	public void MoveLeft() { }

	// RVA: 0x13662B8 Offset: 0x13662B8 VA: 0x13662B8
	public void MoveUp() { }

	// RVA: 0x13663BC Offset: 0x13663BC VA: 0x13663BC
	public void MoveDown() { }

	// RVA: 0x1366500 Offset: 0x1366500 VA: 0x1366500
	public void MoveLineStart() { }

	// RVA: 0x13665A0 Offset: 0x13665A0 VA: 0x13665A0
	public void MoveLineEnd() { }

	// RVA: 0x1366658 Offset: 0x1366658 VA: 0x1366658
	public void MoveGraphicalLineStart() { }

	// RVA: 0x13667AC Offset: 0x13667AC VA: 0x13667AC
	public void MoveGraphicalLineEnd() { }

	// RVA: 0x136690C Offset: 0x136690C VA: 0x136690C
	public void MoveTextStart() { }

	// RVA: 0x1366938 Offset: 0x1366938 VA: 0x1366938
	public void MoveTextEnd() { }

	// RVA: 0x1366988 Offset: 0x1366988 VA: 0x1366988
	private int IndexOfEndOfLine(int startIndex) { }

	// RVA: 0x1366A08 Offset: 0x1366A08 VA: 0x1366A08
	public void MoveParagraphForward() { }

	// RVA: 0x1366AB0 Offset: 0x1366AB0 VA: 0x1366AB0
	public void MoveParagraphBackward() { }

	// RVA: 0x1366B58 Offset: 0x1366B58 VA: 0x1366B58
	public void MoveCursorToPosition(Vector2 cursorPosition) { }

	// RVA: 0x1366BB4 Offset: 0x1366BB4 VA: 0x1366BB4
	protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift) { }

	// RVA: 0x1366CF0 Offset: 0x1366CF0 VA: 0x1366CF0
	public void SelectToPosition(Vector2 cursorPosition) { }

	// RVA: 0x136722C Offset: 0x136722C VA: 0x136722C
	public void SelectLeft() { }

	// RVA: 0x1367288 Offset: 0x1367288 VA: 0x1367288
	public void SelectRight() { }

	// RVA: 0x13672E4 Offset: 0x13672E4 VA: 0x13672E4
	public void SelectUp() { }

	// RVA: 0x136739C Offset: 0x136739C VA: 0x136739C
	public void SelectDown() { }

	// RVA: 0x1367474 Offset: 0x1367474 VA: 0x1367474
	public void SelectTextEnd() { }

	// RVA: 0x13674B4 Offset: 0x13674B4 VA: 0x13674B4
	public void SelectTextStart() { }

	// RVA: 0x13674BC Offset: 0x13674BC VA: 0x13674BC
	public void MouseDragSelectsWholeWords(bool on) { }

	// RVA: 0x13674D0 Offset: 0x13674D0 VA: 0x13674D0
	public void DblClickSnap(TextEditor.DblClickSnapping snapping) { }

	// RVA: 0x13666B8 Offset: 0x13666B8 VA: 0x13666B8
	private int GetGraphicalLineStart(int p) { }

	// RVA: 0x136680C Offset: 0x136680C VA: 0x136680C
	private int GetGraphicalLineEnd(int p) { }

	// RVA: 0x13674D8 Offset: 0x13674D8 VA: 0x13674D8
	private int FindNextSeperator(int startPos) { }

	// RVA: 0x136768C Offset: 0x136768C VA: 0x136768C
	private int FindPrevSeperator(int startPos) { }

	// RVA: 0x136772C Offset: 0x136772C VA: 0x136772C
	public void MoveWordRight() { }

	// RVA: 0x136779C Offset: 0x136779C VA: 0x136779C
	public void MoveToStartOfNextWord() { }

	// RVA: 0x1367800 Offset: 0x1367800 VA: 0x1367800
	public void MoveToEndOfPreviousWord() { }

	// RVA: 0x1367864 Offset: 0x1367864 VA: 0x1367864
	public void SelectToStartOfNextWord() { }

	// RVA: 0x136789C Offset: 0x136789C VA: 0x136789C
	public void SelectToEndOfPreviousWord() { }

	// RVA: 0x1367580 Offset: 0x1367580 VA: 0x1367580
	private TextEditor.CharacterType ClassifyChar(int index) { }

	// RVA: 0x1365B38 Offset: 0x1365B38 VA: 0x1365B38
	public int FindStartOfNextWord(int p) { }

	// RVA: 0x136599C Offset: 0x136599C VA: 0x136599C
	private int FindEndOfPreviousWord(int p) { }

	// RVA: 0x13678D4 Offset: 0x13678D4 VA: 0x13678D4
	public void MoveWordLeft() { }

	// RVA: 0x1367930 Offset: 0x1367930 VA: 0x1367930
	public void SelectWordRight() { }

	// RVA: 0x13679A8 Offset: 0x13679A8 VA: 0x13679A8
	public void SelectWordLeft() { }

	// RVA: 0x1367A20 Offset: 0x1367A20 VA: 0x1367A20
	public void ExpandSelectGraphicalLineStart() { }

	// RVA: 0x1367A88 Offset: 0x1367A88 VA: 0x1367A88
	public void ExpandSelectGraphicalLineEnd() { }

	// RVA: 0x1367AF0 Offset: 0x1367AF0 VA: 0x1367AF0
	public void SelectGraphicalLineStart() { }

	// RVA: 0x1367B28 Offset: 0x1367B28 VA: 0x1367B28
	public void SelectGraphicalLineEnd() { }

	// RVA: 0x1367B60 Offset: 0x1367B60 VA: 0x1367B60
	public void SelectParagraphForward() { }

	// RVA: 0x1367BFC Offset: 0x1367BFC VA: 0x1367BFC
	public void SelectParagraphBackward() { }

	// RVA: 0x1367CD0 Offset: 0x1367CD0 VA: 0x1367CD0
	public void SelectCurrentWord() { }

	// RVA: 0x13670A8 Offset: 0x13670A8 VA: 0x13670A8
	private int FindEndOfClassification(int p, TextEditor.Direction dir) { }

	// RVA: 0x1367D70 Offset: 0x1367D70 VA: 0x1367D70
	public void SelectCurrentParagraph() { }

	// RVA: 0x1367E28 Offset: 0x1367E28 VA: 0x1367E28
	public void UpdateScrollOffsetIfNeeded(Event evt) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68D48 Offset: 0xC68D48 VA: 0xC68D48
	// RVA: 0x13640CC Offset: 0x13640CC VA: 0x13640CC
	internal void UpdateScrollOffset() { }

	// RVA: 0x1367E98 Offset: 0x1367E98 VA: 0x1367E98
	public void DrawCursor(string newText) { }

	// RVA: 0x13651A0 Offset: 0x13651A0 VA: 0x13651A0
	private bool PerformOperation(TextEditor.TextEditOp operation) { }

	// RVA: 0x1368594 Offset: 0x1368594 VA: 0x1368594
	public void SaveBackup() { }

	// RVA: 0x13683FC Offset: 0x13683FC VA: 0x13683FC
	public bool Cut() { }

	// RVA: 0x136843C Offset: 0x136843C VA: 0x136843C
	public void Copy() { }

	// RVA: 0x13685C0 Offset: 0x13685C0 VA: 0x13685C0
	private static string ReplaceNewlinesWithSpaces(string value) { }

	// RVA: 0x13684DC Offset: 0x13684DC VA: 0x13684DC
	public bool Paste() { }

	// RVA: 0x136866C Offset: 0x136866C VA: 0x136866C
	private static void MapKey(string key, TextEditor.TextEditOp action) { }

	// RVA: 0x1364B40 Offset: 0x1364B40 VA: 0x1364B40
	private void InitKeyActions() { }

	// RVA: 0x1366244 Offset: 0x1366244 VA: 0x1366244
	public void DetectFocusChange() { }

	// RVA: 0x1368700 Offset: 0x1368700 VA: 0x1368700 Slot: 5
	internal virtual void OnDetectFocusChange() { }

	// RVA: 0x136876C Offset: 0x136876C VA: 0x136876C Slot: 6
	internal virtual void OnCursorIndexChange() { }

	// RVA: 0x1368770 Offset: 0x1368770 VA: 0x1368770 Slot: 7
	internal virtual void OnSelectIndexChange() { }

	// RVA: 0x1368774 Offset: 0x1368774 VA: 0x1368774
	private void ClampTextIndex(ref int index) { }

	// RVA: 0x1363FF8 Offset: 0x1363FF8 VA: 0x1363FF8
	private void EnsureValidCodePointIndex(ref int index) { }

	// RVA: 0x1368824 Offset: 0x1368824 VA: 0x1368824
	private bool IsValidCodePointIndex(int index) { }

	// RVA: 0x1365FD8 Offset: 0x1365FD8 VA: 0x1365FD8
	private int PreviousCodePointIndex(int index) { }

	// RVA: 0x1365E00 Offset: 0x1365E00 VA: 0x1365E00
	private int NextCodePointIndex(int index) { }
}

// Namespace: 
public enum TextEditor.DblClickSnapping // TypeDefIndex: 2762
{
	// Fields
	public byte value__; // 0x0
	public const TextEditor.DblClickSnapping WORDS = 0;
	public const TextEditor.DblClickSnapping PARAGRAPHS = 1;
}

// Namespace: 
private enum TextEditor.CharacterType // TypeDefIndex: 2763
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.CharacterType LetterLike = 0;
	public const TextEditor.CharacterType Symbol = 1;
	public const TextEditor.CharacterType Symbol2 = 2;
	public const TextEditor.CharacterType WhiteSpace = 3;
}

// Namespace: 
private enum TextEditor.Direction // TypeDefIndex: 2764
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.Direction Forward = 0;
	public const TextEditor.Direction Backward = 1;
}

// Namespace: 
private enum TextEditor.TextEditOp // TypeDefIndex: 2765
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.TextEditOp MoveLeft = 0;
	public const TextEditor.TextEditOp MoveRight = 1;
	public const TextEditor.TextEditOp MoveUp = 2;
	public const TextEditor.TextEditOp MoveDown = 3;
	public const TextEditor.TextEditOp MoveLineStart = 4;
	public const TextEditor.TextEditOp MoveLineEnd = 5;
	public const TextEditor.TextEditOp MoveTextStart = 6;
	public const TextEditor.TextEditOp MoveTextEnd = 7;
	public const TextEditor.TextEditOp MovePageUp = 8;
	public const TextEditor.TextEditOp MovePageDown = 9;
	public const TextEditor.TextEditOp MoveGraphicalLineStart = 10;
	public const TextEditor.TextEditOp MoveGraphicalLineEnd = 11;
	public const TextEditor.TextEditOp MoveWordLeft = 12;
	public const TextEditor.TextEditOp MoveWordRight = 13;
	public const TextEditor.TextEditOp MoveParagraphForward = 14;
	public const TextEditor.TextEditOp MoveParagraphBackward = 15;
	public const TextEditor.TextEditOp MoveToStartOfNextWord = 16;
	public const TextEditor.TextEditOp MoveToEndOfPreviousWord = 17;
	public const TextEditor.TextEditOp SelectLeft = 18;
	public const TextEditor.TextEditOp SelectRight = 19;
	public const TextEditor.TextEditOp SelectUp = 20;
	public const TextEditor.TextEditOp SelectDown = 21;
	public const TextEditor.TextEditOp SelectTextStart = 22;
	public const TextEditor.TextEditOp SelectTextEnd = 23;
	public const TextEditor.TextEditOp SelectPageUp = 24;
	public const TextEditor.TextEditOp SelectPageDown = 25;
	public const TextEditor.TextEditOp ExpandSelectGraphicalLineStart = 26;
	public const TextEditor.TextEditOp ExpandSelectGraphicalLineEnd = 27;
	public const TextEditor.TextEditOp SelectGraphicalLineStart = 28;
	public const TextEditor.TextEditOp SelectGraphicalLineEnd = 29;
	public const TextEditor.TextEditOp SelectWordLeft = 30;
	public const TextEditor.TextEditOp SelectWordRight = 31;
	public const TextEditor.TextEditOp SelectToEndOfPreviousWord = 32;
	public const TextEditor.TextEditOp SelectToStartOfNextWord = 33;
	public const TextEditor.TextEditOp SelectParagraphBackward = 34;
	public const TextEditor.TextEditOp SelectParagraphForward = 35;
	public const TextEditor.TextEditOp Delete = 36;
	public const TextEditor.TextEditOp Backspace = 37;
	public const TextEditor.TextEditOp DeleteWordBack = 38;
	public const TextEditor.TextEditOp DeleteWordForward = 39;
	public const TextEditor.TextEditOp DeleteLineBack = 40;
	public const TextEditor.TextEditOp Cut = 41;
	public const TextEditor.TextEditOp Copy = 42;
	public const TextEditor.TextEditOp Paste = 43;
	public const TextEditor.TextEditOp SelectAll = 44;
	public const TextEditor.TextEditOp SelectNone = 45;
	public const TextEditor.TextEditOp ScrollStart = 46;
	public const TextEditor.TextEditOp ScrollEnd = 47;
	public const TextEditor.TextEditOp ScrollPageUp = 48;
	public const TextEditor.TextEditOp ScrollPageDown = 49;
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2766
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6A6F4 Offset: 0xC6A6F4 VA: 0xC6A6F4
public static class JsonUtility // TypeDefIndex: 2767
{
	// Methods

	[FreeFunctionAttribute] // RVA: 0xC6A72C Offset: 0xC6A72C VA: 0xC6A72C
	[ThreadSafeAttribute] // RVA: 0xC6A72C Offset: 0xC6A72C VA: 0xC6A72C
	// RVA: 0x1388D94 Offset: 0x1388D94 VA: 0x1388D94
	private static string ToJsonInternal(object obj, bool prettyPrint) { }

	[FreeFunctionAttribute] // RVA: 0xC6A77C Offset: 0xC6A77C VA: 0xC6A77C
	[ThreadSafeAttribute] // RVA: 0xC6A77C Offset: 0xC6A77C VA: 0xC6A77C
	// RVA: 0x1388E08 Offset: 0x1388E08 VA: 0x1388E08
	private static object FromJsonInternal(string json, object objectToOverwrite, Type type) { }

	// RVA: 0x1388E8C Offset: 0x1388E8C VA: 0x1388E8C
	public static string ToJson(object obj) { }

	// RVA: 0x1388E94 Offset: 0x1388E94 VA: 0x1388E94
	public static string ToJson(object obj, bool prettyPrint) { }

	// RVA: -1 Offset: -1
	public static T FromJson<T>(string json) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x219FC94 Offset: 0x219FC94 VA: 0x219FC94
	|-JsonUtility.FromJson<Purchase.PurchaseData>
	|-JsonUtility.FromJson<SkuDetails>
	|-JsonUtility.FromJson<RecommendedConfigSaveData>
	|-JsonUtility.FromJson<ProductCatalog>
	|-JsonUtility.FromJson<object>
	*/

	// RVA: 0x1388FD0 Offset: 0x1388FD0 VA: 0x1388FD0
	public static object FromJson(string json, Type type) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2768
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[NativeHeaderAttribute] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[NativeHeaderAttribute] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[UsedByNativeCodeAttribute] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[RequireComponent] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[RequireComponent] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
[NativeHeaderAttribute] // RVA: 0xC6B8EC Offset: 0xC6B8EC VA: 0xC6B8EC
public sealed class ParticleSystem : Component // TypeDefIndex: 2769
{
	// Properties
	[ObsoleteAttribute] // RVA: 0xC6C564 Offset: 0xC6C564 VA: 0xC6C564
	public float startDelay { get; }
	[ObsoleteAttribute] // RVA: 0xC6C5A0 Offset: 0xC6C5A0 VA: 0xC6C5A0
	public bool loop { set; }
	[ObsoleteAttribute] // RVA: 0xC6C5DC Offset: 0xC6C5DC VA: 0xC6C5DC
	public float duration { get; }
	[ObsoleteAttribute] // RVA: 0xC6C618 Offset: 0xC6C618 VA: 0xC6C618
	public float startSize { get; set; }
	[ObsoleteAttribute] // RVA: 0xC6C654 Offset: 0xC6C654 VA: 0xC6C654
	public Color startColor { set; }
	[ObsoleteAttribute] // RVA: 0xC6C690 Offset: 0xC6C690 VA: 0xC6C690
	public float startLifetime { get; }
	[ObsoleteAttribute] // RVA: 0xC6C6CC Offset: 0xC6C6CC VA: 0xC6C6CC
	public ParticleSystemSimulationSpace simulationSpace { get; }
	public bool isPlaying { get; }
	public bool isStopped { get; }
	public int particleCount { get; }
	public float time { set; }
	public ParticleSystem.MainModule main { get; }
	public ParticleSystem.EmissionModule emission { get; }
	public ParticleSystem.ShapeModule shape { get; }

	// Methods

	[ObsoleteAttribute] // RVA: 0xC6BFBC Offset: 0xC6BFBC VA: 0xC6BFBC
	// RVA: 0x1369938 Offset: 0x1369938 VA: 0x1369938
	public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color) { }

	[ObsoleteAttribute] // RVA: 0xC6BFF8 Offset: 0xC6BFF8 VA: 0xC6BFF8
	// RVA: 0x1369CC8 Offset: 0x1369CC8 VA: 0x1369CC8
	public void Emit(ParticleSystem.Particle particle) { }

	// RVA: 0x1369CCC Offset: 0x1369CCC VA: 0x1369CCC
	public float get_startDelay() { }

	// RVA: 0x1369CDC Offset: 0x1369CDC VA: 0x1369CDC
	public void set_loop(bool value) { }

	// RVA: 0x1369CF0 Offset: 0x1369CF0 VA: 0x1369CF0
	public float get_duration() { }

	// RVA: 0x1369CFC Offset: 0x1369CFC VA: 0x1369CFC
	public float get_startSize() { }

	// RVA: 0x1369D08 Offset: 0x1369D08 VA: 0x1369D08
	public void set_startSize(float value) { }

	// RVA: 0x1369D14 Offset: 0x1369D14 VA: 0x1369D14
	public void set_startColor(Color value) { }

	// RVA: 0x1369DE8 Offset: 0x1369DE8 VA: 0x1369DE8
	public float get_startLifetime() { }

	// RVA: 0x1369DF4 Offset: 0x1369DF4 VA: 0x1369DF4
	public ParticleSystemSimulationSpace get_simulationSpace() { }

	[NativeNameAttribute] // RVA: 0xC6C034 Offset: 0xC6C034 VA: 0xC6C034
	// RVA: 0x1369E00 Offset: 0x1369E00 VA: 0x1369E00
	public bool get_isPlaying() { }

	[NativeNameAttribute] // RVA: 0xC6C06C Offset: 0xC6C06C VA: 0xC6C06C
	// RVA: 0x1369E6C Offset: 0x1369E6C VA: 0x1369E6C
	public bool get_isStopped() { }

	[NativeNameAttribute] // RVA: 0xC6C0A4 Offset: 0xC6C0A4 VA: 0xC6C0A4
	// RVA: 0x1369ED8 Offset: 0x1369ED8 VA: 0x1369ED8
	public int get_particleCount() { }

	[NativeNameAttribute] // RVA: 0xC6C0DC Offset: 0xC6C0DC VA: 0xC6C0DC
	// RVA: 0x1369F44 Offset: 0x1369F44 VA: 0x1369F44
	public void set_time(float value) { }

	// RVA: 0x1369CD0 Offset: 0x1369CD0 VA: 0x1369CD0
	public ParticleSystem.MainModule get_main() { }

	// RVA: 0x1369FC0 Offset: 0x1369FC0 VA: 0x1369FC0
	public ParticleSystem.EmissionModule get_emission() { }

	// RVA: 0x1369FCC Offset: 0x1369FCC VA: 0x1369FCC
	public ParticleSystem.ShapeModule get_shape() { }

	[FreeFunctionAttribute] // RVA: 0xC6C114 Offset: 0xC6C114 VA: 0xC6C114
	// RVA: 0x1369FD8 Offset: 0x1369FD8 VA: 0x1369FD8
	public void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep) { }

	// RVA: 0x136A07C Offset: 0x136A07C VA: 0x136A07C
	public void Simulate(float t, bool withChildren, bool restart) { }

	// RVA: 0x136A08C Offset: 0x136A08C VA: 0x136A08C
	public void Simulate(float t, bool withChildren) { }

	// RVA: 0x136A09C Offset: 0x136A09C VA: 0x136A09C
	public void Simulate(float t) { }

	[FreeFunctionAttribute] // RVA: 0xC6C168 Offset: 0xC6C168 VA: 0xC6C168
	// RVA: 0x136A0AC Offset: 0x136A0AC VA: 0x136A0AC
	public void Play(bool withChildren) { }

	// RVA: 0x136A120 Offset: 0x136A120 VA: 0x136A120
	public void Play() { }

	[FreeFunctionAttribute] // RVA: 0xC6C1BC Offset: 0xC6C1BC VA: 0xC6C1BC
	// RVA: 0x136A128 Offset: 0x136A128 VA: 0x136A128
	public void Pause(bool withChildren) { }

	// RVA: 0x136A19C Offset: 0x136A19C VA: 0x136A19C
	public void Pause() { }

	[FreeFunctionAttribute] // RVA: 0xC6C210 Offset: 0xC6C210 VA: 0xC6C210
	// RVA: 0x136A1A4 Offset: 0x136A1A4 VA: 0x136A1A4
	public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior) { }

	// RVA: 0x136A228 Offset: 0x136A228 VA: 0x136A228
	public void Stop(bool withChildren) { }

	// RVA: 0x136A234 Offset: 0x136A234 VA: 0x136A234
	public void Stop() { }

	[FreeFunctionAttribute] // RVA: 0xC6C264 Offset: 0xC6C264 VA: 0xC6C264
	// RVA: 0x136A240 Offset: 0x136A240 VA: 0x136A240
	public void Clear(bool withChildren) { }

	// RVA: 0x136A2B4 Offset: 0x136A2B4 VA: 0x136A2B4
	public void Clear() { }

	[FreeFunctionAttribute] // RVA: 0xC6C2B8 Offset: 0xC6C2B8 VA: 0xC6C2B8
	// RVA: 0x136A2BC Offset: 0x136A2BC VA: 0x136A2BC
	public bool IsAlive(bool withChildren) { }

	// RVA: 0x136A330 Offset: 0x136A330 VA: 0x136A330
	public bool IsAlive() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC6C30C Offset: 0xC6C30C VA: 0xC6C30C
	// RVA: 0x136A338 Offset: 0x136A338 VA: 0x136A338
	public void Emit(int count) { }

	[NativeNameAttribute] // RVA: 0xC6C31C Offset: 0xC6C31C VA: 0xC6C31C
	// RVA: 0x136A33C Offset: 0x136A33C VA: 0x136A33C
	private void Emit_Internal(int count) { }

	[NativeNameAttribute] // RVA: 0xC6C354 Offset: 0xC6C354 VA: 0xC6C354
	// RVA: 0x136A3B0 Offset: 0x136A3B0 VA: 0x136A3B0
	public void Emit(ParticleSystem.EmitParams emitParams, int count) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C38C Offset: 0xC6C38C VA: 0xC6C38C
	// RVA: 0x1369C54 Offset: 0x1369C54 VA: 0x1369C54
	private void Internal_EmitOld(ref ParticleSystem.Particle particle) { }

	// RVA: 0x136A3B4 Offset: 0x136A3B4 VA: 0x136A3B4
	private void Emit_Injected(ref ParticleSystem.EmitParams emitParams, int count) { }
}

// Namespace: 
public struct ParticleSystem.MainModule // TypeDefIndex: 2770
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public float duration { get; }
	public bool loop { get; set; }
	public bool prewarm { get; }
	public float startDelayMultiplier { get; }
	public ParticleSystem.MinMaxCurve startLifetime { get; }
	public float startLifetimeMultiplier { get; }
	public ParticleSystem.MinMaxCurve startSize { get; set; }
	public float startSizeMultiplier { get; set; }
	public ParticleSystem.MinMaxGradient startColor { set; }
	public ParticleSystemSimulationSpace simulationSpace { get; }
	public ParticleSystemStopAction stopAction { get; set; }
	public ParticleSystemCullingMode cullingMode { set; }

	// Methods

	// RVA: 0xBC2420 Offset: 0xBC2420 VA: 0xBC2420
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xBC2428 Offset: 0xBC2428 VA: 0xBC2428
	public float get_duration() { }

	// RVA: 0xBC2430 Offset: 0xBC2430 VA: 0xBC2430
	public bool get_loop() { }

	// RVA: 0xBC2438 Offset: 0xBC2438 VA: 0xBC2438
	public void set_loop(bool value) { }

	// RVA: 0xBC2444 Offset: 0xBC2444 VA: 0xBC2444
	public bool get_prewarm() { }

	// RVA: 0xBC244C Offset: 0xBC244C VA: 0xBC244C
	public float get_startDelayMultiplier() { }

	// RVA: 0xBC2454 Offset: 0xBC2454 VA: 0xBC2454
	public ParticleSystem.MinMaxCurve get_startLifetime() { }

	// RVA: 0xBC2494 Offset: 0xBC2494 VA: 0xBC2494
	public float get_startLifetimeMultiplier() { }

	// RVA: 0xBC249C Offset: 0xBC249C VA: 0xBC249C
	public void set_startSize(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0xBC24D0 Offset: 0xBC24D0 VA: 0xBC24D0
	public ParticleSystem.MinMaxCurve get_startSize() { }

	// RVA: 0xBC2510 Offset: 0xBC2510 VA: 0xBC2510
	public float get_startSizeMultiplier() { }

	// RVA: 0xBC2518 Offset: 0xBC2518 VA: 0xBC2518
	public void set_startSizeMultiplier(float value) { }

	// RVA: 0xBC2520 Offset: 0xBC2520 VA: 0xBC2520
	public void set_startColor(ParticleSystem.MinMaxGradient value) { }

	// RVA: 0xBC2564 Offset: 0xBC2564 VA: 0xBC2564
	public ParticleSystemSimulationSpace get_simulationSpace() { }

	// RVA: 0xBC256C Offset: 0xBC256C VA: 0xBC256C
	public ParticleSystemStopAction get_stopAction() { }

	// RVA: 0xBC2574 Offset: 0xBC2574 VA: 0xBC2574
	public void set_stopAction(ParticleSystemStopAction value) { }

	// RVA: 0xBC257C Offset: 0xBC257C VA: 0xBC257C
	public void set_cullingMode(ParticleSystemCullingMode value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C39C Offset: 0xC6C39C VA: 0xC6C39C
	// RVA: 0x136A814 Offset: 0x136A814 VA: 0x136A814
	private static float GetDuration(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3AC Offset: 0xC6C3AC VA: 0xC6C3AC
	// RVA: 0x136A8F4 Offset: 0x136A8F4 VA: 0x136A8F4
	private static void SetLoop(ParticleSystem system, bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3BC Offset: 0xC6C3BC VA: 0xC6C3BC
	// RVA: 0x136A888 Offset: 0x136A888 VA: 0x136A888
	private static bool GetLoop(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3CC Offset: 0xC6C3CC VA: 0xC6C3CC
	// RVA: 0x136A970 Offset: 0x136A970 VA: 0x136A970
	private static bool GetPrewarm(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3DC Offset: 0xC6C3DC VA: 0xC6C3DC
	// RVA: 0x136A9DC Offset: 0x136A9DC VA: 0x136A9DC
	private static float GetStartDelayMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3EC Offset: 0xC6C3EC VA: 0xC6C3EC
	// RVA: 0x136AA88 Offset: 0x136AA88 VA: 0x136AA88
	private static void GetStartLifetime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C3FC Offset: 0xC6C3FC VA: 0xC6C3FC
	// RVA: 0x136AAFC Offset: 0x136AAFC VA: 0x136AAFC
	private static float GetStartLifetimeMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C40C Offset: 0xC6C40C VA: 0xC6C40C
	// RVA: 0x136AB70 Offset: 0x136AB70 VA: 0x136AB70
	private static void SetStartSizeX(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

