	private static float mLastTimestamp; // 0x10
	private static AudioClip mLastClip; // 0x18
	private static Vector3[] mSides; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC85214 Offset: 0xC85214 VA: 0xC85214
	private static Comparison<UIWidget> <>f__mg$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC85224 Offset: 0xC85224 VA: 0xC85224
	private static Comparison<UIPanel> <>f__mg$cache1; // 0x30

	// Properties
	public static float soundVolume { get; set; }
	public static bool fileAccess { get; }
	public static string clipboard { get; set; }
	public static Vector2 screenSize { get; }

	// Methods

	// RVA: 0x18F2DC0 Offset: 0x18F2DC0 VA: 0x18F2DC0
	public static float get_soundVolume() { }

	// RVA: 0x18F2E94 Offset: 0x18F2E94 VA: 0x18F2E94
	public static void set_soundVolume(float value) { }

	// RVA: 0x18F2F60 Offset: 0x18F2F60 VA: 0x18F2F60
	public static bool get_fileAccess() { }

	// RVA: 0x18F2F68 Offset: 0x18F2F68 VA: 0x18F2F68
	public static AudioSource PlaySound(AudioClip clip) { }

	// RVA: 0x18F36EC Offset: 0x18F36EC VA: 0x18F36EC
	public static AudioSource PlaySound(AudioClip clip, float volume) { }

	// RVA: 0x18F2FD4 Offset: 0x18F2FD4 VA: 0x18F2FD4
	public static AudioSource PlaySound(AudioClip clip, float volume, float pitch) { }

	// RVA: 0x18F382C Offset: 0x18F382C VA: 0x18F382C
	public static int RandomRange(int min, int max) { }

	// RVA: 0x18E395C Offset: 0x18E395C VA: 0x18E395C
	public static string GetHierarchy(GameObject obj) { }

	// RVA: -1 Offset: -1
	public static T[] FindActive<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B20128 Offset: 0x2B20128 VA: 0x2B20128
	|-NGUITools.FindActive<object>
	|-NGUITools.FindActive<UILabel>
	|-NGUITools.FindActive<UIPanel>
	|-NGUITools.FindActive<UISprite>
	|-NGUITools.FindActive<UIWidget>
	|-NGUITools.FindActive<AudioListener>
	|-NGUITools.FindActive<Camera>
	*/

	// RVA: 0x18E7CE0 Offset: 0x18E7CE0 VA: 0x18E7CE0
	public static Camera FindCameraForLayer(int layer) { }

	// RVA: 0x18F3844 Offset: 0x18F3844 VA: 0x18F3844
	public static void AddWidgetCollider(GameObject go) { }

	// RVA: 0x18F38AC Offset: 0x18F38AC VA: 0x18F38AC
	public static void AddWidgetCollider(GameObject go, bool considerInactive) { }

	// RVA: 0x18F449C Offset: 0x18F449C VA: 0x18F449C
	public static void UpdateWidgetCollider(GameObject go) { }

	// RVA: 0x18F4504 Offset: 0x18F4504 VA: 0x18F4504
	public static void UpdateWidgetCollider(GameObject go, bool considerInactive) { }

	// RVA: 0x18F3CD0 Offset: 0x18F3CD0 VA: 0x18F3CD0
	public static void UpdateWidgetCollider(BoxCollider box, bool considerInactive) { }

	// RVA: 0x18F40F0 Offset: 0x18F40F0 VA: 0x18F40F0
	public static void UpdateWidgetCollider(BoxCollider2D box, bool considerInactive) { }

	// RVA: -1 Offset: -1
	public static string GetTypeName<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5B04C Offset: 0x1C5B04C VA: 0x1C5B04C
	|-NGUITools.GetTypeName<object>
	*/

	// RVA: 0x18F469C Offset: 0x18F469C VA: 0x18F469C
	public static string GetTypeName(Object obj) { }

	// RVA: 0x18F47EC Offset: 0x18F47EC VA: 0x18F47EC
	public static void RegisterUndo(Object obj, string name) { }

	// RVA: 0x18F47F0 Offset: 0x18F47F0 VA: 0x18F47F0
	public static void SetDirty(Object obj) { }

	// RVA: 0x18F47F4 Offset: 0x18F47F4 VA: 0x18F47F4
	public static GameObject AddChild(GameObject parent) { }

	// RVA: 0x18F485C Offset: 0x18F485C VA: 0x18F485C
	public static GameObject AddChild(GameObject parent, bool undo) { }

	// RVA: 0x18F4A84 Offset: 0x18F4A84 VA: 0x18F4A84
	public static GameObject AddChild(GameObject parent, GameObject prefab) { }

	// RVA: 0x18F4CD4 Offset: 0x18F4CD4 VA: 0x18F4CD4
	public static int CalculateRaycastDepth(GameObject go) { }

	// RVA: 0x18F4ED8 Offset: 0x18F4ED8 VA: 0x18F4ED8
	public static int CalculateNextDepth(GameObject go) { }

	// RVA: 0x18F500C Offset: 0x18F500C VA: 0x18F500C
	public static int CalculateNextDepth(GameObject go, bool ignoreChildrenWithColliders) { }

	// RVA: 0x18F528C Offset: 0x18F528C VA: 0x18F528C
	public static int AdjustDepth(GameObject go, int adjustment) { }

	// RVA: 0x18F5580 Offset: 0x18F5580 VA: 0x18F5580
	public static void BringForward(GameObject go) { }

	// RVA: 0x18F58F4 Offset: 0x18F58F4 VA: 0x18F58F4
	public static void PushBack(GameObject go) { }

	// RVA: 0x18F59B8 Offset: 0x18F59B8 VA: 0x18F59B8
	public static void NormalizeDepths() { }

	// RVA: 0x18F5888 Offset: 0x18F5888 VA: 0x18F5888
	public static void NormalizeWidgetDepths() { }

	// RVA: 0x18F5C38 Offset: 0x18F5C38 VA: 0x18F5C38
	public static void NormalizeWidgetDepths(GameObject go) { }

	// RVA: 0x18F5A18 Offset: 0x18F5A18 VA: 0x18F5A18
	public static void NormalizeWidgetDepths(UIWidget[] list) { }

	// RVA: 0x18F5644 Offset: 0x18F5644 VA: 0x18F5644
	public static void NormalizePanelDepths() { }

	// RVA: 0x18F5CC4 Offset: 0x18F5CC4 VA: 0x18F5CC4
	public static UIPanel CreateUI(bool advanced3D) { }

	// RVA: 0x18F69FC Offset: 0x18F69FC VA: 0x18F69FC
	public static UIPanel CreateUI(bool advanced3D, int layer) { }

	// RVA: 0x18F5D30 Offset: 0x18F5D30 VA: 0x18F5D30
	public static UIPanel CreateUI(Transform trans, bool advanced3D, int layer) { }

	// RVA: 0x18F6BA4 Offset: 0x18F6BA4 VA: 0x18F6BA4
	public static void SetChildLayer(Transform t, int layer) { }

	// RVA: -1 Offset: -1
	public static T AddChild<T>(GameObject parent) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C209F8 Offset: 0x1C209F8 VA: 0x1C209F8
	|-NGUITools.AddChild<object>
	*/

	// RVA: -1 Offset: -1
	public static T AddChild<T>(GameObject parent, bool undo) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20AD4 Offset: 0x1C20AD4 VA: 0x1C20AD4
	|-NGUITools.AddChild<object>
	|-NGUITools.AddChild<Camera>
	*/

	// RVA: -1 Offset: -1
	public static T AddWidget<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20C90 Offset: 0x1C20C90 VA: 0x1C20C90
	|-NGUITools.AddWidget<object>
	|-NGUITools.AddWidget<UILabel>
	|-NGUITools.AddWidget<UISprite>
	|-NGUITools.AddWidget<UITexture>
	*/

	// RVA: -1 Offset: -1
	public static T AddWidget<T>(GameObject go, int depth) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20D94 Offset: 0x1C20D94 VA: 0x1C20D94
	|-NGUITools.AddWidget<object>
	*/

	// RVA: 0x18F6CA0 Offset: 0x18F6CA0 VA: 0x18F6CA0
	public static UISprite AddSprite(GameObject go, UIAtlas atlas, string spriteName) { }

	// RVA: 0x18F6E18 Offset: 0x18F6E18 VA: 0x18F6E18
	public static GameObject GetRoot(GameObject go) { }

	// RVA: -1 Offset: -1
	public static T FindInParents<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20E8C Offset: 0x1C20E8C VA: 0x1C20E8C
	|-NGUITools.FindInParents<object>
	|-NGUITools.FindInParents<UIButton>
	|-NGUITools.FindInParents<UICenterOnChild>
	|-NGUITools.FindInParents<UIDragDropContainer>
	|-NGUITools.FindInParents<UIDraggableCamera>
	|-NGUITools.FindInParents<UIGrid>
	|-NGUITools.FindInParents<UIInput>
	|-NGUITools.FindInParents<UIPanel>
	|-NGUITools.FindInParents<UIRect>
	|-NGUITools.FindInParents<UIRoot>
	|-NGUITools.FindInParents<UIScrollView>
	|-NGUITools.FindInParents<UITable>
	*/

	// RVA: -1 Offset: -1
	public static T FindInParents<T>(Transform trans) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C21058 Offset: 0x1C21058 VA: 0x1C21058
	|-NGUITools.FindInParents<object>
	|-NGUITools.FindInParents<UIGrid>
	|-NGUITools.FindInParents<UIPanel>
	|-NGUITools.FindInParents<UIRect>
	|-NGUITools.FindInParents<UIRoot>
	|-NGUITools.FindInParents<UIScrollView>
	|-NGUITools.FindInParents<UITable>
	*/

	// RVA: 0x18F6EE8 Offset: 0x18F6EE8 VA: 0x18F6EE8
	public static void Destroy(Object obj) { }

	// RVA: 0x18F705C Offset: 0x18F705C VA: 0x18F705C
	public static void DestroyImmediate(Object obj) { }

	// RVA: 0x18F7134 Offset: 0x18F7134 VA: 0x18F7134
	public static void Broadcast(string funcName) { }

	// RVA: 0x18F7278 Offset: 0x18F7278 VA: 0x18F7278
	public static void Broadcast(string funcName, object param) { }

	// RVA: 0x18F6A74 Offset: 0x18F6A74 VA: 0x18F6A74
	public static bool IsChild(Transform parent, Transform child) { }

	// RVA: 0x18F73CC Offset: 0x18F73CC VA: 0x18F73CC
	private static void Activate(Transform t) { }

	// RVA: 0x18F7434 Offset: 0x18F7434 VA: 0x18F7434
	private static void Activate(Transform t, bool compatibilityMode) { }

	// RVA: 0x18F7610 Offset: 0x18F7610 VA: 0x18F7610
	private static void Deactivate(Transform t) { }

	// RVA: 0x18F76B0 Offset: 0x18F76B0 VA: 0x18F76B0
	public static void SetActive(GameObject go, bool state) { }

	// RVA: 0x18F7728 Offset: 0x18F7728 VA: 0x18F7728
	public static void SetActive(GameObject go, bool state, bool compatibilityMode) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6FA8 Offset: 0xCD6FA8 VA: 0xCD6FA8
	[DebuggerStepThroughAttribute] // RVA: 0xCD6FA8 Offset: 0xCD6FA8 VA: 0xCD6FA8
	// RVA: 0x18F7848 Offset: 0x18F7848 VA: 0x18F7848
	private static void CallCreatePanel(Transform t) { }

	// RVA: 0x18F798C Offset: 0x18F798C VA: 0x18F798C
	public static void SetActiveChildren(GameObject go, bool state) { }

	[ObsoleteAttribute] // RVA: 0xCD6FE0 Offset: 0xCD6FE0 VA: 0xCD6FE0
	// RVA: 0x18F7AE0 Offset: 0x18F7AE0 VA: 0x18F7AE0
	public static bool IsActive(Behaviour mb) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7018 Offset: 0xCD7018 VA: 0xCD7018
	[DebuggerStepThroughAttribute] // RVA: 0xCD7018 Offset: 0xCD7018 VA: 0xCD7018
	// RVA: 0x18F3764 Offset: 0x18F3764 VA: 0x18F3764
	public static bool GetActive(Behaviour mb) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7050 Offset: 0xCD7050 VA: 0xCD7050
	[DebuggerStepThroughAttribute] // RVA: 0xCD7050 Offset: 0xCD7050 VA: 0xCD7050
	// RVA: 0x18E5874 Offset: 0x18E5874 VA: 0x18E5874
	public static bool GetActive(GameObject go) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7088 Offset: 0xCD7088 VA: 0xCD7088
	[DebuggerStepThroughAttribute] // RVA: 0xCD7088 Offset: 0xCD7088 VA: 0xCD7088
	// RVA: 0x18F75DC Offset: 0x18F75DC VA: 0x18F75DC
	public static void SetActiveSelf(GameObject go, bool state) { }

	// RVA: 0x18F7BAC Offset: 0x18F7BAC VA: 0x18F7BAC
	public static void SetLayer(GameObject go, int layer) { }

	// RVA: 0x18F7CE0 Offset: 0x18F7CE0 VA: 0x18F7CE0
	public static Vector3 Round(Vector3 v) { }

	// RVA: 0x18F7EC4 Offset: 0x18F7EC4 VA: 0x18F7EC4
	public static void MakePixelPerfect(Transform t) { }

	// RVA: 0x18F81B0 Offset: 0x18F81B0 VA: 0x18F81B0
	public static bool Save(string fileName, byte[] bytes) { }

	// RVA: 0x18F8360 Offset: 0x18F8360 VA: 0x18F8360
	public static byte[] Load(string fileName) { }

	// RVA: 0x18F29E8 Offset: 0x18F29E8 VA: 0x18F29E8
	public static Color ApplyPMA(Color c) { }

	// RVA: 0x18F8434 Offset: 0x18F8434 VA: 0x18F8434
	public static void MarkParentAsChanged(GameObject go) { }

	// RVA: 0x18F851C Offset: 0x18F851C VA: 0x18F851C
	public static string get_clipboard() { }

	// RVA: 0x18F85C4 Offset: 0x18F85C4 VA: 0x18F85C4
	public static void set_clipboard(string value) { }

	[ObsoleteAttribute] // RVA: 0xCD70C0 Offset: 0xCD70C0 VA: 0xCD70C0
	// RVA: 0x18F86A8 Offset: 0x18F86A8 VA: 0x18F86A8
	public static string EncodeColor(Color c) { }

	[ObsoleteAttribute] // RVA: 0xCD70F8 Offset: 0xCD70F8 VA: 0xCD70F8
	// RVA: 0x18F873C Offset: 0x18F873C VA: 0x18F873C
	public static Color ParseColor(string text, int offset) { }

	[ObsoleteAttribute] // RVA: 0xCD7130 Offset: 0xCD7130 VA: 0xCD7130
	// RVA: 0x18F87B0 Offset: 0x18F87B0 VA: 0x18F87B0
	public static string StripSymbols(string text) { }

	[ExtensionAttribute] // RVA: 0xCD7168 Offset: 0xCD7168 VA: 0xCD7168
	// RVA: -1 Offset: -1
	public static T AddMissingComponent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20BB8 Offset: 0x1C20BB8 VA: 0x1C20BB8
	|-NGUITools.AddMissingComponent<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD7178 Offset: 0xCD7178 VA: 0xCD7178
	// RVA: 0x18F8814 Offset: 0x18F8814 VA: 0x18F8814
	public static Vector3[] GetSides(Camera cam) { }

	[ExtensionAttribute] // RVA: 0xCD7188 Offset: 0xCD7188 VA: 0xCD7188
	// RVA: 0x18F9114 Offset: 0x18F9114 VA: 0x18F9114
	public static Vector3[] GetSides(Camera cam, float depth) { }

	[ExtensionAttribute] // RVA: 0xCD7198 Offset: 0xCD7198 VA: 0xCD7198
	// RVA: 0x18F918C Offset: 0x18F918C VA: 0x18F918C
	public static Vector3[] GetSides(Camera cam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xCD71A8 Offset: 0xCD71A8 VA: 0xCD71A8
	// RVA: 0x18F8908 Offset: 0x18F8908 VA: 0x18F8908
	public static Vector3[] GetSides(Camera cam, float depth, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xCD71B8 Offset: 0xCD71B8 VA: 0xCD71B8
	// RVA: 0x18F92D4 Offset: 0x18F92D4 VA: 0x18F92D4
	public static Vector3[] GetWorldCorners(Camera cam) { }

	[ExtensionAttribute] // RVA: 0xCD71C8 Offset: 0xCD71C8 VA: 0xCD71C8
	// RVA: 0x18F9BD0 Offset: 0x18F9BD0 VA: 0x18F9BD0
	public static Vector3[] GetWorldCorners(Camera cam, float depth) { }

	[ExtensionAttribute] // RVA: 0xCD71D8 Offset: 0xCD71D8 VA: 0xCD71D8
	// RVA: 0x18F9C48 Offset: 0x18F9C48 VA: 0x18F9C48
	public static Vector3[] GetWorldCorners(Camera cam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xCD71E8 Offset: 0xCD71E8 VA: 0xCD71E8
	// RVA: 0x18F93C8 Offset: 0x18F93C8 VA: 0x18F93C8
	public static Vector3[] GetWorldCorners(Camera cam, float depth, Transform relativeTo) { }

	// RVA: 0x18F9D48 Offset: 0x18F9D48 VA: 0x18F9D48
	public static string GetFuncName(object obj, string method) { }

	// RVA: -1 Offset: -1
	public static void Execute<T>(GameObject go, string funcName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C60F00 Offset: 0x1C60F00 VA: 0x1C60F00
	|-NGUITools.Execute<object>
	*/

	// RVA: -1 Offset: -1
	public static void ExecuteAll<T>(GameObject root, string funcName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C60FE8 Offset: 0x1C60FE8 VA: 0x1C60FE8
	|-NGUITools.ExecuteAll<object>
	|-NGUITools.ExecuteAll<UIPanel>
	|-NGUITools.ExecuteAll<UIWidget>
	*/

	// RVA: 0x18F9E88 Offset: 0x18F9E88 VA: 0x18F9E88
	public static void ImmediatelyCreateDrawCalls(GameObject root) { }

	// RVA: 0x18F928C Offset: 0x18F928C VA: 0x18F928C
	public static Vector2 get_screenSize() { }

	// RVA: 0x18F9F64 Offset: 0x18F9F64 VA: 0x18F9F64
	private static void .cctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C884 Offset: 0xC2C884 VA: 0xC2C884
[AddComponentMenu] // RVA: 0xC2C884 Offset: 0xC2C884 VA: 0xC2C884
public class PropertyBinding : MonoBehaviour // TypeDefIndex: 12148
{
	// Fields
	public PropertyReference source; // 0x18
	public PropertyReference target; // 0x20
	public PropertyBinding.Direction direction; // 0x28
	public PropertyBinding.UpdateCondition update; // 0x2C
	public bool editMode; // 0x30
	private object mLastValue; // 0x38

	// Methods

	// RVA: 0x12D5C70 Offset: 0x12D5C70 VA: 0x12D5C70
	public void .ctor() { }

	// RVA: 0x12D5C84 Offset: 0x12D5C84 VA: 0x12D5C84
	private void Start() { }

	// RVA: 0x12D5E80 Offset: 0x12D5E80 VA: 0x12D5E80
	private void Update() { }

	// RVA: 0x12D5E94 Offset: 0x12D5E94 VA: 0x12D5E94
	private void LateUpdate() { }

	// RVA: 0x12D5EA8 Offset: 0x12D5EA8 VA: 0x12D5EA8
	private void FixedUpdate() { }

	// RVA: 0x12D5EBC Offset: 0x12D5EBC VA: 0x12D5EBC
	private void OnValidate() { }

	[ContextMenu] // RVA: 0xCD71F8 Offset: 0xCD71F8 VA: 0xCD71F8
	// RVA: 0x12D5CC4 Offset: 0x12D5CC4 VA: 0x12D5CC4
	public void UpdateTarget() { }
}

// Namespace: 
public enum PropertyBinding.UpdateCondition // TypeDefIndex: 12149
{
	// Fields
	public int value__; // 0x0
	public const PropertyBinding.UpdateCondition OnStart = 0;
	public const PropertyBinding.UpdateCondition OnUpdate = 1;
	public const PropertyBinding.UpdateCondition OnLateUpdate = 2;
	public const PropertyBinding.UpdateCondition OnFixedUpdate = 3;
}

// Namespace: 
public enum PropertyBinding.Direction // TypeDefIndex: 12150
{
	// Fields
	public int value__; // 0x0
	public const PropertyBinding.Direction SourceUpdatesTarget = 0;
	public const PropertyBinding.Direction TargetUpdatesSource = 1;
	public const PropertyBinding.Direction BiDirectional = 2;
}

// Namespace: 
[Serializable]
public class PropertyReference // TypeDefIndex: 12151
{
	// Fields
	[SerializeField] // RVA: 0xC85234 Offset: 0xC85234 VA: 0xC85234
	private Component mTarget; // 0x10
	[SerializeField] // RVA: 0xC85244 Offset: 0xC85244 VA: 0xC85244
	private string mName; // 0x18
	private FieldInfo mField; // 0x20
	private PropertyInfo mProperty; // 0x28
	private static int s_Hash; // 0x0

	// Properties
	public Component target { get; set; }
	public string name { get; set; }
	public bool isValid { get; }
	public bool isEnabled { get; }

	// Methods

	// RVA: 0x12D652C Offset: 0x12D652C VA: 0x12D652C
	public void .ctor() { }

	// RVA: 0x12D6534 Offset: 0x12D6534 VA: 0x12D6534
	public void .ctor(Component target, string fieldName) { }

	// RVA: 0x12D656C Offset: 0x12D656C VA: 0x12D656C
	public Component get_target() { }

	// RVA: 0x12D6574 Offset: 0x12D6574 VA: 0x12D6574
	public void set_target(Component value) { }

	// RVA: 0x12D6580 Offset: 0x12D6580 VA: 0x12D6580
	public string get_name() { }

	// RVA: 0x12D6588 Offset: 0x12D6588 VA: 0x12D6588
	public void set_name(string value) { }

	// RVA: 0x12D5EE0 Offset: 0x12D5EE0 VA: 0x12D5EE0
	public bool get_isValid() { }

	// RVA: 0x12D6594 Offset: 0x12D6594 VA: 0x12D6594
	public bool get_isEnabled() { }

	// RVA: 0x12D645C Offset: 0x12D645C VA: 0x12D645C
	public Type GetPropertyType() { }

	// RVA: 0x12D67EC Offset: 0x12D67EC VA: 0x12D67EC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x12D6908 Offset: 0x12D6908 VA: 0x12D6908 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x12D6970 Offset: 0x12D6970 VA: 0x12D6970
	public void Set(Component target, string methodName) { }

	// RVA: 0x12D6978 Offset: 0x12D6978 VA: 0x12D6978
	public void Clear() { }

	// RVA: 0x12D5ED8 Offset: 0x12D5ED8 VA: 0x12D5ED8
	public void Reset() { }

	// RVA: 0x12D6980 Offset: 0x12D6980 VA: 0x12D6980 Slot: 3
	public override string ToString() { }

	// RVA: 0x12D69F0 Offset: 0x12D69F0 VA: 0x12D69F0
	public static string ToString(Component comp, string property) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7230 Offset: 0xCD7230 VA: 0xCD7230
	[DebuggerStepThroughAttribute] // RVA: 0xCD7230 Offset: 0xCD7230 VA: 0xCD7230
	// RVA: 0x12D5F98 Offset: 0x12D5F98 VA: 0x12D5F98
	public object Get() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7268 Offset: 0xCD7268 VA: 0xCD7268
	[DebuggerStepThroughAttribute] // RVA: 0xCD7268 Offset: 0xCD7268 VA: 0xCD7268
	// RVA: 0x12D6054 Offset: 0x12D6054 VA: 0x12D6054
	public bool Set(object value) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD72A0 Offset: 0xCD72A0 VA: 0xCD72A0
	[DebuggerStepThroughAttribute] // RVA: 0xCD72A0 Offset: 0xCD72A0 VA: 0xCD72A0
	// RVA: 0x12D66B4 Offset: 0x12D66B4 VA: 0x12D66B4
	private bool Cache() { }

	// RVA: 0x12D6B9C Offset: 0x12D6B9C VA: 0x12D6B9C
	private bool Convert(ref object value) { }

	// RVA: 0x12D7094 Offset: 0x12D7094 VA: 0x12D7094
	public static bool Convert(Type from, Type to) { }

	// RVA: 0x12D7118 Offset: 0x12D7118 VA: 0x12D7118
	public static bool Convert(object value, Type to) { }

	// RVA: 0x12D6CA8 Offset: 0x12D6CA8 VA: 0x12D6CA8
	public static bool Convert(ref object value, Type from, Type to) { }

	// RVA: 0x12D71E8 Offset: 0x12D71E8 VA: 0x12D71E8
	private static void .cctor() { }
}

// Namespace: 
public class RealTime : MonoBehaviour // TypeDefIndex: 12152
{
	// Properties
	public static float time { get; }
	public static float deltaTime { get; }

	// Methods

	// RVA: 0x1288440 Offset: 0x1288440 VA: 0x1288440
	public void .ctor() { }

	// RVA: 0x1288448 Offset: 0x1288448 VA: 0x1288448
	public static float get_time() { }

	// RVA: 0x1288450 Offset: 0x1288450 VA: 0x1288450
	public static float get_deltaTime() { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC2C8D0 Offset: 0xC2C8D0 VA: 0xC2C8D0
[AddComponentMenu] // RVA: 0xC2C8D0 Offset: 0xC2C8D0 VA: 0xC2C8D0
public class SpringPanel : MonoBehaviour // TypeDefIndex: 12153
{
	// Fields
	public static SpringPanel current; // 0x0
	public Vector3 target; // 0x18
	public float strength; // 0x24
	public SpringPanel.OnFinished onFinished; // 0x28
	private UIPanel mPanel; // 0x30
	private Transform mTrans; // 0x38
	private UIScrollView mDrag; // 0x40

	// Methods

	// RVA: 0x13E4008 Offset: 0x13E4008 VA: 0x13E4008
	public void .ctor() { }

	// RVA: 0x13E4088 Offset: 0x13E4088 VA: 0x13E4088
	private void Start() { }

	// RVA: 0x13E4108 Offset: 0x13E4108 VA: 0x13E4108
	private void Update() { }

	// RVA: 0x13E4114 Offset: 0x13E4114 VA: 0x13E4114 Slot: 4
	protected virtual void AdvanceTowardsPosition() { }

	// RVA: 0x13E45E0 Offset: 0x13E45E0 VA: 0x13E45E0
	public static SpringPanel Begin(GameObject go, Vector3 pos, float strength) { }
}

// Namespace: 
public sealed class SpringPanel.OnFinished : MulticastDelegate // TypeDefIndex: 12154
{
	// Methods

	// RVA: 0x13E4728 Offset: 0x13E4728 VA: 0x13E4728
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x13E43E0 Offset: 0x13E43E0 VA: 0x13E43E0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x13E4738 Offset: 0x13E4738 VA: 0x13E4738 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x13E476C Offset: 0x13E476C VA: 0x13E476C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public abstract class UIBasicSprite : UIWidget // TypeDefIndex: 12155
{
	// Fields
	[HideInInspector] // RVA: 0xC85254 Offset: 0xC85254 VA: 0xC85254
	[SerializeField] // RVA: 0xC85254 Offset: 0xC85254 VA: 0xC85254
	protected UIBasicSprite.Type mType; // 0x180
	[HideInInspector] // RVA: 0xC8528C Offset: 0xC8528C VA: 0xC8528C
	[SerializeField] // RVA: 0xC8528C Offset: 0xC8528C VA: 0xC8528C
	protected UIBasicSprite.FillDirection mFillDirection; // 0x184
	[RangeAttribute] // RVA: 0xC852C4 Offset: 0xC852C4 VA: 0xC852C4
	[HideInInspector] // RVA: 0xC852C4 Offset: 0xC852C4 VA: 0xC852C4
	[SerializeField] // RVA: 0xC852C4 Offset: 0xC852C4 VA: 0xC852C4
	protected float mFillAmount; // 0x188
	[HideInInspector] // RVA: 0xC85314 Offset: 0xC85314 VA: 0xC85314
	[SerializeField] // RVA: 0xC85314 Offset: 0xC85314 VA: 0xC85314
	protected bool mInvert; // 0x18C
	[HideInInspector] // RVA: 0xC8534C Offset: 0xC8534C VA: 0xC8534C
	[SerializeField] // RVA: 0xC8534C Offset: 0xC8534C VA: 0xC8534C
	protected UIBasicSprite.Flip mFlip; // 0x190
	private Rect mInnerUV; // 0x194
	private Rect mOuterUV; // 0x1A4
	public UIBasicSprite.AdvancedType centerType; // 0x1B4
	public UIBasicSprite.AdvancedType leftType; // 0x1B8
	public UIBasicSprite.AdvancedType rightType; // 0x1BC
	public UIBasicSprite.AdvancedType bottomType; // 0x1C0
	public UIBasicSprite.AdvancedType topType; // 0x1C4
	protected static Vector2[] mTempPos; // 0x0
	protected static Vector2[] mTempUVs; // 0x8

	// Properties
	public virtual UIBasicSprite.Type type { get; set; }
	public UIBasicSprite.Flip flip { get; set; }
	public UIBasicSprite.FillDirection fillDirection { get; set; }
	public float fillAmount { get; set; }
	public override int minWidth { get; }
	public override int minHeight { get; }
	public bool invert { get; set; }
	public bool hasBorder { get; }
	public virtual bool premultipliedAlpha { get; }
	public virtual float pixelSize { get; }
	private Vector4 drawingUVs { get; }
	private Color32 drawingColor { get; }

	// Methods

	// RVA: 0x2128F24 Offset: 0x2128F24 VA: 0x2128F24
	protected void .ctor() { }

	// RVA: 0x212EC04 Offset: 0x212EC04 VA: 0x212EC04 Slot: 39
	public virtual UIBasicSprite.Type get_type() { }

	// RVA: 0x212EC0C Offset: 0x212EC0C VA: 0x212EC0C Slot: 40
	public virtual void set_type(UIBasicSprite.Type value) { }

	// RVA: 0x212EC30 Offset: 0x212EC30 VA: 0x212EC30
	public UIBasicSprite.Flip get_flip() { }

	// RVA: 0x212EC38 Offset: 0x212EC38 VA: 0x212EC38
	public void set_flip(UIBasicSprite.Flip value) { }

	// RVA: 0x212EC5C Offset: 0x212EC5C VA: 0x212EC5C
	public UIBasicSprite.FillDirection get_fillDirection() { }

	// RVA: 0x212EC64 Offset: 0x212EC64 VA: 0x212EC64
	public void set_fillDirection(UIBasicSprite.FillDirection value) { }

	// RVA: 0x212EC80 Offset: 0x212EC80 VA: 0x212EC80
	public float get_fillAmount() { }

	// RVA: 0x212EC88 Offset: 0x212EC88 VA: 0x212EC88
	public void set_fillAmount(float value) { }

	// RVA: 0x212ED18 Offset: 0x212ED18 VA: 0x212ED18 Slot: 34
	public override int get_minWidth() { }

	// RVA: 0x212EEC0 Offset: 0x212EEC0 VA: 0x212EEC0 Slot: 35
	public override int get_minHeight() { }

	// RVA: 0x212F068 Offset: 0x212F068 VA: 0x212F068
	public bool get_invert() { }

	// RVA: 0x212F070 Offset: 0x212F070 VA: 0x212F070
	public void set_invert(bool value) { }

	// RVA: 0x212A120 Offset: 0x212A120 VA: 0x212A120
	public bool get_hasBorder() { }

	// RVA: 0x212F098 Offset: 0x212F098 VA: 0x212F098 Slot: 41
	public virtual bool get_premultipliedAlpha() { }

	// RVA: 0x212F0A0 Offset: 0x212F0A0 VA: 0x212F0A0 Slot: 42
	public virtual float get_pixelSize() { }

	// RVA: 0x212F0A8 Offset: 0x212F0A8 VA: 0x212F0A8
	private Vector4 get_drawingUVs() { }

	// RVA: 0x212F1F0 Offset: 0x212F1F0 VA: 0x212F1F0
	private Color32 get_drawingColor() { }

	// RVA: 0x212A514 Offset: 0x212A514 VA: 0x212A514
	protected void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, Rect outer, Rect inner) { }

	// RVA: 0x212F348 Offset: 0x212F348 VA: 0x212F348
	private void SimpleFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x212F69C Offset: 0x212F69C VA: 0x212F69C
	private void SlicedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x21320DC Offset: 0x21320DC VA: 0x21320DC
	private void TiledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x21308AC Offset: 0x21308AC VA: 0x21308AC
	private void FilledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x2132764 Offset: 0x2132764 VA: 0x2132764
	private void AdvancedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x2134434 Offset: 0x2134434 VA: 0x2134434
	private static bool RadialCut(Vector2[] xy, Vector2[] uv, float fill, bool invert, int corner) { }

	// RVA: 0x21348F8 Offset: 0x21348F8 VA: 0x21348F8
	private static void RadialCut(Vector2[] xy, float cos, float sin, bool invert, int corner) { }

	// RVA: 0x21345A0 Offset: 0x21345A0 VA: 0x21345A0
	private static void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, float v0x, float v1x, float v0y, float v1y, float u0x, float u1x, float u0y, float u1y, Color col) { }

	// RVA: 0x21350F4 Offset: 0x21350F4 VA: 0x21350F4
	private static void .cctor() { }
}

// Namespace: 
public enum UIBasicSprite.Type // TypeDefIndex: 12156
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.Type Simple = 0;
	public const UIBasicSprite.Type Sliced = 1;
	public const UIBasicSprite.Type Tiled = 2;
	public const UIBasicSprite.Type Filled = 3;
	public const UIBasicSprite.Type Advanced = 4;
}

// Namespace: 
public enum UIBasicSprite.FillDirection // TypeDefIndex: 12157
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.FillDirection Horizontal = 0;
	public const UIBasicSprite.FillDirection Vertical = 1;
	public const UIBasicSprite.FillDirection Radial90 = 2;
	public const UIBasicSprite.FillDirection Radial180 = 3;
	public const UIBasicSprite.FillDirection Radial360 = 4;
}

// Namespace: 
public enum UIBasicSprite.AdvancedType // TypeDefIndex: 12158
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.AdvancedType Invisible = 0;
	public const UIBasicSprite.AdvancedType Sliced = 1;
	public const UIBasicSprite.AdvancedType Tiled = 2;
}

// Namespace: 
public enum UIBasicSprite.Flip // TypeDefIndex: 12159
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.Flip Nothing = 0;
	public const UIBasicSprite.Flip Horizontally = 1;
	public const UIBasicSprite.Flip Vertically = 2;
	public const UIBasicSprite.Flip Both = 3;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C958 Offset: 0xC2C958 VA: 0xC2C958
[AddComponentMenu] // RVA: 0xC2C958 Offset: 0xC2C958 VA: 0xC2C958
public class UIDrawCall : MonoBehaviour // TypeDefIndex: 12160
{
	// Fields
	private static BetterList<UIDrawCall> mActiveList; // 0x0
	private static BetterList<UIDrawCall> mInactiveList; // 0x8
	[HideInInspector] // RVA: 0xC85384 Offset: 0xC85384 VA: 0xC85384
	public int widgetCount; // 0x18
	[HideInInspector] // RVA: 0xC85394 Offset: 0xC85394 VA: 0xC85394
	public int depthStart; // 0x1C
	[HideInInspector] // RVA: 0xC853A4 Offset: 0xC853A4 VA: 0xC853A4
	public int depthEnd; // 0x20
	[HideInInspector] // RVA: 0xC853B4 Offset: 0xC853B4 VA: 0xC853B4
	public UIPanel manager; // 0x28
	[HideInInspector] // RVA: 0xC853C4 Offset: 0xC853C4 VA: 0xC853C4
	public UIPanel panel; // 0x30
	[HideInInspector] // RVA: 0xC853D4 Offset: 0xC853D4 VA: 0xC853D4
	public Texture2D clipTexture; // 0x38
	[HideInInspector] // RVA: 0xC853E4 Offset: 0xC853E4 VA: 0xC853E4
	public bool alwaysOnScreen; // 0x40
	[HideInInspector] // RVA: 0xC853F4 Offset: 0xC853F4 VA: 0xC853F4
	public BetterList<Vector3> verts; // 0x48
	[HideInInspector] // RVA: 0xC85404 Offset: 0xC85404 VA: 0xC85404
	public BetterList<Vector3> norms; // 0x50
	[HideInInspector] // RVA: 0xC85414 Offset: 0xC85414 VA: 0xC85414
	public BetterList<Vector4> tans; // 0x58
	[HideInInspector] // RVA: 0xC85424 Offset: 0xC85424 VA: 0xC85424
	public BetterList<Vector2> uvs; // 0x60
	[HideInInspector] // RVA: 0xC85434 Offset: 0xC85434 VA: 0xC85434
	public BetterList<Color32> cols; // 0x68
	private Material mMaterial; // 0x70
	private Texture mTexture; // 0x78
	private Shader mShader; // 0x80
	private int mClipCount; // 0x88
	private Transform mTrans; // 0x90
	private Mesh mMesh; // 0x98
	private MeshFilter mFilter; // 0xA0
	private MeshRenderer mRenderer; // 0xA8
	private Material mDynamicMat; // 0xB0
	private int[] mIndices; // 0xB8
	private bool mRebuildMat; // 0xC0
	private bool mLegacyShader; // 0xC1
	private int mRenderQueue; // 0xC4
	private int mTriangles; // 0xC8
	public bool isDirty; // 0xCC
	private bool mTextureClip; // 0xCD
	public UIDrawCall.OnRenderCallback onRender; // 0xD0
	private const int maxIndexBufferCache = 10;
	private static List<int[]> mCache; // 0x10
	private static int[] ClipRange; // 0x18
	private static int[] ClipArgs; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0xCDECF8 Offset: 0xCDECF8 VA: 0xCDECF8
	public static BetterList<UIDrawCall> list { get; }
	public static BetterList<UIDrawCall> activeList { get; }
	public static BetterList<UIDrawCall> inactiveList { get; }
	public int renderQueue { get; set; }
	public int sortingOrder { get; set; }
	public int finalRenderQueue { get; }
	public Transform cachedTransform { get; }
	public Material baseMaterial { get; set; }
	public Material dynamicMaterial { get; }
	public Texture mainTexture { get; set; }
	public Shader shader { get; set; }
	public int triangles { get; }
	public Bounds bounds { get; }
	public bool isClipped { get; }

	// Methods

	// RVA: 0x1B15724 Offset: 0x1B15724 VA: 0x1B15724
	public void .ctor() { }

	// RVA: 0x1B15844 Offset: 0x1B15844 VA: 0x1B15844
	public static BetterList<UIDrawCall> get_list() { }

	// RVA: 0x1B158AC Offset: 0x1B158AC VA: 0x1B158AC
	public static BetterList<UIDrawCall> get_activeList() { }

	// RVA: 0x1B15914 Offset: 0x1B15914 VA: 0x1B15914
	public static BetterList<UIDrawCall> get_inactiveList() { }

	// RVA: 0x1B1597C Offset: 0x1B1597C VA: 0x1B1597C
	public int get_renderQueue() { }

	// RVA: 0x1B15984 Offset: 0x1B15984 VA: 0x1B15984
	public void set_renderQueue(int value) { }

	// RVA: 0x1B15A44 Offset: 0x1B15A44 VA: 0x1B15A44
	public int get_sortingOrder() { }

	// RVA: 0x1B15AE4 Offset: 0x1B15AE4 VA: 0x1B15AE4
	public void set_sortingOrder(int value) { }

	// RVA: 0x1B15BB8 Offset: 0x1B15BB8 VA: 0x1B15BB8
	public int get_finalRenderQueue() { }

	// RVA: 0x1B15C58 Offset: 0x1B15C58 VA: 0x1B15C58
	public Transform get_cachedTransform() { }

	// RVA: 0x1B15CE8 Offset: 0x1B15CE8 VA: 0x1B15CE8
	public Material get_baseMaterial() { }

	// RVA: 0x1B15CF0 Offset: 0x1B15CF0 VA: 0x1B15CF0
	public void set_baseMaterial(Material value) { }

	// RVA: 0x1B15D80 Offset: 0x1B15D80 VA: 0x1B15D80
	public Material get_dynamicMaterial() { }

	// RVA: 0x1B15D88 Offset: 0x1B15D88 VA: 0x1B15D88
	public Texture get_mainTexture() { }

	// RVA: 0x1B15D90 Offset: 0x1B15D90 VA: 0x1B15D90
	public void set_mainTexture(Texture value) { }

	// RVA: 0x1B15E44 Offset: 0x1B15E44 VA: 0x1B15E44
	public Shader get_shader() { }

	// RVA: 0x1B15E4C Offset: 0x1B15E4C VA: 0x1B15E4C
	public void set_shader(Shader value) { }

	// RVA: 0x1B15EDC Offset: 0x1B15EDC VA: 0x1B15EDC
	public int get_triangles() { }

	// RVA: 0x1B15F60 Offset: 0x1B15F60 VA: 0x1B15F60
	public Bounds get_bounds() { }

	// RVA: 0x1B16030 Offset: 0x1B16030 VA: 0x1B16030
	public bool get_isClipped() { }

	// RVA: 0x1B16040 Offset: 0x1B16040 VA: 0x1B16040
	public void Clear() { }

	// RVA: 0x1B16184 Offset: 0x1B16184 VA: 0x1B16184
	private void CreateMaterial() { }

	// RVA: 0x1B16B04 Offset: 0x1B16B04 VA: 0x1B16B04
	private Material RebuildMaterial() { }

	// RVA: 0x1B16CC0 Offset: 0x1B16CC0 VA: 0x1B16CC0
	private void UpdateMaterials() { }

	// RVA: 0x1B16E9C Offset: 0x1B16E9C VA: 0x1B16E9C
	public void UpdateGeometry(int widgetCount) { }

	// RVA: 0x1B17A60 Offset: 0x1B17A60 VA: 0x1B17A60
	private int[] GenerateCachedIndexBuffer(int vertexCount, int indexCount) { }

	// RVA: 0x1B17DCC Offset: 0x1B17DCC VA: 0x1B17DCC
	private void OnWillRenderObject() { }

	// RVA: 0x1B188E4 Offset: 0x1B188E4 VA: 0x1B188E4
	private void SetClipping(int index, Vector4 cr, Vector2 soft, float angle) { }

	// RVA: 0x1B18B78 Offset: 0x1B18B78 VA: 0x1B18B78
	private void Awake() { }

	// RVA: 0x1B18E60 Offset: 0x1B18E60 VA: 0x1B18E60
	private void OnEnable() { }

	// RVA: 0x1B18E6C Offset: 0x1B18E6C VA: 0x1B18E6C
	private void OnDisable() { }

	// RVA: 0x1B18F6C Offset: 0x1B18F6C VA: 0x1B18F6C
	private void OnDestroy() { }

	// RVA: 0x1B18FE0 Offset: 0x1B18FE0 VA: 0x1B18FE0
	public static UIDrawCall Create(UIPanel panel, Material mat, Texture tex, Shader shader) { }

	// RVA: 0x1B19070 Offset: 0x1B19070 VA: 0x1B19070
	private static UIDrawCall Create(string name, UIPanel pan, Material mat, Texture tex, Shader shader) { }

	// RVA: 0x1B19238 Offset: 0x1B19238 VA: 0x1B19238
	private static UIDrawCall Create(string name, UIPanel pan) { }

	// RVA: 0x1B19470 Offset: 0x1B19470 VA: 0x1B19470
	public static void ClearAll() { }

	// RVA: 0x1B19674 Offset: 0x1B19674 VA: 0x1B19674
	public static void ReleaseAll() { }

	// RVA: 0x1B196D4 Offset: 0x1B196D4 VA: 0x1B196D4
	public static void ReleaseInactive() { }

	// RVA: 0x1B19894 Offset: 0x1B19894 VA: 0x1B19894
	public static int Count(UIPanel panel) { }

	// RVA: 0x1B199D4 Offset: 0x1B199D4 VA: 0x1B199D4
	public static void Destroy(UIDrawCall dc) { }

	// RVA: 0x1B19BF0 Offset: 0x1B19BF0 VA: 0x1B19BF0
	private static void .cctor() { }
}

// Namespace: 
public enum UIDrawCall.Clipping // TypeDefIndex: 12161
{
	// Fields
	public int value__; // 0x0
	public const UIDrawCall.Clipping None = 0;
	public const UIDrawCall.Clipping TextureMask = 1;
	public const UIDrawCall.Clipping SoftClip = 3;
	public const UIDrawCall.Clipping ConstrainButDontClip = 4;
}
