	// Fields
	public int value__; // 0x0
	public const NGUIText.Alignment Automatic = 0;
	public const NGUIText.Alignment Left = 1;
	public const NGUIText.Alignment Center = 2;
	public const NGUIText.Alignment Right = 3;
	public const NGUIText.Alignment Justified = 4;
}

// Namespace: 
public enum NGUIText.SymbolStyle // TypeDefIndex: 12106
{
	// Fields
	public int value__; // 0x0
	public const NGUIText.SymbolStyle None = 0;
	public const NGUIText.SymbolStyle Normal = 1;
	public const NGUIText.SymbolStyle Colored = 2;
}

// Namespace: 
public class NGUIText.GlyphInfo // TypeDefIndex: 12107
{
	// Fields
	public Vector2 v0; // 0x10
	public Vector2 v1; // 0x18
	public Vector2 u0; // 0x20
	public Vector2 u1; // 0x28
	public Vector2 u2; // 0x30
	public Vector2 u3; // 0x38
	public float advance; // 0x40
	public int channel; // 0x44

	// Methods

	// RVA: 0x1FFC310 Offset: 0x1FFC310 VA: 0x1FFC310
	public void .ctor() { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC98910 Offset: 0xC98910 VA: 0xC98910
public static class NGUITools // TypeDefIndex: 12108
{
	// Fields
	private static AudioListener mListener; // 0x0
	private static bool mLoaded; // 0x8
	private static float mGlobalVolume; // 0xC
	private static float mLastTimestamp; // 0x10
	private static AudioClip mLastClip; // 0x18
	private static Vector3[] mSides; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCF18E8 Offset: 0xCF18E8 VA: 0xCF18E8
	private static Comparison<UIWidget> <>f__mg$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCF18F8 Offset: 0xCF18F8 VA: 0xCF18F8
	private static Comparison<UIPanel> <>f__mg$cache1; // 0x30

	// Properties
	public static float soundVolume { get; set; }
	public static bool fileAccess { get; }
	public static string clipboard { get; set; }
	public static Vector2 screenSize { get; }

	// Methods

	// RVA: 0x1FFC318 Offset: 0x1FFC318 VA: 0x1FFC318
	public static float get_soundVolume() { }

	// RVA: 0x1FFC3EC Offset: 0x1FFC3EC VA: 0x1FFC3EC
	public static void set_soundVolume(float value) { }

	// RVA: 0x1FFC4B8 Offset: 0x1FFC4B8 VA: 0x1FFC4B8
	public static bool get_fileAccess() { }

	// RVA: 0x1FFC4C0 Offset: 0x1FFC4C0 VA: 0x1FFC4C0
	public static AudioSource PlaySound(AudioClip clip) { }

	// RVA: 0x1FFCC44 Offset: 0x1FFCC44 VA: 0x1FFCC44
	public static AudioSource PlaySound(AudioClip clip, float volume) { }

	// RVA: 0x1FFC52C Offset: 0x1FFC52C VA: 0x1FFC52C
	public static AudioSource PlaySound(AudioClip clip, float volume, float pitch) { }

	// RVA: 0x1FFCD84 Offset: 0x1FFCD84 VA: 0x1FFCD84
	public static int RandomRange(int min, int max) { }

	// RVA: 0x1FECEB4 Offset: 0x1FECEB4 VA: 0x1FECEB4
	public static string GetHierarchy(GameObject obj) { }

	// RVA: -1 Offset: -1
	public static T[] FindActive<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B816A0 Offset: 0x2B816A0 VA: 0x2B816A0
	|-NGUITools.FindActive<object>
	|-NGUITools.FindActive<UILabel>
	|-NGUITools.FindActive<UIPanel>
	|-NGUITools.FindActive<UISprite>
	|-NGUITools.FindActive<UIWidget>
	|-NGUITools.FindActive<AudioListener>
	|-NGUITools.FindActive<Camera>
	*/

	// RVA: 0x1FF1238 Offset: 0x1FF1238 VA: 0x1FF1238
	public static Camera FindCameraForLayer(int layer) { }

	// RVA: 0x1FFCD9C Offset: 0x1FFCD9C VA: 0x1FFCD9C
	public static void AddWidgetCollider(GameObject go) { }

	// RVA: 0x1FFCE04 Offset: 0x1FFCE04 VA: 0x1FFCE04
	public static void AddWidgetCollider(GameObject go, bool considerInactive) { }

	// RVA: 0x1FFD9F4 Offset: 0x1FFD9F4 VA: 0x1FFD9F4
	public static void UpdateWidgetCollider(GameObject go) { }

	// RVA: 0x1FFDA5C Offset: 0x1FFDA5C VA: 0x1FFDA5C
	public static void UpdateWidgetCollider(GameObject go, bool considerInactive) { }

	// RVA: 0x1FFD228 Offset: 0x1FFD228 VA: 0x1FFD228
	public static void UpdateWidgetCollider(BoxCollider box, bool considerInactive) { }

	// RVA: 0x1FFD648 Offset: 0x1FFD648 VA: 0x1FFD648
	public static void UpdateWidgetCollider(BoxCollider2D box, bool considerInactive) { }

	// RVA: -1 Offset: -1
	public static string GetTypeName<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CB23C Offset: 0x21CB23C VA: 0x21CB23C
	|-NGUITools.GetTypeName<object>
	*/

	// RVA: 0x1FFDBF4 Offset: 0x1FFDBF4 VA: 0x1FFDBF4
	public static string GetTypeName(Object obj) { }

	// RVA: 0x1FFDD44 Offset: 0x1FFDD44 VA: 0x1FFDD44
	public static void RegisterUndo(Object obj, string name) { }

	// RVA: 0x1FFDD48 Offset: 0x1FFDD48 VA: 0x1FFDD48
	public static void SetDirty(Object obj) { }

	// RVA: 0x1FFDD4C Offset: 0x1FFDD4C VA: 0x1FFDD4C
	public static GameObject AddChild(GameObject parent) { }

	// RVA: 0x1FFDDB4 Offset: 0x1FFDDB4 VA: 0x1FFDDB4
	public static GameObject AddChild(GameObject parent, bool undo) { }

	// RVA: 0x1FFDFDC Offset: 0x1FFDFDC VA: 0x1FFDFDC
	public static GameObject AddChild(GameObject parent, GameObject prefab) { }

	// RVA: 0x1FFE22C Offset: 0x1FFE22C VA: 0x1FFE22C
	public static int CalculateRaycastDepth(GameObject go) { }

	// RVA: 0x1FFE430 Offset: 0x1FFE430 VA: 0x1FFE430
	public static int CalculateNextDepth(GameObject go) { }

	// RVA: 0x1FFE564 Offset: 0x1FFE564 VA: 0x1FFE564
	public static int CalculateNextDepth(GameObject go, bool ignoreChildrenWithColliders) { }

	// RVA: 0x1FFE7E4 Offset: 0x1FFE7E4 VA: 0x1FFE7E4
	public static int AdjustDepth(GameObject go, int adjustment) { }

	// RVA: 0x1FFEAD8 Offset: 0x1FFEAD8 VA: 0x1FFEAD8
	public static void BringForward(GameObject go) { }

	// RVA: 0x1FFEE4C Offset: 0x1FFEE4C VA: 0x1FFEE4C
	public static void PushBack(GameObject go) { }

	// RVA: 0x1FFEF10 Offset: 0x1FFEF10 VA: 0x1FFEF10
	public static void NormalizeDepths() { }

	// RVA: 0x1FFEDE0 Offset: 0x1FFEDE0 VA: 0x1FFEDE0
	public static void NormalizeWidgetDepths() { }

	// RVA: 0x1FFF190 Offset: 0x1FFF190 VA: 0x1FFF190
	public static void NormalizeWidgetDepths(GameObject go) { }

	// RVA: 0x1FFEF70 Offset: 0x1FFEF70 VA: 0x1FFEF70
	public static void NormalizeWidgetDepths(UIWidget[] list) { }

	// RVA: 0x1FFEB9C Offset: 0x1FFEB9C VA: 0x1FFEB9C
	public static void NormalizePanelDepths() { }

	// RVA: 0x1FFF21C Offset: 0x1FFF21C VA: 0x1FFF21C
	public static UIPanel CreateUI(bool advanced3D) { }

	// RVA: 0x1FFFF54 Offset: 0x1FFFF54 VA: 0x1FFFF54
	public static UIPanel CreateUI(bool advanced3D, int layer) { }

	// RVA: 0x1FFF288 Offset: 0x1FFF288 VA: 0x1FFF288
	public static UIPanel CreateUI(Transform trans, bool advanced3D, int layer) { }

	// RVA: 0x20000FC Offset: 0x20000FC VA: 0x20000FC
	public static void SetChildLayer(Transform t, int layer) { }

	// RVA: -1 Offset: -1
	public static T AddChild<T>(GameObject parent) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218F658 Offset: 0x218F658 VA: 0x218F658
	|-NGUITools.AddChild<object>
	*/

	// RVA: -1 Offset: -1
	public static T AddChild<T>(GameObject parent, bool undo) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218F734 Offset: 0x218F734 VA: 0x218F734
	|-NGUITools.AddChild<object>
	|-NGUITools.AddChild<Camera>
	*/

	// RVA: -1 Offset: -1
	public static T AddWidget<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218F8F0 Offset: 0x218F8F0 VA: 0x218F8F0
	|-NGUITools.AddWidget<object>
	|-NGUITools.AddWidget<UILabel>
	|-NGUITools.AddWidget<UISprite>
	|-NGUITools.AddWidget<UITexture>
	*/

	// RVA: -1 Offset: -1
	public static T AddWidget<T>(GameObject go, int depth) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218F9F4 Offset: 0x218F9F4 VA: 0x218F9F4
	|-NGUITools.AddWidget<object>
	*/

	// RVA: 0x20001F8 Offset: 0x20001F8 VA: 0x20001F8
	public static UISprite AddSprite(GameObject go, UIAtlas atlas, string spriteName) { }

	// RVA: 0x2000370 Offset: 0x2000370 VA: 0x2000370
	public static GameObject GetRoot(GameObject go) { }

	// RVA: -1 Offset: -1
	public static T FindInParents<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218FAEC Offset: 0x218FAEC VA: 0x218FAEC
	|-NGUITools.FindInParents<object>
	|-NGUITools.FindInParents<UIButton>
	|-NGUITools.FindInParents<UICenterOnChild>
	|-NGUITools.FindInParents<UIDragDropContainer>
	|-NGUITools.FindInParents<UIDraggableCamera>
	|-NGUITools.FindInParents<UIGrid>
	|-NGUITools.FindInParents<UIInput>
	|-NGUITools.FindInParents<UIPanel>
	|-NGUITools.FindInParents<UIRect>
	|-NGUITools.FindInParents<UIRoot>
	|-NGUITools.FindInParents<UIScrollView>
	|-NGUITools.FindInParents<UITable>
	*/

	// RVA: -1 Offset: -1
	public static T FindInParents<T>(Transform trans) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218FCB8 Offset: 0x218FCB8 VA: 0x218FCB8
	|-NGUITools.FindInParents<object>
	|-NGUITools.FindInParents<UIGrid>
	|-NGUITools.FindInParents<UIPanel>
	|-NGUITools.FindInParents<UIRect>
	|-NGUITools.FindInParents<UIRoot>
	|-NGUITools.FindInParents<UIScrollView>
	|-NGUITools.FindInParents<UITable>
	*/

	// RVA: 0x2000440 Offset: 0x2000440 VA: 0x2000440
	public static void Destroy(Object obj) { }

	// RVA: 0x20005B4 Offset: 0x20005B4 VA: 0x20005B4
	public static void DestroyImmediate(Object obj) { }

	// RVA: 0x200068C Offset: 0x200068C VA: 0x200068C
	public static void Broadcast(string funcName) { }

	// RVA: 0x20007D0 Offset: 0x20007D0 VA: 0x20007D0
	public static void Broadcast(string funcName, object param) { }

	// RVA: 0x1FFFFCC Offset: 0x1FFFFCC VA: 0x1FFFFCC
	public static bool IsChild(Transform parent, Transform child) { }

	// RVA: 0x2000924 Offset: 0x2000924 VA: 0x2000924
	private static void Activate(Transform t) { }

	// RVA: 0x200098C Offset: 0x200098C VA: 0x200098C
	private static void Activate(Transform t, bool compatibilityMode) { }

	// RVA: 0x2000B68 Offset: 0x2000B68 VA: 0x2000B68
	private static void Deactivate(Transform t) { }

	// RVA: 0x2000C08 Offset: 0x2000C08 VA: 0x2000C08
	public static void SetActive(GameObject go, bool state) { }

	// RVA: 0x2000C80 Offset: 0x2000C80 VA: 0x2000C80
	public static void SetActive(GameObject go, bool state, bool compatibilityMode) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4430C Offset: 0xD4430C VA: 0xD4430C
	[DebuggerStepThroughAttribute] // RVA: 0xD4430C Offset: 0xD4430C VA: 0xD4430C
	// RVA: 0x2000DA0 Offset: 0x2000DA0 VA: 0x2000DA0
	private static void CallCreatePanel(Transform t) { }

	// RVA: 0x2000EE4 Offset: 0x2000EE4 VA: 0x2000EE4
	public static void SetActiveChildren(GameObject go, bool state) { }

	[ObsoleteAttribute] // RVA: 0xD44344 Offset: 0xD44344 VA: 0xD44344
	// RVA: 0x2001038 Offset: 0x2001038 VA: 0x2001038
	public static bool IsActive(Behaviour mb) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4437C Offset: 0xD4437C VA: 0xD4437C
	[DebuggerStepThroughAttribute] // RVA: 0xD4437C Offset: 0xD4437C VA: 0xD4437C
	// RVA: 0x1FFCCBC Offset: 0x1FFCCBC VA: 0x1FFCCBC
	public static bool GetActive(Behaviour mb) { }

	[DebuggerHiddenAttribute] // RVA: 0xD443B4 Offset: 0xD443B4 VA: 0xD443B4
	[DebuggerStepThroughAttribute] // RVA: 0xD443B4 Offset: 0xD443B4 VA: 0xD443B4
	// RVA: 0x1FEEDCC Offset: 0x1FEEDCC VA: 0x1FEEDCC
	public static bool GetActive(GameObject go) { }

	[DebuggerHiddenAttribute] // RVA: 0xD443EC Offset: 0xD443EC VA: 0xD443EC
	[DebuggerStepThroughAttribute] // RVA: 0xD443EC Offset: 0xD443EC VA: 0xD443EC
	// RVA: 0x2000B34 Offset: 0x2000B34 VA: 0x2000B34
	public static void SetActiveSelf(GameObject go, bool state) { }

	// RVA: 0x2001104 Offset: 0x2001104 VA: 0x2001104
	public static void SetLayer(GameObject go, int layer) { }

	// RVA: 0x2001238 Offset: 0x2001238 VA: 0x2001238
	public static Vector3 Round(Vector3 v) { }

	// RVA: 0x200141C Offset: 0x200141C VA: 0x200141C
	public static void MakePixelPerfect(Transform t) { }

	// RVA: 0x2001708 Offset: 0x2001708 VA: 0x2001708
	public static bool Save(string fileName, byte[] bytes) { }

	// RVA: 0x20018B8 Offset: 0x20018B8 VA: 0x20018B8
	public static byte[] Load(string fileName) { }

	// RVA: 0x1FFBF40 Offset: 0x1FFBF40 VA: 0x1FFBF40
	public static Color ApplyPMA(Color c) { }

	// RVA: 0x200198C Offset: 0x200198C VA: 0x200198C
	public static void MarkParentAsChanged(GameObject go) { }

	// RVA: 0x2001A74 Offset: 0x2001A74 VA: 0x2001A74
	public static string get_clipboard() { }

	// RVA: 0x2001B1C Offset: 0x2001B1C VA: 0x2001B1C
	public static void set_clipboard(string value) { }

	[ObsoleteAttribute] // RVA: 0xD44424 Offset: 0xD44424 VA: 0xD44424
	// RVA: 0x2001C00 Offset: 0x2001C00 VA: 0x2001C00
	public static string EncodeColor(Color c) { }

	[ObsoleteAttribute] // RVA: 0xD4445C Offset: 0xD4445C VA: 0xD4445C
	// RVA: 0x2001C94 Offset: 0x2001C94 VA: 0x2001C94
	public static Color ParseColor(string text, int offset) { }

	[ObsoleteAttribute] // RVA: 0xD44494 Offset: 0xD44494 VA: 0xD44494
	// RVA: 0x2001D08 Offset: 0x2001D08 VA: 0x2001D08
	public static string StripSymbols(string text) { }

	[ExtensionAttribute] // RVA: 0xD444CC Offset: 0xD444CC VA: 0xD444CC
	// RVA: -1 Offset: -1
	public static T AddMissingComponent<T>(GameObject go) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218F818 Offset: 0x218F818 VA: 0x218F818
	|-NGUITools.AddMissingComponent<object>
	*/

	[ExtensionAttribute] // RVA: 0xD444DC Offset: 0xD444DC VA: 0xD444DC
	// RVA: 0x2001D6C Offset: 0x2001D6C VA: 0x2001D6C
	public static Vector3[] GetSides(Camera cam) { }

	[ExtensionAttribute] // RVA: 0xD444EC Offset: 0xD444EC VA: 0xD444EC
	// RVA: 0x200266C Offset: 0x200266C VA: 0x200266C
	public static Vector3[] GetSides(Camera cam, float depth) { }

	[ExtensionAttribute] // RVA: 0xD444FC Offset: 0xD444FC VA: 0xD444FC
	// RVA: 0x20026E4 Offset: 0x20026E4 VA: 0x20026E4
	public static Vector3[] GetSides(Camera cam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xD4450C Offset: 0xD4450C VA: 0xD4450C
	// RVA: 0x2001E60 Offset: 0x2001E60 VA: 0x2001E60
	public static Vector3[] GetSides(Camera cam, float depth, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xD4451C Offset: 0xD4451C VA: 0xD4451C
	// RVA: 0x200282C Offset: 0x200282C VA: 0x200282C
	public static Vector3[] GetWorldCorners(Camera cam) { }

	[ExtensionAttribute] // RVA: 0xD4452C Offset: 0xD4452C VA: 0xD4452C
	// RVA: 0x2003128 Offset: 0x2003128 VA: 0x2003128
	public static Vector3[] GetWorldCorners(Camera cam, float depth) { }

	[ExtensionAttribute] // RVA: 0xD4453C Offset: 0xD4453C VA: 0xD4453C
	// RVA: 0x20031A0 Offset: 0x20031A0 VA: 0x20031A0
	public static Vector3[] GetWorldCorners(Camera cam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xD4454C Offset: 0xD4454C VA: 0xD4454C
	// RVA: 0x2002920 Offset: 0x2002920 VA: 0x2002920
	public static Vector3[] GetWorldCorners(Camera cam, float depth, Transform relativeTo) { }

	// RVA: 0x20032A0 Offset: 0x20032A0 VA: 0x20032A0
	public static string GetFuncName(object obj, string method) { }

	// RVA: -1 Offset: -1
	public static void Execute<T>(GameObject go, string funcName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21D10F0 Offset: 0x21D10F0 VA: 0x21D10F0
	|-NGUITools.Execute<object>
	*/

	// RVA: -1 Offset: -1
	public static void ExecuteAll<T>(GameObject root, string funcName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21D11D8 Offset: 0x21D11D8 VA: 0x21D11D8
	|-NGUITools.ExecuteAll<object>
	|-NGUITools.ExecuteAll<UIPanel>
	|-NGUITools.ExecuteAll<UIWidget>
	*/

	// RVA: 0x20033E0 Offset: 0x20033E0 VA: 0x20033E0
	public static void ImmediatelyCreateDrawCalls(GameObject root) { }

	// RVA: 0x20027E4 Offset: 0x20027E4 VA: 0x20027E4
	public static Vector2 get_screenSize() { }

	// RVA: 0x20034BC Offset: 0x20034BC VA: 0x20034BC
	private static void .cctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC98920 Offset: 0xC98920 VA: 0xC98920
[AddComponentMenu] // RVA: 0xC98920 Offset: 0xC98920 VA: 0xC98920
public class PropertyBinding : MonoBehaviour // TypeDefIndex: 12109
{
	// Fields
	public PropertyReference source; // 0x18
	public PropertyReference target; // 0x20
	public PropertyBinding.Direction direction; // 0x28
	public PropertyBinding.UpdateCondition update; // 0x2C
	public bool editMode; // 0x30
	private object mLastValue; // 0x38

	// Methods

	// RVA: 0x19D3AEC Offset: 0x19D3AEC VA: 0x19D3AEC
	public void .ctor() { }

	// RVA: 0x19D3B00 Offset: 0x19D3B00 VA: 0x19D3B00
	private void Start() { }

	// RVA: 0x19D3CFC Offset: 0x19D3CFC VA: 0x19D3CFC
	private void Update() { }

	// RVA: 0x19D3D10 Offset: 0x19D3D10 VA: 0x19D3D10
	private void LateUpdate() { }

	// RVA: 0x19D3D24 Offset: 0x19D3D24 VA: 0x19D3D24
	private void FixedUpdate() { }

	// RVA: 0x19D3D38 Offset: 0x19D3D38 VA: 0x19D3D38
	private void OnValidate() { }

	[ContextMenu] // RVA: 0xD4455C Offset: 0xD4455C VA: 0xD4455C
	// RVA: 0x19D3B40 Offset: 0x19D3B40 VA: 0x19D3B40
	public void UpdateTarget() { }
}

// Namespace: 
public enum PropertyBinding.UpdateCondition // TypeDefIndex: 12110
{
	// Fields
	public int value__; // 0x0
	public const PropertyBinding.UpdateCondition OnStart = 0;
	public const PropertyBinding.UpdateCondition OnUpdate = 1;
	public const PropertyBinding.UpdateCondition OnLateUpdate = 2;
	public const PropertyBinding.UpdateCondition OnFixedUpdate = 3;
}

// Namespace: 
public enum PropertyBinding.Direction // TypeDefIndex: 12111
{
	// Fields
	public int value__; // 0x0
	public const PropertyBinding.Direction SourceUpdatesTarget = 0;
	public const PropertyBinding.Direction TargetUpdatesSource = 1;
	public const PropertyBinding.Direction BiDirectional = 2;
}

// Namespace: 
[Serializable]
public class PropertyReference // TypeDefIndex: 12112
{
	// Fields
	[SerializeField] // RVA: 0xCF1908 Offset: 0xCF1908 VA: 0xCF1908
	private Component mTarget; // 0x10
	[SerializeField] // RVA: 0xCF1918 Offset: 0xCF1918 VA: 0xCF1918
	private string mName; // 0x18
	private FieldInfo mField; // 0x20
	private PropertyInfo mProperty; // 0x28
	private static int s_Hash; // 0x0

	// Properties
	public Component target { get; set; }
	public string name { get; set; }
	public bool isValid { get; }
	public bool isEnabled { get; }

	// Methods

	// RVA: 0x19D43A8 Offset: 0x19D43A8 VA: 0x19D43A8
	public void .ctor() { }

	// RVA: 0x19D43B0 Offset: 0x19D43B0 VA: 0x19D43B0
	public void .ctor(Component target, string fieldName) { }

	// RVA: 0x19D43E8 Offset: 0x19D43E8 VA: 0x19D43E8
	public Component get_target() { }

	// RVA: 0x19D43F0 Offset: 0x19D43F0 VA: 0x19D43F0
	public void set_target(Component value) { }

	// RVA: 0x19D43FC Offset: 0x19D43FC VA: 0x19D43FC
	public string get_name() { }

	// RVA: 0x19D4404 Offset: 0x19D4404 VA: 0x19D4404
	public void set_name(string value) { }

	// RVA: 0x19D3D5C Offset: 0x19D3D5C VA: 0x19D3D5C
	public bool get_isValid() { }

	// RVA: 0x19D4410 Offset: 0x19D4410 VA: 0x19D4410
	public bool get_isEnabled() { }

	// RVA: 0x19D42D8 Offset: 0x19D42D8 VA: 0x19D42D8
	public Type GetPropertyType() { }

	// RVA: 0x19D4668 Offset: 0x19D4668 VA: 0x19D4668 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x19D4784 Offset: 0x19D4784 VA: 0x19D4784 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x19D47EC Offset: 0x19D47EC VA: 0x19D47EC
	public void Set(Component target, string methodName) { }

	// RVA: 0x19D47F4 Offset: 0x19D47F4 VA: 0x19D47F4
	public void Clear() { }

	// RVA: 0x19D3D54 Offset: 0x19D3D54 VA: 0x19D3D54
	public void Reset() { }

	// RVA: 0x19D47FC Offset: 0x19D47FC VA: 0x19D47FC Slot: 3
	public override string ToString() { }

	// RVA: 0x19D486C Offset: 0x19D486C VA: 0x19D486C
	public static string ToString(Component comp, string property) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44594 Offset: 0xD44594 VA: 0xD44594
	[DebuggerStepThroughAttribute] // RVA: 0xD44594 Offset: 0xD44594 VA: 0xD44594
	// RVA: 0x19D3E14 Offset: 0x19D3E14 VA: 0x19D3E14
	public object Get() { }

	[DebuggerHiddenAttribute] // RVA: 0xD445CC Offset: 0xD445CC VA: 0xD445CC
	[DebuggerStepThroughAttribute] // RVA: 0xD445CC Offset: 0xD445CC VA: 0xD445CC
	// RVA: 0x19D3ED0 Offset: 0x19D3ED0 VA: 0x19D3ED0
	public bool Set(object value) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44604 Offset: 0xD44604 VA: 0xD44604
	[DebuggerStepThroughAttribute] // RVA: 0xD44604 Offset: 0xD44604 VA: 0xD44604
	// RVA: 0x19D4530 Offset: 0x19D4530 VA: 0x19D4530
	private bool Cache() { }

	// RVA: 0x19D4A18 Offset: 0x19D4A18 VA: 0x19D4A18
	private bool Convert(ref object value) { }

	// RVA: 0x19D4F10 Offset: 0x19D4F10 VA: 0x19D4F10
	public static bool Convert(Type from, Type to) { }

	// RVA: 0x19D4F94 Offset: 0x19D4F94 VA: 0x19D4F94
	public static bool Convert(object value, Type to) { }

	// RVA: 0x19D4B24 Offset: 0x19D4B24 VA: 0x19D4B24
	public static bool Convert(ref object value, Type from, Type to) { }

	// RVA: 0x19D5064 Offset: 0x19D5064 VA: 0x19D5064
	private static void .cctor() { }
}

// Namespace: 
public class RealTime : MonoBehaviour // TypeDefIndex: 12113
{
	// Properties
	public static float time { get; }
	public static float deltaTime { get; }

	// Methods

	// RVA: 0x181E7D8 Offset: 0x181E7D8 VA: 0x181E7D8
	public void .ctor() { }

	// RVA: 0x181E7E0 Offset: 0x181E7E0 VA: 0x181E7E0
	public static float get_time() { }

	// RVA: 0x181E7E8 Offset: 0x181E7E8 VA: 0x181E7E8
	public static float get_deltaTime() { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC9896C Offset: 0xC9896C VA: 0xC9896C
[AddComponentMenu] // RVA: 0xC9896C Offset: 0xC9896C VA: 0xC9896C
public class SpringPanel : MonoBehaviour // TypeDefIndex: 12114
{
	// Fields
	public static SpringPanel current; // 0x0
	public Vector3 target; // 0x18
	public float strength; // 0x24
	public SpringPanel.OnFinished onFinished; // 0x28
	private UIPanel mPanel; // 0x30
	private Transform mTrans; // 0x38
	private UIScrollView mDrag; // 0x40

	// Methods

	// RVA: 0x1960480 Offset: 0x1960480 VA: 0x1960480
	public void .ctor() { }

	// RVA: 0x1960500 Offset: 0x1960500 VA: 0x1960500
	private void Start() { }

	// RVA: 0x1960580 Offset: 0x1960580 VA: 0x1960580
	private void Update() { }

	// RVA: 0x196058C Offset: 0x196058C VA: 0x196058C Slot: 4
	protected virtual void AdvanceTowardsPosition() { }

	// RVA: 0x1960A58 Offset: 0x1960A58 VA: 0x1960A58
	public static SpringPanel Begin(GameObject go, Vector3 pos, float strength) { }
}

// Namespace: 
public sealed class SpringPanel.OnFinished : MulticastDelegate // TypeDefIndex: 12115
{
	// Methods

	// RVA: 0x1960BA0 Offset: 0x1960BA0 VA: 0x1960BA0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1960858 Offset: 0x1960858 VA: 0x1960858 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1960BB0 Offset: 0x1960BB0 VA: 0x1960BB0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1960BE4 Offset: 0x1960BE4 VA: 0x1960BE4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public abstract class UIBasicSprite : UIWidget // TypeDefIndex: 12116
{
	// Fields
	[HideInInspector] // RVA: 0xCF1928 Offset: 0xCF1928 VA: 0xCF1928
	[SerializeField] // RVA: 0xCF1928 Offset: 0xCF1928 VA: 0xCF1928
	protected UIBasicSprite.Type mType; // 0x180
	[HideInInspector] // RVA: 0xCF1960 Offset: 0xCF1960 VA: 0xCF1960
	[SerializeField] // RVA: 0xCF1960 Offset: 0xCF1960 VA: 0xCF1960
	protected UIBasicSprite.FillDirection mFillDirection; // 0x184
	[RangeAttribute] // RVA: 0xCF1998 Offset: 0xCF1998 VA: 0xCF1998
	[HideInInspector] // RVA: 0xCF1998 Offset: 0xCF1998 VA: 0xCF1998
	[SerializeField] // RVA: 0xCF1998 Offset: 0xCF1998 VA: 0xCF1998
	protected float mFillAmount; // 0x188
	[HideInInspector] // RVA: 0xCF19E8 Offset: 0xCF19E8 VA: 0xCF19E8
	[SerializeField] // RVA: 0xCF19E8 Offset: 0xCF19E8 VA: 0xCF19E8
	protected bool mInvert; // 0x18C
	[HideInInspector] // RVA: 0xCF1A20 Offset: 0xCF1A20 VA: 0xCF1A20
	[SerializeField] // RVA: 0xCF1A20 Offset: 0xCF1A20 VA: 0xCF1A20
	protected UIBasicSprite.Flip mFlip; // 0x190
	private Rect mInnerUV; // 0x194
	private Rect mOuterUV; // 0x1A4
	public UIBasicSprite.AdvancedType centerType; // 0x1B4
	public UIBasicSprite.AdvancedType leftType; // 0x1B8
	public UIBasicSprite.AdvancedType rightType; // 0x1BC
	public UIBasicSprite.AdvancedType bottomType; // 0x1C0
	public UIBasicSprite.AdvancedType topType; // 0x1C4
	protected static Vector2[] mTempPos; // 0x0
	protected static Vector2[] mTempUVs; // 0x8

	// Properties
	public virtual UIBasicSprite.Type type { get; set; }
	public UIBasicSprite.Flip flip { get; set; }
	public UIBasicSprite.FillDirection fillDirection { get; set; }
	public float fillAmount { get; set; }
	public override int minWidth { get; }
	public override int minHeight { get; }
	public bool invert { get; set; }
	public bool hasBorder { get; }
	public virtual bool premultipliedAlpha { get; }
	public virtual float pixelSize { get; }
	private Vector4 drawingUVs { get; }
	private Color32 drawingColor { get; }

	// Methods

	// RVA: 0x249DDBC Offset: 0x249DDBC VA: 0x249DDBC
	protected void .ctor() { }

	// RVA: 0x24A3A9C Offset: 0x24A3A9C VA: 0x24A3A9C Slot: 39
	public virtual UIBasicSprite.Type get_type() { }

	// RVA: 0x24A3AA4 Offset: 0x24A3AA4 VA: 0x24A3AA4 Slot: 40
	public virtual void set_type(UIBasicSprite.Type value) { }

	// RVA: 0x24A3AC8 Offset: 0x24A3AC8 VA: 0x24A3AC8
	public UIBasicSprite.Flip get_flip() { }

	// RVA: 0x24A3AD0 Offset: 0x24A3AD0 VA: 0x24A3AD0
	public void set_flip(UIBasicSprite.Flip value) { }

	// RVA: 0x24A3AF4 Offset: 0x24A3AF4 VA: 0x24A3AF4
	public UIBasicSprite.FillDirection get_fillDirection() { }

	// RVA: 0x24A3AFC Offset: 0x24A3AFC VA: 0x24A3AFC
	public void set_fillDirection(UIBasicSprite.FillDirection value) { }

	// RVA: 0x24A3B18 Offset: 0x24A3B18 VA: 0x24A3B18
	public float get_fillAmount() { }

	// RVA: 0x24A3B20 Offset: 0x24A3B20 VA: 0x24A3B20
	public void set_fillAmount(float value) { }

	// RVA: 0x24A3BB0 Offset: 0x24A3BB0 VA: 0x24A3BB0 Slot: 34
	public override int get_minWidth() { }

	// RVA: 0x24A3D58 Offset: 0x24A3D58 VA: 0x24A3D58 Slot: 35
	public override int get_minHeight() { }

	// RVA: 0x24A3F00 Offset: 0x24A3F00 VA: 0x24A3F00
	public bool get_invert() { }

	// RVA: 0x24A3F08 Offset: 0x24A3F08 VA: 0x24A3F08
	public void set_invert(bool value) { }

	// RVA: 0x249EFB8 Offset: 0x249EFB8 VA: 0x249EFB8
	public bool get_hasBorder() { }

	// RVA: 0x24A3F30 Offset: 0x24A3F30 VA: 0x24A3F30 Slot: 41
	public virtual bool get_premultipliedAlpha() { }

	// RVA: 0x24A3F38 Offset: 0x24A3F38 VA: 0x24A3F38 Slot: 42
	public virtual float get_pixelSize() { }

	// RVA: 0x24A3F40 Offset: 0x24A3F40 VA: 0x24A3F40
	private Vector4 get_drawingUVs() { }

	// RVA: 0x24A4088 Offset: 0x24A4088 VA: 0x24A4088
	private Color32 get_drawingColor() { }

	// RVA: 0x249F3AC Offset: 0x249F3AC VA: 0x249F3AC
	protected void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, Rect outer, Rect inner) { }

	// RVA: 0x24A41E0 Offset: 0x24A41E0 VA: 0x24A41E0
	private void SimpleFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x24A4534 Offset: 0x24A4534 VA: 0x24A4534
	private void SlicedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x24A6F74 Offset: 0x24A6F74 VA: 0x24A6F74
	private void TiledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x24A5744 Offset: 0x24A5744 VA: 0x24A5744
	private void FilledFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x24A75FC Offset: 0x24A75FC VA: 0x24A75FC
	private void AdvancedFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x24A92CC Offset: 0x24A92CC VA: 0x24A92CC
	private static bool RadialCut(Vector2[] xy, Vector2[] uv, float fill, bool invert, int corner) { }

	// RVA: 0x24A9790 Offset: 0x24A9790 VA: 0x24A9790
	private static void RadialCut(Vector2[] xy, float cos, float sin, bool invert, int corner) { }

	// RVA: 0x24A9438 Offset: 0x24A9438 VA: 0x24A9438
	private static void Fill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, float v0x, float v1x, float v0y, float v1y, float u0x, float u1x, float u0y, float u1y, Color col) { }

	// RVA: 0x24A9F8C Offset: 0x24A9F8C VA: 0x24A9F8C
	private static void .cctor() { }
}

// Namespace: 
public enum UIBasicSprite.Type // TypeDefIndex: 12117
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.Type Simple = 0;
	public const UIBasicSprite.Type Sliced = 1;
	public const UIBasicSprite.Type Tiled = 2;
	public const UIBasicSprite.Type Filled = 3;
	public const UIBasicSprite.Type Advanced = 4;
}

// Namespace: 
public enum UIBasicSprite.FillDirection // TypeDefIndex: 12118
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.FillDirection Horizontal = 0;
	public const UIBasicSprite.FillDirection Vertical = 1;
	public const UIBasicSprite.FillDirection Radial90 = 2;
	public const UIBasicSprite.FillDirection Radial180 = 3;
	public const UIBasicSprite.FillDirection Radial360 = 4;
}

// Namespace: 
public enum UIBasicSprite.AdvancedType // TypeDefIndex: 12119
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.AdvancedType Invisible = 0;
	public const UIBasicSprite.AdvancedType Sliced = 1;
	public const UIBasicSprite.AdvancedType Tiled = 2;
}

// Namespace: 
public enum UIBasicSprite.Flip // TypeDefIndex: 12120
{
	// Fields
	public int value__; // 0x0
	public const UIBasicSprite.Flip Nothing = 0;
	public const UIBasicSprite.Flip Horizontally = 1;
	public const UIBasicSprite.Flip Vertically = 2;
	public const UIBasicSprite.Flip Both = 3;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC989F4 Offset: 0xC989F4 VA: 0xC989F4
[AddComponentMenu] // RVA: 0xC989F4 Offset: 0xC989F4 VA: 0xC989F4
public class UIDrawCall : MonoBehaviour // TypeDefIndex: 12121
{
	// Fields
	private static BetterList<UIDrawCall> mActiveList; // 0x0
	private static BetterList<UIDrawCall> mInactiveList; // 0x8
	[HideInInspector] // RVA: 0xCF1A58 Offset: 0xCF1A58 VA: 0xCF1A58
	public int widgetCount; // 0x18
	[HideInInspector] // RVA: 0xCF1A68 Offset: 0xCF1A68 VA: 0xCF1A68
	public int depthStart; // 0x1C
	[HideInInspector] // RVA: 0xCF1A78 Offset: 0xCF1A78 VA: 0xCF1A78
	public int depthEnd; // 0x20
	[HideInInspector] // RVA: 0xCF1A88 Offset: 0xCF1A88 VA: 0xCF1A88
	public UIPanel manager; // 0x28
	[HideInInspector] // RVA: 0xCF1A98 Offset: 0xCF1A98 VA: 0xCF1A98
	public UIPanel panel; // 0x30
	[HideInInspector] // RVA: 0xCF1AA8 Offset: 0xCF1AA8 VA: 0xCF1AA8
	public Texture2D clipTexture; // 0x38
	[HideInInspector] // RVA: 0xCF1AB8 Offset: 0xCF1AB8 VA: 0xCF1AB8
	public bool alwaysOnScreen; // 0x40
	[HideInInspector] // RVA: 0xCF1AC8 Offset: 0xCF1AC8 VA: 0xCF1AC8
	public BetterList<Vector3> verts; // 0x48
	[HideInInspector] // RVA: 0xCF1AD8 Offset: 0xCF1AD8 VA: 0xCF1AD8
	public BetterList<Vector3> norms; // 0x50
	[HideInInspector] // RVA: 0xCF1AE8 Offset: 0xCF1AE8 VA: 0xCF1AE8
	public BetterList<Vector4> tans; // 0x58
	[HideInInspector] // RVA: 0xCF1AF8 Offset: 0xCF1AF8 VA: 0xCF1AF8
	public BetterList<Vector2> uvs; // 0x60
	[HideInInspector] // RVA: 0xCF1B08 Offset: 0xCF1B08 VA: 0xCF1B08
	public BetterList<Color32> cols; // 0x68
	private Material mMaterial; // 0x70
	private Texture mTexture; // 0x78
	private Shader mShader; // 0x80
	private int mClipCount; // 0x88
	private Transform mTrans; // 0x90
	private Mesh mMesh; // 0x98
	private MeshFilter mFilter; // 0xA0
	private MeshRenderer mRenderer; // 0xA8
	private Material mDynamicMat; // 0xB0
	private int[] mIndices; // 0xB8
	private bool mRebuildMat; // 0xC0
	private bool mLegacyShader; // 0xC1
	private int mRenderQueue; // 0xC4
	private int mTriangles; // 0xC8
	public bool isDirty; // 0xCC
	private bool mTextureClip; // 0xCD
	public UIDrawCall.OnRenderCallback onRender; // 0xD0
	private const int maxIndexBufferCache = 10;
	private static List<int[]> mCache; // 0x10
	private static int[] ClipRange; // 0x18
	private static int[] ClipArgs; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0xD4BF4C Offset: 0xD4BF4C VA: 0xD4BF4C
	public static BetterList<UIDrawCall> list { get; }
	public static BetterList<UIDrawCall> activeList { get; }
	public static BetterList<UIDrawCall> inactiveList { get; }
	public int renderQueue { get; set; }
	public int sortingOrder { get; set; }
	public int finalRenderQueue { get; }
	public Transform cachedTransform { get; }
	public Material baseMaterial { get; set; }
	public Material dynamicMaterial { get; }
	public Texture mainTexture { get; set; }
	public Shader shader { get; set; }
	public int triangles { get; }
	public Bounds bounds { get; }
	public bool isClipped { get; }

	// Methods

	// RVA: 0x2088FEC Offset: 0x2088FEC VA: 0x2088FEC
	public void .ctor() { }

	// RVA: 0x208910C Offset: 0x208910C VA: 0x208910C
	public static BetterList<UIDrawCall> get_list() { }

	// RVA: 0x2089174 Offset: 0x2089174 VA: 0x2089174
	public static BetterList<UIDrawCall> get_activeList() { }

	// RVA: 0x20891DC Offset: 0x20891DC VA: 0x20891DC
	public static BetterList<UIDrawCall> get_inactiveList() { }

	// RVA: 0x2089244 Offset: 0x2089244 VA: 0x2089244
	public int get_renderQueue() { }

	// RVA: 0x208924C Offset: 0x208924C VA: 0x208924C
	public void set_renderQueue(int value) { }

	// RVA: 0x208930C Offset: 0x208930C VA: 0x208930C
	public int get_sortingOrder() { }

	// RVA: 0x20893AC Offset: 0x20893AC VA: 0x20893AC
	public void set_sortingOrder(int value) { }

	// RVA: 0x2089480 Offset: 0x2089480 VA: 0x2089480
	public int get_finalRenderQueue() { }

	// RVA: 0x2089520 Offset: 0x2089520 VA: 0x2089520
	public Transform get_cachedTransform() { }

	// RVA: 0x20895B0 Offset: 0x20895B0 VA: 0x20895B0
	public Material get_baseMaterial() { }

	// RVA: 0x20895B8 Offset: 0x20895B8 VA: 0x20895B8
	public void set_baseMaterial(Material value) { }

	// RVA: 0x2089648 Offset: 0x2089648 VA: 0x2089648
	public Material get_dynamicMaterial() { }

	// RVA: 0x2089650 Offset: 0x2089650 VA: 0x2089650
	public Texture get_mainTexture() { }

	// RVA: 0x2089658 Offset: 0x2089658 VA: 0x2089658
	public void set_mainTexture(Texture value) { }

	// RVA: 0x208970C Offset: 0x208970C VA: 0x208970C
	public Shader get_shader() { }

	// RVA: 0x2089714 Offset: 0x2089714 VA: 0x2089714
	public void set_shader(Shader value) { }

	// RVA: 0x20897A4 Offset: 0x20897A4 VA: 0x20897A4
	public int get_triangles() { }

	// RVA: 0x2089828 Offset: 0x2089828 VA: 0x2089828
	public Bounds get_bounds() { }

	// RVA: 0x20898F8 Offset: 0x20898F8 VA: 0x20898F8
	public bool get_isClipped() { }

	// RVA: 0x2089908 Offset: 0x2089908 VA: 0x2089908
	public void Clear() { }

	// RVA: 0x2089A4C Offset: 0x2089A4C VA: 0x2089A4C
	private void CreateMaterial() { }

	// RVA: 0x208A3CC Offset: 0x208A3CC VA: 0x208A3CC
	private Material RebuildMaterial() { }

	// RVA: 0x208A588 Offset: 0x208A588 VA: 0x208A588
	private void UpdateMaterials() { }

	// RVA: 0x208A764 Offset: 0x208A764 VA: 0x208A764
	public void UpdateGeometry(int widgetCount) { }

	// RVA: 0x208B328 Offset: 0x208B328 VA: 0x208B328
	private int[] GenerateCachedIndexBuffer(int vertexCount, int indexCount) { }

	// RVA: 0x208B694 Offset: 0x208B694 VA: 0x208B694
	private void OnWillRenderObject() { }

	// RVA: 0x208C1AC Offset: 0x208C1AC VA: 0x208C1AC
	private void SetClipping(int index, Vector4 cr, Vector2 soft, float angle) { }

	// RVA: 0x208C440 Offset: 0x208C440 VA: 0x208C440
	private void Awake() { }

	// RVA: 0x208C728 Offset: 0x208C728 VA: 0x208C728
