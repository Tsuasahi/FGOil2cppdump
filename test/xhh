	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8

	// Methods

	// RVA: -1 Offset: -1
	public bool Connect<U, V>(U source, int sourceOutputPort, V destination, int destinationInputPort) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC6278 Offset: 0xDC6278 VA: 0xDC6278
	|-PlayableGraph.Connect<AnimationMixerPlayable, Playable>
	|
	|-RVA: 0xDC6280 Offset: 0xDC6280 VA: 0xDC6280
	|-PlayableGraph.Connect<Playable, AnimationMixerPlayable>
	*/

	// RVA: -1 Offset: -1
	public void Disconnect<U>(U input, int inputPort) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC85C0 Offset: 0xDC85C0 VA: 0xDC85C0
	|-PlayableGraph.Disconnect<AnimationMixerPlayable>
	*/

	// RVA: -1 Offset: -1
	public void DestroySubgraph<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC8570 Offset: 0xDC8570 VA: 0xDC8570
	|-PlayableGraph.DestroySubgraph<Playable>
	*/

	// RVA: 0xDD2AF8 Offset: 0xDD2AF8 VA: 0xDD2AF8
	public void Evaluate() { }

	// RVA: 0x26B7988 Offset: 0x26B7988 VA: 0x26B7988
	public static PlayableGraph Create() { }

	// RVA: 0x26B79B4 Offset: 0x26B79B4 VA: 0x26B79B4
	public static PlayableGraph Create(string name) { }

	[FreeFunctionAttribute] // RVA: 0xC50D7C Offset: 0xC50D7C VA: 0xC50D7C
	// RVA: 0xDD2B04 Offset: 0xDD2B04 VA: 0xDD2B04
	public void Destroy() { }

	// RVA: 0xDD2B0C Offset: 0xDD2B0C VA: 0xDD2B0C
	public bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xC50DD4 Offset: 0xC50DD4 VA: 0xC50DD4
	// RVA: 0xDD2B14 Offset: 0xDD2B14 VA: 0xDD2B14
	public void Play() { }

	[FreeFunctionAttribute] // RVA: 0xC50E2C Offset: 0xC50E2C VA: 0xC50E2C
	// RVA: 0xDD2B1C Offset: 0xDD2B1C VA: 0xDD2B1C
	public void Stop() { }

	[FreeFunctionAttribute] // RVA: 0xC50E84 Offset: 0xC50E84 VA: 0xC50E84
	// RVA: 0xDD2B24 Offset: 0xDD2B24 VA: 0xDD2B24
	public void Evaluate(float deltaTime) { }

	[FreeFunctionAttribute] // RVA: 0xC50EDC Offset: 0xC50EDC VA: 0xC50EDC
	// RVA: 0xDD2B2C Offset: 0xDD2B2C VA: 0xDD2B2C
	public void SetTimeUpdateMode(DirectorUpdateMode value) { }

	[FreeFunctionAttribute] // RVA: 0xC50F34 Offset: 0xC50F34 VA: 0xC50F34
	// RVA: 0xDD2B34 Offset: 0xDD2B34 VA: 0xDD2B34
	internal PlayableHandle CreatePlayableHandle() { }

	[FreeFunctionAttribute] // RVA: 0xC50F8C Offset: 0xC50F8C VA: 0xC50F8C
	// RVA: 0xDD2B60 Offset: 0xDD2B60 VA: 0xDD2B60
	private bool ConnectInternal(PlayableHandle source, int sourceOutputPort, PlayableHandle destination, int destinationInputPort) { }

	[FreeFunctionAttribute] // RVA: 0xC50FE4 Offset: 0xC50FE4 VA: 0xC50FE4
	// RVA: 0xDD2BA0 Offset: 0xDD2BA0 VA: 0xDD2BA0
	private void DisconnectInternal(PlayableHandle playable, int inputPort) { }

	[FreeFunctionAttribute] // RVA: 0xC5103C Offset: 0xC5103C VA: 0xC5103C
	// RVA: 0xDD2BCC Offset: 0xDD2BCC VA: 0xDD2BCC
	private void DestroySubgraphInternal(PlayableHandle playable) { }

	// RVA: 0x26B79DC Offset: 0x26B79DC VA: 0x26B79DC
	private static void Create_Injected(string name, out PlayableGraph ret) { }

	// RVA: 0x26B7A54 Offset: 0x26B7A54 VA: 0x26B7A54
	private static void Destroy_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x26B7AC4 Offset: 0x26B7AC4 VA: 0x26B7AC4
	private static bool IsValid_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x26B7B34 Offset: 0x26B7B34 VA: 0x26B7B34
	private static void Play_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x26B7BA4 Offset: 0x26B7BA4 VA: 0x26B7BA4
	private static void Stop_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x26B7C10 Offset: 0x26B7C10 VA: 0x26B7C10
	private static void Evaluate_Injected(ref PlayableGraph _unity_self, float deltaTime) { }

	// RVA: 0x26B7C88 Offset: 0x26B7C88 VA: 0x26B7C88
	private static void SetTimeUpdateMode_Injected(ref PlayableGraph _unity_self, DirectorUpdateMode value) { }

	// RVA: 0x26B7D24 Offset: 0x26B7D24 VA: 0x26B7D24
	private static void CreatePlayableHandle_Injected(ref PlayableGraph _unity_self, out PlayableHandle ret) { }

	// RVA: 0x26B7DD4 Offset: 0x26B7DD4 VA: 0x26B7DD4
	private static bool ConnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle source, int sourceOutputPort, ref PlayableHandle destination, int destinationInputPort) { }

	// RVA: 0x26B7E98 Offset: 0x26B7E98 VA: 0x26B7E98
	private static void DisconnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle playable, int inputPort) { }

	// RVA: 0x26B7F40 Offset: 0x26B7F40 VA: 0x26B7F40
	private static void DestroySubgraphInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle playable) { }
}

// Namespace: UnityEngine.Playables
public enum PlayState // TypeDefIndex: 2508
{
	// Fields
	public int value__; // 0x0
	public const PlayState Paused = 0;
	public const PlayState Playing = 1;
	public const PlayState Delayed = 2;
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xC477F0 Offset: 0xC477F0 VA: 0xC477F0
[NativeHeaderAttribute] // RVA: 0xC477F0 Offset: 0xC477F0 VA: 0xC477F0
[NativeHeaderAttribute] // RVA: 0xC477F0 Offset: 0xC477F0 VA: 0xC477F0
[UsedByNativeCodeAttribute] // RVA: 0xC477F0 Offset: 0xC477F0 VA: 0xC477F0
public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 2509
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal T GetObject<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC8618 Offset: 0xDC8618 VA: 0xDC8618
	|-PlayableHandle.GetObject<object>
	*/

	[VisibleToOtherModulesAttribute] // RVA: 0xC51094 Offset: 0xC51094 VA: 0xC51094
	// RVA: -1 Offset: -1
	internal bool IsPlayableOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC6288 Offset: 0xDC6288 VA: 0xDC6288
	|-PlayableHandle.IsPlayableOfType<object>
	|
	|-RVA: 0xDC6290 Offset: 0xDC6290 VA: 0xDC6290
	|-PlayableHandle.IsPlayableOfType<AnimationClipPlayable>
	|
	|-RVA: 0xDC6298 Offset: 0xDC6298 VA: 0xDC6298
	|-PlayableHandle.IsPlayableOfType<AnimationLayerMixerPlayable>
	|
	|-RVA: 0xDC62A0 Offset: 0xDC62A0 VA: 0xDC62A0
	|-PlayableHandle.IsPlayableOfType<AnimationMixerPlayable>
	|
	|-RVA: 0xDC62A8 Offset: 0xDC62A8 VA: 0xDC62A8
	|-PlayableHandle.IsPlayableOfType<AnimationMotionXToDeltaPlayable>
	|
	|-RVA: 0xDC62B0 Offset: 0xDC62B0 VA: 0xDC62B0
	|-PlayableHandle.IsPlayableOfType<AnimationOffsetPlayable>
	|
	|-RVA: 0xDC62B8 Offset: 0xDC62B8 VA: 0xDC62B8
	|-PlayableHandle.IsPlayableOfType<AnimationPosePlayable>
	|
	|-RVA: 0xDC62C0 Offset: 0xDC62C0 VA: 0xDC62C0
	|-PlayableHandle.IsPlayableOfType<AnimationRemoveScalePlayable>
	|
	|-RVA: 0xDC62C8 Offset: 0xDC62C8 VA: 0xDC62C8
	|-PlayableHandle.IsPlayableOfType<AnimatorControllerPlayable>
	|
	|-RVA: 0xDC62D0 Offset: 0xDC62D0 VA: 0xDC62D0
	|-PlayableHandle.IsPlayableOfType<AnimationScriptPlayable>
	*/

	// RVA: 0x26B72F8 Offset: 0x26B72F8 VA: 0x26B72F8
	public static PlayableHandle get_Null() { }

	// RVA: 0xDD2BF4 Offset: 0xDD2BF4 VA: 0xDD2BF4
	internal Playable GetInput(int inputPort) { }

	// RVA: 0xDD2BFC Offset: 0xDD2BFC VA: 0xDD2BFC
	internal bool SetInputWeight(int inputIndex, float weight) { }

	// RVA: 0x26B71EC Offset: 0x26B71EC VA: 0x26B71EC
	public static bool op_Equality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0x26B8164 Offset: 0x26B8164 VA: 0x26B8164
	public static bool op_Inequality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0xDD2C48 Offset: 0xDD2C48 VA: 0xDD2C48 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xDD2C50 Offset: 0xDD2C50 VA: 0xDD2C50 Slot: 4
	public bool Equals(PlayableHandle other) { }

	// RVA: 0xDD2C58 Offset: 0xDD2C58 VA: 0xDD2C58 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x26B812C Offset: 0x26B812C VA: 0x26B812C
	internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }

	// RVA: 0xDD2C94 Offset: 0xDD2C94 VA: 0xDD2C94
	internal bool CheckInputBounds(int inputIndex) { }

	// RVA: 0xDD2CB4 Offset: 0xDD2CB4 VA: 0xDD2CB4
	internal bool CheckInputBounds(int inputIndex, bool acceptAny) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC510A4 Offset: 0xC510A4 VA: 0xC510A4
	// RVA: 0xDD2CD4 Offset: 0xDD2CD4 VA: 0xDD2CD4
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xC510B4 Offset: 0xC510B4 VA: 0xC510B4
	[VisibleToOtherModulesAttribute] // RVA: 0xC510B4 Offset: 0xC510B4 VA: 0xC510B4
	// RVA: 0xDD2CDC Offset: 0xDD2CDC VA: 0xDD2CDC
	internal Type GetPlayableType() { }

	[FreeFunctionAttribute] // RVA: 0xC51120 Offset: 0xC51120 VA: 0xC51120
	[VisibleToOtherModulesAttribute] // RVA: 0xC51120 Offset: 0xC51120 VA: 0xC51120
	// RVA: 0xDD2CE4 Offset: 0xDD2CE4 VA: 0xDD2CE4
	internal void SetScriptInstance(object scriptInstance) { }

	[FreeFunctionAttribute] // RVA: 0xC5118C Offset: 0xC5118C VA: 0xC5118C
	[VisibleToOtherModulesAttribute] // RVA: 0xC5118C Offset: 0xC5118C VA: 0xC5118C
	// RVA: 0xDD2CEC Offset: 0xDD2CEC VA: 0xDD2CEC
	internal void Play() { }

	[FreeFunctionAttribute] // RVA: 0xC511F8 Offset: 0xC511F8 VA: 0xC511F8
	[VisibleToOtherModulesAttribute] // RVA: 0xC511F8 Offset: 0xC511F8 VA: 0xC511F8
	// RVA: 0xDD2CF4 Offset: 0xDD2CF4 VA: 0xDD2CF4
	internal void Pause() { }

	[FreeFunctionAttribute] // RVA: 0xC51264 Offset: 0xC51264 VA: 0xC51264
	[VisibleToOtherModulesAttribute] // RVA: 0xC51264 Offset: 0xC51264 VA: 0xC51264
	// RVA: 0xDD2CFC Offset: 0xDD2CFC VA: 0xDD2CFC
	internal double GetSpeed() { }

	[FreeFunctionAttribute] // RVA: 0xC512D0 Offset: 0xC512D0 VA: 0xC512D0
	[VisibleToOtherModulesAttribute] // RVA: 0xC512D0 Offset: 0xC512D0 VA: 0xC512D0
	// RVA: 0xDD2D04 Offset: 0xDD2D04 VA: 0xDD2D04
	internal void SetSpeed(double value) { }

	[FreeFunctionAttribute] // RVA: 0xC5133C Offset: 0xC5133C VA: 0xC5133C
	[VisibleToOtherModulesAttribute] // RVA: 0xC5133C Offset: 0xC5133C VA: 0xC5133C
	// RVA: 0xDD2D0C Offset: 0xDD2D0C VA: 0xDD2D0C
	internal double GetTime() { }

	[FreeFunctionAttribute] // RVA: 0xC513A8 Offset: 0xC513A8 VA: 0xC513A8
	[VisibleToOtherModulesAttribute] // RVA: 0xC513A8 Offset: 0xC513A8 VA: 0xC513A8
	// RVA: 0xDD2D14 Offset: 0xDD2D14 VA: 0xDD2D14
	internal void SetTime(double value) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC51414 Offset: 0xC51414 VA: 0xC51414
	[FreeFunctionAttribute] // RVA: 0xC51414 Offset: 0xC51414 VA: 0xC51414
	// RVA: 0xDD2D1C Offset: 0xDD2D1C VA: 0xDD2D1C
	internal bool IsDone() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC51480 Offset: 0xC51480 VA: 0xC51480
	[FreeFunctionAttribute] // RVA: 0xC51480 Offset: 0xC51480 VA: 0xC51480
	// RVA: 0xDD2D24 Offset: 0xDD2D24 VA: 0xDD2D24
	internal void SetDone(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC514EC Offset: 0xC514EC VA: 0xC514EC
	[VisibleToOtherModulesAttribute] // RVA: 0xC514EC Offset: 0xC514EC VA: 0xC514EC
	// RVA: 0xDD2D30 Offset: 0xDD2D30 VA: 0xDD2D30
	internal double GetDuration() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC51558 Offset: 0xC51558 VA: 0xC51558
	[FreeFunctionAttribute] // RVA: 0xC51558 Offset: 0xC51558 VA: 0xC51558
	// RVA: 0xDD2D38 Offset: 0xDD2D38 VA: 0xDD2D38
	internal void SetDuration(double value) { }

	[FreeFunctionAttribute] // RVA: 0xC515C4 Offset: 0xC515C4 VA: 0xC515C4
	[VisibleToOtherModulesAttribute] // RVA: 0xC515C4 Offset: 0xC515C4 VA: 0xC515C4
	// RVA: 0xDD2D40 Offset: 0xDD2D40 VA: 0xDD2D40
	internal PlayableGraph GetGraph() { }

	[FreeFunctionAttribute] // RVA: 0xC51630 Offset: 0xC51630 VA: 0xC51630
	[VisibleToOtherModulesAttribute] // RVA: 0xC51630 Offset: 0xC51630 VA: 0xC51630
	// RVA: 0xDD2D48 Offset: 0xDD2D48 VA: 0xDD2D48
	internal int GetInputCount() { }

	[FreeFunctionAttribute] // RVA: 0xC5169C Offset: 0xC5169C VA: 0xC5169C
	[VisibleToOtherModulesAttribute] // RVA: 0xC5169C Offset: 0xC5169C VA: 0xC5169C
	// RVA: 0xDD2D50 Offset: 0xDD2D50 VA: 0xDD2D50
	internal void SetInputCount(int value) { }

	[FreeFunctionAttribute] // RVA: 0xC51708 Offset: 0xC51708 VA: 0xC51708
	// RVA: 0xDD2D58 Offset: 0xDD2D58 VA: 0xDD2D58
	private object GetScriptInstance() { }

	[FreeFunctionAttribute] // RVA: 0xC51760 Offset: 0xC51760 VA: 0xC51760
	// RVA: 0xDD2D60 Offset: 0xDD2D60 VA: 0xDD2D60
	private PlayableHandle GetInputHandle(int index) { }

	[FreeFunctionAttribute] // RVA: 0xC517B8 Offset: 0xC517B8 VA: 0xC517B8
	// RVA: 0xDD2D68 Offset: 0xDD2D68 VA: 0xDD2D68
	private void SetInputWeightFromIndex(int index, float weight) { }

	// RVA: 0x26B9590 Offset: 0x26B9590 VA: 0x26B9590
	private static void .cctor() { }

	// RVA: 0x26B872C Offset: 0x26B872C VA: 0x26B872C
	private static bool IsValid_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8798 Offset: 0x26B8798 VA: 0x26B8798
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8878 Offset: 0x26B8878 VA: 0x26B8878
	private static void SetScriptInstance_Injected(ref PlayableHandle _unity_self, object scriptInstance) { }

	// RVA: 0x26B8950 Offset: 0x26B8950 VA: 0x26B8950
	private static void Play_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8A20 Offset: 0x26B8A20 VA: 0x26B8A20
	private static void Pause_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8AF0 Offset: 0x26B8AF0 VA: 0x26B8AF0
	private static double GetSpeed_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8BD0 Offset: 0x26B8BD0 VA: 0x26B8BD0
	private static void SetSpeed_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x26B8CA8 Offset: 0x26B8CA8 VA: 0x26B8CA8
	private static double GetTime_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8D88 Offset: 0x26B8D88 VA: 0x26B8D88
	private static void SetTime_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x26B8E60 Offset: 0x26B8E60 VA: 0x26B8E60
	private static bool IsDone_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B8F40 Offset: 0x26B8F40 VA: 0x26B8F40
	private static void SetDone_Injected(ref PlayableHandle _unity_self, bool value) { }

	// RVA: 0x26B9018 Offset: 0x26B9018 VA: 0x26B9018
	private static double GetDuration_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B90F8 Offset: 0x26B90F8 VA: 0x26B90F8
	private static void SetDuration_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x26B91E8 Offset: 0x26B91E8 VA: 0x26B91E8
	private static void GetGraph_Injected(ref PlayableHandle _unity_self, out PlayableGraph ret) { }

	// RVA: 0x26B925C Offset: 0x26B925C VA: 0x26B925C
	private static int GetInputCount_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B933C Offset: 0x26B933C VA: 0x26B933C
	private static void SetInputCount_Injected(ref PlayableHandle _unity_self, int value) { }

	// RVA: 0x26B9414 Offset: 0x26B9414 VA: 0x26B9414
	private static object GetScriptInstance_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x26B9480 Offset: 0x26B9480 VA: 0x26B9480
	private static void GetInputHandle_Injected(ref PlayableHandle _unity_self, int index, out PlayableHandle ret) { }

	// RVA: 0x26B9504 Offset: 0x26B9504 VA: 0x26B9504
	private static void SetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index, float weight) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xC47884 Offset: 0xC47884 VA: 0xC47884
public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 2510
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xC51810 Offset: 0xC51810 VA: 0xC51810
	// RVA: 0xDD2D70 Offset: 0xDD2D70 VA: 0xDD2D70
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0xDD2D78 Offset: 0xDD2D78 VA: 0xDD2D78 Slot: 4
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0xDD2D84 Offset: 0xDD2D84 VA: 0xDD2D84 Slot: 5
	public bool Equals(PlayableOutput other) { }

	// RVA: 0x26B9710 Offset: 0x26B9710 VA: 0x26B9710
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[ExtensionAttribute] // RVA: 0xC47894 Offset: 0xC47894 VA: 0xC47894
public static class PlayableOutputExtensions // TypeDefIndex: 2511
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC51820 Offset: 0xC51820 VA: 0xC51820
	// RVA: -1 Offset: -1
	public static void SetSourcePlayable<U, V>(U output, V value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218B3C0 Offset: 0x218B3C0 VA: 0x218B3C0
	|-PlayableOutputExtensions.SetSourcePlayable<AnimationPlayableOutput, AnimationMixerPlayable>
	|
	|-RVA: 0x218B418 Offset: 0x218B418 VA: 0x218B418
	|-PlayableOutputExtensions.SetSourcePlayable<AnimationPlayableOutput, Playable>
	*/

	[ExtensionAttribute] // RVA: 0xC51830 Offset: 0xC51830 VA: 0xC51830
	// RVA: -1 Offset: -1
	public static void SetSourceOutputPort<U>(U output, int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218B378 Offset: 0x218B378 VA: 0x218B378
	|-PlayableOutputExtensions.SetSourceOutputPort<AnimationPlayableOutput>
	*/
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0xC478A4 Offset: 0xC478A4 VA: 0xC478A4
[NativeHeaderAttribute] // RVA: 0xC478A4 Offset: 0xC478A4 VA: 0xC478A4
[NativeHeaderAttribute] // RVA: 0xC478A4 Offset: 0xC478A4 VA: 0xC478A4
[NativeHeaderAttribute] // RVA: 0xC478A4 Offset: 0xC478A4 VA: 0xC478A4
public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 2512
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods

	// RVA: 0x26B9784 Offset: 0x26B9784 VA: 0x26B9784
	public static PlayableOutputHandle get_Null() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC51840 Offset: 0xC51840 VA: 0xC51840
	// RVA: -1 Offset: -1
	internal bool IsPlayableOutputOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDC62D8 Offset: 0xDC62D8 VA: 0xDC62D8
	|-PlayableOutputHandle.IsPlayableOutputOfType<object>
	|
	|-RVA: 0xDC62E0 Offset: 0xDC62E0 VA: 0xDC62E0
	|-PlayableOutputHandle.IsPlayableOutputOfType<AnimationPlayableOutput>
	*/

	// RVA: 0xDD2D8C Offset: 0xDD2D8C VA: 0xDD2D8C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x26B9678 Offset: 0x26B9678 VA: 0x26B9678
	public static bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0xDD2DC8 Offset: 0xDD2DC8 VA: 0xDD2DC8 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xDD2DD0 Offset: 0xDD2DD0 VA: 0xDD2DD0 Slot: 4
	public bool Equals(PlayableOutputHandle other) { }

	// RVA: 0x26B9824 Offset: 0x26B9824 VA: 0x26B9824
	internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC51850 Offset: 0xC51850 VA: 0xC51850
	// RVA: 0xDD2DD8 Offset: 0xDD2DD8 VA: 0xDD2DD8
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xC51860 Offset: 0xC51860 VA: 0xC51860
	// RVA: 0xDD2DE0 Offset: 0xDD2DE0 VA: 0xDD2DE0
	internal Type GetPlayableOutputType() { }

	[FreeFunctionAttribute] // RVA: 0xC518B8 Offset: 0xC518B8 VA: 0xC518B8
	// RVA: 0xDD2DE8 Offset: 0xDD2DE8 VA: 0xDD2DE8
	internal void SetSourcePlayable(PlayableHandle target) { }

	[FreeFunctionAttribute] // RVA: 0xC51910 Offset: 0xC51910 VA: 0xC51910
	// RVA: 0xDD2DF0 Offset: 0xDD2DF0 VA: 0xDD2DF0
	internal void SetSourceOutputPort(int port) { }

	// RVA: 0x26B9CEC Offset: 0x26B9CEC VA: 0x26B9CEC
	private static void .cctor() { }

	// RVA: 0x26B99DC Offset: 0x26B99DC VA: 0x26B99DC
	private static bool IsValid_Injected(ref PlayableOutputHandle _unity_self) { }

	// RVA: 0x26B9AAC Offset: 0x26B9AAC VA: 0x26B9AAC
	private static Type GetPlayableOutputType_Injected(ref PlayableOutputHandle _unity_self) { }

	// RVA: 0x26B9B90 Offset: 0x26B9B90 VA: 0x26B9B90
	private static void SetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle target) { }

	// RVA: 0x26B9C78 Offset: 0x26B9C78 VA: 0x26B9C78
	private static void SetSourceOutputPort_Injected(ref PlayableOutputHandle _unity_self, int port) { }
}

// Namespace: UnityEngine.Playables
public struct ScriptPlayable<T> : IPlayable, IEquatable<ScriptPlayable<T>> // TypeDefIndex: 2513
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly ScriptPlayable<T> m_NullPlayable; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(PlayableHandle handle) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD6D8C Offset: 0xDD6D8C VA: 0xDD6D8C
	|-ScriptPlayable<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public static ScriptPlayable<T> Create(PlayableGraph graph, T template, int inputCount = 0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8D77C Offset: 0x2B8D77C VA: 0x2B8D77C
	|-ScriptPlayable<SimpleAnimationPlayable>.Create
	|-ScriptPlayable<object>.Create
	*/

	// RVA: -1 Offset: -1
	private static PlayableHandle CreateHandle(PlayableGraph graph, T template, int inputCount) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8D8F4 Offset: 0x2B8D8F4 VA: 0x2B8D8F4
	|-ScriptPlayable<object>.CreateHandle
	*/

	// RVA: -1 Offset: -1
	private static object CreateScriptInstance() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8DC48 Offset: 0x2B8DC48 VA: 0x2B8DC48
	|-ScriptPlayable<object>.CreateScriptInstance
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstance(IPlayableBehaviour source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8DE84 Offset: 0x2B8DE84 VA: 0x2B8DE84
	|-ScriptPlayable<object>.CloneScriptInstance
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstanceFromEngineObject(Object source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8E120 Offset: 0x2B8E120 VA: 0x2B8E120
	|-ScriptPlayable<object>.CloneScriptInstanceFromEngineObject
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstanceFromIClonable(ICloneable source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8E1F0 Offset: 0x2B8E1F0 VA: 0x2B8E1F0
	|-ScriptPlayable<object>.CloneScriptInstanceFromIClonable
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public PlayableHandle GetHandle() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD6D94 Offset: 0xDD6D94 VA: 0xDD6D94
	|-ScriptPlayable<object>.GetHandle
	*/

	// RVA: -1 Offset: -1
	public T GetBehaviour() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD6DA0 Offset: 0xDD6DA0 VA: 0xDD6DA0
	|-ScriptPlayable<SimpleAnimationPlayable>.GetBehaviour
	|-ScriptPlayable<object>.GetBehaviour
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool Equals(ScriptPlayable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD6DA8 Offset: 0xDD6DA8 VA: 0xDD6DA8
	|-ScriptPlayable<object>.Equals
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B8E39C Offset: 0x2B8E39C VA: 0x2B8E39C
	|-ScriptPlayable<object>..cctor
	*/
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xC47938 Offset: 0xC47938 VA: 0xC47938
public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 2514
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xDD2DF8 Offset: 0xDD2DF8 VA: 0xDD2DF8 Slot: 4
	public PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xC47948 Offset: 0xC47948 VA: 0xC47948
[NativeHeaderAttribute] // RVA: 0xC47948 Offset: 0xC47948 VA: 0xC47948
[NativeHeaderAttribute] // RVA: 0xC47948 Offset: 0xC47948 VA: 0xC47948
[StaticAccessorAttribute] // RVA: 0xC47948 Offset: 0xC47948 VA: 0xC47948
[RequiredByNativeCodeAttribute] // RVA: 0xC47948 Offset: 0xC47948 VA: 0xC47948
public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 2515
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xDD25A8 Offset: 0xDD25A8 VA: 0xDD25A8 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xDD25B4 Offset: 0xDD25B4 VA: 0xDD25B4 Slot: 5
	public bool Equals(TextureMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xC47A04 Offset: 0xC47A04 VA: 0xC47A04
[StaticAccessorAttribute] // RVA: 0xC47A04 Offset: 0xC47A04 VA: 0xC47A04
[RequiredByNativeCodeAttribute] // RVA: 0xC47A04 Offset: 0xC47A04 VA: 0xC47A04
[NativeHeaderAttribute] // RVA: 0xC47A04 Offset: 0xC47A04 VA: 0xC47A04
[NativeHeaderAttribute] // RVA: 0xC47A04 Offset: 0xC47A04 VA: 0xC47A04
public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 2516
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xDD25BC Offset: 0xDD25BC VA: 0xDD25BC Slot: 4
	public PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Internal
[AttributeUsageAttribute] // RVA: 0xC47AC0 Offset: 0xC47AC0 VA: 0xC47AC0
[Serializable]
public class DefaultValueAttribute : Attribute // TypeDefIndex: 2517
{
	// Fields
	private object DefaultValue; // 0x10

	// Properties
	public object Value { get; }

	// Methods

	// RVA: 0x26AACA0 Offset: 0x26AACA0 VA: 0x26AACA0
	public void .ctor(string value) { }

	// RVA: 0x26AACCC Offset: 0x26AACCC VA: 0x26AACCC
	public object get_Value() { }

	// RVA: 0x26AACD4 Offset: 0x26AACD4 VA: 0x26AACD4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x26AADB0 Offset: 0x26AADB0 VA: 0x26AADB0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Internal
[Serializable]
public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 2518
{
	// Methods

	// RVA: 0x26AADD4 Offset: 0x26AADD4 VA: 0x26AADD4
	public void .ctor() { }
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 2519
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void LogException(Exception exception, Object context);
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 2520
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Log(LogType logType, object message);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Log(LogType logType, object message, Object context);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Log(object message);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Log(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void LogWarning(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void LogError(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void LogFormat(LogType logType, string format, object[] args);
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 2521
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC499E0 Offset: 0xC499E0 VA: 0xC499E0
	[DebuggerBrowsableAttribute] // RVA: 0xC499E0 Offset: 0xC499E0 VA: 0xC499E0
	private ILogHandler <logHandler>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC49A1C Offset: 0xC49A1C VA: 0xC49A1C
	[DebuggerBrowsableAttribute] // RVA: 0xC49A1C Offset: 0xC49A1C VA: 0xC49A1C
	private bool <logEnabled>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xC49A58 Offset: 0xC49A58 VA: 0xC49A58
	[CompilerGeneratedAttribute] // RVA: 0xC49A58 Offset: 0xC49A58 VA: 0xC49A58
	private LogType <filterLogType>k__BackingField; // 0x1C

	// Properties
	public ILogHandler logHandler { get; set; }
	public bool logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods

	// RVA: 0x26AB92C Offset: 0x26AB92C VA: 0x26AB92C
	public void .ctor(ILogHandler logHandler) { }

	[CompilerGeneratedAttribute] // RVA: 0xC51968 Offset: 0xC51968 VA: 0xC51968
	// RVA: 0x26AB984 Offset: 0x26AB984 VA: 0x26AB984 Slot: 13
	public ILogHandler get_logHandler() { }

	[CompilerGeneratedAttribute] // RVA: 0xC51978 Offset: 0xC51978 VA: 0xC51978
	// RVA: 0x26AB968 Offset: 0x26AB968 VA: 0x26AB968 Slot: 14
	public void set_logHandler(ILogHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC51988 Offset: 0xC51988 VA: 0xC51988
	// RVA: 0x26AB98C Offset: 0x26AB98C VA: 0x26AB98C Slot: 15
	public bool get_logEnabled() { }

	[CompilerGeneratedAttribute] // RVA: 0xC51998 Offset: 0xC51998 VA: 0xC51998
	// RVA: 0x26AB970 Offset: 0x26AB970 VA: 0x26AB970 Slot: 16
	public void set_logEnabled(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC519A8 Offset: 0xC519A8 VA: 0xC519A8
	// RVA: 0x26AB994 Offset: 0x26AB994 VA: 0x26AB994 Slot: 17
	public LogType get_filterLogType() { }

	[CompilerGeneratedAttribute] // RVA: 0xC519B8 Offset: 0xC519B8 VA: 0xC519B8
	// RVA: 0x26AB97C Offset: 0x26AB97C VA: 0x26AB97C Slot: 18
	public void set_filterLogType(LogType value) { }

	// RVA: 0x26AB99C Offset: 0x26AB99C VA: 0x26AB99C Slot: 19
	public bool IsLogTypeAllowed(LogType logType) { }

	// RVA: 0x26AB9D8 Offset: 0x26AB9D8 VA: 0x26AB9D8
	private static string GetString(object message) { }

	// RVA: 0x26ABB08 Offset: 0x26ABB08 VA: 0x26ABB08 Slot: 4
	public void Log(LogType logType, object message) { }

	// RVA: 0x26ABC90 Offset: 0x26ABC90 VA: 0x26ABC90 Slot: 5
	public void Log(LogType logType, object message, Object context) { }

	// RVA: 0x26ABE28 Offset: 0x26ABE28 VA: 0x26ABE28 Slot: 6
	public void Log(object message) { }

	// RVA: 0x26ABFA4 Offset: 0x26ABFA4 VA: 0x26ABFA4 Slot: 7
	public void Log(string tag, object message) { }

	// RVA: 0x26AC168 Offset: 0x26AC168 VA: 0x26AC168 Slot: 8
	public void LogWarning(string tag, object message) { }

	// RVA: 0x26AC32C Offset: 0x26AC32C VA: 0x26AC32C Slot: 9
	public void LogError(string tag, object message) { }

	// RVA: 0x26AC4EC Offset: 0x26AC4EC VA: 0x26AC4EC Slot: 10
	public void LogFormat(LogType logType, string format, object[] args) { }

	// RVA: 0x26AC604 Offset: 0x26AC604 VA: 0x26AC604 Slot: 11
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x26AC720 Offset: 0x26AC720 VA: 0x26AC720 Slot: 12
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs // TypeDefIndex: 2522
{
	// Fields
	public int playerId; // 0x10
	public byte[] data; // 0x18

	// Methods

	// RVA: 0x26B3918 Offset: 0x26B3918 VA: 0x26B3918
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
public interface IEditorPlayerConnection // TypeDefIndex: 2523
{}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 2524
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	[SerializeField] // RVA: 0xC49A94 Offset: 0xC49A94 VA: 0xC49A94
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
	[SerializeField] // RVA: 0xC49AA4 Offset: 0xC49AA4 VA: 0xC49AA4
	private List<int> m_connectedPlayers; // 0x20
	private bool m_IsInitilized; // 0x28
	private static PlayerConnection s_Instance; // 0x8

	// Properties
	public static PlayerConnection instance { get; }
	public bool isConnected { get; }

	// Methods

	// RVA: 0x26B3920 Offset: 0x26B3920 VA: 0x26B3920
	public void .ctor() { }

	// RVA: 0x26B3A54 Offset: 0x26B3A54 VA: 0x26B3A54
	public static PlayerConnection get_instance() { }

	// RVA: 0x26B3BEC Offset: 0x26B3BEC VA: 0x26B3BEC
	public bool get_isConnected() { }

	// RVA: 0x26B3B60 Offset: 0x26B3B60 VA: 0x26B3B60
	private static PlayerConnection CreateInstance() { }

	// RVA: 0x26B3D88 Offset: 0x26B3D88 VA: 0x26B3D88
	public void OnEnable() { }

	// RVA: 0x26B3CA0 Offset: 0x26B3CA0 VA: 0x26B3CA0
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }

	// RVA: 0x26B3E60 Offset: 0x26B3E60 VA: 0x26B3E60 Slot: 4
	public void Register(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x26B4284 Offset: 0x26B4284 VA: 0x26B4284 Slot: 5
	public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x26B45A4 Offset: 0x26B45A4 VA: 0x26B45A4 Slot: 6
	public void RegisterConnection(UnityAction<int> callback) { }

	// RVA: 0x26B472C Offset: 0x26B472C VA: 0x26B472C Slot: 7
	public void RegisterDisconnection(UnityAction<int> callback) { }

	// RVA: 0x26B47AC Offset: 0x26B47AC VA: 0x26B47AC Slot: 8
	public void Send(Guid messageId, byte[] data) { }

	// RVA: 0x26B4914 Offset: 0x26B4914 VA: 0x26B4914 Slot: 9
	public bool TrySend(Guid messageId, byte[] data) { }

	// RVA: 0x26B4A7C Offset: 0x26B4A7C VA: 0x26B4A7C
	public bool BlockUntilRecvMsg(Guid messageId, int timeout) { }

	// RVA: 0x26B4CA4 Offset: 0x26B4CA4 VA: 0x26B4CA4 Slot: 10
	public void DisconnectAll() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC519C8 Offset: 0xC519C8 VA: 0xC519C8
	// RVA: 0x26B4D58 Offset: 0x26B4D58 VA: 0x26B4D58
	private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC519D8 Offset: 0xC519D8 VA: 0xC519D8
	// RVA: 0x26B52CC Offset: 0x26B52CC VA: 0x26B52CC
	private static void ConnectedCallbackInternal(int playerId) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC519E8 Offset: 0xC519E8 VA: 0xC519E8
	// RVA: 0x26B5388 Offset: 0x26B5388 VA: 0x26B5388
	private static void DisconnectedCallback(int playerId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC47AD4 Offset: 0xC47AD4 VA: 0xC47AD4
private sealed class PlayerConnection.<Register>c__AnonStorey0 // TypeDefIndex: 2525
{
	// Fields
	internal Guid messageId; // 0x10

	// Methods

	// RVA: 0x26B4104 Offset: 0x26B4104 VA: 0x26B4104
	public void .ctor() { }

	// RVA: 0x26B5450 Offset: 0x26B5450 VA: 0x26B5450
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC47AE4 Offset: 0xC47AE4 VA: 0xC47AE4
private sealed class PlayerConnection.<Unregister>c__AnonStorey1 // TypeDefIndex: 2526
{
	// Fields
	internal Guid messageId; // 0x10

	// Methods

	// RVA: 0x26B4444 Offset: 0x26B4444 VA: 0x26B4444
	public void .ctor() { }

	// RVA: 0x26B5538 Offset: 0x26B5538 VA: 0x26B5538
	internal bool <>m__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC47AF4 Offset: 0xC47AF4 VA: 0xC47AF4
private sealed class PlayerConnection.<BlockUntilRecvMsg>c__AnonStorey2 // TypeDefIndex: 2527
{
	// Fields
	internal bool msgReceived; // 0x10

	// Methods

	// RVA: 0x26B4C9C Offset: 0x26B4C9C VA: 0x26B4C9C
	public void .ctor() { }

	// RVA: 0x26B5444 Offset: 0x26B5444 VA: 0x26B5444
	internal void <>m__0(MessageEventArgs args) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
internal class PlayerEditorConnectionEvents // TypeDefIndex: 2528
{
	// Fields
	[SerializeField] // RVA: 0xC49AB4 Offset: 0xC49AB4 VA: 0xC49AB4
	public List<PlayerEditorConnectionEvents.MessageTypeSubscribers> messageTypeSubscribers; // 0x10
	[SerializeField] // RVA: 0xC49AC4 Offset: 0xC49AC4 VA: 0xC49AC4
	public PlayerEditorConnectionEvents.ConnectionChangeEvent connectionEvent; // 0x18
	[SerializeField] // RVA: 0xC49AD4 Offset: 0xC49AD4 VA: 0xC49AD4
	public PlayerEditorConnectionEvents.ConnectionChangeEvent disconnectionEvent; // 0x20

	// Methods

	// RVA: 0x26B39AC Offset: 0x26B39AC VA: 0x26B39AC
	public void .ctor() { }

	// RVA: 0x26B4E84 Offset: 0x26B4E84 VA: 0x26B4E84
	public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x26B410C Offset: 0x26B410C VA: 0x26B410C
	public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId) { }

	// RVA: 0x26B444C Offset: 0x26B444C VA: 0x26B444C
	public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback) { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 2529
{
	// Methods

	// RVA: 0x26B56F0 Offset: 0x26B56F0 VA: 0x26B56F0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 2530
{
	// Methods

	// RVA: 0x26B55F0 Offset: 0x26B55F0 VA: 0x26B55F0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageTypeSubscribers // TypeDefIndex: 2531
{
