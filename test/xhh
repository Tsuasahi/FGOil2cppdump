	/* GenericInstMethod :
	|
	|-RVA: 0x1A2F33C Offset: 0x1A2F33C VA: 0x1A2F33C
	|-PlayableExtensions.GetSpeed<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BB4 Offset: 0xBE4BB4 VA: 0xBE4BB4
	// RVA: -1 Offset: -1
	public static void SetDuration<U>(U playable, double value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C370 Offset: 0x1C1C370 VA: 0x1C1C370
	|-PlayableExtensions.SetDuration<AnimationClipPlayable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BC4 Offset: 0xBE4BC4 VA: 0xBE4BC4
	// RVA: -1 Offset: -1
	public static double GetDuration<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A2F304 Offset: 0x1A2F304 VA: 0x1A2F304
	|-PlayableExtensions.GetDuration<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BD4 Offset: 0xBE4BD4 VA: 0xBE4BD4
	// RVA: -1 Offset: -1
	public static void SetTime<U>(U playable, double value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C628 Offset: 0x1C1C628 VA: 0x1C1C628
	|-PlayableExtensions.SetTime<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BE4 Offset: 0xBE4BE4 VA: 0xBE4BE4
	// RVA: -1 Offset: -1
	public static double GetTime<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A2F374 Offset: 0x1A2F374 VA: 0x1A2F374
	|-PlayableExtensions.GetTime<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BF4 Offset: 0xBE4BF4 VA: 0xBE4BF4
	// RVA: -1 Offset: -1
	public static void SetDone<U>(U playable, bool value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C328 Offset: 0x1C1C328 VA: 0x1C1C328
	|-PlayableExtensions.SetDone<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4C04 Offset: 0xBE4C04 VA: 0xBE4C04
	// RVA: -1 Offset: -1
	public static bool IsDone<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A1B6E8 Offset: 0x1A1B6E8 VA: 0x1A1B6E8
	|-PlayableExtensions.IsDone<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4C14 Offset: 0xBE4C14 VA: 0xBE4C14
	// RVA: -1 Offset: -1
	public static void SetInputCount<U>(U playable, int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C3B8 Offset: 0x1C1C3B8 VA: 0x1C1C3B8
	|-PlayableExtensions.SetInputCount<AnimationMixerPlayable>
	|
	|-RVA: 0x1C1C400 Offset: 0x1C1C400 VA: 0x1C1C400
	|-PlayableExtensions.SetInputCount<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4C24 Offset: 0xBE4C24 VA: 0xBE4C24
	// RVA: -1 Offset: -1
	public static int GetInputCount<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C594E8 Offset: 0x1C594E8 VA: 0x1C594E8
	|-PlayableExtensions.GetInputCount<AnimationMixerPlayable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4C34 Offset: 0xBE4C34 VA: 0xBE4C34
	// RVA: -1 Offset: -1
	public static Playable GetInput<U>(U playable, int inputPort) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B283B8 Offset: 0x2B283B8 VA: 0x2B283B8
	|-PlayableExtensions.GetInput<AnimationMixerPlayable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4C44 Offset: 0xBE4C44 VA: 0xBE4C44
	// RVA: -1 Offset: -1
	public static void SetInputWeight<U>(U playable, int inputIndex, float weight) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C448 Offset: 0x1C1C448 VA: 0x1C1C448
	|-PlayableExtensions.SetInputWeight<AnimationMixerPlayable>
	|
	|-RVA: 0x1C1C4A0 Offset: 0x1C1C4A0 VA: 0x1C1C4A0
	|-PlayableExtensions.SetInputWeight<Playable>
	*/
}

// Namespace: UnityEngine.Playables
public enum DirectorUpdateMode // TypeDefIndex: 2506
{
	// Fields
	public int value__; // 0x0
	public const DirectorUpdateMode DSPClock = 0;
	public const DirectorUpdateMode GameTime = 1;
	public const DirectorUpdateMode UnscaledGameTime = 2;
	public const DirectorUpdateMode Manual = 3;
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xBDB610 Offset: 0xBDB610 VA: 0xBDB610
[NativeHeaderAttribute] // RVA: 0xBDB610 Offset: 0xBDB610 VA: 0xBDB610
[NativeHeaderAttribute] // RVA: 0xBDB610 Offset: 0xBDB610 VA: 0xBDB610
[UsedByNativeCodeAttribute] // RVA: 0xBDB610 Offset: 0xBDB610 VA: 0xBDB610
[NativeHeaderAttribute] // RVA: 0xBDB610 Offset: 0xBDB610 VA: 0xBDB610
public struct PlayableGraph // TypeDefIndex: 2507
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8

	// Methods

	// RVA: -1 Offset: -1
	public bool Connect<U, V>(U source, int sourceOutputPort, V destination, int destinationInputPort) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD58FBC Offset: 0xD58FBC VA: 0xD58FBC
	|-PlayableGraph.Connect<AnimationMixerPlayable, Playable>
	|
	|-RVA: 0xD58FC4 Offset: 0xD58FC4 VA: 0xD58FC4
	|-PlayableGraph.Connect<Playable, AnimationMixerPlayable>
	*/

	// RVA: -1 Offset: -1
	public void Disconnect<U>(U input, int inputPort) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD5A540 Offset: 0xD5A540 VA: 0xD5A540
	|-PlayableGraph.Disconnect<AnimationMixerPlayable>
	*/

	// RVA: -1 Offset: -1
	public void DestroySubgraph<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD5A4F0 Offset: 0xD5A4F0 VA: 0xD5A4F0
	|-PlayableGraph.DestroySubgraph<Playable>
	*/

	// RVA: 0xD6E9F4 Offset: 0xD6E9F4 VA: 0xD6E9F4
	public void Evaluate() { }

	// RVA: 0x25723E4 Offset: 0x25723E4 VA: 0x25723E4
	public static PlayableGraph Create() { }

	// RVA: 0x2572410 Offset: 0x2572410 VA: 0x2572410
	public static PlayableGraph Create(string name) { }

	[FreeFunctionAttribute] // RVA: 0xBE4C54 Offset: 0xBE4C54 VA: 0xBE4C54
	// RVA: 0xD6EA00 Offset: 0xD6EA00 VA: 0xD6EA00
	public void Destroy() { }

	// RVA: 0xD6EA08 Offset: 0xD6EA08 VA: 0xD6EA08
	public bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xBE4CAC Offset: 0xBE4CAC VA: 0xBE4CAC
	// RVA: 0xD6EA10 Offset: 0xD6EA10 VA: 0xD6EA10
	public void Play() { }

	[FreeFunctionAttribute] // RVA: 0xBE4D04 Offset: 0xBE4D04 VA: 0xBE4D04
	// RVA: 0xD6EA18 Offset: 0xD6EA18 VA: 0xD6EA18
	public void Stop() { }

	[FreeFunctionAttribute] // RVA: 0xBE4D5C Offset: 0xBE4D5C VA: 0xBE4D5C
	// RVA: 0xD6EA20 Offset: 0xD6EA20 VA: 0xD6EA20
	public void Evaluate(float deltaTime) { }

	[FreeFunctionAttribute] // RVA: 0xBE4DB4 Offset: 0xBE4DB4 VA: 0xBE4DB4
	// RVA: 0xD6EA28 Offset: 0xD6EA28 VA: 0xD6EA28
	public void SetTimeUpdateMode(DirectorUpdateMode value) { }

	[FreeFunctionAttribute] // RVA: 0xBE4E0C Offset: 0xBE4E0C VA: 0xBE4E0C
	// RVA: 0xD6EA30 Offset: 0xD6EA30 VA: 0xD6EA30
	internal PlayableHandle CreatePlayableHandle() { }

	[FreeFunctionAttribute] // RVA: 0xBE4E64 Offset: 0xBE4E64 VA: 0xBE4E64
	// RVA: 0xD6EA5C Offset: 0xD6EA5C VA: 0xD6EA5C
	private bool ConnectInternal(PlayableHandle source, int sourceOutputPort, PlayableHandle destination, int destinationInputPort) { }

	[FreeFunctionAttribute] // RVA: 0xBE4EBC Offset: 0xBE4EBC VA: 0xBE4EBC
	// RVA: 0xD6EA9C Offset: 0xD6EA9C VA: 0xD6EA9C
	private void DisconnectInternal(PlayableHandle playable, int inputPort) { }

	[FreeFunctionAttribute] // RVA: 0xBE4F14 Offset: 0xBE4F14 VA: 0xBE4F14
	// RVA: 0xD6EAC8 Offset: 0xD6EAC8 VA: 0xD6EAC8
	private void DestroySubgraphInternal(PlayableHandle playable) { }

	// RVA: 0x2572438 Offset: 0x2572438 VA: 0x2572438
	private static void Create_Injected(string name, out PlayableGraph ret) { }

	// RVA: 0x25724B0 Offset: 0x25724B0 VA: 0x25724B0
	private static void Destroy_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x2572520 Offset: 0x2572520 VA: 0x2572520
	private static bool IsValid_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x2572590 Offset: 0x2572590 VA: 0x2572590
	private static void Play_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x2572600 Offset: 0x2572600 VA: 0x2572600
	private static void Stop_Injected(ref PlayableGraph _unity_self) { }

	// RVA: 0x257266C Offset: 0x257266C VA: 0x257266C
	private static void Evaluate_Injected(ref PlayableGraph _unity_self, float deltaTime) { }

	// RVA: 0x25726E4 Offset: 0x25726E4 VA: 0x25726E4
	private static void SetTimeUpdateMode_Injected(ref PlayableGraph _unity_self, DirectorUpdateMode value) { }

	// RVA: 0x2572780 Offset: 0x2572780 VA: 0x2572780
	private static void CreatePlayableHandle_Injected(ref PlayableGraph _unity_self, out PlayableHandle ret) { }

	// RVA: 0x2572830 Offset: 0x2572830 VA: 0x2572830
	private static bool ConnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle source, int sourceOutputPort, ref PlayableHandle destination, int destinationInputPort) { }

	// RVA: 0x25728F4 Offset: 0x25728F4 VA: 0x25728F4
	private static void DisconnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle playable, int inputPort) { }

	// RVA: 0x257299C Offset: 0x257299C VA: 0x257299C
	private static void DestroySubgraphInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle playable) { }
}

// Namespace: UnityEngine.Playables
public enum PlayState // TypeDefIndex: 2508
{
	// Fields
	public int value__; // 0x0
	public const PlayState Paused = 0;
	public const PlayState Playing = 1;
	public const PlayState Delayed = 2;
}

// Namespace: UnityEngine.Playables
[NativeHeaderAttribute] // RVA: 0xBDB6C8 Offset: 0xBDB6C8 VA: 0xBDB6C8
[NativeHeaderAttribute] // RVA: 0xBDB6C8 Offset: 0xBDB6C8 VA: 0xBDB6C8
[NativeHeaderAttribute] // RVA: 0xBDB6C8 Offset: 0xBDB6C8 VA: 0xBDB6C8
[UsedByNativeCodeAttribute] // RVA: 0xBDB6C8 Offset: 0xBDB6C8 VA: 0xBDB6C8
public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 2509
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods

	// RVA: -1 Offset: -1
	internal T GetObject<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD5A598 Offset: 0xD5A598 VA: 0xD5A598
	|-PlayableHandle.GetObject<object>
	*/

	[VisibleToOtherModulesAttribute] // RVA: 0xBE4F6C Offset: 0xBE4F6C VA: 0xBE4F6C
	// RVA: -1 Offset: -1
	internal bool IsPlayableOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD58FCC Offset: 0xD58FCC VA: 0xD58FCC
	|-PlayableHandle.IsPlayableOfType<object>
	|
	|-RVA: 0xD58FD4 Offset: 0xD58FD4 VA: 0xD58FD4
	|-PlayableHandle.IsPlayableOfType<AnimationClipPlayable>
	|
	|-RVA: 0xD58FDC Offset: 0xD58FDC VA: 0xD58FDC
	|-PlayableHandle.IsPlayableOfType<AnimationLayerMixerPlayable>
	|
	|-RVA: 0xD58FE4 Offset: 0xD58FE4 VA: 0xD58FE4
	|-PlayableHandle.IsPlayableOfType<AnimationMixerPlayable>
	|
	|-RVA: 0xD58FEC Offset: 0xD58FEC VA: 0xD58FEC
	|-PlayableHandle.IsPlayableOfType<AnimationMotionXToDeltaPlayable>
	|
	|-RVA: 0xD58FF4 Offset: 0xD58FF4 VA: 0xD58FF4
	|-PlayableHandle.IsPlayableOfType<AnimationOffsetPlayable>
	|
	|-RVA: 0xD58FFC Offset: 0xD58FFC VA: 0xD58FFC
	|-PlayableHandle.IsPlayableOfType<AnimationPosePlayable>
	|
	|-RVA: 0xD59004 Offset: 0xD59004 VA: 0xD59004
	|-PlayableHandle.IsPlayableOfType<AnimationRemoveScalePlayable>
	|
	|-RVA: 0xD5900C Offset: 0xD5900C VA: 0xD5900C
	|-PlayableHandle.IsPlayableOfType<AnimatorControllerPlayable>
	|
	|-RVA: 0xD59014 Offset: 0xD59014 VA: 0xD59014
	|-PlayableHandle.IsPlayableOfType<AnimationScriptPlayable>
	*/

	// RVA: 0x2571D54 Offset: 0x2571D54 VA: 0x2571D54
	public static PlayableHandle get_Null() { }

	// RVA: 0xD6EAF0 Offset: 0xD6EAF0 VA: 0xD6EAF0
	internal Playable GetInput(int inputPort) { }

	// RVA: 0xD6EAF8 Offset: 0xD6EAF8 VA: 0xD6EAF8
	internal bool SetInputWeight(int inputIndex, float weight) { }

	// RVA: 0x2571C48 Offset: 0x2571C48 VA: 0x2571C48
	public static bool op_Equality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0x2572BC0 Offset: 0x2572BC0 VA: 0x2572BC0
	public static bool op_Inequality(PlayableHandle x, PlayableHandle y) { }

	// RVA: 0xD6EB44 Offset: 0xD6EB44 VA: 0xD6EB44 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xD6EB4C Offset: 0xD6EB4C VA: 0xD6EB4C Slot: 4
	public bool Equals(PlayableHandle other) { }

	// RVA: 0xD6EB54 Offset: 0xD6EB54 VA: 0xD6EB54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2572B88 Offset: 0x2572B88 VA: 0x2572B88
	internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }

	// RVA: 0xD6EB90 Offset: 0xD6EB90 VA: 0xD6EB90
	internal bool CheckInputBounds(int inputIndex) { }

	// RVA: 0xD6EBB0 Offset: 0xD6EBB0 VA: 0xD6EBB0
	internal bool CheckInputBounds(int inputIndex, bool acceptAny) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE4F7C Offset: 0xBE4F7C VA: 0xBE4F7C
	// RVA: 0xD6EBD0 Offset: 0xD6EBD0 VA: 0xD6EBD0
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xBE4F8C Offset: 0xBE4F8C VA: 0xBE4F8C
	[VisibleToOtherModulesAttribute] // RVA: 0xBE4F8C Offset: 0xBE4F8C VA: 0xBE4F8C
	// RVA: 0xD6EBD8 Offset: 0xD6EBD8 VA: 0xD6EBD8
	internal Type GetPlayableType() { }

	[FreeFunctionAttribute] // RVA: 0xBE4FF8 Offset: 0xBE4FF8 VA: 0xBE4FF8
	[VisibleToOtherModulesAttribute] // RVA: 0xBE4FF8 Offset: 0xBE4FF8 VA: 0xBE4FF8
	// RVA: 0xD6EBE0 Offset: 0xD6EBE0 VA: 0xD6EBE0
	internal void SetScriptInstance(object scriptInstance) { }

	[FreeFunctionAttribute] // RVA: 0xBE5064 Offset: 0xBE5064 VA: 0xBE5064
	[VisibleToOtherModulesAttribute] // RVA: 0xBE5064 Offset: 0xBE5064 VA: 0xBE5064
	// RVA: 0xD6EBE8 Offset: 0xD6EBE8 VA: 0xD6EBE8
	internal void Play() { }

	[FreeFunctionAttribute] // RVA: 0xBE50D0 Offset: 0xBE50D0 VA: 0xBE50D0
	[VisibleToOtherModulesAttribute] // RVA: 0xBE50D0 Offset: 0xBE50D0 VA: 0xBE50D0
	// RVA: 0xD6EBF0 Offset: 0xD6EBF0 VA: 0xD6EBF0
	internal void Pause() { }

	[FreeFunctionAttribute] // RVA: 0xBE513C Offset: 0xBE513C VA: 0xBE513C
	[VisibleToOtherModulesAttribute] // RVA: 0xBE513C Offset: 0xBE513C VA: 0xBE513C
	// RVA: 0xD6EBF8 Offset: 0xD6EBF8 VA: 0xD6EBF8
	internal double GetSpeed() { }

	[FreeFunctionAttribute] // RVA: 0xBE51A8 Offset: 0xBE51A8 VA: 0xBE51A8
	[VisibleToOtherModulesAttribute] // RVA: 0xBE51A8 Offset: 0xBE51A8 VA: 0xBE51A8
	// RVA: 0xD6EC00 Offset: 0xD6EC00 VA: 0xD6EC00
	internal void SetSpeed(double value) { }

	[FreeFunctionAttribute] // RVA: 0xBE5214 Offset: 0xBE5214 VA: 0xBE5214
	[VisibleToOtherModulesAttribute] // RVA: 0xBE5214 Offset: 0xBE5214 VA: 0xBE5214
	// RVA: 0xD6EC08 Offset: 0xD6EC08 VA: 0xD6EC08
	internal double GetTime() { }

	[FreeFunctionAttribute] // RVA: 0xBE5280 Offset: 0xBE5280 VA: 0xBE5280
	[VisibleToOtherModulesAttribute] // RVA: 0xBE5280 Offset: 0xBE5280 VA: 0xBE5280
	// RVA: 0xD6EC10 Offset: 0xD6EC10 VA: 0xD6EC10
	internal void SetTime(double value) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE52EC Offset: 0xBE52EC VA: 0xBE52EC
	[FreeFunctionAttribute] // RVA: 0xBE52EC Offset: 0xBE52EC VA: 0xBE52EC
	// RVA: 0xD6EC18 Offset: 0xD6EC18 VA: 0xD6EC18
	internal bool IsDone() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE5358 Offset: 0xBE5358 VA: 0xBE5358
	[FreeFunctionAttribute] // RVA: 0xBE5358 Offset: 0xBE5358 VA: 0xBE5358
	// RVA: 0xD6EC20 Offset: 0xD6EC20 VA: 0xD6EC20
	internal void SetDone(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xBE53C4 Offset: 0xBE53C4 VA: 0xBE53C4
	[VisibleToOtherModulesAttribute] // RVA: 0xBE53C4 Offset: 0xBE53C4 VA: 0xBE53C4
	// RVA: 0xD6EC2C Offset: 0xD6EC2C VA: 0xD6EC2C
	internal double GetDuration() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE5430 Offset: 0xBE5430 VA: 0xBE5430
	[FreeFunctionAttribute] // RVA: 0xBE5430 Offset: 0xBE5430 VA: 0xBE5430
	// RVA: 0xD6EC34 Offset: 0xD6EC34 VA: 0xD6EC34
	internal void SetDuration(double value) { }

	[FreeFunctionAttribute] // RVA: 0xBE549C Offset: 0xBE549C VA: 0xBE549C
	[VisibleToOtherModulesAttribute] // RVA: 0xBE549C Offset: 0xBE549C VA: 0xBE549C
	// RVA: 0xD6EC3C Offset: 0xD6EC3C VA: 0xD6EC3C
	internal PlayableGraph GetGraph() { }

	[FreeFunctionAttribute] // RVA: 0xBE5508 Offset: 0xBE5508 VA: 0xBE5508
	[VisibleToOtherModulesAttribute] // RVA: 0xBE5508 Offset: 0xBE5508 VA: 0xBE5508
	// RVA: 0xD6EC44 Offset: 0xD6EC44 VA: 0xD6EC44
	internal int GetInputCount() { }

	[FreeFunctionAttribute] // RVA: 0xBE5574 Offset: 0xBE5574 VA: 0xBE5574
	[VisibleToOtherModulesAttribute] // RVA: 0xBE5574 Offset: 0xBE5574 VA: 0xBE5574
	// RVA: 0xD6EC4C Offset: 0xD6EC4C VA: 0xD6EC4C
	internal void SetInputCount(int value) { }

	[FreeFunctionAttribute] // RVA: 0xBE55E0 Offset: 0xBE55E0 VA: 0xBE55E0
	// RVA: 0xD6EC54 Offset: 0xD6EC54 VA: 0xD6EC54
	private object GetScriptInstance() { }

	[FreeFunctionAttribute] // RVA: 0xBE5638 Offset: 0xBE5638 VA: 0xBE5638
	// RVA: 0xD6EC5C Offset: 0xD6EC5C VA: 0xD6EC5C
	private PlayableHandle GetInputHandle(int index) { }

	[FreeFunctionAttribute] // RVA: 0xBE5690 Offset: 0xBE5690 VA: 0xBE5690
	// RVA: 0xD6EC64 Offset: 0xD6EC64 VA: 0xD6EC64
	private void SetInputWeightFromIndex(int index, float weight) { }

	// RVA: 0x2573FEC Offset: 0x2573FEC VA: 0x2573FEC
	private static void .cctor() { }

	// RVA: 0x2573188 Offset: 0x2573188 VA: 0x2573188
	private static bool IsValid_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x25731F4 Offset: 0x25731F4 VA: 0x25731F4
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x25732D4 Offset: 0x25732D4 VA: 0x25732D4
	private static void SetScriptInstance_Injected(ref PlayableHandle _unity_self, object scriptInstance) { }

	// RVA: 0x25733AC Offset: 0x25733AC VA: 0x25733AC
	private static void Play_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x257347C Offset: 0x257347C VA: 0x257347C
	private static void Pause_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x257354C Offset: 0x257354C VA: 0x257354C
	private static double GetSpeed_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x257362C Offset: 0x257362C VA: 0x257362C
	private static void SetSpeed_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x2573704 Offset: 0x2573704 VA: 0x2573704
	private static double GetTime_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x25737E4 Offset: 0x25737E4 VA: 0x25737E4
	private static void SetTime_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x25738BC Offset: 0x25738BC VA: 0x25738BC
	private static bool IsDone_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x257399C Offset: 0x257399C VA: 0x257399C
	private static void SetDone_Injected(ref PlayableHandle _unity_self, bool value) { }

	// RVA: 0x2573A74 Offset: 0x2573A74 VA: 0x2573A74
	private static double GetDuration_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x2573B54 Offset: 0x2573B54 VA: 0x2573B54
	private static void SetDuration_Injected(ref PlayableHandle _unity_self, double value) { }

	// RVA: 0x2573C44 Offset: 0x2573C44 VA: 0x2573C44
	private static void GetGraph_Injected(ref PlayableHandle _unity_self, out PlayableGraph ret) { }

	// RVA: 0x2573CB8 Offset: 0x2573CB8 VA: 0x2573CB8
	private static int GetInputCount_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x2573D98 Offset: 0x2573D98 VA: 0x2573D98
	private static void SetInputCount_Injected(ref PlayableHandle _unity_self, int value) { }

	// RVA: 0x2573E70 Offset: 0x2573E70 VA: 0x2573E70
	private static object GetScriptInstance_Injected(ref PlayableHandle _unity_self) { }

	// RVA: 0x2573EDC Offset: 0x2573EDC VA: 0x2573EDC
	private static void GetInputHandle_Injected(ref PlayableHandle _unity_self, int index, out PlayableHandle ret) { }

	// RVA: 0x2573F60 Offset: 0x2573F60 VA: 0x2573F60
	private static void SetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index, float weight) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB75C Offset: 0xBDB75C VA: 0xBDB75C
public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 2510
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xBE56E8 Offset: 0xBE56E8 VA: 0xBE56E8
	// RVA: 0xD6EC6C Offset: 0xD6EC6C VA: 0xD6EC6C
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0xD6EC74 Offset: 0xD6EC74 VA: 0xD6EC74 Slot: 4
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0xD6EC80 Offset: 0xD6EC80 VA: 0xD6EC80 Slot: 5
	public bool Equals(PlayableOutput other) { }

	// RVA: 0x257416C Offset: 0x257416C VA: 0x257416C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
[ExtensionAttribute] // RVA: 0xBDB76C Offset: 0xBDB76C VA: 0xBDB76C
public static class PlayableOutputExtensions // TypeDefIndex: 2511
{
	// Methods

	[ExtensionAttribute] // RVA: 0xBE56F8 Offset: 0xBE56F8 VA: 0xBE56F8
	// RVA: -1 Offset: -1
	public static void SetSourcePlayable<U, V>(U output, V value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C760 Offset: 0x1C1C760 VA: 0x1C1C760
	|-PlayableOutputExtensions.SetSourcePlayable<AnimationPlayableOutput, AnimationMixerPlayable>
	|
	|-RVA: 0x1C1C7B8 Offset: 0x1C1C7B8 VA: 0x1C1C7B8
	|-PlayableOutputExtensions.SetSourcePlayable<AnimationPlayableOutput, Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE5708 Offset: 0xBE5708 VA: 0xBE5708
	// RVA: -1 Offset: -1
	public static void SetSourceOutputPort<U>(U output, int value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C718 Offset: 0x1C1C718 VA: 0x1C1C718
	|-PlayableOutputExtensions.SetSourceOutputPort<AnimationPlayableOutput>
	*/
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0xBDB77C Offset: 0xBDB77C VA: 0xBDB77C
[NativeHeaderAttribute] // RVA: 0xBDB77C Offset: 0xBDB77C VA: 0xBDB77C
[NativeHeaderAttribute] // RVA: 0xBDB77C Offset: 0xBDB77C VA: 0xBDB77C
[NativeHeaderAttribute] // RVA: 0xBDB77C Offset: 0xBDB77C VA: 0xBDB77C
public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 2512
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods

	// RVA: 0x25741E0 Offset: 0x25741E0 VA: 0x25741E0
	public static PlayableOutputHandle get_Null() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE5718 Offset: 0xBE5718 VA: 0xBE5718
	// RVA: -1 Offset: -1
	internal bool IsPlayableOutputOfType<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD5901C Offset: 0xD5901C VA: 0xD5901C
	|-PlayableOutputHandle.IsPlayableOutputOfType<object>
	|
	|-RVA: 0xD59024 Offset: 0xD59024 VA: 0xD59024
	|-PlayableOutputHandle.IsPlayableOutputOfType<AnimationPlayableOutput>
	*/

	// RVA: 0xD6EC88 Offset: 0xD6EC88 VA: 0xD6EC88 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25740D4 Offset: 0x25740D4 VA: 0x25740D4
	public static bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	// RVA: 0xD6ECC4 Offset: 0xD6ECC4 VA: 0xD6ECC4 Slot: 0
	public override bool Equals(object p) { }

	// RVA: 0xD6ECCC Offset: 0xD6ECCC VA: 0xD6ECCC Slot: 4
	public bool Equals(PlayableOutputHandle other) { }

	// RVA: 0x2574280 Offset: 0x2574280 VA: 0x2574280
	internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBE5728 Offset: 0xBE5728 VA: 0xBE5728
	// RVA: 0xD6ECD4 Offset: 0xD6ECD4 VA: 0xD6ECD4
	internal bool IsValid() { }

	[FreeFunctionAttribute] // RVA: 0xBE5738 Offset: 0xBE5738 VA: 0xBE5738
	// RVA: 0xD6ECDC Offset: 0xD6ECDC VA: 0xD6ECDC
	internal Type GetPlayableOutputType() { }

	[FreeFunctionAttribute] // RVA: 0xBE5790 Offset: 0xBE5790 VA: 0xBE5790
	// RVA: 0xD6ECE4 Offset: 0xD6ECE4 VA: 0xD6ECE4
	internal void SetSourcePlayable(PlayableHandle target) { }

	[FreeFunctionAttribute] // RVA: 0xBE57E8 Offset: 0xBE57E8 VA: 0xBE57E8
	// RVA: 0xD6ECEC Offset: 0xD6ECEC VA: 0xD6ECEC
	internal void SetSourceOutputPort(int port) { }

	// RVA: 0x2574748 Offset: 0x2574748 VA: 0x2574748
	private static void .cctor() { }

	// RVA: 0x2574438 Offset: 0x2574438 VA: 0x2574438
	private static bool IsValid_Injected(ref PlayableOutputHandle _unity_self) { }

	// RVA: 0x2574508 Offset: 0x2574508 VA: 0x2574508
	private static Type GetPlayableOutputType_Injected(ref PlayableOutputHandle _unity_self) { }

	// RVA: 0x25745EC Offset: 0x25745EC VA: 0x25745EC
	private static void SetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle target) { }

	// RVA: 0x25746D4 Offset: 0x25746D4 VA: 0x25746D4
	private static void SetSourceOutputPort_Injected(ref PlayableOutputHandle _unity_self, int port) { }
}

// Namespace: UnityEngine.Playables
public struct ScriptPlayable<T> : IPlayable, IEquatable<ScriptPlayable<T>> // TypeDefIndex: 2513
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly ScriptPlayable<T> m_NullPlayable; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	internal void .ctor(PlayableHandle handle) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD73C30 Offset: 0xD73C30 VA: 0xD73C30
	|-ScriptPlayable<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public static ScriptPlayable<T> Create(PlayableGraph graph, T template, int inputCount = 0) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B06878 Offset: 0x2B06878 VA: 0x2B06878
	|-ScriptPlayable<SimpleAnimationPlayable>.Create
	|-ScriptPlayable<object>.Create
	*/

	// RVA: -1 Offset: -1
	private static PlayableHandle CreateHandle(PlayableGraph graph, T template, int inputCount) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B069F0 Offset: 0x2B069F0 VA: 0x2B069F0
	|-ScriptPlayable<object>.CreateHandle
	*/

	// RVA: -1 Offset: -1
	private static object CreateScriptInstance() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B06D44 Offset: 0x2B06D44 VA: 0x2B06D44
	|-ScriptPlayable<object>.CreateScriptInstance
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstance(IPlayableBehaviour source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B06F80 Offset: 0x2B06F80 VA: 0x2B06F80
	|-ScriptPlayable<object>.CloneScriptInstance
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstanceFromEngineObject(Object source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B0721C Offset: 0x2B0721C VA: 0x2B0721C
	|-ScriptPlayable<object>.CloneScriptInstanceFromEngineObject
	*/

	// RVA: -1 Offset: -1
	private static object CloneScriptInstanceFromIClonable(ICloneable source) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B072EC Offset: 0x2B072EC VA: 0x2B072EC
	|-ScriptPlayable<object>.CloneScriptInstanceFromIClonable
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public PlayableHandle GetHandle() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD73C38 Offset: 0xD73C38 VA: 0xD73C38
	|-ScriptPlayable<object>.GetHandle
	*/

	// RVA: -1 Offset: -1
	public T GetBehaviour() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD73C44 Offset: 0xD73C44 VA: 0xD73C44
	|-ScriptPlayable<SimpleAnimationPlayable>.GetBehaviour
	|-ScriptPlayable<object>.GetBehaviour
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool Equals(ScriptPlayable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD73C4C Offset: 0xD73C4C VA: 0xD73C4C
	|-ScriptPlayable<object>.Equals
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B07498 Offset: 0x2B07498 VA: 0x2B07498
	|-ScriptPlayable<object>..cctor
	*/
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB810 Offset: 0xBDB810 VA: 0xBDB810
public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 2514
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD6ECF4 Offset: 0xD6ECF4 VA: 0xD6ECF4 Slot: 4
	public PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xBDB820 Offset: 0xBDB820 VA: 0xBDB820
[NativeHeaderAttribute] // RVA: 0xBDB820 Offset: 0xBDB820 VA: 0xBDB820
[NativeHeaderAttribute] // RVA: 0xBDB820 Offset: 0xBDB820 VA: 0xBDB820
[StaticAccessorAttribute] // RVA: 0xBDB820 Offset: 0xBDB820 VA: 0xBDB820
[RequiredByNativeCodeAttribute] // RVA: 0xBDB820 Offset: 0xBDB820 VA: 0xBDB820
public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 2515
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD6CE84 Offset: 0xD6CE84 VA: 0xD6CE84 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD6CE90 Offset: 0xD6CE90 VA: 0xD6CE90 Slot: 5
	public bool Equals(TextureMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xBDB8DC Offset: 0xBDB8DC VA: 0xBDB8DC
[StaticAccessorAttribute] // RVA: 0xBDB8DC Offset: 0xBDB8DC VA: 0xBDB8DC
[RequiredByNativeCodeAttribute] // RVA: 0xBDB8DC Offset: 0xBDB8DC VA: 0xBDB8DC
[NativeHeaderAttribute] // RVA: 0xBDB8DC Offset: 0xBDB8DC VA: 0xBDB8DC
[NativeHeaderAttribute] // RVA: 0xBDB8DC Offset: 0xBDB8DC VA: 0xBDB8DC
public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 2516
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD6CE98 Offset: 0xD6CE98 VA: 0xD6CE98 Slot: 4
	public PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Internal
[AttributeUsageAttribute] // RVA: 0xBDB998 Offset: 0xBDB998 VA: 0xBDB998
[Serializable]
public class DefaultValueAttribute : Attribute // TypeDefIndex: 2517
{
	// Fields
	private object DefaultValue; // 0x10

	// Properties
	public object Value { get; }

	// Methods

	// RVA: 0x25656FC Offset: 0x25656FC VA: 0x25656FC
	public void .ctor(string value) { }

	// RVA: 0x2565728 Offset: 0x2565728 VA: 0x2565728
	public object get_Value() { }

	// RVA: 0x2565730 Offset: 0x2565730 VA: 0x2565730 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x256580C Offset: 0x256580C VA: 0x256580C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Internal
[Serializable]
public class ExcludeFromDocsAttribute : Attribute // TypeDefIndex: 2518
{
	// Methods

	// RVA: 0x2565830 Offset: 0x2565830 VA: 0x2565830
	public void .ctor() { }
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 2519
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void LogException(Exception exception, Object context);
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 2520
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Log(LogType logType, object message);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Log(LogType logType, object message, Object context);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Log(object message);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Log(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void LogWarning(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void LogError(string tag, object message);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void LogFormat(LogType logType, string format, object[] args);
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 2521
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xBDD8B8 Offset: 0xBDD8B8 VA: 0xBDD8B8
	[DebuggerBrowsableAttribute] // RVA: 0xBDD8B8 Offset: 0xBDD8B8 VA: 0xBDD8B8
	private ILogHandler <logHandler>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBDD8F4 Offset: 0xBDD8F4 VA: 0xBDD8F4
	[DebuggerBrowsableAttribute] // RVA: 0xBDD8F4 Offset: 0xBDD8F4 VA: 0xBDD8F4
	private bool <logEnabled>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xBDD930 Offset: 0xBDD930 VA: 0xBDD930
	[CompilerGeneratedAttribute] // RVA: 0xBDD930 Offset: 0xBDD930 VA: 0xBDD930
	private LogType <filterLogType>k__BackingField; // 0x1C

	// Properties
	public ILogHandler logHandler { get; set; }
	public bool logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods

	// RVA: 0x2566388 Offset: 0x2566388 VA: 0x2566388
	public void .ctor(ILogHandler logHandler) { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5840 Offset: 0xBE5840 VA: 0xBE5840
	// RVA: 0x25663E0 Offset: 0x25663E0 VA: 0x25663E0 Slot: 13
	public ILogHandler get_logHandler() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5850 Offset: 0xBE5850 VA: 0xBE5850
	// RVA: 0x25663C4 Offset: 0x25663C4 VA: 0x25663C4 Slot: 14
	public void set_logHandler(ILogHandler value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5860 Offset: 0xBE5860 VA: 0xBE5860
	// RVA: 0x25663E8 Offset: 0x25663E8 VA: 0x25663E8 Slot: 15
	public bool get_logEnabled() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5870 Offset: 0xBE5870 VA: 0xBE5870
	// RVA: 0x25663CC Offset: 0x25663CC VA: 0x25663CC Slot: 16
	public void set_logEnabled(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5880 Offset: 0xBE5880 VA: 0xBE5880
	// RVA: 0x25663F0 Offset: 0x25663F0 VA: 0x25663F0 Slot: 17
	public LogType get_filterLogType() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE5890 Offset: 0xBE5890 VA: 0xBE5890
	// RVA: 0x25663D8 Offset: 0x25663D8 VA: 0x25663D8 Slot: 18
	public void set_filterLogType(LogType value) { }

	// RVA: 0x25663F8 Offset: 0x25663F8 VA: 0x25663F8 Slot: 19
	public bool IsLogTypeAllowed(LogType logType) { }

	// RVA: 0x2566434 Offset: 0x2566434 VA: 0x2566434
	private static string GetString(object message) { }

	// RVA: 0x2566564 Offset: 0x2566564 VA: 0x2566564 Slot: 4
	public void Log(LogType logType, object message) { }

	// RVA: 0x25666EC Offset: 0x25666EC VA: 0x25666EC Slot: 5
	public void Log(LogType logType, object message, Object context) { }

	// RVA: 0x2566884 Offset: 0x2566884 VA: 0x2566884 Slot: 6
	public void Log(object message) { }

	// RVA: 0x2566A00 Offset: 0x2566A00 VA: 0x2566A00 Slot: 7
	public void Log(string tag, object message) { }

	// RVA: 0x2566BC4 Offset: 0x2566BC4 VA: 0x2566BC4 Slot: 8
	public void LogWarning(string tag, object message) { }

	// RVA: 0x2566D88 Offset: 0x2566D88 VA: 0x2566D88 Slot: 9
	public void LogError(string tag, object message) { }

	// RVA: 0x2566F48 Offset: 0x2566F48 VA: 0x2566F48 Slot: 10
	public void LogFormat(LogType logType, string format, object[] args) { }

	// RVA: 0x2567060 Offset: 0x2567060 VA: 0x2567060 Slot: 11
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }

	// RVA: 0x256717C Offset: 0x256717C VA: 0x256717C Slot: 12
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs // TypeDefIndex: 2522
{
	// Fields
	public int playerId; // 0x10
	public byte[] data; // 0x18

	// Methods

	// RVA: 0x256E374 Offset: 0x256E374 VA: 0x256E374
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
public interface IEditorPlayerConnection // TypeDefIndex: 2523
{}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject, IEditorPlayerConnection // TypeDefIndex: 2524
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	[SerializeField] // RVA: 0xBDD96C Offset: 0xBDD96C VA: 0xBDD96C
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
	[SerializeField] // RVA: 0xBDD97C Offset: 0xBDD97C VA: 0xBDD97C
	private List<int> m_connectedPlayers; // 0x20
	private bool m_IsInitilized; // 0x28
	private static PlayerConnection s_Instance; // 0x8

	// Properties
	public static PlayerConnection instance { get; }
	public bool isConnected { get; }

	// Methods

	// RVA: 0x256E37C Offset: 0x256E37C VA: 0x256E37C
	public void .ctor() { }

	// RVA: 0x256E4B0 Offset: 0x256E4B0 VA: 0x256E4B0
	public static PlayerConnection get_instance() { }

	// RVA: 0x256E648 Offset: 0x256E648 VA: 0x256E648
	public bool get_isConnected() { }

	// RVA: 0x256E5BC Offset: 0x256E5BC VA: 0x256E5BC
	private static PlayerConnection CreateInstance() { }

	// RVA: 0x256E7E4 Offset: 0x256E7E4 VA: 0x256E7E4
	public void OnEnable() { }

	// RVA: 0x256E6FC Offset: 0x256E6FC VA: 0x256E6FC
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }

	// RVA: 0x256E8BC Offset: 0x256E8BC VA: 0x256E8BC Slot: 4
	public void Register(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x256ECE0 Offset: 0x256ECE0 VA: 0x256ECE0 Slot: 5
	public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback) { }

	// RVA: 0x256F000 Offset: 0x256F000 VA: 0x256F000 Slot: 6
	public void RegisterConnection(UnityAction<int> callback) { }

	// RVA: 0x256F188 Offset: 0x256F188 VA: 0x256F188 Slot: 7
	public void RegisterDisconnection(UnityAction<int> callback) { }

	// RVA: 0x256F208 Offset: 0x256F208 VA: 0x256F208 Slot: 8
	public void Send(Guid messageId, byte[] data) { }
