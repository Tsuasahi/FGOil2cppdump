	// Fields
	public string _memberName; // 0x30

	// Methods

	// RVA: 0x1ED1B20 Offset: 0x1ED1B20 VA: 0x1ED1B20
	public void .ctor(ObjectRecord objectToBeFixed, string memberName, ObjectRecord objectRequired) { }

	// RVA: 0x1ED1B60 Offset: 0x1ED1B60 VA: 0x1ED1B60 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal enum ObjectRecordStatus // TypeDefIndex: 674
{
	// Fields
	public byte value__; // 0x0
	public const ObjectRecordStatus Unregistered = 0;
	public const ObjectRecordStatus ReferenceUnsolved = 1;
	public const ObjectRecordStatus ReferenceSolvingDelayed = 2;
	public const ObjectRecordStatus ReferenceSolved = 3;
}

// Namespace: System.Runtime.Serialization
internal class ObjectRecord // TypeDefIndex: 675
{
	// Fields
	public ObjectRecordStatus Status; // 0x10
	public object OriginalObject; // 0x18
	public object ObjectInstance; // 0x20
	public long ObjectID; // 0x28
	public SerializationInfo Info; // 0x30
	public long IdOfContainingObj; // 0x38
	public ISerializationSurrogate Surrogate; // 0x40
	public ISurrogateSelector SurrogateSelector; // 0x48
	public MemberInfo Member; // 0x50
	public int[] ArrayIndex; // 0x58
	public BaseFixupRecord FixupChainAsContainer; // 0x60
	public BaseFixupRecord FixupChainAsRequired; // 0x68
	public ObjectRecord Next; // 0x70

	// Properties
	public bool IsInstanceReady { get; }
	public bool IsUnsolvedObjectReference { get; }
	public bool IsRegistered { get; }
	public bool HasPendingFixups { get; }

	// Methods

	// RVA: 0x2392404 Offset: 0x2392404 VA: 0x2392404
	public void .ctor() { }

	// RVA: 0x2393360 Offset: 0x2393360 VA: 0x2393360
	public void SetMemberValue(ObjectManager manager, MemberInfo member, object value) { }

	// RVA: 0x2390BFC Offset: 0x2390BFC VA: 0x2390BFC
	public void SetArrayValue(ObjectManager manager, object value, int[] indices) { }

	// RVA: 0x2393530 Offset: 0x2393530 VA: 0x2393530
	public void SetMemberValue(ObjectManager manager, string memberName, object value) { }

	// RVA: 0x23935F4 Offset: 0x23935F4 VA: 0x23935F4
	public bool get_IsInstanceReady() { }

	// RVA: 0x2391394 Offset: 0x2391394 VA: 0x2391394
	public bool get_IsUnsolvedObjectReference() { }

	// RVA: 0x239240C Offset: 0x239240C VA: 0x239240C
	public bool get_IsRegistered() { }

	// RVA: 0x23913A4 Offset: 0x23913A4 VA: 0x23913A4
	public bool DoFixups(bool asContainer, ObjectManager manager, bool strict) { }

	// RVA: 0x2393700 Offset: 0x2393700 VA: 0x2393700
	public void RemoveFixup(BaseFixupRecord fixupToRemove, bool asContainer) { }

	// RVA: 0x2393680 Offset: 0x2393680 VA: 0x2393680
	private void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, bool asContainer) { }

	// RVA: 0x2392A5C Offset: 0x2392A5C VA: 0x2392A5C
	public void ChainFixup(BaseFixupRecord fixup, bool asContainer) { }

	// RVA: 0x2391510 Offset: 0x2391510 VA: 0x2391510
	public bool LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x2393670 Offset: 0x2393670 VA: 0x2393670
	public bool get_HasPendingFixups() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8F88 Offset: 0xBC8F88 VA: 0xBC8F88
[AttributeUsageAttribute] // RVA: 0xBC8F88 Offset: 0xBC8F88 VA: 0xBC8F88
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 676
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xBC8FDC Offset: 0xBC8FDC VA: 0xBC8FDC
[ComVisibleAttribute] // RVA: 0xBC8FDC Offset: 0xBC8FDC VA: 0xBC8FDC
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 677
{}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC9030 Offset: 0xBC9030 VA: 0xBC9030
[AttributeUsageAttribute] // RVA: 0xBC9030 Offset: 0xBC9030 VA: 0xBC9030
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 678
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xBC9084 Offset: 0xBC9084 VA: 0xBC9084
[ComVisibleAttribute] // RVA: 0xBC9084 Offset: 0xBC9084 VA: 0xBC9084
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 679
{}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC90D8 Offset: 0xBC90D8 VA: 0xBC90D8
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 680
{
	// Methods

	// RVA: 0x2393788 Offset: 0x2393788 VA: 0x2393788
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Type BindToType(string assemblyName, string typeName);
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks // TypeDefIndex: 681
{
	// Fields
	private readonly ArrayList onSerializingList; // 0x10
	private readonly ArrayList onSerializedList; // 0x18
	private readonly ArrayList onDeserializingList; // 0x20
	private readonly ArrayList onDeserializedList; // 0x28
	private static Hashtable cache; // 0x0
	private static object cache_lock; // 0x8

	// Properties
	public bool HasSerializedCallbacks { get; }
	public bool HasDeserializedCallbacks { get; }

	// Methods

	// RVA: 0x2393790 Offset: 0x2393790 VA: 0x2393790
	public void .ctor(Type type) { }

	// RVA: 0x2393B70 Offset: 0x2393B70 VA: 0x2393B70
	private static void .cctor() { }

	// RVA: 0x2393C04 Offset: 0x2393C04 VA: 0x2393C04
	public bool get_HasSerializedCallbacks() { }

	// RVA: 0x23921B4 Offset: 0x23921B4 VA: 0x23921B4
	public bool get_HasDeserializedCallbacks() { }

	// RVA: 0x23938C4 Offset: 0x23938C4 VA: 0x23938C4
	private static ArrayList GetMethodsByAttribute(Type type, Type attr) { }

	// RVA: 0x2393C14 Offset: 0x2393C14 VA: 0x2393C14
	private static void Invoke(ArrayList list, object target, StreamingContext context) { }

	// RVA: 0x2394220 Offset: 0x2394220 VA: 0x2394220
	public void RaiseOnSerializing(object target, StreamingContext contex) { }

	// RVA: 0x23942B0 Offset: 0x23942B0 VA: 0x23942B0
	public void RaiseOnSerialized(object target, StreamingContext contex) { }

	// RVA: 0x23928DC Offset: 0x23928DC VA: 0x23928DC
	public void RaiseOnDeserializing(object target, StreamingContext contex) { }

	// RVA: 0x239296C Offset: 0x239296C VA: 0x239296C
	public void RaiseOnDeserialized(object target, StreamingContext contex) { }

	// RVA: 0x2391E4C Offset: 0x2391E4C VA: 0x2391E4C
	public static SerializationCallbacks GetSerializationCallbacks(Type t) { }
}

// Namespace: 
public sealed class SerializationCallbacks.CallbackHandler : MulticastDelegate // TypeDefIndex: 682
{
	// Methods

	// RVA: 0x2394340 Offset: 0x2394340 VA: 0x2394340
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2393FDC Offset: 0x2393FDC VA: 0x2393FDC Slot: 11
	public virtual void Invoke(StreamingContext context) { }

	// RVA: 0x2394350 Offset: 0x2394350 VA: 0x2394350 Slot: 12
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object) { }

	// RVA: 0x23943DC Offset: 0x23943DC VA: 0x23943DC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC90EC Offset: 0xBC90EC VA: 0xBC90EC
public struct SerializationEntry // TypeDefIndex: 683
{
	// Fields
	private string name; // 0x0
	private Type objectType; // 0x8
	private object value; // 0x10

	// Properties
	public string Name { get; }
	public Type ObjectType { get; }
	public object Value { get; }

	// Methods

	// RVA: 0xD6902C Offset: 0xD6902C VA: 0xD6902C
	internal void .ctor(string name, Type type, object value) { }

	// RVA: 0xD69038 Offset: 0xD69038 VA: 0xD69038
	public string get_Name() { }

	// RVA: 0xD69040 Offset: 0xD69040 VA: 0xD69040
	public Type get_ObjectType() { }

	// RVA: 0xD69048 Offset: 0xD69048 VA: 0xD69048
	public object get_Value() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC9100 Offset: 0xBC9100 VA: 0xBC9100
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 684
{
	// Methods

	// RVA: 0x239440C Offset: 0x239440C VA: 0x239440C
	public void .ctor() { }

	// RVA: 0x2388D18 Offset: 0x2388D18 VA: 0x2388D18
	public void .ctor(string message) { }

	// RVA: 0x2394460 Offset: 0x2394460 VA: 0x2394460
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x2394468 Offset: 0x2394468 VA: 0x2394468
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC9114 Offset: 0xBC9114 VA: 0xBC9114
public sealed class SerializationInfo // TypeDefIndex: 685
{
	// Fields
	private Hashtable serialized; // 0x10
	private ArrayList values; // 0x18
	private string assemblyName; // 0x20
	private string fullTypeName; // 0x28
	private IFormatterConverter converter; // 0x30

	// Properties
	public string AssemblyName { get; }
	public string FullTypeName { get; }
	public int MemberCount { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0xBCD244 Offset: 0xBCD244 VA: 0xBCD244
	// RVA: 0x2389A54 Offset: 0x2389A54 VA: 0x2389A54
	public void .ctor(Type type, IFormatterConverter converter) { }

	// RVA: 0x2390490 Offset: 0x2390490 VA: 0x2390490
	public string get_AssemblyName() { }

	// RVA: 0x2390498 Offset: 0x2390498 VA: 0x2390498
	public string get_FullTypeName() { }

	// RVA: 0x23902F4 Offset: 0x23902F4 VA: 0x23902F4
	public int get_MemberCount() { }

	// RVA: 0x238B4EC Offset: 0x238B4EC VA: 0x238B4EC
	public void AddValue(string name, object value, Type type) { }

	// RVA: 0x2394470 Offset: 0x2394470 VA: 0x2394470
	public object GetValue(string name, Type type) { }

	// RVA: 0x23946BC Offset: 0x23946BC VA: 0x23946BC
	public void SetType(Type type) { }

	// RVA: 0x239032C Offset: 0x239032C VA: 0x239032C
	public SerializationInfoEnumerator GetEnumerator() { }

	// RVA: 0x23947E8 Offset: 0x23947E8 VA: 0x23947E8
	public void AddValue(string name, short value) { }

	// RVA: 0x23948AC Offset: 0x23948AC VA: 0x23948AC
	public void AddValue(string name, int value) { }

	// RVA: 0x2394970 Offset: 0x2394970 VA: 0x2394970
	public void AddValue(string name, bool value) { }

	// RVA: 0x2394A34 Offset: 0x2394A34 VA: 0x2394A34
	public void AddValue(string name, DateTime value) { }

	// RVA: 0x2394B04 Offset: 0x2394B04 VA: 0x2394B04
	public void AddValue(string name, float value) { }

	[CLSCompliantAttribute] // RVA: 0xBCD258 Offset: 0xBCD258 VA: 0xBCD258
	// RVA: 0x2394BC8 Offset: 0x2394BC8 VA: 0x2394BC8
	public void AddValue(string name, uint value) { }

	// RVA: 0x2394C8C Offset: 0x2394C8C VA: 0x2394C8C
	public void AddValue(string name, long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCD26C Offset: 0xBCD26C VA: 0xBCD26C
	// RVA: 0x2394D50 Offset: 0x2394D50 VA: 0x2394D50
	public void AddValue(string name, ulong value) { }

	// RVA: 0x2394E14 Offset: 0x2394E14 VA: 0x2394E14
	public void AddValue(string name, object value) { }

	// RVA: 0x2394ED0 Offset: 0x2394ED0 VA: 0x2394ED0
	public bool GetBoolean(string name) { }

	// RVA: 0x2394FE4 Offset: 0x2394FE4 VA: 0x2394FE4
	public short GetInt16(string name) { }

	// RVA: 0x23950F8 Offset: 0x23950F8 VA: 0x23950F8
	public int GetInt32(string name) { }

	// RVA: 0x239520C Offset: 0x239520C VA: 0x239520C
	public long GetInt64(string name) { }

	// RVA: 0x2395320 Offset: 0x2395320 VA: 0x2395320
	public string GetString(string name) { }

	[CLSCompliantAttribute] // RVA: 0xBCD280 Offset: 0xBCD280 VA: 0xBCD280
	// RVA: 0x2395448 Offset: 0x2395448 VA: 0x2395448
	public uint GetUInt32(string name) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC9128 Offset: 0xBC9128 VA: 0xBC9128
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 686
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public SerializationEntry Current { get; }
	public string Name { get; }
	public Type ObjectType { get; }
	public object Value { get; }

	// Methods

	// RVA: 0x239479C Offset: 0x239479C VA: 0x239479C
	internal void .ctor(ArrayList list) { }

	// RVA: 0x239555C Offset: 0x239555C VA: 0x239555C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2395610 Offset: 0x2395610 VA: 0x2395610
	public SerializationEntry get_Current() { }

	// RVA: 0x23903B4 Offset: 0x23903B4 VA: 0x23903B4
	public string get_Name() { }

	// RVA: 0x2390390 Offset: 0x2390390 VA: 0x2390390
	public Type get_ObjectType() { }

	// RVA: 0x2390B44 Offset: 0x2390B44 VA: 0x2390B44
	public object get_Value() { }

	// RVA: 0x23903D8 Offset: 0x23903D8 VA: 0x23903D8 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x23956F4 Offset: 0x23956F4 VA: 0x23956F4 Slot: 6
	public void Reset() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 687
{
	// Fields
	private readonly StreamingContext context; // 0x10
	private readonly Hashtable seen; // 0x20
	private SerializationCallbacks.CallbackHandler callbacks; // 0x28

	// Methods

	// RVA: 0x238B87C Offset: 0x238B87C VA: 0x238B87C
	public void .ctor(StreamingContext context) { }

	// RVA: 0x238D070 Offset: 0x238D070 VA: 0x238D070
	public void RegisterObject(object obj) { }

	// RVA: 0x238BC84 Offset: 0x238BC84 VA: 0x238BC84
	public void RaiseOnSerializedEvent() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xBC913C Offset: 0xBC913C VA: 0xBC913C
private sealed class SerializationObjectManager.<RegisterObject>c__AnonStorey3 // TypeDefIndex: 688
{
	// Fields
	internal SerializationCallbacks sc; // 0x10
	internal object obj; // 0x18

	// Methods

	// RVA: 0x23957AC Offset: 0x23957AC VA: 0x23957AC
	public void .ctor() { }

	// RVA: 0x23957B4 Offset: 0x23957B4 VA: 0x23957B4
	internal void <>m__2(StreamingContext ctx) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC914C Offset: 0xBC914C VA: 0xBC914C
[Serializable]
public struct StreamingContext // TypeDefIndex: 689
{
	// Fields
	private StreamingContextStates state; // 0x0
	private object additional; // 0x8

	// Properties
	public object Context { get; }
	public StreamingContextStates State { get; }

	// Methods

	// RVA: 0xD690C0 Offset: 0xD690C0 VA: 0xD690C0
	public void .ctor(StreamingContextStates state) { }

	// RVA: 0xD690CC Offset: 0xD690CC VA: 0xD690CC
	public void .ctor(StreamingContextStates state, object additional) { }

	// RVA: 0xD690D8 Offset: 0xD690D8 VA: 0xD690D8
	public object get_Context() { }

	// RVA: 0xD690E0 Offset: 0xD690E0 VA: 0xD690E0
	public StreamingContextStates get_State() { }

	// RVA: 0xD690E8 Offset: 0xD690E8 VA: 0xD690E8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD690F0 Offset: 0xD690F0 VA: 0xD690F0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC9160 Offset: 0xBC9160 VA: 0xBC9160
[FlagsAttribute] // RVA: 0xBC9160 Offset: 0xBC9160 VA: 0xBC9160
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 690
{
	// Fields
	public int value__; // 0x0
	public const StreamingContextStates CrossProcess = 1;
	public const StreamingContextStates CrossMachine = 2;
	public const StreamingContextStates File = 4;
	public const StreamingContextStates Persistence = 8;
	public const StreamingContextStates Remoting = 16;
	public const StreamingContextStates Other = 32;
	public const StreamingContextStates Clone = 64;
	public const StreamingContextStates CrossAppDomain = 128;
	public const StreamingContextStates All = 255;
}

// Namespace: System.Security.AccessControl
[MonoTODOAttribute] // RVA: 0xBC919C Offset: 0xBC919C VA: 0xBC919C
public abstract class CommonObjectSecurity : ObjectSecurity // TypeDefIndex: 691
{}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeySecurity : NativeObjectSecurity // TypeDefIndex: 692
{}

// Namespace: System.Security.AccessControl
public abstract class NativeObjectSecurity : CommonObjectSecurity // TypeDefIndex: 693
{}

// Namespace: System.Security.AccessControl
public abstract class ObjectSecurity // TypeDefIndex: 694
{}

// Namespace: System.Security.Cryptography.X509Certificates
[MonoTODOAttribute] // RVA: 0xBC91D4 Offset: 0xBC91D4 VA: 0xBC91D4
[ComVisibleAttribute] // RVA: 0xBC91D4 Offset: 0xBC91D4 VA: 0xBC91D4
[Serializable]
public class X509Certificate : ISerializable, IDeserializationCallback // TypeDefIndex: 695
{
	// Fields
	private X509Certificate x509; // 0x10
	private bool hideDates; // 0x18
	private byte[] cachedCertificateHash; // 0x20
	private string issuer_name; // 0x28
	private string subject_name; // 0x30

	// Properties
	public string Issuer { get; }
	public string Subject { get; }
	[ComVisibleAttribute] // RVA: 0xBCF1C8 Offset: 0xBCF1C8 VA: 0xBCF1C8
	public IntPtr Handle { get; }

	// Methods

	// RVA: 0x242614C Offset: 0x242614C VA: 0x242614C
	internal void .ctor(byte[] data, bool dates) { }

	// RVA: 0x24261B0 Offset: 0x24261B0 VA: 0x24261B0
	public void .ctor(byte[] data) { }

	// RVA: 0x24261B8 Offset: 0x24261B8 VA: 0x24261B8
	public void .ctor(IntPtr handle) { }

	// RVA: 0x2426278 Offset: 0x2426278 VA: 0x2426278
	public void .ctor(X509Certificate cert) { }

	// RVA: 0x242635C Offset: 0x242635C VA: 0x242635C
	public void .ctor() { }

	// RVA: 0x2426364 Offset: 0x2426364 VA: 0x2426364
	public void .ctor(byte[] rawData, string password) { }

	[MonoTODOAttribute] // RVA: 0xBCD294 Offset: 0xBCD294 VA: 0xBCD294
	// RVA: 0x24263B4 Offset: 0x24263B4 VA: 0x24263B4
	public void .ctor(byte[] rawData, SecureString password) { }

	// RVA: 0x2426404 Offset: 0x2426404 VA: 0x2426404
	public void .ctor(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBCD2CC Offset: 0xBCD2CC VA: 0xBCD2CC
	// RVA: 0x2426458 Offset: 0x2426458 VA: 0x2426458
	public void .ctor(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x24264AC Offset: 0x24264AC VA: 0x24264AC
	public void .ctor(string fileName) { }

	// RVA: 0x24264F0 Offset: 0x24264F0 VA: 0x24264F0
	public void .ctor(string fileName, string password) { }

	[MonoTODOAttribute] // RVA: 0xBCD304 Offset: 0xBCD304 VA: 0xBCD304
	// RVA: 0x2426540 Offset: 0x2426540 VA: 0x2426540
	public void .ctor(string fileName, SecureString password) { }

	// RVA: 0x2426590 Offset: 0x2426590 VA: 0x2426590
	public void .ctor(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBCD33C Offset: 0xBCD33C VA: 0xBCD33C
	// RVA: 0x24265E4 Offset: 0x24265E4 VA: 0x24265E4
	public void .ctor(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x2426638 Offset: 0x2426638 VA: 0x2426638
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2426788 Offset: 0x2426788 VA: 0x2426788 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x242678C Offset: 0x242678C VA: 0x242678C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2426820 Offset: 0x2426820 VA: 0x2426820
	private string tostr(byte[] data) { }

	// RVA: 0x2426934 Offset: 0x2426934 VA: 0x2426934
	public static X509Certificate CreateFromCertFile(string filename) { }

	[MonoTODOAttribute] // RVA: 0xBCD374 Offset: 0xBCD374 VA: 0xBCD374
	// RVA: 0x2426B34 Offset: 0x2426B34 VA: 0x2426B34
	public static X509Certificate CreateFromSignedFile(string filename) { }

	// RVA: 0x2426DF0 Offset: 0x2426DF0 VA: 0x2426DF0
	private void InitFromHandle(IntPtr handle) { }

	// RVA: 0x2426F2C Offset: 0x2426F2C VA: 0x2426F2C Slot: 6
	public virtual bool Equals(X509Certificate other) { }

	// RVA: 0x2427124 Offset: 0x2427124 VA: 0x2427124 Slot: 7
	public virtual byte[] GetCertHash() { }

	// RVA: 0x2427220 Offset: 0x2427220 VA: 0x2427220 Slot: 8
	public virtual string GetCertHashString() { }

	// RVA: 0x2427240 Offset: 0x2427240 VA: 0x2427240 Slot: 9
	public virtual string GetEffectiveDateString() { }

	// RVA: 0x2427330 Offset: 0x2427330 VA: 0x2427330 Slot: 10
	public virtual string GetExpirationDateString() { }

	// RVA: 0x2427420 Offset: 0x2427420 VA: 0x2427420 Slot: 11
	public virtual string GetFormat() { }

	// RVA: 0x2427468 Offset: 0x2427468 VA: 0x2427468 Slot: 2
	public override int GetHashCode() { }

	[ObsoleteAttribute] // RVA: 0xBCD3AC Offset: 0xBCD3AC VA: 0xBCD3AC
	// RVA: 0x2427564 Offset: 0x2427564 VA: 0x2427564 Slot: 12
	public virtual string GetIssuerName() { }

	// RVA: 0x242760C Offset: 0x242760C VA: 0x242760C Slot: 13
	public virtual string GetKeyAlgorithm() { }

	// RVA: 0x24276B4 Offset: 0x24276B4 VA: 0x24276B4 Slot: 14
	public virtual byte[] GetKeyAlgorithmParameters() { }

	// RVA: 0x2427770 Offset: 0x2427770 VA: 0x2427770 Slot: 15
	public virtual string GetKeyAlgorithmParametersString() { }

	[ObsoleteAttribute] // RVA: 0xBCD3E4 Offset: 0xBCD3E4 VA: 0xBCD3E4
	// RVA: 0x2427794 Offset: 0x2427794 VA: 0x2427794 Slot: 16
	public virtual string GetName() { }

	// RVA: 0x242783C Offset: 0x242783C VA: 0x242783C Slot: 17
	public virtual byte[] GetPublicKey() { }

	// RVA: 0x24278E4 Offset: 0x24278E4 VA: 0x24278E4 Slot: 18
	public virtual string GetPublicKeyString() { }

	// RVA: 0x2427908 Offset: 0x2427908 VA: 0x2427908 Slot: 19
	public virtual byte[] GetRawCertData() { }

	// RVA: 0x24279B0 Offset: 0x24279B0 VA: 0x24279B0 Slot: 20
	public virtual string GetRawCertDataString() { }

	// RVA: 0x2427A60 Offset: 0x2427A60 VA: 0x2427A60 Slot: 21
	public virtual byte[] GetSerialNumber() { }

	// RVA: 0x2427B08 Offset: 0x2427B08 VA: 0x2427B08 Slot: 22
	public virtual string GetSerialNumberString() { }

	// RVA: 0x2427B40 Offset: 0x2427B40 VA: 0x2427B40 Slot: 3
	public override string ToString() { }

	// RVA: 0x2427B48 Offset: 0x2427B48 VA: 0x2427B48 Slot: 23
	public virtual string ToString(bool fVerbose) { }

	// RVA: 0x24269A8 Offset: 0x24269A8 VA: 0x24269A8
	private static byte[] Load(string fileName) { }

	// RVA: 0x2427E74 Offset: 0x2427E74 VA: 0x2427E74
	public string get_Issuer() { }

	// RVA: 0x2427D70 Offset: 0x2427D70 VA: 0x2427D70
	public string get_Subject() { }

	// RVA: 0x2427F78 Offset: 0x2427F78 VA: 0x2427F78
	public IntPtr get_Handle() { }

	[ComVisibleAttribute] // RVA: 0xBCD41C Offset: 0xBCD41C VA: 0xBCD41C
	// RVA: 0x2427FB8 Offset: 0x2427FB8 VA: 0x2427FB8 Slot: 0
	public override bool Equals(object obj) { }

	[MonoTODOAttribute] // RVA: 0xBCD430 Offset: 0xBCD430 VA: 0xBCD430
	[ComVisibleAttribute] // RVA: 0xBCD430 Offset: 0xBCD430 VA: 0xBCD430
	// RVA: 0x2428060 Offset: 0x2428060 VA: 0x2428060 Slot: 24
	public virtual byte[] Export(X509ContentType contentType) { }

	[ComVisibleAttribute] // RVA: 0xBCD480 Offset: 0xBCD480 VA: 0xBCD480
	[MonoTODOAttribute] // RVA: 0xBCD480 Offset: 0xBCD480 VA: 0xBCD480
	// RVA: 0x242834C Offset: 0x242834C VA: 0x242834C Slot: 25
	public virtual byte[] Export(X509ContentType contentType, string password) { }

	[MonoTODOAttribute] // RVA: 0xBCD4D0 Offset: 0xBCD4D0 VA: 0xBCD4D0
	// RVA: 0x24283FC Offset: 0x24283FC VA: 0x24283FC Slot: 26
	public virtual byte[] Export(X509ContentType contentType, SecureString password) { }

	// RVA: 0x2428068 Offset: 0x2428068 VA: 0x2428068
	internal byte[] Export(X509ContentType contentType, byte[] password) { }

	[ComVisibleAttribute] // RVA: 0xBCD508 Offset: 0xBCD508 VA: 0xBCD508
	// RVA: 0x2428438 Offset: 0x2428438 VA: 0x2428438 Slot: 27
	public virtual void Import(byte[] rawData) { }

	[ComVisibleAttribute] // RVA: 0xBCD51C Offset: 0xBCD51C VA: 0xBCD51C
	[MonoTODOAttribute] // RVA: 0xBCD51C Offset: 0xBCD51C VA: 0xBCD51C
	// RVA: 0x2428450 Offset: 0x2428450 VA: 0x2428450 Slot: 28
	public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBCD56C Offset: 0xBCD56C VA: 0xBCD56C
	// RVA: 0x2428818 Offset: 0x2428818 VA: 0x2428818 Slot: 29
	public virtual void Import(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	[ComVisibleAttribute] // RVA: 0xBCD5A4 Offset: 0xBCD5A4 VA: 0xBCD5A4
	// RVA: 0x242882C Offset: 0x242882C VA: 0x242882C Slot: 30
	public virtual void Import(string fileName) { }

	[ComVisibleAttribute] // RVA: 0xBCD5B8 Offset: 0xBCD5B8 VA: 0xBCD5B8
	[MonoTODOAttribute] // RVA: 0xBCD5B8 Offset: 0xBCD5B8 VA: 0xBCD5B8
	// RVA: 0x242886C Offset: 0x242886C VA: 0x242886C Slot: 31
	public virtual void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBCD608 Offset: 0xBCD608 VA: 0xBCD608
	// RVA: 0x24288BC Offset: 0x24288BC VA: 0x24288BC Slot: 32
	public virtual void Import(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	[ComVisibleAttribute] // RVA: 0xBCD640 Offset: 0xBCD640 VA: 0xBCD640
	// RVA: 0x2428900 Offset: 0x2428900 VA: 0x2428900 Slot: 33
	public virtual void Reset() { }
}

// Namespace: 
internal struct X509Certificate.CertificateContext // TypeDefIndex: 696
{
	// Fields
	public uint dwCertEncodingType; // 0x0
	public IntPtr pbCertEncoded; // 0x8
	public uint cbCertEncoded; // 0x10
	public IntPtr pCertInfo; // 0x18
	public IntPtr hCertStore; // 0x20
}

// Namespace: System.Security.Cryptography.X509Certificates
[ComVisibleAttribute] // RVA: 0xBC9224 Offset: 0xBC9224 VA: 0xBC9224
public enum X509ContentType // TypeDefIndex: 697
{
	// Fields
	public int value__; // 0x0
	public const X509ContentType Unknown = 0;
	public const X509ContentType Cert = 1;
	public const X509ContentType SerializedCert = 2;
	public const X509ContentType Pfx = 3;
	public const X509ContentType SerializedStore = 4;
	public const X509ContentType Pkcs7 = 5;
	public const X509ContentType Authenticode = 6;
	public const X509ContentType Pkcs12 = 3;
}

// Namespace: System.Security.Cryptography.X509Certificates
[ComVisibleAttribute] // RVA: 0xBC9238 Offset: 0xBC9238 VA: 0xBC9238
[FlagsAttribute] // RVA: 0xBC9238 Offset: 0xBC9238 VA: 0xBC9238
[Serializable]
public enum X509KeyStorageFlags // TypeDefIndex: 698
{
	// Fields
	public int value__; // 0x0
	public const X509KeyStorageFlags DefaultKeySet = 0;
	public const X509KeyStorageFlags UserKeySet = 1;
	public const X509KeyStorageFlags MachineKeySet = 2;
	public const X509KeyStorageFlags Exportable = 4;
	public const X509KeyStorageFlags UserProtected = 8;
	public const X509KeyStorageFlags PersistKeySet = 16;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9274 Offset: 0xBC9274 VA: 0xBC9274
public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 699
{
	// Fields
	protected int KeySizeValue; // 0x10
	protected KeySizes[] LegalKeySizesValue; // 0x18

	// Properties
	public abstract string KeyExchangeAlgorithm { get; }
	public virtual int KeySize { get; set; }
	public virtual KeySizes[] LegalKeySizes { get; }
	public abstract string SignatureAlgorithm { get; }

	// Methods

	// RVA: 0x2398BE4 Offset: 0x2398BE4 VA: 0x2398BE4
	protected void .ctor() { }

	// RVA: 0x2398BEC Offset: 0x2398BEC VA: 0x2398BEC Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_KeyExchangeAlgorithm();

	// RVA: 0x2398C20 Offset: 0x2398C20 VA: 0x2398C20 Slot: 6
	public virtual int get_KeySize() { }

	// RVA: 0x2398C28 Offset: 0x2398C28 VA: 0x2398C28 Slot: 7
	public virtual void set_KeySize(int value) { }

	// RVA: 0x2398D14 Offset: 0x2398D14 VA: 0x2398D14 Slot: 8
	public virtual KeySizes[] get_LegalKeySizes() { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_SignatureAlgorithm();

	// RVA: 0x2398D1C Offset: 0x2398D1C VA: 0x2398D1C
	public void Clear() { }

	// RVA: -1 Offset: -1 Slot: 10
	protected abstract void Dispose(bool disposing);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void FromXmlString(string xmlString);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract string ToXmlString(bool includePrivateParameters);

	// RVA: 0x2398D2C Offset: 0x2398D2C VA: 0x2398D2C
	public static AsymmetricAlgorithm Create() { }

	// RVA: 0x2398D74 Offset: 0x2398D74 VA: 0x2398D74
	public static AsymmetricAlgorithm Create(string algName) { }

	// RVA: 0x2398ECC Offset: 0x2398ECC VA: 0x2398ECC
	internal static byte[] GetNamedParam(string xml, string param) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9288 Offset: 0xBC9288 VA: 0xBC9288
public abstract class AsymmetricKeyExchangeDeformatter // TypeDefIndex: 700
{
	// Properties
	public abstract string Parameters { get; set; }

	// Methods

	// RVA: 0x239907C Offset: 0x239907C VA: 0x239907C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_Parameters();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_Parameters(string value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract byte[] DecryptKeyExchange(byte[] rgb);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC929C Offset: 0xBC929C VA: 0xBC929C
public abstract class AsymmetricKeyExchangeFormatter // TypeDefIndex: 701
{
	// Properties
	public abstract string Parameters { get; }

	// Methods

	// RVA: 0x2399084 Offset: 0x2399084 VA: 0x2399084
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_Parameters();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] CreateKeyExchange(byte[] data);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract byte[] CreateKeyExchange(byte[] data, Type symAlgType);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC92B0 Offset: 0xBC92B0 VA: 0xBC92B0
public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 702
{
	// Methods

	// RVA: 0x239908C Offset: 0x239908C VA: 0x239908C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetHashAlgorithm(string strName);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void SetKey(AsymmetricAlgorithm key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);

	// RVA: 0x2399094 Offset: 0x2399094 VA: 0x2399094 Slot: 7
	public virtual bool VerifySignature(HashAlgorithm hash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC92C4 Offset: 0xBC92C4 VA: 0xBC92C4
public abstract class AsymmetricSignatureFormatter // TypeDefIndex: 703
{
	// Methods

	// RVA: 0x2399174 Offset: 0x2399174 VA: 0x2399174
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetHashAlgorithm(string strName);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void SetKey(AsymmetricAlgorithm key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract byte[] CreateSignature(byte[] rgbHash);

	// RVA: 0x239917C Offset: 0x239917C VA: 0x239917C Slot: 7
	public virtual byte[] CreateSignature(HashAlgorithm hash) { }
}

// Namespace: System.Security.Cryptography
internal static class Base64Constants // TypeDefIndex: 704
{
	// Fields
	public static readonly byte[] EncodeTable; // 0x0
	public static readonly byte[] DecodeTable; // 0x8

	// Methods

	// RVA: 0x2399254 Offset: 0x2399254 VA: 0x2399254
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC92D8 Offset: 0xBC92D8 VA: 0xBC92D8
[Serializable]
public enum CipherMode // TypeDefIndex: 705
{
	// Fields
	public int value__; // 0x0
	public const CipherMode CBC = 1;
	public const CipherMode ECB = 2;
	public const CipherMode OFB = 3;
	public const CipherMode CFB = 4;
	public const CipherMode CTS = 5;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC92EC Offset: 0xBC92EC VA: 0xBC92EC
public sealed class CryptoAPITransform : IDisposable, ICryptoTransform // TypeDefIndex: 706
{
	// Fields
	private bool m_disposed; // 0x10

	// Properties
	public bool CanReuseTransform { get; }
	public bool CanTransformMultipleBlocks { get; }
	public int InputBlockSize { get; }
	public IntPtr KeyHandle { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x2399308 Offset: 0x2399308 VA: 0x2399308
	internal void .ctor() { }

	// RVA: 0x2399330 Offset: 0x2399330 VA: 0x2399330 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2399360 Offset: 0x2399360 VA: 0x2399360 Slot: 5
	public bool get_CanReuseTransform() { }

	// RVA: 0x2399368 Offset: 0x2399368 VA: 0x2399368 Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x2399370 Offset: 0x2399370 VA: 0x2399370 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x2399378 Offset: 0x2399378 VA: 0x2399378
	public IntPtr get_KeyHandle() { }

	// RVA: 0x23993B8 Offset: 0x23993B8 VA: 0x23993B8 Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x23993C0 Offset: 0x23993C0 VA: 0x23993C0
	public void Clear() { }

	// RVA: 0x2399348 Offset: 0x2399348 VA: 0x2399348
	private void Dispose(bool disposing) { }

	// RVA: 0x23993D8 Offset: 0x23993D8 VA: 0x23993D8 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x23993E0 Offset: 0x23993E0 VA: 0x23993E0 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	[ComVisibleAttribute] // RVA: 0xBCD654 Offset: 0xBCD654 VA: 0xBCD654
	// RVA: 0x23993E8 Offset: 0x23993E8 VA: 0x23993E8
	public void Reset() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9300 Offset: 0xBC9300 VA: 0xBC9300
public class CryptoConfig // TypeDefIndex: 707
{
	// Fields
	private const string defaultNamespace = "System.Security.Cryptography.";
	private const string defaultSHA1 = "System.Security.Cryptography.SHA1CryptoServiceProvider";
	private const string defaultMD5 = "System.Security.Cryptography.MD5CryptoServiceProvider";
	private const string defaultSHA256 = "System.Security.Cryptography.SHA256Managed";
	private const string defaultSHA384 = "System.Security.Cryptography.SHA384Managed";
	private const string defaultSHA512 = "System.Security.Cryptography.SHA512Managed";
	private const string defaultRSA = "System.Security.Cryptography.RSACryptoServiceProvider";
	private const string defaultDSA = "System.Security.Cryptography.DSACryptoServiceProvider";
	private const string defaultDES = "System.Security.Cryptography.DESCryptoServiceProvider";
	private const string default3DES = "System.Security.Cryptography.TripleDESCryptoServiceProvider";
	private const string defaultRC2 = "System.Security.Cryptography.RC2CryptoServiceProvider";
	private const string defaultAES = "System.Security.Cryptography.RijndaelManaged";
	private const string defaultRNG = "System.Security.Cryptography.RNGCryptoServiceProvider";
	private const string defaultHMAC = "System.Security.Cryptography.HMACSHA1";
	private const string defaultMAC3DES = "System.Security.Cryptography.MACTripleDES";
	private const string defaultDSASigDesc = "System.Security.Cryptography.DSASignatureDescription";
	private const string defaultRSASigDesc = "System.Security.Cryptography.RSAPKCS1SHA1SignatureDescription";
	private const string defaultRIPEMD160 = "System.Security.Cryptography.RIPEMD160Managed";
