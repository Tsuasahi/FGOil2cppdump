
	// RVA: 0x1FFDA00 Offset: 0x1FFDA00 VA: 0x1FFDA00 Slot: 18
	public virtual bool Remove(MulticastIPAddressInformation address) { }

	// RVA: 0x1FFDACC Offset: 0x1FFDACC VA: 0x1FFDACC Slot: 19
	public virtual int get_Count() { }

	// RVA: 0x1FFDB2C Offset: 0x1FFDB2C VA: 0x1FFDB2C Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1FFDB34 Offset: 0x1FFDB34 VA: 0x1FFDB34 Slot: 21
	public virtual MulticastIPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class MulticastIPAddressInformationImplCollection : MulticastIPAddressInformationCollection // TypeDefIndex: 1406
{
	// Fields
	public static readonly MulticastIPAddressInformationImplCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1FFDC38 Offset: 0x1FFDC38 VA: 0x1FFDC38
	private void .ctor(bool isReadOnly) { }

	// RVA: 0x1FFDC64 Offset: 0x1FFDC64 VA: 0x1FFDC64
	private static void .cctor() { }

	// RVA: 0x1FFDCCC Offset: 0x1FFDCCC VA: 0x1FFDCCC Slot: 20
	public override bool get_IsReadOnly() { }

	// RVA: 0x1FFDCD4 Offset: 0x1FFDCD4 VA: 0x1FFDCD4
	public static MulticastIPAddressInformationCollection Win32FromMulticast(IntPtr ptr) { }

	// RVA: 0x1FFDFFC Offset: 0x1FFDFFC VA: 0x1FFDFFC
	public static MulticastIPAddressInformationImplCollection LinuxFromList(List<IPAddress> addresses) { }
}

// Namespace: System.Net.NetworkInformation
public enum NetBiosNodeType // TypeDefIndex: 1407
{
	// Fields
	public int value__; // 0x0
	public const NetBiosNodeType Unknown = 0;
	public const NetBiosNodeType Broadcast = 1;
	public const NetBiosNodeType Peer2Peer = 2;
	public const NetBiosNodeType Mixed = 4;
	public const NetBiosNodeType Hybrid = 8;
}

// Namespace: System.Net.NetworkInformation
public class NetworkAvailabilityEventArgs : EventArgs // TypeDefIndex: 1408
{
	// Fields
	private bool available; // 0x10

	// Properties
	public bool IsAvailable { get; }

	// Methods

	// RVA: 0x1FFE9E8 Offset: 0x1FFE9E8 VA: 0x1FFE9E8
	internal void .ctor(bool available) { }

	// RVA: 0x1FFEA68 Offset: 0x1FFEA68 VA: 0x1FFEA68
	public bool get_IsAvailable() { }
}

// Namespace: System.Net.NetworkInformation
public sealed class NetworkChange // TypeDefIndex: 1409
{
	// Fields
	private static NetworkAddressChangedEventHandler NetworkAddressChanged; // 0x0
	private static NetworkAvailabilityChangedEventHandler NetworkAvailabilityChanged; // 0x8

	// Methods

	// RVA: 0x1FFEA70 Offset: 0x1FFEA70 VA: 0x1FFEA70
	private void .ctor() { }

	// RVA: 0x1FFEA78 Offset: 0x1FFEA78 VA: 0x1FFEA78
	public static void add_NetworkAddressChanged(NetworkAddressChangedEventHandler value) { }

	// RVA: 0x1FFEB50 Offset: 0x1FFEB50 VA: 0x1FFEB50
	public static void remove_NetworkAddressChanged(NetworkAddressChangedEventHandler value) { }

	// RVA: 0x1FFEC28 Offset: 0x1FFEC28 VA: 0x1FFEC28
	public static void add_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value) { }

	// RVA: 0x1FFED00 Offset: 0x1FFED00 VA: 0x1FFED00
	public static void remove_NetworkAvailabilityChanged(NetworkAvailabilityChangedEventHandler value) { }
}

// Namespace: System.Net.NetworkInformation
[FlagsAttribute] // RVA: 0xBD06B4 Offset: 0xBD06B4 VA: 0xBD06B4
public enum NetworkInformationAccess // TypeDefIndex: 1410
{
	// Fields
	public int value__; // 0x0
	public const NetworkInformationAccess None = 0;
	public const NetworkInformationAccess Read = 1;
	public const NetworkInformationAccess Ping = 4;
}

// Namespace: System.Net.NetworkInformation
[Serializable]
public class NetworkInformationException : Exception // TypeDefIndex: 1411
{
	// Fields
	private int error_code; // 0x60

	// Properties
	public int ErrorCode { get; }

	// Methods

	// RVA: 0x1FFA088 Offset: 0x1FFA088 VA: 0x1FFA088
	public void .ctor() { }

	// RVA: 0x1FFEDD8 Offset: 0x1FFEDD8 VA: 0x1FFEDD8
	public void .ctor(int errorCode) { }

	// RVA: 0x1FFEE04 Offset: 0x1FFEE04 VA: 0x1FFEE04
	public int get_ErrorCode() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class NetworkInterface // TypeDefIndex: 1412
{
	// Fields
	private static Version windowsVer51; // 0x0
	internal static readonly bool runningOnUnix; // 0x8

	// Properties
	[MonoTODOAttribute] // RVA: 0xBD3444 Offset: 0xBD3444 VA: 0xBD3444
	public static int LoopbackInterfaceIndex { get; }
	public abstract string Description { get; }
	public abstract string Id { get; }
	public abstract bool IsReceiveOnly { get; }
	public abstract string Name { get; }
	public abstract NetworkInterfaceType NetworkInterfaceType { get; }
	public abstract OperationalStatus OperationalStatus { get; }
	public abstract long Speed { get; }
	public abstract bool SupportsMulticast { get; }

	// Methods

	// RVA: 0x1FFEE0C Offset: 0x1FFEE0C VA: 0x1FFEE0C
	protected void .ctor() { }

	// RVA: 0x1FFEE14 Offset: 0x1FFEE14 VA: 0x1FFEE14
	private static void .cctor() { }

	// RVA: 0x1FFEEBC Offset: 0x1FFEEBC VA: 0x1FFEEBC
	private static extern int uname(IntPtr buf) { }

	[MonoTODOAttribute] // RVA: 0xBD1698 Offset: 0xBD1698 VA: 0xBD1698
	// RVA: 0x1FFEF58 Offset: 0x1FFEF58 VA: 0x1FFEF58
	public static NetworkInterface[] GetAllNetworkInterfaces() { }

	[MonoTODOAttribute] // RVA: 0xBD16D0 Offset: 0xBD16D0 VA: 0xBD16D0
	// RVA: 0x1FFF34C Offset: 0x1FFF34C VA: 0x1FFF34C
	public static bool GetIsNetworkAvailable() { }

	// RVA: 0x1FFF354 Offset: 0x1FFF354 VA: 0x1FFF354
	internal static string ReadLine(string path) { }

	// RVA: 0x1FFF5E8 Offset: 0x1FFF5E8 VA: 0x1FFF5E8
	public static int get_LoopbackInterfaceIndex() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPInterfaceProperties GetIPProperties();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPv4InterfaceStatistics GetIPv4Statistics();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract PhysicalAddress GetPhysicalAddress();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool Supports(NetworkInterfaceComponent networkInterfaceComponent);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string get_Description();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_Id();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_IsReceiveOnly();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract NetworkInterfaceType get_NetworkInterfaceType();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract OperationalStatus get_OperationalStatus();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_Speed();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool get_SupportsMulticast();
}

// Namespace: System.Net.NetworkInformation
internal abstract class UnixNetworkInterface : NetworkInterface // TypeDefIndex: 1413
{
	// Fields
	protected IPv4InterfaceStatistics ipv4stats; // 0x10
	protected IPInterfaceProperties ipproperties; // 0x18
	private string name; // 0x20
	private int index; // 0x28
	protected List<IPAddress> addresses; // 0x30
	private byte[] macAddress; // 0x38
	private NetworkInterfaceType type; // 0x40

	// Properties
	public override string Description { get; }
	public override string Id { get; }
	public override bool IsReceiveOnly { get; }
	public override string Name { get; }
	public override NetworkInterfaceType NetworkInterfaceType { get; }
	[MonoTODOAttribute] // RVA: 0xBD347C Offset: 0xBD347C VA: 0xBD347C
	public override long Speed { get; }

	// Methods

	// RVA: 0x1FF8508 Offset: 0x1FF8508 VA: 0x1FF8508
	internal void .ctor(string name) { }

	// RVA: 0x20058DC Offset: 0x20058DC VA: 0x20058DC
	private static extern int if_nametoindex(string ifname) { }

	// RVA: 0x1FFF6D8 Offset: 0x1FFF6D8 VA: 0x1FFF6D8
	public static int IfNameToIndex(string ifname) { }

	// RVA: 0x1FF9028 Offset: 0x1FF9028 VA: 0x1FF9028
	internal void AddAddress(IPAddress address) { }

	// RVA: 0x1FF9098 Offset: 0x1FF9098 VA: 0x1FF9098
	internal void SetLinkLayerInfo(int index, byte[] macAddress, NetworkInterfaceType type) { }

	// RVA: 0x2005990 Offset: 0x2005990 VA: 0x2005990 Slot: 6
	public override PhysicalAddress GetPhysicalAddress() { }

	// RVA: 0x2005A20 Offset: 0x2005A20 VA: 0x2005A20 Slot: 7
	public override bool Supports(NetworkInterfaceComponent networkInterfaceComponent) { }

	// RVA: 0x2005C0C Offset: 0x2005C0C VA: 0x2005C0C Slot: 8
	public override string get_Description() { }

	// RVA: 0x2005C14 Offset: 0x2005C14 VA: 0x2005C14 Slot: 9
	public override string get_Id() { }

	// RVA: 0x2005C1C Offset: 0x2005C1C VA: 0x2005C1C Slot: 10
	public override bool get_IsReceiveOnly() { }

	// RVA: 0x2005C24 Offset: 0x2005C24 VA: 0x2005C24 Slot: 11
	public override string get_Name() { }

	// RVA: 0x2005C2C Offset: 0x2005C2C VA: 0x2005C2C Slot: 12
	public override NetworkInterfaceType get_NetworkInterfaceType() { }

	// RVA: 0x2005C34 Offset: 0x2005C34 VA: 0x2005C34 Slot: 14
	public override long get_Speed() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxNetworkInterface : UnixNetworkInterface // TypeDefIndex: 1414
{
	// Fields
	private const int AF_INET = 2;
	private const int AF_INET6 = 10;
	private const int AF_PACKET = 17;
	private NetworkInterfaceType type; // 0x44
	private string iface_path; // 0x48
	private string iface_operstate_path; // 0x50
	private string iface_flags_path; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xBD0E1C Offset: 0xBD0E1C VA: 0xBD0E1C
	private static Dictionary<string, int> <>f__switch$map3; // 0x0

	// Properties
	internal string IfacePath { get; }
	public override OperationalStatus OperationalStatus { get; }
	public override bool SupportsMulticast { get; }

	// Methods

	// RVA: 0x1FF5C48 Offset: 0x1FF5C48 VA: 0x1FF5C48
	private void .ctor(string name) { }

	// RVA: 0x1FF5D20 Offset: 0x1FF5D20 VA: 0x1FF5D20
	private static void .cctor() { }

	// RVA: 0x1FF579C Offset: 0x1FF579C VA: 0x1FF579C
	internal string get_IfacePath() { }

	// RVA: 0x1FF5D24 Offset: 0x1FF5D24 VA: 0x1FF5D24
	private static void InitializeInterfaceAddresses() { }

	// RVA: 0x1FF5D28 Offset: 0x1FF5D28 VA: 0x1FF5D28
	private static int GetInterfaceAddresses(out IntPtr ifap) { }

	// RVA: 0x1FF5D2C Offset: 0x1FF5D2C VA: 0x1FF5D2C
	private static void FreeInterfaceAddresses(IntPtr ifap) { }

	// RVA: 0x1FF5D30 Offset: 0x1FF5D30 VA: 0x1FF5D30
	public static NetworkInterface[] ImplGetAllNetworkInterfaces() { }

	// RVA: 0x1FF6900 Offset: 0x1FF6900 VA: 0x1FF6900 Slot: 4
	public override IPInterfaceProperties GetIPProperties() { }

	// RVA: 0x1FF697C Offset: 0x1FF697C VA: 0x1FF697C Slot: 5
	public override IPv4InterfaceStatistics GetIPv4Statistics() { }

	// RVA: 0x1FF69EC Offset: 0x1FF69EC VA: 0x1FF69EC Slot: 13
	public override OperationalStatus get_OperationalStatus() { }

	// RVA: 0x1FF6D38 Offset: 0x1FF6D38 VA: 0x1FF6D38 Slot: 15
	public override bool get_SupportsMulticast() { }
}

// Namespace: System.Net.NetworkInformation
internal class MacOsNetworkInterface : UnixNetworkInterface // TypeDefIndex: 1415
{
	// Fields
	private const int AF_INET = 2;
	private const int AF_INET6 = 30;
	private const int AF_LINK = 18;

	// Properties
	public override OperationalStatus OperationalStatus { get; }
	public override bool SupportsMulticast { get; }

	// Methods

	// RVA: 0x1FF8504 Offset: 0x1FF8504 VA: 0x1FF8504
	private void .ctor(string name) { }

	// RVA: 0x1FF85AC Offset: 0x1FF85AC VA: 0x1FF85AC
	private static extern int getifaddrs(out IntPtr ifap) { }

	// RVA: 0x1FF8648 Offset: 0x1FF8648 VA: 0x1FF8648
	private static extern void freeifaddrs(IntPtr ifap) { }

	// RVA: 0x1FF86E4 Offset: 0x1FF86E4 VA: 0x1FF86E4
	public static NetworkInterface[] ImplGetAllNetworkInterfaces() { }

	// RVA: 0x1FF90A8 Offset: 0x1FF90A8 VA: 0x1FF90A8 Slot: 4
	public override IPInterfaceProperties GetIPProperties() { }

	// RVA: 0x1FF9124 Offset: 0x1FF9124 VA: 0x1FF9124 Slot: 5
	public override IPv4InterfaceStatistics GetIPv4Statistics() { }

	// RVA: 0x1FF9194 Offset: 0x1FF9194 VA: 0x1FF9194 Slot: 13
	public override OperationalStatus get_OperationalStatus() { }

	// RVA: 0x1FF919C Offset: 0x1FF919C VA: 0x1FF919C Slot: 15
	public override bool get_SupportsMulticast() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32NetworkInterface2 : NetworkInterface // TypeDefIndex: 1416
{
	// Fields
	private Win32_IP_ADAPTER_ADDRESSES addr; // 0x10
	private Win32_MIB_IFROW mib4; // 0x18
	private Win32_MIB_IFROW mib6; // 0x88
	private Win32IPv4InterfaceStatistics ip4stats; // 0xF8
	private IPInterfaceProperties ip_if_props; // 0x100

	// Properties
	public override string Description { get; }
	public override string Id { get; }
	public override bool IsReceiveOnly { get; }
	public override string Name { get; }
	public override NetworkInterfaceType NetworkInterfaceType { get; }
	public override OperationalStatus OperationalStatus { get; }
	public override long Speed { get; }
	public override bool SupportsMulticast { get; }

	// Methods

	// RVA: 0x2009FC0 Offset: 0x2009FC0 VA: 0x2009FC0
	private void .ctor(Win32_IP_ADAPTER_ADDRESSES addr) { }

	// RVA: 0x200A254 Offset: 0x200A254 VA: 0x200A254
	private static extern int GetAdaptersInfo(byte[] info, ref int size) { }

	// RVA: 0x200A314 Offset: 0x200A314 VA: 0x200A314
	private static extern int GetAdaptersAddresses(uint family, uint flags, IntPtr reserved, byte[] info, ref int size) { }

	// RVA: 0x200A15C Offset: 0x200A15C VA: 0x200A15C
	private static extern int GetIfEntry(ref Win32_MIB_IFROW row) { }

	// RVA: 0x1FFF218 Offset: 0x1FFF218 VA: 0x1FFF218
	public static NetworkInterface[] ImplGetAllNetworkInterfaces() { }

	// RVA: 0x2008BE4 Offset: 0x2008BE4 VA: 0x2008BE4
	public static Win32_IP_ADAPTER_INFO GetAdapterInfoByIndex(int index) { }

	// RVA: 0x200A5E4 Offset: 0x200A5E4 VA: 0x200A5E4
	private static Win32_IP_ADAPTER_INFO[] GetAdaptersInfo() { }

	// RVA: 0x200A3F4 Offset: 0x200A3F4 VA: 0x200A3F4
	private static Win32_IP_ADAPTER_ADDRESSES[] GetAdaptersAddresses() { }

	// RVA: 0x200A7C8 Offset: 0x200A7C8 VA: 0x200A7C8 Slot: 4
	public override IPInterfaceProperties GetIPProperties() { }

	// RVA: 0x200A7D0 Offset: 0x200A7D0 VA: 0x200A7D0 Slot: 5
	public override IPv4InterfaceStatistics GetIPv4Statistics() { }

	// RVA: 0x200A7D8 Offset: 0x200A7D8 VA: 0x200A7D8 Slot: 6
	public override PhysicalAddress GetPhysicalAddress() { }

	// RVA: 0x200A8A0 Offset: 0x200A8A0 VA: 0x200A8A0 Slot: 7
	public override bool Supports(NetworkInterfaceComponent networkInterfaceComponent) { }

	// RVA: 0x200A8D0 Offset: 0x200A8D0 VA: 0x200A8D0 Slot: 8
	public override string get_Description() { }

	// RVA: 0x200A8FC Offset: 0x200A8FC VA: 0x200A8FC Slot: 9
	public override string get_Id() { }

	// RVA: 0x200A928 Offset: 0x200A928 VA: 0x200A928 Slot: 10
	public override bool get_IsReceiveOnly() { }

	// RVA: 0x200A964 Offset: 0x200A964 VA: 0x200A964 Slot: 11
	public override string get_Name() { }

	// RVA: 0x200A990 Offset: 0x200A990 VA: 0x200A990 Slot: 12
	public override NetworkInterfaceType get_NetworkInterfaceType() { }

	// RVA: 0x200A9BC Offset: 0x200A9BC VA: 0x200A9BC Slot: 13
	public override OperationalStatus get_OperationalStatus() { }

	// RVA: 0x200A9E8 Offset: 0x200A9E8 VA: 0x200A9E8 Slot: 14
	public override long get_Speed() { }

	// RVA: 0x200AA04 Offset: 0x200AA04 VA: 0x200AA04 Slot: 15
	public override bool get_SupportsMulticast() { }
}

// Namespace: System.Net.NetworkInformation
public enum NetworkInterfaceComponent // TypeDefIndex: 1417
{
	// Fields
	public int value__; // 0x0
	public const NetworkInterfaceComponent IPv4 = 0;
	public const NetworkInterfaceComponent IPv6 = 1;
}

// Namespace: System.Net.NetworkInformation
public enum NetworkInterfaceType // TypeDefIndex: 1418
{
	// Fields
	public int value__; // 0x0
	public const NetworkInterfaceType Unknown = 1;
	public const NetworkInterfaceType Ethernet = 6;
	public const NetworkInterfaceType TokenRing = 9;
	public const NetworkInterfaceType Fddi = 15;
	public const NetworkInterfaceType BasicIsdn = 20;
	public const NetworkInterfaceType PrimaryIsdn = 21;
	public const NetworkInterfaceType Ppp = 23;
	public const NetworkInterfaceType Loopback = 24;
	public const NetworkInterfaceType Ethernet3Megabit = 26;
	public const NetworkInterfaceType Slip = 28;
	public const NetworkInterfaceType Atm = 37;
	public const NetworkInterfaceType GenericModem = 48;
	public const NetworkInterfaceType FastEthernetT = 62;
	public const NetworkInterfaceType Isdn = 63;
	public const NetworkInterfaceType FastEthernetFx = 69;
	public const NetworkInterfaceType Wireless80211 = 71;
	public const NetworkInterfaceType AsymmetricDsl = 94;
	public const NetworkInterfaceType RateAdaptDsl = 95;
	public const NetworkInterfaceType SymmetricDsl = 96;
	public const NetworkInterfaceType VeryHighSpeedDsl = 97;
	public const NetworkInterfaceType IPOverAtm = 114;
	public const NetworkInterfaceType GigabitEthernet = 117;
	public const NetworkInterfaceType Tunnel = 131;
	public const NetworkInterfaceType MultiRateSymmetricDsl = 143;
	public const NetworkInterfaceType HighPerformanceSerialBus = 144;
}

// Namespace: System.Net.NetworkInformation
public enum OperationalStatus // TypeDefIndex: 1419
{
	// Fields
	public int value__; // 0x0
	public const OperationalStatus Up = 1;
	public const OperationalStatus Down = 2;
	public const OperationalStatus Testing = 3;
	public const OperationalStatus Unknown = 4;
	public const OperationalStatus Dormant = 5;
	public const OperationalStatus NotPresent = 6;
	public const OperationalStatus LowerLayerDown = 7;
}

// Namespace: System.Net.NetworkInformation
public class PhysicalAddress // TypeDefIndex: 1420
{
	// Fields
	private const int numberOfBytes = 6;
	public static readonly PhysicalAddress None; // 0x0
	private byte[] bytes; // 0x10

	// Methods

	// RVA: 0x1FFF6DC Offset: 0x1FFF6DC VA: 0x1FFF6DC
	public void .ctor(byte[] address) { }

	// RVA: 0x1FFF708 Offset: 0x1FFF708 VA: 0x1FFF708
	private static void .cctor() { }

	// RVA: 0x1FFF794 Offset: 0x1FFF794 VA: 0x1FFF794
	internal static PhysicalAddress ParseEthernet(string address) { }

	// RVA: 0x1FFF934 Offset: 0x1FFF934 VA: 0x1FFF934
	public static PhysicalAddress Parse(string address) { }

	// RVA: 0x1FFFD48 Offset: 0x1FFFD48 VA: 0x1FFFD48
	private static byte GetValue(char c) { }

	// RVA: 0x1FFFE18 Offset: 0x1FFFE18 VA: 0x1FFFE18 Slot: 0
	public override bool Equals(object comparand) { }

	// RVA: 0x1FFFF90 Offset: 0x1FFFF90 VA: 0x1FFFF90 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x20000F4 Offset: 0x20000F4 VA: 0x20000F4
	public byte[] GetAddressBytes() { }

	// RVA: 0x20000FC Offset: 0x20000FC VA: 0x20000FC Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net.NetworkInformation
[MonoTODOAttribute] // RVA: 0xBD06C4 Offset: 0xBD06C4 VA: 0xBD06C4
public class Ping : Component, IDisposable // TypeDefIndex: 1421
{
	// Fields
	private const int DefaultCount = 1;
	private const int default_timeout = 4000;
	private const int identifier = 1;
	private const uint linux_cap_version = 537333798;
	private static readonly string[] PingBinPaths; // 0x0
	private static readonly string PingBinPath; // 0x8
	private static readonly byte[] default_buffer; // 0x10
	private static bool canSendPrivileged; // 0x18
	private BackgroundWorker worker; // 0x30
	private object user_async_state; // 0x38
	private PingCompletedEventHandler PingCompleted; // 0x40

	// Methods

	// RVA: 0x2000250 Offset: 0x2000250 VA: 0x2000250
	public void .ctor() { }

	// RVA: 0x2000258 Offset: 0x2000258 VA: 0x2000258
	private static void .cctor() { }

	// RVA: 0x20007A4 Offset: 0x20007A4 VA: 0x20007A4
	public void add_PingCompleted(PingCompletedEventHandler value) { }

	// RVA: 0x2000868 Offset: 0x2000868 VA: 0x2000868
	public void remove_PingCompleted(PingCompletedEventHandler value) { }

	// RVA: 0x200092C Offset: 0x200092C VA: 0x200092C Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2000930 Offset: 0x2000930 VA: 0x2000930
	private static extern int capget(ref Ping.cap_user_header_t header, ref Ping.cap_user_data_t data) { }

	// RVA: 0x20005B0 Offset: 0x20005B0 VA: 0x20005B0
	private static void CheckLinuxCapabilities() { }

	// RVA: 0x20009DC Offset: 0x20009DC VA: 0x20009DC
	protected void OnPingCompleted(PingCompletedEventArgs e) { }

	// RVA: 0x2000DD8 Offset: 0x2000DD8 VA: 0x2000DD8
	public PingReply Send(IPAddress address) { }

	// RVA: 0x2000DE0 Offset: 0x2000DE0 VA: 0x2000DE0
	public PingReply Send(IPAddress address, int timeout) { }

	// RVA: 0x2000E68 Offset: 0x2000E68 VA: 0x2000E68
	public PingReply Send(IPAddress address, int timeout, byte[] buffer) { }

	// RVA: 0x20010B4 Offset: 0x20010B4 VA: 0x20010B4
	public PingReply Send(string hostNameOrAddress) { }

	// RVA: 0x20010BC Offset: 0x20010BC VA: 0x20010BC
	public PingReply Send(string hostNameOrAddress, int timeout) { }

	// RVA: 0x2001144 Offset: 0x2001144 VA: 0x2001144
	public PingReply Send(string hostNameOrAddress, int timeout, byte[] buffer) { }

	// RVA: 0x20011D8 Offset: 0x20011D8 VA: 0x20011D8
	public PingReply Send(string hostNameOrAddress, int timeout, byte[] buffer, PingOptions options) { }

	// RVA: 0x200129C Offset: 0x200129C VA: 0x200129C
	private static IPAddress GetNonLoopbackIP() { }

	// RVA: 0x2000F0C Offset: 0x2000F0C VA: 0x2000F0C
	public PingReply Send(IPAddress address, int timeout, byte[] buffer, PingOptions options) { }

	// RVA: 0x20013E8 Offset: 0x20013E8 VA: 0x20013E8
	private PingReply SendPrivileged(IPAddress address, int timeout, byte[] buffer, PingOptions options) { }

	// RVA: 0x2001CA4 Offset: 0x2001CA4 VA: 0x2001CA4
	private PingReply SendUnprivileged(IPAddress address, int timeout, byte[] buffer, PingOptions options) { }

	// RVA: 0x2002C70 Offset: 0x2002C70 VA: 0x2002C70
	public void SendAsync(IPAddress address, int timeout, byte[] buffer, object userToken) { }

	// RVA: 0x2002F54 Offset: 0x2002F54 VA: 0x2002F54
	public void SendAsync(IPAddress address, int timeout, object userToken) { }

	// RVA: 0x2002FD0 Offset: 0x2002FD0 VA: 0x2002FD0
	public void SendAsync(IPAddress address, object userToken) { }

	// RVA: 0x2002FD8 Offset: 0x2002FD8 VA: 0x2002FD8
	public void SendAsync(string hostNameOrAddress, int timeout, byte[] buffer, object userToken) { }

	// RVA: 0x2003074 Offset: 0x2003074 VA: 0x2003074
	public void SendAsync(string hostNameOrAddress, int timeout, byte[] buffer, PingOptions options, object userToken) { }

	// RVA: 0x2003160 Offset: 0x2003160 VA: 0x2003160
	public void SendAsync(string hostNameOrAddress, int timeout, object userToken) { }

	// RVA: 0x20031F8 Offset: 0x20031F8 VA: 0x20031F8
	public void SendAsync(string hostNameOrAddress, object userToken) { }

	// RVA: 0x2002D30 Offset: 0x2002D30 VA: 0x2002D30
	public void SendAsync(IPAddress address, int timeout, byte[] buffer, PingOptions options, object userToken) { }

	// RVA: 0x2003210 Offset: 0x2003210 VA: 0x2003210
	public void SendAsyncCancel() { }

	// RVA: 0x200278C Offset: 0x200278C VA: 0x200278C
	private string BuildPingArgs(IPAddress address, int timeout, PingOptions options) { }
}

// Namespace: 
private struct Ping.cap_user_header_t // TypeDefIndex: 1422
{
	// Fields
	public uint version; // 0x0
	public int pid; // 0x4
}

// Namespace: 
private struct Ping.cap_user_data_t // TypeDefIndex: 1423
{
	// Fields
	public uint effective; // 0x0
	public uint permitted; // 0x4
	public uint inheritable; // 0x8
}

// Namespace: 
private class Ping.IcmpMessage // TypeDefIndex: 1424
{
	// Fields
	private byte[] bytes; // 0x10

	// Properties
	public byte Type { get; }
	public byte Code { get; }
	public byte Identifier { get; }
	public byte Sequence { get; }
	public byte[] Data { get; }
	public IPStatus IPStatus { get; }

	// Methods

	// RVA: 0x20024E8 Offset: 0x20024E8 VA: 0x20024E8
	public void .ctor(byte[] bytes, int offset, int size) { }

	// RVA: 0x2002240 Offset: 0x2002240 VA: 0x2002240
	public void .ctor(byte type, byte code, short identifier, short sequence, byte[] data) { }

	// RVA: 0x2002608 Offset: 0x2002608 VA: 0x2002608
	public byte get_Type() { }

	// RVA: 0x2003688 Offset: 0x2003688 VA: 0x2003688
	public byte get_Code() { }

	// RVA: 0x2002584 Offset: 0x2002584 VA: 0x2002584
	public byte get_Identifier() { }

	// RVA: 0x20036D0 Offset: 0x20036D0 VA: 0x20036D0
	public byte get_Sequence() { }

	// RVA: 0x200264C Offset: 0x200264C VA: 0x200264C
	public byte[] get_Data() { }

	// RVA: 0x200248C Offset: 0x200248C VA: 0x200248C
	public byte[] GetBytes() { }

	// RVA: 0x20035C0 Offset: 0x20035C0 VA: 0x20035C0
	private static ushort ComputeChecksum(byte[] data) { }

	// RVA: 0x20026E4 Offset: 0x20026E4 VA: 0x20026E4
	public IPStatus get_IPStatus() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xBD06FC Offset: 0xBD06FC VA: 0xBD06FC
private sealed class Ping.<SendAsync>c__AnonStorey6 // TypeDefIndex: 1425
{
	// Fields
	internal IPAddress address; // 0x10
	internal int timeout; // 0x18
	internal byte[] buffer; // 0x20
	internal PingOptions options; // 0x28
	internal Ping <>f__this; // 0x30

	// Methods

	// RVA: 0x2003208 Offset: 0x2003208 VA: 0x2003208
	public void .ctor() { }

	// RVA: 0x20032A0 Offset: 0x20032A0 VA: 0x20032A0
	internal void <>m__5(object o, DoWorkEventArgs ea) { }

	// RVA: 0x2003420 Offset: 0x2003420 VA: 0x2003420
	internal void <>m__6(object o, RunWorkerCompletedEventArgs ea) { }
}

// Namespace: System.Net.NetworkInformation
public class PingCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1426
{
	// Fields
	private PingReply reply; // 0x28

	// Properties
	public PingReply Reply { get; }

	// Methods

	// RVA: 0x2003590 Offset: 0x2003590 VA: 0x2003590
	internal void .ctor(Exception ex, bool cancelled, object userState, PingReply reply) { }

	// RVA: 0x2003754 Offset: 0x2003754 VA: 0x2003754
	public PingReply get_Reply() { }
}

// Namespace: System.Net.NetworkInformation
[Serializable]
public class PingException : InvalidOperationException // TypeDefIndex: 1427
{
	// Methods

	// RVA: 0x20037A8 Offset: 0x20037A8 VA: 0x20037A8
	public void .ctor(string message) { }

	// RVA: 0x20037B0 Offset: 0x20037B0 VA: 0x20037B0
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x20037B8 Offset: 0x20037B8 VA: 0x20037B8
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net.NetworkInformation
public class PingOptions // TypeDefIndex: 1428
{
	// Fields
	private int ttl; // 0x10
	private bool dont_fragment; // 0x14

	// Properties
	public bool DontFragment { get; set; }
	public int Ttl { get; set; }

	// Methods

	// RVA: 0x2000EFC Offset: 0x2000EFC VA: 0x2000EFC
	public void .ctor() { }

	// RVA: 0x20037C0 Offset: 0x20037C0 VA: 0x20037C0
	public void .ctor(int ttl, bool dontFragment) { }

	// RVA: 0x2002230 Offset: 0x2002230 VA: 0x2002230
	public bool get_DontFragment() { }

	// RVA: 0x2003888 Offset: 0x2003888 VA: 0x2003888
	public void set_DontFragment(bool value) { }

	// RVA: 0x2002238 Offset: 0x2002238 VA: 0x2002238
	public int get_Ttl() { }

	// RVA: 0x2003894 Offset: 0x2003894 VA: 0x2003894
	public void set_Ttl(int value) { }
}

// Namespace: System.Net.NetworkInformation
public class PingReply // TypeDefIndex: 1429
{
	// Fields
	private IPAddress address; // 0x10
	private byte[] buffer; // 0x18
	private PingOptions options; // 0x20
	private long rtt; // 0x28
	private IPStatus status; // 0x30

	// Properties
	public IPAddress Address { get; }
	public byte[] Buffer { get; }
	public PingOptions Options { get; }
	public long RoundtripTime { get; }
	public IPStatus Status { get; }

	// Methods

	// RVA: 0x2002494 Offset: 0x2002494 VA: 0x2002494
	internal void .ctor(IPAddress address, byte[] buffer, PingOptions options, long roundtripTime, IPStatus status) { }

	// RVA: 0x200389C Offset: 0x200389C VA: 0x200389C
	public IPAddress get_Address() { }

	// RVA: 0x20038A4 Offset: 0x20038A4 VA: 0x20038A4
	public byte[] get_Buffer() { }

	// RVA: 0x20038AC Offset: 0x20038AC VA: 0x20038AC
	public PingOptions get_Options() { }

	// RVA: 0x20038B4 Offset: 0x20038B4 VA: 0x20038B4
	public long get_RoundtripTime() { }

	// RVA: 0x20038BC Offset: 0x20038BC VA: 0x20038BC
	public IPStatus get_Status() { }
}

// Namespace: System.Net.NetworkInformation
public enum PrefixOrigin // TypeDefIndex: 1430
{
	// Fields
	public int value__; // 0x0
	public const PrefixOrigin Other = 0;
	public const PrefixOrigin Manual = 1;
	public const PrefixOrigin WellKnown = 2;
	public const PrefixOrigin Dhcp = 3;
	public const PrefixOrigin RouterAdvertisement = 4;
}

// Namespace: System.Net.NetworkInformation
public enum SuffixOrigin // TypeDefIndex: 1431
{
	// Fields
	public int value__; // 0x0
	public const SuffixOrigin Other = 0;
	public const SuffixOrigin Manual = 1;
	public const SuffixOrigin WellKnown = 2;
	public const SuffixOrigin OriginDhcp = 3;
	public const SuffixOrigin LinkLayerAddress = 4;
	public const SuffixOrigin Random = 5;
}

// Namespace: System.Net.NetworkInformation
public abstract class TcpConnectionInformation // TypeDefIndex: 1432
{
	// Properties
	public abstract IPEndPoint LocalEndPoint { get; }
	public abstract IPEndPoint RemoteEndPoint { get; }
	public abstract TcpState State { get; }

	// Methods

	// RVA: 0x20038C4 Offset: 0x20038C4 VA: 0x20038C4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPEndPoint get_LocalEndPoint();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPEndPoint get_RemoteEndPoint();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract TcpState get_State();
}

// Namespace: System.Net.NetworkInformation
internal class TcpConnectionInformationImpl : TcpConnectionInformation // TypeDefIndex: 1433
{
	// Fields
	private IPEndPoint local; // 0x10
	private IPEndPoint remote; // 0x18
	private TcpState state; // 0x20

	// Properties
	public override IPEndPoint LocalEndPoint { get; }
	public override IPEndPoint RemoteEndPoint { get; }
	public override TcpState State { get; }

	// Methods

	// RVA: 0x1FFA918 Offset: 0x1FFA918 VA: 0x1FFA918
	public void .ctor(IPEndPoint local, IPEndPoint remote, TcpState state) { }

	// RVA: 0x20038CC Offset: 0x20038CC VA: 0x20038CC Slot: 4
	public override IPEndPoint get_LocalEndPoint() { }

	// RVA: 0x20038D4 Offset: 0x20038D4 VA: 0x20038D4 Slot: 5
	public override IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0x20038DC Offset: 0x20038DC VA: 0x20038DC Slot: 6
	public override TcpState get_State() { }
}

// Namespace: System.Net.NetworkInformation
public enum TcpState // TypeDefIndex: 1434
{
	// Fields
	public int value__; // 0x0
	public const TcpState Unknown = 0;
	public const TcpState Closed = 1;
	public const TcpState Listen = 2;
	public const TcpState SynSent = 3;
	public const TcpState SynReceived = 4;
	public const TcpState Established = 5;
	public const TcpState FinWait1 = 6;
	public const TcpState FinWait2 = 7;
	public const TcpState CloseWait = 8;
	public const TcpState Closing = 9;
	public const TcpState LastAck = 10;
	public const TcpState TimeWait = 11;
	public const TcpState DeleteTcb = 12;
}

// Namespace: System.Net.NetworkInformation
public abstract class TcpStatistics // TypeDefIndex: 1435
{
	// Properties
	public abstract long ConnectionsAccepted { get; }
	public abstract long ConnectionsInitiated { get; }
	public abstract long CumulativeConnections { get; }
	public abstract long CurrentConnections { get; }
	public abstract long ErrorsReceived { get; }
	public abstract long FailedConnectionAttempts { get; }
	public abstract long MaximumConnections { get; }
	public abstract long MaximumTransmissionTimeout { get; }
	public abstract long MinimumTransmissionTimeout { get; }
	public abstract long ResetConnections { get; }
	public abstract long ResetsSent { get; }
	public abstract long SegmentsReceived { get; }
	public abstract long SegmentsResent { get; }
	public abstract long SegmentsSent { get; }

	// Methods

	// RVA: 0x1FFCE04 Offset: 0x1FFCE04 VA: 0x1FFCE04
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_ConnectionsAccepted();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_ConnectionsInitiated();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_CumulativeConnections();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_CurrentConnections();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_ErrorsReceived();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_FailedConnectionAttempts();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_MaximumConnections();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_MaximumTransmissionTimeout();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_MinimumTransmissionTimeout();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_ResetConnections();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_ResetsSent();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_SegmentsReceived();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long get_SegmentsResent();
