	private string percentGroupSeparator; // 0xB8
	private int[] percentGroupSizes; // 0xC0
	private int percentNegativePattern; // 0xC8
	private int percentPositivePattern; // 0xCC
	private string percentSymbol; // 0xD0
	private string perMilleSymbol; // 0xD8
	private string positiveInfinitySymbol; // 0xE0
	private string positiveSign; // 0xE8
	private string ansiCurrencySymbol; // 0xF0
	private int m_dataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool validForParseAsNumber; // 0xFD
	private bool validForParseAsCurrency; // 0xFE
	private string[] nativeDigits; // 0x100
	private int digitSubstitution; // 0x108
	private static readonly string[] invariantNativeDigits; // 0x0

	// Properties
	public int CurrencyDecimalDigits { get; }
	public string CurrencyDecimalSeparator { get; }
	public string CurrencyGroupSeparator { get; }
	internal int[] RawCurrencyGroupSizes { get; }
	public int CurrencyNegativePattern { get; }
	public int CurrencyPositivePattern { get; }
	public string CurrencySymbol { get; }
	public static NumberFormatInfo CurrentInfo { get; }
	public static NumberFormatInfo InvariantInfo { get; }
	public string NaNSymbol { get; }
	public string NegativeInfinitySymbol { get; }
	public string NegativeSign { get; }
	public int NumberDecimalDigits { get; }
	public string NumberDecimalSeparator { get; }
	public string NumberGroupSeparator { get; }
	internal int[] RawNumberGroupSizes { get; }
	public int NumberNegativePattern { get; set; }
	public int PercentDecimalDigits { get; }
	public string PercentDecimalSeparator { get; }
	public string PercentGroupSeparator { get; }
	internal int[] RawPercentGroupSizes { get; }
	public int PercentNegativePattern { get; }
	public int PercentPositivePattern { get; }
	public string PercentSymbol { get; }
	public string PerMilleSymbol { get; }
	public string PositiveInfinitySymbol { get; }
	public string PositiveSign { get; }

	// Methods

	// RVA: 0x1187CEC Offset: 0x1187CEC VA: 0x1187CEC
	internal void .ctor(int lcid, bool read_only) { }

	// RVA: 0x1183D98 Offset: 0x1183D98 VA: 0x1183D98
	internal void .ctor(bool read_only) { }

	// RVA: 0x1187F38 Offset: 0x1187F38 VA: 0x1187F38
	public void .ctor() { }

	// RVA: 0x1187F44 Offset: 0x1187F44 VA: 0x1187F44
	private static void .cctor() { }

	// RVA: 0x11882F8 Offset: 0x11882F8 VA: 0x11882F8
	public int get_CurrencyDecimalDigits() { }

	// RVA: 0x1173448 Offset: 0x1173448 VA: 0x1173448
	public string get_CurrencyDecimalSeparator() { }

	// RVA: 0x1173458 Offset: 0x1173458 VA: 0x1173458
	public string get_CurrencyGroupSeparator() { }

	// RVA: 0x1188300 Offset: 0x1188300 VA: 0x1188300
	internal int[] get_RawCurrencyGroupSizes() { }

	// RVA: 0x1188308 Offset: 0x1188308 VA: 0x1188308
	public int get_CurrencyNegativePattern() { }

	// RVA: 0x1188310 Offset: 0x1188310 VA: 0x1188310
	public int get_CurrencyPositivePattern() { }

	// RVA: 0x1173440 Offset: 0x1173440 VA: 0x1173440
	public string get_CurrencySymbol() { }

	// RVA: 0x1188318 Offset: 0x1188318 VA: 0x1188318
	public static NumberFormatInfo get_CurrentInfo() { }

	// RVA: 0x1184574 Offset: 0x1184574 VA: 0x1184574
	public static NumberFormatInfo get_InvariantInfo() { }

	// RVA: 0x117985C Offset: 0x117985C VA: 0x117985C
	public string get_NaNSymbol() { }

	// RVA: 0x1179960 Offset: 0x1179960 VA: 0x1179960
	public string get_NegativeInfinitySymbol() { }

	// RVA: 0x1173468 Offset: 0x1173468 VA: 0x1173468
	public string get_NegativeSign() { }

	// RVA: 0x1188498 Offset: 0x1188498 VA: 0x1188498
	public int get_NumberDecimalDigits() { }

	// RVA: 0x1173450 Offset: 0x1173450 VA: 0x1173450
	public string get_NumberDecimalSeparator() { }

	// RVA: 0x1173460 Offset: 0x1173460 VA: 0x1173460
	public string get_NumberGroupSeparator() { }

	// RVA: 0x11884A0 Offset: 0x11884A0 VA: 0x11884A0
	internal int[] get_RawNumberGroupSizes() { }

	// RVA: 0x11884A8 Offset: 0x11884A8 VA: 0x11884A8
	public int get_NumberNegativePattern() { }

	// RVA: 0x11883C8 Offset: 0x11883C8 VA: 0x11883C8
	public void set_NumberNegativePattern(int value) { }

	// RVA: 0x11884B0 Offset: 0x11884B0 VA: 0x11884B0
	public int get_PercentDecimalDigits() { }

	// RVA: 0x11884B8 Offset: 0x11884B8 VA: 0x11884B8
	public string get_PercentDecimalSeparator() { }

	// RVA: 0x11884C0 Offset: 0x11884C0 VA: 0x11884C0
	public string get_PercentGroupSeparator() { }

	// RVA: 0x11884C8 Offset: 0x11884C8 VA: 0x11884C8
	internal int[] get_RawPercentGroupSizes() { }

	// RVA: 0x11884D0 Offset: 0x11884D0 VA: 0x11884D0
	public int get_PercentNegativePattern() { }

	// RVA: 0x11884D8 Offset: 0x11884D8 VA: 0x11884D8
	public int get_PercentPositivePattern() { }

	// RVA: 0x11884E0 Offset: 0x11884E0 VA: 0x11884E0
	public string get_PercentSymbol() { }

	// RVA: 0x11884E8 Offset: 0x11884E8 VA: 0x11884E8
	public string get_PerMilleSymbol() { }

	// RVA: 0x1179958 Offset: 0x1179958 VA: 0x1179958
	public string get_PositiveInfinitySymbol() { }

	// RVA: 0x1173470 Offset: 0x1173470 VA: 0x1173470
	public string get_PositiveSign() { }

	// RVA: 0x11884F0 Offset: 0x11884F0 VA: 0x11884F0 Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x11835D0 Offset: 0x11835D0 VA: 0x11835D0 Slot: 4
	public object Clone() { }

	// RVA: 0x11739CC Offset: 0x11739CC VA: 0x11739CC
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC31250 Offset: 0xC31250 VA: 0xC31250
[FlagsAttribute] // RVA: 0xC31250 Offset: 0xC31250 VA: 0xC31250
[Serializable]
public enum NumberStyles // TypeDefIndex: 259
{
	// Fields
	public int value__; // 0x0
	public const NumberStyles None = 0;
	public const NumberStyles AllowLeadingWhite = 1;
	public const NumberStyles AllowTrailingWhite = 2;
	public const NumberStyles AllowLeadingSign = 4;
	public const NumberStyles AllowTrailingSign = 8;
	public const NumberStyles AllowParentheses = 16;
	public const NumberStyles AllowDecimalPoint = 32;
	public const NumberStyles AllowThousands = 64;
	public const NumberStyles AllowExponent = 128;
	public const NumberStyles AllowCurrencySymbol = 256;
	public const NumberStyles AllowHexSpecifier = 512;
	public const NumberStyles Integer = 7;
	public const NumberStyles HexNumber = 515;
	public const NumberStyles Number = 111;
	public const NumberStyles Float = 167;
	public const NumberStyles Currency = 383;
	public const NumberStyles Any = 511;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC3128C Offset: 0xC3128C VA: 0xC3128C
[Serializable]
public class RegionInfo // TypeDefIndex: 260
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private int lcid; // 0x10
	private int regionId; // 0x14
	private string iso2Name; // 0x18
	private string iso3Name; // 0x20
	private string win3Name; // 0x28
	private string englishName; // 0x30
	private string currencySymbol; // 0x38
	private string isoCurrencySymbol; // 0x40
	private string currencyEnglishName; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC3765C Offset: 0xC3765C VA: 0xC3765C
	private static Dictionary<string, int> <>f__switch$map1B; // 0x8

	// Properties
	public static RegionInfo CurrentRegion { get; }
	[ComVisibleAttribute] // RVA: 0xC3B190 Offset: 0xC3B190 VA: 0xC3B190
	public virtual string CurrencyEnglishName { get; }
	public virtual string CurrencySymbol { get; }
	[MonoTODOAttribute] // RVA: 0xC3B1A4 Offset: 0xC3B1A4 VA: 0xC3B1A4
	public virtual string DisplayName { get; }
	public virtual string EnglishName { get; }
	[ComVisibleAttribute] // RVA: 0xC3B1DC Offset: 0xC3B1DC VA: 0xC3B1DC
	public virtual int GeoId { get; }
	public virtual bool IsMetric { get; }
	public virtual string ISOCurrencySymbol { get; }
	[ComVisibleAttribute] // RVA: 0xC3B1F0 Offset: 0xC3B1F0 VA: 0xC3B1F0
	public virtual string NativeName { get; }
	[MonoTODOAttribute] // RVA: 0xC3B204 Offset: 0xC3B204 VA: 0xC3B204
	[ComVisibleAttribute] // RVA: 0xC3B204 Offset: 0xC3B204 VA: 0xC3B204
	public virtual string CurrencyNativeName { get; }
	public virtual string Name { get; }
	public virtual string ThreeLetterISORegionName { get; }
	public virtual string ThreeLetterWindowsRegionName { get; }
	public virtual string TwoLetterISORegionName { get; }

	// Methods

	// RVA: 0x118857C Offset: 0x118857C VA: 0x118857C
	public void .ctor(int culture) { }

	// RVA: 0x11887AC Offset: 0x11887AC VA: 0x11887AC
	public void .ctor(string name) { }

	// RVA: 0x1188928 Offset: 0x1188928 VA: 0x1188928
	public static RegionInfo get_CurrentRegion() { }

	// RVA: 0x11886B4 Offset: 0x11886B4 VA: 0x11886B4
	private bool GetByTerritory(CultureInfo ci) { }

	// RVA: 0x1188924 Offset: 0x1188924 VA: 0x1188924
	private bool construct_internal_region_from_name(string name) { }

	// RVA: 0x1188A30 Offset: 0x1188A30 VA: 0x1188A30 Slot: 4
	public virtual string get_CurrencyEnglishName() { }

	// RVA: 0x1188A38 Offset: 0x1188A38 VA: 0x1188A38 Slot: 5
	public virtual string get_CurrencySymbol() { }

	// RVA: 0x1188A40 Offset: 0x1188A40 VA: 0x1188A40 Slot: 6
	public virtual string get_DisplayName() { }

	// RVA: 0x1188A48 Offset: 0x1188A48 VA: 0x1188A48 Slot: 7
	public virtual string get_EnglishName() { }

	// RVA: 0x1188A50 Offset: 0x1188A50 VA: 0x1188A50 Slot: 8
	public virtual int get_GeoId() { }

	// RVA: 0x1188A58 Offset: 0x1188A58 VA: 0x1188A58 Slot: 9
	public virtual bool get_IsMetric() { }

	// RVA: 0x1188BC0 Offset: 0x1188BC0 VA: 0x1188BC0 Slot: 10
	public virtual string get_ISOCurrencySymbol() { }

	// RVA: 0x1188BC8 Offset: 0x1188BC8 VA: 0x1188BC8 Slot: 11
	public virtual string get_NativeName() { }

	// RVA: 0x1188BD4 Offset: 0x1188BD4 VA: 0x1188BD4 Slot: 12
	public virtual string get_CurrencyNativeName() { }

	// RVA: 0x1188C3C Offset: 0x1188C3C VA: 0x1188C3C Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x1188C44 Offset: 0x1188C44 VA: 0x1188C44 Slot: 14
	public virtual string get_ThreeLetterISORegionName() { }

	// RVA: 0x1188C4C Offset: 0x1188C4C VA: 0x1188C4C Slot: 15
	public virtual string get_ThreeLetterWindowsRegionName() { }

	// RVA: 0x1188C54 Offset: 0x1188C54 VA: 0x1188C54 Slot: 16
	public virtual string get_TwoLetterISORegionName() { }

	// RVA: 0x1188C5C Offset: 0x1188C5C VA: 0x1188C5C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x1188CF8 Offset: 0x1188CF8 VA: 0x1188CF8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1188D0C Offset: 0x1188D0C VA: 0x1188D0C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC312A0 Offset: 0xC312A0 VA: 0xC312A0
[MonoTODOAttribute] // RVA: 0xC312A0 Offset: 0xC312A0 VA: 0xC312A0
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 261
{
	// Fields
	private string m_listSeparator; // 0x10
	private bool m_isReadOnly; // 0x18
	private string customCultureName; // 0x20
	private int m_nDataItem; // 0x28
	private bool m_useUserOverride; // 0x2C
	private int m_win32LangID; // 0x30
	private readonly CultureInfo ci; // 0x38
	private readonly bool handleDotI; // 0x40
	private readonly TextInfo.Data data; // 0x44

	// Properties
	public virtual string ListSeparator { get; }
	[ComVisibleAttribute] // RVA: 0xC3B254 Offset: 0xC3B254 VA: 0xC3B254
	public string CultureName { get; }

	// Methods

	// RVA: 0x11846F4 Offset: 0x11846F4 VA: 0x11846F4
	internal void .ctor(CultureInfo ci, int lcid, void* data, bool read_only) { }

	// RVA: 0x11893FC Offset: 0x11893FC VA: 0x11893FC
	private void .ctor(TextInfo textInfo) { }

	[MonoTODOAttribute] // RVA: 0xC38940 Offset: 0xC38940 VA: 0xC38940
	// RVA: 0x118955C Offset: 0x118955C VA: 0x118955C Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x1189560 Offset: 0x1189560 VA: 0x1189560 Slot: 6
	public virtual string get_ListSeparator() { }

	// RVA: 0x1189514 Offset: 0x1189514 VA: 0x1189514
	public string get_CultureName() { }

	// RVA: 0x11895A0 Offset: 0x11895A0 VA: 0x11895A0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x118965C Offset: 0x118965C VA: 0x118965C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1189664 Offset: 0x1189664 VA: 0x1189664 Slot: 3
	public override string ToString() { }

	// RVA: 0x1189708 Offset: 0x1189708 VA: 0x1189708 Slot: 7
	public virtual char ToLower(char c) { }

	// RVA: 0x11898A8 Offset: 0x11898A8 VA: 0x11898A8 Slot: 8
	public virtual char ToUpper(char c) { }

	// RVA: 0x1189A8C Offset: 0x1189A8C VA: 0x1189A8C Slot: 9
	public virtual string ToLower(string str) { }

	// RVA: 0x1189C18 Offset: 0x1189C18 VA: 0x1189C18 Slot: 10
	public virtual string ToUpper(string str) { }

	[ComVisibleAttribute] // RVA: 0xC38950 Offset: 0xC38950 VA: 0xC38950
	// RVA: 0x1189DA4 Offset: 0x1189DA4 VA: 0x1189DA4 Slot: 11
	public virtual object Clone() { }
}

// Namespace: 
private struct TextInfo.Data // TypeDefIndex: 262
{
	// Fields
	public int ansi; // 0x0
	public int ebcdic; // 0x4
	public int mac; // 0x8
	public int oem; // 0xC
	public byte list_sep; // 0x10
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC312F0 Offset: 0xC312F0 VA: 0xC312F0
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 263
{
	// Fields
	public int value__; // 0x0
	public const UnicodeCategory UppercaseLetter = 0;
	public const UnicodeCategory LowercaseLetter = 1;
	public const UnicodeCategory TitlecaseLetter = 2;
	public const UnicodeCategory ModifierLetter = 3;
	public const UnicodeCategory OtherLetter = 4;
	public const UnicodeCategory NonSpacingMark = 5;
	public const UnicodeCategory SpacingCombiningMark = 6;
	public const UnicodeCategory EnclosingMark = 7;
	public const UnicodeCategory DecimalDigitNumber = 8;
	public const UnicodeCategory LetterNumber = 9;
	public const UnicodeCategory OtherNumber = 10;
	public const UnicodeCategory SpaceSeparator = 11;
	public const UnicodeCategory LineSeparator = 12;
	public const UnicodeCategory ParagraphSeparator = 13;
	public const UnicodeCategory Control = 14;
	public const UnicodeCategory Format = 15;
	public const UnicodeCategory Surrogate = 16;
	public const UnicodeCategory PrivateUse = 17;
	public const UnicodeCategory ConnectorPunctuation = 18;
	public const UnicodeCategory DashPunctuation = 19;
	public const UnicodeCategory OpenPunctuation = 20;
	public const UnicodeCategory ClosePunctuation = 21;
	public const UnicodeCategory InitialQuotePunctuation = 22;
	public const UnicodeCategory FinalQuotePunctuation = 23;
	public const UnicodeCategory OtherPunctuation = 24;
	public const UnicodeCategory MathSymbol = 25;
	public const UnicodeCategory CurrencySymbol = 26;
	public const UnicodeCategory ModifierSymbol = 27;
	public const UnicodeCategory OtherSymbol = 28;
	public const UnicodeCategory OtherNotAssigned = 29;
}

// Namespace: System.IO.IsolatedStorage
[ComVisibleAttribute] // RVA: 0xC31304 Offset: 0xC31304 VA: 0xC31304
[Serializable]
public class IsolatedStorageException : Exception // TypeDefIndex: 264
{
	// Methods

	// RVA: 0x272EC68 Offset: 0x272EC68 VA: 0x272EC68
	public void .ctor() { }

	// RVA: 0x272B270 Offset: 0x272B270 VA: 0x272B270
	public void .ctor(string message) { }

	// RVA: 0x272ECC8 Offset: 0x272ECC8 VA: 0x272ECC8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31318 Offset: 0xC31318 VA: 0xC31318
public class BinaryReader : IDisposable // TypeDefIndex: 265
{
	// Fields
	private Stream m_stream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] m_buffer; // 0x20
	private Decoder decoder; // 0x28
	private char[] charBuffer; // 0x30
	private bool m_disposed; // 0x38

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods

	// RVA: 0x118C018 Offset: 0x118C018 VA: 0x118C018
	public void .ctor(Stream input) { }

	// RVA: 0x118C098 Offset: 0x118C098 VA: 0x118C098
	public void .ctor(Stream input, Encoding encoding) { }

	// RVA: 0x118C1DC Offset: 0x118C1DC VA: 0x118C1DC Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x118C1EC Offset: 0x118C1EC VA: 0x118C1EC Slot: 5
	public virtual Stream get_BaseStream() { }

	// RVA: 0x118C1F4 Offset: 0x118C1F4 VA: 0x118C1F4 Slot: 6
	public virtual void Close() { }

	// RVA: 0x118C228 Offset: 0x118C228 VA: 0x118C228 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x118C270 Offset: 0x118C270 VA: 0x118C270 Slot: 8
	protected virtual void FillBuffer(int numBytes) { }

	// RVA: 0x118C47C Offset: 0x118C47C VA: 0x118C47C Slot: 9
	public virtual int Read() { }

	// RVA: 0x118C530 Offset: 0x118C530 VA: 0x118C530 Slot: 10
	public virtual int Read(byte[] buffer, int index, int count) { }

	// RVA: 0x118C6EC Offset: 0x118C6EC VA: 0x118C6EC Slot: 11
	public virtual int Read(char[] buffer, int index, int count) { }

	// RVA: 0x118C8AC Offset: 0x118C8AC VA: 0x118C8AC
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read) { }

	// RVA: 0x118C9F4 Offset: 0x118C9F4 VA: 0x118C9F4
	protected int Read7BitEncodedInt() { }

	// RVA: 0x118CAC8 Offset: 0x118CAC8 VA: 0x118CAC8 Slot: 12
	public virtual bool ReadBoolean() { }

	// RVA: 0x118CAEC Offset: 0x118CAEC VA: 0x118CAEC Slot: 13
	public virtual byte ReadByte() { }

	// RVA: 0x118CBF0 Offset: 0x118CBF0 VA: 0x118CBF0 Slot: 14
	public virtual byte[] ReadBytes(int count) { }

	// RVA: 0x118CD9C Offset: 0x118CD9C VA: 0x118CD9C Slot: 15
	public virtual char ReadChar() { }

	// RVA: 0x118CE2C Offset: 0x118CE2C VA: 0x118CE2C Slot: 16
	public virtual Decimal ReadDecimal() { }

	// RVA: 0x118D048 Offset: 0x118D048 VA: 0x118D048 Slot: 17
	public virtual double ReadDouble() { }

	// RVA: 0x118D080 Offset: 0x118D080 VA: 0x118D080 Slot: 18
	public virtual short ReadInt16() { }

	// RVA: 0x118D118 Offset: 0x118D118 VA: 0x118D118 Slot: 19
	public virtual int ReadInt32() { }

	// RVA: 0x118D218 Offset: 0x118D218 VA: 0x118D218 Slot: 20
	public virtual long ReadInt64() { }

	[CLSCompliantAttribute] // RVA: 0xC38964 Offset: 0xC38964 VA: 0xC38964
	// RVA: 0x118D3F8 Offset: 0x118D3F8 VA: 0x118D3F8 Slot: 21
	public virtual sbyte ReadSByte() { }

	// RVA: 0x118D404 Offset: 0x118D404 VA: 0x118D404 Slot: 22
	public virtual string ReadString() { }

	// RVA: 0x118D648 Offset: 0x118D648 VA: 0x118D648 Slot: 23
	public virtual float ReadSingle() { }

	[CLSCompliantAttribute] // RVA: 0xC38978 Offset: 0xC38978 VA: 0xC38978
	// RVA: 0x118D680 Offset: 0x118D680 VA: 0x118D680 Slot: 24
	public virtual ushort ReadUInt16() { }

	[CLSCompliantAttribute] // RVA: 0xC3898C Offset: 0xC3898C VA: 0xC3898C
	// RVA: 0x118D718 Offset: 0x118D718 VA: 0x118D718 Slot: 25
	public virtual uint ReadUInt32() { }

	[CLSCompliantAttribute] // RVA: 0xC389A0 Offset: 0xC389A0 VA: 0xC389A0
	// RVA: 0x118D818 Offset: 0x118D818 VA: 0x118D818 Slot: 26
	public virtual ulong ReadUInt64() { }

	// RVA: 0x118C3CC Offset: 0x118C3CC VA: 0x118C3CC
	private void CheckBuffer(int length) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC3132C Offset: 0xC3132C VA: 0xC3132C
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 266
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] buffer; // 0x20
	private bool disposed; // 0x28
	private byte[] stringBuffer; // 0x30
	private int maxCharsPerRound; // 0x38

	// Methods

	// RVA: 0x272255C Offset: 0x272255C VA: 0x272255C
	protected void .ctor() { }

	// RVA: 0x2722740 Offset: 0x2722740 VA: 0x2722740
	public void .ctor(Stream output) { }

	// RVA: 0x2722600 Offset: 0x2722600 VA: 0x2722600
	public void .ctor(Stream output, Encoding encoding) { }

	// RVA: 0x27227C0 Offset: 0x27227C0 VA: 0x27227C0
	private static void .cctor() { }

	// RVA: 0x2722820 Offset: 0x2722820 VA: 0x2722820 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2722830 Offset: 0x2722830 VA: 0x2722830 Slot: 5
	public virtual void Close() { }

	// RVA: 0x2722840 Offset: 0x2722840 VA: 0x2722840 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2722880 Offset: 0x2722880 VA: 0x2722880 Slot: 7
	public virtual void Flush() { }

	// RVA: 0x27228B8 Offset: 0x27228B8 VA: 0x27228B8 Slot: 8
	public virtual void Write(bool value) { }

	// RVA: 0x27229BC Offset: 0x27229BC VA: 0x27229BC Slot: 9
	public virtual void Write(byte value) { }

	// RVA: 0x2722A84 Offset: 0x2722A84 VA: 0x2722A84 Slot: 10
	public virtual void Write(byte[] buffer) { }

	// RVA: 0x2722B84 Offset: 0x2722B84 VA: 0x2722B84 Slot: 11
	public virtual void Write(byte[] buffer, int index, int count) { }

	// RVA: 0x2722C94 Offset: 0x2722C94 VA: 0x2722C94 Slot: 12
	public virtual void Write(char ch) { }

	// RVA: 0x2722DE0 Offset: 0x2722DE0 VA: 0x2722DE0 Slot: 13
	public virtual void Write(char[] chars) { }

	// RVA: 0x2722F20 Offset: 0x2722F20 VA: 0x2722F20 Slot: 14
	public virtual void Write(char[] chars, int index, int count) { }

	// RVA: 0x2723070 Offset: 0x2723070 VA: 0x2723070 Slot: 15
	public virtual void Write(Decimal value) { }

	// RVA: 0x2723330 Offset: 0x2723330 VA: 0x2723330 Slot: 16
	public virtual void Write(double value) { }

	// RVA: 0x2723410 Offset: 0x2723410 VA: 0x2723410 Slot: 17
	public virtual void Write(short value) { }

	// RVA: 0x2723544 Offset: 0x2723544 VA: 0x2723544 Slot: 18
	public virtual void Write(int value) { }

	// RVA: 0x27236E0 Offset: 0x27236E0 VA: 0x27236E0 Slot: 19
	public virtual void Write(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC389B4 Offset: 0xC389B4 VA: 0xC389B4
	// RVA: 0x272380C Offset: 0x272380C VA: 0x272380C Slot: 20
	public virtual void Write(sbyte value) { }

	// RVA: 0x272390C Offset: 0x272390C VA: 0x272390C Slot: 21
	public virtual void Write(float value) { }

	// RVA: 0x27239EC Offset: 0x27239EC VA: 0x27239EC Slot: 22
	public virtual void Write(string value) { }

	[CLSCompliantAttribute] // RVA: 0xC389C8 Offset: 0xC389C8 VA: 0xC389C8
	// RVA: 0x2723C48 Offset: 0x2723C48 VA: 0x2723C48 Slot: 23
	public virtual void Write(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xC389DC Offset: 0xC389DC VA: 0xC389DC
	// RVA: 0x2723D7C Offset: 0x2723D7C VA: 0x2723D7C Slot: 24
	public virtual void Write(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC389F0 Offset: 0xC389F0 VA: 0xC389F0
	// RVA: 0x2723F18 Offset: 0x2723F18 VA: 0x2723F18 Slot: 25
	public virtual void Write(ulong value) { }

	// RVA: 0x2723C00 Offset: 0x2723C00 VA: 0x2723C00
	protected void Write7BitEncodedInt(int value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31340 Offset: 0xC31340 VA: 0xC31340
public static class Directory // TypeDefIndex: 267
{
	// Methods

	// RVA: 0x2724044 Offset: 0x2724044 VA: 0x2724044
	public static DirectoryInfo CreateDirectory(string path) { }

	// RVA: 0x2724378 Offset: 0x2724378 VA: 0x2724378
	private static DirectoryInfo CreateDirectoriesInternal(string path) { }

	// RVA: 0x2724E74 Offset: 0x2724E74 VA: 0x2724E74
	public static void Delete(string path) { }

	// RVA: 0x2725208 Offset: 0x2725208 VA: 0x2725208
	private static void RecursiveDelete(string path) { }

	// RVA: 0x2725738 Offset: 0x2725738 VA: 0x2725738
	public static void Delete(string path, bool recursive) { }

	// RVA: 0x27258D4 Offset: 0x27258D4 VA: 0x27258D4
	public static bool Exists(string path) { }

	// RVA: 0x2725A24 Offset: 0x2725A24 VA: 0x2725A24
	public static string GetCurrentDirectory() { }

	// RVA: 0x2725370 Offset: 0x2725370 VA: 0x2725370
	public static string[] GetDirectories(string path) { }

	// RVA: 0x2725BF8 Offset: 0x2725BF8 VA: 0x2725BF8
	public static string[] GetDirectories(string path, string searchPattern) { }

	// RVA: 0x27253C8 Offset: 0x27253C8 VA: 0x27253C8
	public static string[] GetFiles(string path) { }

	// RVA: 0x2726138 Offset: 0x2726138 VA: 0x2726138
	public static string[] GetFiles(string path, string searchPattern) { }

	// RVA: 0x2726144 Offset: 0x2726144 VA: 0x2726144
	public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption) { }

	// RVA: 0x27262C4 Offset: 0x27262C4 VA: 0x27262C4
	private static void GetFilesRecurse(string path, string searchPattern, ArrayList all) { }

	// RVA: 0x272638C Offset: 0x272638C VA: 0x272638C
	private static bool IsRootDirectory(string path) { }

	// RVA: 0x27264BC Offset: 0x27264BC VA: 0x27264BC
	public static DirectoryInfo GetParent(string path) { }

	// RVA: 0x2725770 Offset: 0x2725770 VA: 0x2725770
	private static void CheckPathExceptions(string path) { }

	// RVA: 0x2725C04 Offset: 0x2725C04 VA: 0x2725C04
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31354 Offset: 0xC31354 VA: 0xC31354
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 268
{
	// Fields
	private string current; // 0x60
	private string parent; // 0x68

	// Properties
	public override bool Exists { get; }
	public override string Name { get; }
	public DirectoryInfo Parent { get; }

	// Methods

	// RVA: 0x27269E8 Offset: 0x27269E8 VA: 0x27269E8
	public void .ctor(string path) { }

	// RVA: 0x27244D8 Offset: 0x27244D8 VA: 0x27244D8
	internal void .ctor(string path, bool simpleOriginalPath) { }

	// RVA: 0x2727380 Offset: 0x2727380 VA: 0x2727380
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2727060 Offset: 0x2727060 VA: 0x2727060
	private void Initialize() { }

	// RVA: 0x2724624 Offset: 0x2724624 VA: 0x2724624 Slot: 8
	public override bool get_Exists() { }

	// RVA: 0x272753C Offset: 0x272753C VA: 0x272753C Slot: 9
	public override string get_Name() { }

	// RVA: 0x27245A0 Offset: 0x27245A0 VA: 0x27245A0
	public DirectoryInfo get_Parent() { }

	// RVA: 0x27246C0 Offset: 0x27246C0 VA: 0x27246C0
	public void Create() { }

	// RVA: 0x2727544 Offset: 0x2727544 VA: 0x2727544
	public FileInfo[] GetFiles() { }

	// RVA: 0x2727594 Offset: 0x2727594 VA: 0x2727594
	public FileInfo[] GetFiles(string searchPattern) { }

	// RVA: 0x272780C Offset: 0x272780C VA: 0x272780C Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31368 Offset: 0xC31368 VA: 0xC31368
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 269
{
	// Methods

	// RVA: 0x2727814 Offset: 0x2727814 VA: 0x2727814
	public void .ctor() { }

	// RVA: 0x2725200 Offset: 0x2725200 VA: 0x2725200
	public void .ctor(string message) { }

	// RVA: 0x2727868 Offset: 0x2727868 VA: 0x2727868
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC3137C Offset: 0xC3137C VA: 0xC3137C
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 270
{
	// Methods

	// RVA: 0x2727878 Offset: 0x2727878 VA: 0x2727878
	public void .ctor() { }

	// RVA: 0x27278D8 Offset: 0x27278D8 VA: 0x27278D8
	public void .ctor(string message) { }

	// RVA: 0x27278E0 Offset: 0x27278E0 VA: 0x27278E0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31390 Offset: 0xC31390 VA: 0xC31390
public static class File // TypeDefIndex: 271
{
	// Fields
	private static Nullable<DateTime> defaultLocalFileTime; // 0x0

	// Properties
	private static DateTime DefaultLocalFileTime { get; }

	// Methods

	// RVA: 0x27278E8 Offset: 0x27278E8 VA: 0x27278E8
	public static void Copy(string sourceFileName, string destFileName) { }

	// RVA: 0x27278F0 Offset: 0x27278F0 VA: 0x27278F0
	public static void Copy(string sourceFileName, string destFileName, bool overwrite) { }

	// RVA: 0x2728208 Offset: 0x2728208 VA: 0x2728208
	public static FileStream Create(string path) { }

	// RVA: 0x2728210 Offset: 0x2728210 VA: 0x2728210
	public static FileStream Create(string path, int bufferSize) { }

	// RVA: 0x2725420 Offset: 0x2725420 VA: 0x2725420
	public static void Delete(string path) { }

	// RVA: 0x2724284 Offset: 0x2724284 VA: 0x2724284
	public static bool Exists(string path) { }

	// RVA: 0x2728048 Offset: 0x2728048 VA: 0x2728048
	public static FileAttributes GetAttributes(string path) { }

	// RVA: 0x27282C4 Offset: 0x27282C4 VA: 0x27282C4
	public static DateTime GetLastWriteTime(string path) { }

	// RVA: 0x2728640 Offset: 0x2728640 VA: 0x2728640
	public static void Move(string sourceFileName, string destFileName) { }

	// RVA: 0x2728A98 Offset: 0x2728A98 VA: 0x2728A98
	public static FileStream Open(string path, FileMode mode) { }

	// RVA: 0x2728B58 Offset: 0x2728B58 VA: 0x2728B58
	public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x2728BF4 Offset: 0x2728BF4 VA: 0x2728BF4
	public static FileStream OpenRead(string path) { }

	// RVA: 0x2728C74 Offset: 0x2728C74 VA: 0x2728C74
	public static StreamReader OpenText(string path) { }

	// RVA: 0x2728D5C Offset: 0x2728D5C VA: 0x2728D5C
	public static FileStream OpenWrite(string path) { }

	// RVA: 0x27283DC Offset: 0x27283DC VA: 0x27283DC
	private static void CheckPathExceptions(string path) { }

	// RVA: 0x2728DDC Offset: 0x2728DDC VA: 0x2728DDC
	public static byte[] ReadAllBytes(string path) { }

	// RVA: 0x2729040 Offset: 0x2729040 VA: 0x2729040
	public static string[] ReadAllLines(string path) { }

	// RVA: 0x2729188 Offset: 0x2729188 VA: 0x2729188
	private static string[] ReadAllLines(StreamReader reader) { }

	// RVA: 0x272928C Offset: 0x272928C VA: 0x272928C
	public static string ReadAllText(string path) { }

	// RVA: 0x27292FC Offset: 0x27292FC VA: 0x27292FC
	public static string ReadAllText(string path, Encoding encoding) { }

	// RVA: 0x272947C Offset: 0x272947C VA: 0x272947C
	public static void WriteAllBytes(string path, byte[] bytes) { }

	// RVA: 0x27295CC Offset: 0x27295CC VA: 0x27295CC
	public static void WriteAllLines(string path, string[] contents) { }

	// RVA: 0x2729788 Offset: 0x2729788 VA: 0x2729788
	private static void WriteAllLines(StreamWriter writer, string[] contents) { }

	// RVA: 0x272981C Offset: 0x272981C VA: 0x272981C
	public static void WriteAllText(string path, string contents) { }

	// RVA: 0x272989C Offset: 0x272989C VA: 0x272989C
	public static void WriteAllText(string path, string contents, Encoding encoding) { }

	// RVA: 0x2728538 Offset: 0x2728538 VA: 0x2728538
	private static DateTime get_DefaultLocalFileTime() { }
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0xC313A4 Offset: 0xC313A4 VA: 0xC313A4
[ComVisibleAttribute] // RVA: 0xC313A4 Offset: 0xC313A4 VA: 0xC313A4
[Serializable]
public enum FileAccess // TypeDefIndex: 272
{
	// Fields
	public int value__; // 0x0
	public const FileAccess Read = 1;
	public const FileAccess Write = 2;
	public const FileAccess ReadWrite = 3;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC313E0 Offset: 0xC313E0 VA: 0xC313E0
[FlagsAttribute] // RVA: 0xC313E0 Offset: 0xC313E0 VA: 0xC313E0
[Serializable]
public enum FileAttributes // TypeDefIndex: 273
{
	// Fields
	public int value__; // 0x0
	public const FileAttributes Archive = 32;
	public const FileAttributes Compressed = 2048;
	public const FileAttributes Device = 64;
	public const FileAttributes Directory = 16;
	public const FileAttributes Encrypted = 16384;
	public const FileAttributes Hidden = 2;
	public const FileAttributes Normal = 128;
	public const FileAttributes NotContentIndexed = 8192;
	public const FileAttributes Offline = 4096;
	public const FileAttributes ReadOnly = 1;
	public const FileAttributes ReparsePoint = 1024;
	public const FileAttributes SparseFile = 512;
	public const FileAttributes System = 4;
	public const FileAttributes Temporary = 256;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC3141C Offset: 0xC3141C VA: 0xC3141C
[Serializable]
public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 274
{
	// Fields
	private bool exists; // 0x59

	// Properties
	public override bool Exists { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x272772C Offset: 0x272772C VA: 0x272772C
	public void .ctor(string fileName) { }

	// RVA: 0x27299FC Offset: 0x27299FC VA: 0x27299FC
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2729A00 Offset: 0x2729A00 VA: 0x2729A00 Slot: 11
	internal override void InternalRefresh() { }

	// RVA: 0x2729A2C Offset: 0x2729A2C VA: 0x2729A2C Slot: 8
	public override bool get_Exists() { }

	// RVA: 0x2729AD4 Offset: 0x2729AD4 VA: 0x2729AD4 Slot: 9
	public override string get_Name() { }

	// RVA: 0x2729B3C Offset: 0x2729B3C VA: 0x2729B3C Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31430 Offset: 0xC31430 VA: 0xC31430
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 275
{
	// Fields
	private const int Result = -2147024894;
	private string msg; // 0x60
	private string fileName; // 0x68
	private string fusionLog; // 0x70

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x2729B40 Offset: 0x2729B40 VA: 0x2729B40
	public void .ctor() { }

	// RVA: 0x2729BC8 Offset: 0x2729BC8 VA: 0x2729BC8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2729CDC Offset: 0x2729CDC VA: 0x2729CDC Slot: 6
	public override string get_Message() { }

	// RVA: 0x2729CE4 Offset: 0x2729CE4 VA: 0x2729CE4 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2729DAC Offset: 0x2729DAC VA: 0x2729DAC Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31444 Offset: 0xC31444 VA: 0xC31444
[Serializable]
public enum FileMode // TypeDefIndex: 276
{
	// Fields
	public int value__; // 0x0
	public const FileMode CreateNew = 1;
	public const FileMode Create = 2;
	public const FileMode Open = 3;
	public const FileMode OpenOrCreate = 4;
	public const FileMode Truncate = 5;
	public const FileMode Append = 6;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31458 Offset: 0xC31458 VA: 0xC31458
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 277
{
	// Fields
	private string fileName; // 0x60
	private string fusionLog; // 0x68

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x2729F6C Offset: 0x2729F6C VA: 0x2729F6C
	public void .ctor() { }

	// RVA: 0x2729FE0 Offset: 0x2729FE0 VA: 0x2729FE0
	public void .ctor(string message) { }

	// RVA: 0x2728008 Offset: 0x2728008 VA: 0x2728008
