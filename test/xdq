[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 258
{
	// Fields
	private bool isReadOnly; // 0x10
	private string decimalFormats; // 0x18
	private string currencyFormats; // 0x20
	private string percentFormats; // 0x28
	private string digitPattern; // 0x30
	private string zeroPattern; // 0x38
	private int currencyDecimalDigits; // 0x40
	private string currencyDecimalSeparator; // 0x48
	private string currencyGroupSeparator; // 0x50
	private int[] currencyGroupSizes; // 0x58
	private int currencyNegativePattern; // 0x60
	private int currencyPositivePattern; // 0x64
	private string currencySymbol; // 0x68
	private string nanSymbol; // 0x70
	private string negativeInfinitySymbol; // 0x78
	private string negativeSign; // 0x80
	private int numberDecimalDigits; // 0x88
	private string numberDecimalSeparator; // 0x90
	private string numberGroupSeparator; // 0x98
	private int[] numberGroupSizes; // 0xA0
	private int numberNegativePattern; // 0xA8
	private int percentDecimalDigits; // 0xAC
	private string percentDecimalSeparator; // 0xB0
	private string percentGroupSeparator; // 0xB8
	private int[] percentGroupSizes; // 0xC0
	private int percentNegativePattern; // 0xC8
	private int percentPositivePattern; // 0xCC
	private string percentSymbol; // 0xD0
	private string perMilleSymbol; // 0xD8
	private string positiveInfinitySymbol; // 0xE0
	private string positiveSign; // 0xE8
	private string ansiCurrencySymbol; // 0xF0
	private int m_dataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool validForParseAsNumber; // 0xFD
	private bool validForParseAsCurrency; // 0xFE
	private string[] nativeDigits; // 0x100
	private int digitSubstitution; // 0x108
	private static readonly string[] invariantNativeDigits; // 0x0

	// Properties
	public int CurrencyDecimalDigits { get; }
	public string CurrencyDecimalSeparator { get; }
	public string CurrencyGroupSeparator { get; }
	internal int[] RawCurrencyGroupSizes { get; }
	public int CurrencyNegativePattern { get; }
	public int CurrencyPositivePattern { get; }
	public string CurrencySymbol { get; }
	public static NumberFormatInfo CurrentInfo { get; }
	public static NumberFormatInfo InvariantInfo { get; }
	public string NaNSymbol { get; }
	public string NegativeInfinitySymbol { get; }
	public string NegativeSign { get; }
	public int NumberDecimalDigits { get; }
	public string NumberDecimalSeparator { get; }
	public string NumberGroupSeparator { get; }
	internal int[] RawNumberGroupSizes { get; }
	public int NumberNegativePattern { get; set; }
	public int PercentDecimalDigits { get; }
	public string PercentDecimalSeparator { get; }
	public string PercentGroupSeparator { get; }
	internal int[] RawPercentGroupSizes { get; }
	public int PercentNegativePattern { get; }
	public int PercentPositivePattern { get; }
	public string PercentSymbol { get; }
	public string PerMilleSymbol { get; }
	public string PositiveInfinitySymbol { get; }
	public string PositiveSign { get; }

	// Methods

	// RVA: 0x23BD044 Offset: 0x23BD044 VA: 0x23BD044
	internal void .ctor(int lcid, bool read_only) { }

	// RVA: 0x23B90F0 Offset: 0x23B90F0 VA: 0x23B90F0
	internal void .ctor(bool read_only) { }

	// RVA: 0x23BD290 Offset: 0x23BD290 VA: 0x23BD290
	public void .ctor() { }

	// RVA: 0x23BD29C Offset: 0x23BD29C VA: 0x23BD29C
	private static void .cctor() { }

	// RVA: 0x23BD650 Offset: 0x23BD650 VA: 0x23BD650
	public int get_CurrencyDecimalDigits() { }

	// RVA: 0x23A87A0 Offset: 0x23A87A0 VA: 0x23A87A0
	public string get_CurrencyDecimalSeparator() { }

	// RVA: 0x23A87B0 Offset: 0x23A87B0 VA: 0x23A87B0
	public string get_CurrencyGroupSeparator() { }

	// RVA: 0x23BD658 Offset: 0x23BD658 VA: 0x23BD658
	internal int[] get_RawCurrencyGroupSizes() { }

	// RVA: 0x23BD660 Offset: 0x23BD660 VA: 0x23BD660
	public int get_CurrencyNegativePattern() { }

	// RVA: 0x23BD668 Offset: 0x23BD668 VA: 0x23BD668
	public int get_CurrencyPositivePattern() { }

	// RVA: 0x23A8798 Offset: 0x23A8798 VA: 0x23A8798
	public string get_CurrencySymbol() { }

	// RVA: 0x23BD670 Offset: 0x23BD670 VA: 0x23BD670
	public static NumberFormatInfo get_CurrentInfo() { }

	// RVA: 0x23B98CC Offset: 0x23B98CC VA: 0x23B98CC
	public static NumberFormatInfo get_InvariantInfo() { }

	// RVA: 0x23AEBB4 Offset: 0x23AEBB4 VA: 0x23AEBB4
	public string get_NaNSymbol() { }

	// RVA: 0x23AECB8 Offset: 0x23AECB8 VA: 0x23AECB8
	public string get_NegativeInfinitySymbol() { }

	// RVA: 0x23A87C0 Offset: 0x23A87C0 VA: 0x23A87C0
	public string get_NegativeSign() { }

	// RVA: 0x23BD7F0 Offset: 0x23BD7F0 VA: 0x23BD7F0
	public int get_NumberDecimalDigits() { }

	// RVA: 0x23A87A8 Offset: 0x23A87A8 VA: 0x23A87A8
	public string get_NumberDecimalSeparator() { }

	// RVA: 0x23A87B8 Offset: 0x23A87B8 VA: 0x23A87B8
	public string get_NumberGroupSeparator() { }

	// RVA: 0x23BD7F8 Offset: 0x23BD7F8 VA: 0x23BD7F8
	internal int[] get_RawNumberGroupSizes() { }

	// RVA: 0x23BD800 Offset: 0x23BD800 VA: 0x23BD800
	public int get_NumberNegativePattern() { }

	// RVA: 0x23BD720 Offset: 0x23BD720 VA: 0x23BD720
	public void set_NumberNegativePattern(int value) { }

	// RVA: 0x23BD808 Offset: 0x23BD808 VA: 0x23BD808
	public int get_PercentDecimalDigits() { }

	// RVA: 0x23BD810 Offset: 0x23BD810 VA: 0x23BD810
	public string get_PercentDecimalSeparator() { }

	// RVA: 0x23BD818 Offset: 0x23BD818 VA: 0x23BD818
	public string get_PercentGroupSeparator() { }

	// RVA: 0x23BD820 Offset: 0x23BD820 VA: 0x23BD820
	internal int[] get_RawPercentGroupSizes() { }

	// RVA: 0x23BD828 Offset: 0x23BD828 VA: 0x23BD828
	public int get_PercentNegativePattern() { }

	// RVA: 0x23BD830 Offset: 0x23BD830 VA: 0x23BD830
	public int get_PercentPositivePattern() { }

	// RVA: 0x23BD838 Offset: 0x23BD838 VA: 0x23BD838
	public string get_PercentSymbol() { }

	// RVA: 0x23BD840 Offset: 0x23BD840 VA: 0x23BD840
	public string get_PerMilleSymbol() { }

	// RVA: 0x23AECB0 Offset: 0x23AECB0 VA: 0x23AECB0
	public string get_PositiveInfinitySymbol() { }

	// RVA: 0x23A87C8 Offset: 0x23A87C8 VA: 0x23A87C8
	public string get_PositiveSign() { }

	// RVA: 0x23BD848 Offset: 0x23BD848 VA: 0x23BD848 Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x23B8928 Offset: 0x23B8928 VA: 0x23B8928 Slot: 4
	public object Clone() { }

	// RVA: 0x23A8D24 Offset: 0x23A8D24 VA: 0x23A8D24
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5128 Offset: 0xBC5128 VA: 0xBC5128
[FlagsAttribute] // RVA: 0xBC5128 Offset: 0xBC5128 VA: 0xBC5128
[Serializable]
public enum NumberStyles // TypeDefIndex: 259
{
	// Fields
	public int value__; // 0x0
	public const NumberStyles None = 0;
	public const NumberStyles AllowLeadingWhite = 1;
	public const NumberStyles AllowTrailingWhite = 2;
	public const NumberStyles AllowLeadingSign = 4;
	public const NumberStyles AllowTrailingSign = 8;
	public const NumberStyles AllowParentheses = 16;
	public const NumberStyles AllowDecimalPoint = 32;
	public const NumberStyles AllowThousands = 64;
	public const NumberStyles AllowExponent = 128;
	public const NumberStyles AllowCurrencySymbol = 256;
	public const NumberStyles AllowHexSpecifier = 512;
	public const NumberStyles Integer = 7;
	public const NumberStyles HexNumber = 515;
	public const NumberStyles Number = 111;
	public const NumberStyles Float = 167;
	public const NumberStyles Currency = 383;
	public const NumberStyles Any = 511;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5164 Offset: 0xBC5164 VA: 0xBC5164
[Serializable]
public class RegionInfo // TypeDefIndex: 260
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private int lcid; // 0x10
	private int regionId; // 0x14
	private string iso2Name; // 0x18
	private string iso3Name; // 0x20
	private string win3Name; // 0x28
	private string englishName; // 0x30
	private string currencySymbol; // 0x38
	private string isoCurrencySymbol; // 0x40
	private string currencyEnglishName; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xBCB534 Offset: 0xBCB534 VA: 0xBCB534
	private static Dictionary<string, int> <>f__switch$map1B; // 0x8

	// Properties
	public static RegionInfo CurrentRegion { get; }
	[ComVisibleAttribute] // RVA: 0xBCF068 Offset: 0xBCF068 VA: 0xBCF068
	public virtual string CurrencyEnglishName { get; }
	public virtual string CurrencySymbol { get; }
	[MonoTODOAttribute] // RVA: 0xBCF07C Offset: 0xBCF07C VA: 0xBCF07C
	public virtual string DisplayName { get; }
	public virtual string EnglishName { get; }
	[ComVisibleAttribute] // RVA: 0xBCF0B4 Offset: 0xBCF0B4 VA: 0xBCF0B4
	public virtual int GeoId { get; }
	public virtual bool IsMetric { get; }
	public virtual string ISOCurrencySymbol { get; }
	[ComVisibleAttribute] // RVA: 0xBCF0C8 Offset: 0xBCF0C8 VA: 0xBCF0C8
	public virtual string NativeName { get; }
	[MonoTODOAttribute] // RVA: 0xBCF0DC Offset: 0xBCF0DC VA: 0xBCF0DC
	[ComVisibleAttribute] // RVA: 0xBCF0DC Offset: 0xBCF0DC VA: 0xBCF0DC
	public virtual string CurrencyNativeName { get; }
	public virtual string Name { get; }
	public virtual string ThreeLetterISORegionName { get; }
	public virtual string ThreeLetterWindowsRegionName { get; }
	public virtual string TwoLetterISORegionName { get; }

	// Methods

	// RVA: 0x23BD8D4 Offset: 0x23BD8D4 VA: 0x23BD8D4
	public void .ctor(int culture) { }

	// RVA: 0x23BDB04 Offset: 0x23BDB04 VA: 0x23BDB04
	public void .ctor(string name) { }

	// RVA: 0x23BDC80 Offset: 0x23BDC80 VA: 0x23BDC80
	public static RegionInfo get_CurrentRegion() { }

	// RVA: 0x23BDA0C Offset: 0x23BDA0C VA: 0x23BDA0C
	private bool GetByTerritory(CultureInfo ci) { }

	// RVA: 0x23BDC7C Offset: 0x23BDC7C VA: 0x23BDC7C
	private bool construct_internal_region_from_name(string name) { }

	// RVA: 0x23BDD88 Offset: 0x23BDD88 VA: 0x23BDD88 Slot: 4
	public virtual string get_CurrencyEnglishName() { }

	// RVA: 0x23BDD90 Offset: 0x23BDD90 VA: 0x23BDD90 Slot: 5
	public virtual string get_CurrencySymbol() { }

	// RVA: 0x23BDD98 Offset: 0x23BDD98 VA: 0x23BDD98 Slot: 6
	public virtual string get_DisplayName() { }

	// RVA: 0x23BDDA0 Offset: 0x23BDDA0 VA: 0x23BDDA0 Slot: 7
	public virtual string get_EnglishName() { }

	// RVA: 0x23BDDA8 Offset: 0x23BDDA8 VA: 0x23BDDA8 Slot: 8
	public virtual int get_GeoId() { }

	// RVA: 0x23BDDB0 Offset: 0x23BDDB0 VA: 0x23BDDB0 Slot: 9
	public virtual bool get_IsMetric() { }

	// RVA: 0x23BDF18 Offset: 0x23BDF18 VA: 0x23BDF18 Slot: 10
	public virtual string get_ISOCurrencySymbol() { }

	// RVA: 0x23BDF20 Offset: 0x23BDF20 VA: 0x23BDF20 Slot: 11
	public virtual string get_NativeName() { }

	// RVA: 0x23BDF2C Offset: 0x23BDF2C VA: 0x23BDF2C Slot: 12
	public virtual string get_CurrencyNativeName() { }

	// RVA: 0x23BDF94 Offset: 0x23BDF94 VA: 0x23BDF94 Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x23BDF9C Offset: 0x23BDF9C VA: 0x23BDF9C Slot: 14
	public virtual string get_ThreeLetterISORegionName() { }

	// RVA: 0x23BDFA4 Offset: 0x23BDFA4 VA: 0x23BDFA4 Slot: 15
	public virtual string get_ThreeLetterWindowsRegionName() { }

	// RVA: 0x23BDFAC Offset: 0x23BDFAC VA: 0x23BDFAC Slot: 16
	public virtual string get_TwoLetterISORegionName() { }

	// RVA: 0x23BDFB4 Offset: 0x23BDFB4 VA: 0x23BDFB4 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x23BE050 Offset: 0x23BE050 VA: 0x23BE050 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23BE064 Offset: 0x23BE064 VA: 0x23BE064 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5178 Offset: 0xBC5178 VA: 0xBC5178
[MonoTODOAttribute] // RVA: 0xBC5178 Offset: 0xBC5178 VA: 0xBC5178
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 261
{
	// Fields
	private string m_listSeparator; // 0x10
	private bool m_isReadOnly; // 0x18
	private string customCultureName; // 0x20
	private int m_nDataItem; // 0x28
	private bool m_useUserOverride; // 0x2C
	private int m_win32LangID; // 0x30
	private readonly CultureInfo ci; // 0x38
	private readonly bool handleDotI; // 0x40
	private readonly TextInfo.Data data; // 0x44

	// Properties
	public virtual string ListSeparator { get; }
	[ComVisibleAttribute] // RVA: 0xBCF12C Offset: 0xBCF12C VA: 0xBCF12C
	public string CultureName { get; }

	// Methods

	// RVA: 0x23B9A4C Offset: 0x23B9A4C VA: 0x23B9A4C
	internal void .ctor(CultureInfo ci, int lcid, void* data, bool read_only) { }

	// RVA: 0x23BE754 Offset: 0x23BE754 VA: 0x23BE754
	private void .ctor(TextInfo textInfo) { }

	[MonoTODOAttribute] // RVA: 0xBCC818 Offset: 0xBCC818 VA: 0xBCC818
	// RVA: 0x23BE8B4 Offset: 0x23BE8B4 VA: 0x23BE8B4 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x23BE8B8 Offset: 0x23BE8B8 VA: 0x23BE8B8 Slot: 6
	public virtual string get_ListSeparator() { }

	// RVA: 0x23BE86C Offset: 0x23BE86C VA: 0x23BE86C
	public string get_CultureName() { }

	// RVA: 0x23BE8F8 Offset: 0x23BE8F8 VA: 0x23BE8F8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x23BE9B4 Offset: 0x23BE9B4 VA: 0x23BE9B4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23BE9BC Offset: 0x23BE9BC VA: 0x23BE9BC Slot: 3
	public override string ToString() { }

	// RVA: 0x23BEA60 Offset: 0x23BEA60 VA: 0x23BEA60 Slot: 7
	public virtual char ToLower(char c) { }

	// RVA: 0x23BEC00 Offset: 0x23BEC00 VA: 0x23BEC00 Slot: 8
	public virtual char ToUpper(char c) { }

	// RVA: 0x23BEDE4 Offset: 0x23BEDE4 VA: 0x23BEDE4 Slot: 9
	public virtual string ToLower(string str) { }

	// RVA: 0x23BEF70 Offset: 0x23BEF70 VA: 0x23BEF70 Slot: 10
	public virtual string ToUpper(string str) { }

	[ComVisibleAttribute] // RVA: 0xBCC828 Offset: 0xBCC828 VA: 0xBCC828
	// RVA: 0x23BF0FC Offset: 0x23BF0FC VA: 0x23BF0FC Slot: 11
	public virtual object Clone() { }
}

// Namespace: 
private struct TextInfo.Data // TypeDefIndex: 262
{
	// Fields
	public int ansi; // 0x0
	public int ebcdic; // 0x4
	public int mac; // 0x8
	public int oem; // 0xC
	public byte list_sep; // 0x10
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC51C8 Offset: 0xBC51C8 VA: 0xBC51C8
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 263
{
	// Fields
	public int value__; // 0x0
	public const UnicodeCategory UppercaseLetter = 0;
	public const UnicodeCategory LowercaseLetter = 1;
	public const UnicodeCategory TitlecaseLetter = 2;
	public const UnicodeCategory ModifierLetter = 3;
	public const UnicodeCategory OtherLetter = 4;
	public const UnicodeCategory NonSpacingMark = 5;
	public const UnicodeCategory SpacingCombiningMark = 6;
	public const UnicodeCategory EnclosingMark = 7;
	public const UnicodeCategory DecimalDigitNumber = 8;
	public const UnicodeCategory LetterNumber = 9;
	public const UnicodeCategory OtherNumber = 10;
	public const UnicodeCategory SpaceSeparator = 11;
	public const UnicodeCategory LineSeparator = 12;
	public const UnicodeCategory ParagraphSeparator = 13;
	public const UnicodeCategory Control = 14;
	public const UnicodeCategory Format = 15;
	public const UnicodeCategory Surrogate = 16;
	public const UnicodeCategory PrivateUse = 17;
	public const UnicodeCategory ConnectorPunctuation = 18;
	public const UnicodeCategory DashPunctuation = 19;
	public const UnicodeCategory OpenPunctuation = 20;
	public const UnicodeCategory ClosePunctuation = 21;
	public const UnicodeCategory InitialQuotePunctuation = 22;
	public const UnicodeCategory FinalQuotePunctuation = 23;
	public const UnicodeCategory OtherPunctuation = 24;
	public const UnicodeCategory MathSymbol = 25;
	public const UnicodeCategory CurrencySymbol = 26;
	public const UnicodeCategory ModifierSymbol = 27;
	public const UnicodeCategory OtherSymbol = 28;
	public const UnicodeCategory OtherNotAssigned = 29;
}

// Namespace: System.IO.IsolatedStorage
[ComVisibleAttribute] // RVA: 0xBC51DC Offset: 0xBC51DC VA: 0xBC51DC
[Serializable]
public class IsolatedStorageException : Exception // TypeDefIndex: 264
{
	// Methods

	// RVA: 0x26434AC Offset: 0x26434AC VA: 0x26434AC
	public void .ctor() { }

	// RVA: 0x263FAB4 Offset: 0x263FAB4 VA: 0x263FAB4
	public void .ctor(string message) { }

	// RVA: 0x264350C Offset: 0x264350C VA: 0x264350C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC51F0 Offset: 0xBC51F0 VA: 0xBC51F0
public class BinaryReader : IDisposable // TypeDefIndex: 265
{
	// Fields
	private Stream m_stream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] m_buffer; // 0x20
	private Decoder decoder; // 0x28
	private char[] charBuffer; // 0x30
	private bool m_disposed; // 0x38

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods

	// RVA: 0x23C1370 Offset: 0x23C1370 VA: 0x23C1370
	public void .ctor(Stream input) { }

	// RVA: 0x23C13F0 Offset: 0x23C13F0 VA: 0x23C13F0
	public void .ctor(Stream input, Encoding encoding) { }

	// RVA: 0x23C1534 Offset: 0x23C1534 VA: 0x23C1534 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x23C1544 Offset: 0x23C1544 VA: 0x23C1544 Slot: 5
	public virtual Stream get_BaseStream() { }

	// RVA: 0x23C154C Offset: 0x23C154C VA: 0x23C154C Slot: 6
	public virtual void Close() { }

	// RVA: 0x23C1580 Offset: 0x23C1580 VA: 0x23C1580 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x23C15C8 Offset: 0x23C15C8 VA: 0x23C15C8 Slot: 8
	protected virtual void FillBuffer(int numBytes) { }

	// RVA: 0x23C17D4 Offset: 0x23C17D4 VA: 0x23C17D4 Slot: 9
	public virtual int Read() { }

	// RVA: 0x23C1888 Offset: 0x23C1888 VA: 0x23C1888 Slot: 10
	public virtual int Read(byte[] buffer, int index, int count) { }

	// RVA: 0x23C1A44 Offset: 0x23C1A44 VA: 0x23C1A44 Slot: 11
	public virtual int Read(char[] buffer, int index, int count) { }

	// RVA: 0x23C1C04 Offset: 0x23C1C04 VA: 0x23C1C04
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read) { }

	// RVA: 0x23C1D4C Offset: 0x23C1D4C VA: 0x23C1D4C
	protected int Read7BitEncodedInt() { }

	// RVA: 0x23C1E20 Offset: 0x23C1E20 VA: 0x23C1E20 Slot: 12
	public virtual bool ReadBoolean() { }

	// RVA: 0x23C1E44 Offset: 0x23C1E44 VA: 0x23C1E44 Slot: 13
	public virtual byte ReadByte() { }

	// RVA: 0x23C1F48 Offset: 0x23C1F48 VA: 0x23C1F48 Slot: 14
	public virtual byte[] ReadBytes(int count) { }

	// RVA: 0x23C20F4 Offset: 0x23C20F4 VA: 0x23C20F4 Slot: 15
	public virtual char ReadChar() { }

	// RVA: 0x23C2184 Offset: 0x23C2184 VA: 0x23C2184 Slot: 16
	public virtual Decimal ReadDecimal() { }

	// RVA: 0x23C23A0 Offset: 0x23C23A0 VA: 0x23C23A0 Slot: 17
	public virtual double ReadDouble() { }

	// RVA: 0x23C23D8 Offset: 0x23C23D8 VA: 0x23C23D8 Slot: 18
	public virtual short ReadInt16() { }

	// RVA: 0x23C2470 Offset: 0x23C2470 VA: 0x23C2470 Slot: 19
	public virtual int ReadInt32() { }

	// RVA: 0x23C2570 Offset: 0x23C2570 VA: 0x23C2570 Slot: 20
	public virtual long ReadInt64() { }

	[CLSCompliantAttribute] // RVA: 0xBCC83C Offset: 0xBCC83C VA: 0xBCC83C
	// RVA: 0x23C2750 Offset: 0x23C2750 VA: 0x23C2750 Slot: 21
	public virtual sbyte ReadSByte() { }

	// RVA: 0x23C275C Offset: 0x23C275C VA: 0x23C275C Slot: 22
	public virtual string ReadString() { }

	// RVA: 0x23C29A0 Offset: 0x23C29A0 VA: 0x23C29A0 Slot: 23
	public virtual float ReadSingle() { }

	[CLSCompliantAttribute] // RVA: 0xBCC850 Offset: 0xBCC850 VA: 0xBCC850
	// RVA: 0x23C29D8 Offset: 0x23C29D8 VA: 0x23C29D8 Slot: 24
	public virtual ushort ReadUInt16() { }

	[CLSCompliantAttribute] // RVA: 0xBCC864 Offset: 0xBCC864 VA: 0xBCC864
	// RVA: 0x23C2A70 Offset: 0x23C2A70 VA: 0x23C2A70 Slot: 25
	public virtual uint ReadUInt32() { }

	[CLSCompliantAttribute] // RVA: 0xBCC878 Offset: 0xBCC878 VA: 0xBCC878
	// RVA: 0x23C2B70 Offset: 0x23C2B70 VA: 0x23C2B70 Slot: 26
	public virtual ulong ReadUInt64() { }

	// RVA: 0x23C1724 Offset: 0x23C1724 VA: 0x23C1724
	private void CheckBuffer(int length) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5204 Offset: 0xBC5204 VA: 0xBC5204
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 266
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x10
	private Encoding m_encoding; // 0x18
	private byte[] buffer; // 0x20
	private bool disposed; // 0x28
	private byte[] stringBuffer; // 0x30
	private int maxCharsPerRound; // 0x38

	// Methods

	// RVA: 0x2636DA0 Offset: 0x2636DA0 VA: 0x2636DA0
	protected void .ctor() { }

	// RVA: 0x2636F84 Offset: 0x2636F84 VA: 0x2636F84
	public void .ctor(Stream output) { }

	// RVA: 0x2636E44 Offset: 0x2636E44 VA: 0x2636E44
	public void .ctor(Stream output, Encoding encoding) { }

	// RVA: 0x2637004 Offset: 0x2637004 VA: 0x2637004
	private static void .cctor() { }

	// RVA: 0x2637064 Offset: 0x2637064 VA: 0x2637064 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2637074 Offset: 0x2637074 VA: 0x2637074 Slot: 5
	public virtual void Close() { }

	// RVA: 0x2637084 Offset: 0x2637084 VA: 0x2637084 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x26370C4 Offset: 0x26370C4 VA: 0x26370C4 Slot: 7
	public virtual void Flush() { }

	// RVA: 0x26370FC Offset: 0x26370FC VA: 0x26370FC Slot: 8
	public virtual void Write(bool value) { }

	// RVA: 0x2637200 Offset: 0x2637200 VA: 0x2637200 Slot: 9
	public virtual void Write(byte value) { }

	// RVA: 0x26372C8 Offset: 0x26372C8 VA: 0x26372C8 Slot: 10
	public virtual void Write(byte[] buffer) { }

	// RVA: 0x26373C8 Offset: 0x26373C8 VA: 0x26373C8 Slot: 11
	public virtual void Write(byte[] buffer, int index, int count) { }

	// RVA: 0x26374D8 Offset: 0x26374D8 VA: 0x26374D8 Slot: 12
	public virtual void Write(char ch) { }

	// RVA: 0x2637624 Offset: 0x2637624 VA: 0x2637624 Slot: 13
	public virtual void Write(char[] chars) { }

	// RVA: 0x2637764 Offset: 0x2637764 VA: 0x2637764 Slot: 14
	public virtual void Write(char[] chars, int index, int count) { }

	// RVA: 0x26378B4 Offset: 0x26378B4 VA: 0x26378B4 Slot: 15
	public virtual void Write(Decimal value) { }

	// RVA: 0x2637B74 Offset: 0x2637B74 VA: 0x2637B74 Slot: 16
	public virtual void Write(double value) { }

	// RVA: 0x2637C54 Offset: 0x2637C54 VA: 0x2637C54 Slot: 17
	public virtual void Write(short value) { }

	// RVA: 0x2637D88 Offset: 0x2637D88 VA: 0x2637D88 Slot: 18
	public virtual void Write(int value) { }

	// RVA: 0x2637F24 Offset: 0x2637F24 VA: 0x2637F24 Slot: 19
	public virtual void Write(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCC88C Offset: 0xBCC88C VA: 0xBCC88C
	// RVA: 0x2638050 Offset: 0x2638050 VA: 0x2638050 Slot: 20
	public virtual void Write(sbyte value) { }

	// RVA: 0x2638150 Offset: 0x2638150 VA: 0x2638150 Slot: 21
	public virtual void Write(float value) { }

	// RVA: 0x2638230 Offset: 0x2638230 VA: 0x2638230 Slot: 22
	public virtual void Write(string value) { }

	[CLSCompliantAttribute] // RVA: 0xBCC8A0 Offset: 0xBCC8A0 VA: 0xBCC8A0
	// RVA: 0x263848C Offset: 0x263848C VA: 0x263848C Slot: 23
	public virtual void Write(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xBCC8B4 Offset: 0xBCC8B4 VA: 0xBCC8B4
	// RVA: 0x26385C0 Offset: 0x26385C0 VA: 0x26385C0 Slot: 24
	public virtual void Write(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCC8C8 Offset: 0xBCC8C8 VA: 0xBCC8C8
	// RVA: 0x263875C Offset: 0x263875C VA: 0x263875C Slot: 25
	public virtual void Write(ulong value) { }

	// RVA: 0x2638444 Offset: 0x2638444 VA: 0x2638444
	protected void Write7BitEncodedInt(int value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5218 Offset: 0xBC5218 VA: 0xBC5218
public static class Directory // TypeDefIndex: 267
{
	// Methods

	// RVA: 0x2638888 Offset: 0x2638888 VA: 0x2638888
	public static DirectoryInfo CreateDirectory(string path) { }

	// RVA: 0x2638BBC Offset: 0x2638BBC VA: 0x2638BBC
	private static DirectoryInfo CreateDirectoriesInternal(string path) { }

	// RVA: 0x26396B8 Offset: 0x26396B8 VA: 0x26396B8
	public static void Delete(string path) { }

	// RVA: 0x2639A4C Offset: 0x2639A4C VA: 0x2639A4C
	private static void RecursiveDelete(string path) { }

	// RVA: 0x2639F7C Offset: 0x2639F7C VA: 0x2639F7C
	public static void Delete(string path, bool recursive) { }

	// RVA: 0x263A118 Offset: 0x263A118 VA: 0x263A118
	public static bool Exists(string path) { }

	// RVA: 0x263A268 Offset: 0x263A268 VA: 0x263A268
	public static string GetCurrentDirectory() { }

	// RVA: 0x2639BB4 Offset: 0x2639BB4 VA: 0x2639BB4
	public static string[] GetDirectories(string path) { }

	// RVA: 0x263A43C Offset: 0x263A43C VA: 0x263A43C
	public static string[] GetDirectories(string path, string searchPattern) { }

	// RVA: 0x2639C0C Offset: 0x2639C0C VA: 0x2639C0C
	public static string[] GetFiles(string path) { }

	// RVA: 0x263A97C Offset: 0x263A97C VA: 0x263A97C
	public static string[] GetFiles(string path, string searchPattern) { }

	// RVA: 0x263A988 Offset: 0x263A988 VA: 0x263A988
	public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption) { }

	// RVA: 0x263AB08 Offset: 0x263AB08 VA: 0x263AB08
	private static void GetFilesRecurse(string path, string searchPattern, ArrayList all) { }

	// RVA: 0x263ABD0 Offset: 0x263ABD0 VA: 0x263ABD0
	private static bool IsRootDirectory(string path) { }

	// RVA: 0x263AD00 Offset: 0x263AD00 VA: 0x263AD00
	public static DirectoryInfo GetParent(string path) { }

	// RVA: 0x2639FB4 Offset: 0x2639FB4 VA: 0x2639FB4
	private static void CheckPathExceptions(string path) { }

	// RVA: 0x263A448 Offset: 0x263A448 VA: 0x263A448
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC522C Offset: 0xBC522C VA: 0xBC522C
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 268
{
	// Fields
	private string current; // 0x60
	private string parent; // 0x68

	// Properties
	public override bool Exists { get; }
	public override string Name { get; }
	public DirectoryInfo Parent { get; }

	// Methods

	// RVA: 0x263B22C Offset: 0x263B22C VA: 0x263B22C
	public void .ctor(string path) { }

	// RVA: 0x2638D1C Offset: 0x2638D1C VA: 0x2638D1C
	internal void .ctor(string path, bool simpleOriginalPath) { }

	// RVA: 0x263BBC4 Offset: 0x263BBC4 VA: 0x263BBC4
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263B8A4 Offset: 0x263B8A4 VA: 0x263B8A4
	private void Initialize() { }

	// RVA: 0x2638E68 Offset: 0x2638E68 VA: 0x2638E68 Slot: 8
	public override bool get_Exists() { }

	// RVA: 0x263BD80 Offset: 0x263BD80 VA: 0x263BD80 Slot: 9
	public override string get_Name() { }

	// RVA: 0x2638DE4 Offset: 0x2638DE4 VA: 0x2638DE4
	public DirectoryInfo get_Parent() { }

	// RVA: 0x2638F04 Offset: 0x2638F04 VA: 0x2638F04
	public void Create() { }

	// RVA: 0x263BD88 Offset: 0x263BD88 VA: 0x263BD88
	public FileInfo[] GetFiles() { }

	// RVA: 0x263BDD8 Offset: 0x263BDD8 VA: 0x263BDD8
	public FileInfo[] GetFiles(string searchPattern) { }

	// RVA: 0x263C050 Offset: 0x263C050 VA: 0x263C050 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5240 Offset: 0xBC5240 VA: 0xBC5240
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 269
{
	// Methods

	// RVA: 0x263C058 Offset: 0x263C058 VA: 0x263C058
	public void .ctor() { }

	// RVA: 0x2639A44 Offset: 0x2639A44 VA: 0x2639A44
	public void .ctor(string message) { }

	// RVA: 0x263C0AC Offset: 0x263C0AC VA: 0x263C0AC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5254 Offset: 0xBC5254 VA: 0xBC5254
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 270
{
	// Methods

	// RVA: 0x263C0BC Offset: 0x263C0BC VA: 0x263C0BC
	public void .ctor() { }

	// RVA: 0x263C11C Offset: 0x263C11C VA: 0x263C11C
	public void .ctor(string message) { }

	// RVA: 0x263C124 Offset: 0x263C124 VA: 0x263C124
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5268 Offset: 0xBC5268 VA: 0xBC5268
public static class File // TypeDefIndex: 271
{
	// Fields
	private static Nullable<DateTime> defaultLocalFileTime; // 0x0

	// Properties
	private static DateTime DefaultLocalFileTime { get; }

	// Methods

	// RVA: 0x263C12C Offset: 0x263C12C VA: 0x263C12C
	public static void Copy(string sourceFileName, string destFileName) { }

	// RVA: 0x263C134 Offset: 0x263C134 VA: 0x263C134
	public static void Copy(string sourceFileName, string destFileName, bool overwrite) { }

	// RVA: 0x263CA4C Offset: 0x263CA4C VA: 0x263CA4C
	public static FileStream Create(string path) { }

	// RVA: 0x263CA54 Offset: 0x263CA54 VA: 0x263CA54
	public static FileStream Create(string path, int bufferSize) { }

	// RVA: 0x2639C64 Offset: 0x2639C64 VA: 0x2639C64
	public static void Delete(string path) { }

	// RVA: 0x2638AC8 Offset: 0x2638AC8 VA: 0x2638AC8
	public static bool Exists(string path) { }

	// RVA: 0x263C88C Offset: 0x263C88C VA: 0x263C88C
	public static FileAttributes GetAttributes(string path) { }

	// RVA: 0x263CB08 Offset: 0x263CB08 VA: 0x263CB08
	public static DateTime GetLastWriteTime(string path) { }

	// RVA: 0x263CE84 Offset: 0x263CE84 VA: 0x263CE84
	public static void Move(string sourceFileName, string destFileName) { }

	// RVA: 0x263D2DC Offset: 0x263D2DC VA: 0x263D2DC
	public static FileStream Open(string path, FileMode mode) { }

	// RVA: 0x263D39C Offset: 0x263D39C VA: 0x263D39C
	public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x263D438 Offset: 0x263D438 VA: 0x263D438
	public static FileStream OpenRead(string path) { }

	// RVA: 0x263D4B8 Offset: 0x263D4B8 VA: 0x263D4B8
	public static StreamReader OpenText(string path) { }

	// RVA: 0x263D5A0 Offset: 0x263D5A0 VA: 0x263D5A0
	public static FileStream OpenWrite(string path) { }

	// RVA: 0x263CC20 Offset: 0x263CC20 VA: 0x263CC20
	private static void CheckPathExceptions(string path) { }

	// RVA: 0x263D620 Offset: 0x263D620 VA: 0x263D620
	public static byte[] ReadAllBytes(string path) { }

	// RVA: 0x263D884 Offset: 0x263D884 VA: 0x263D884
	public static string[] ReadAllLines(string path) { }

	// RVA: 0x263D9CC Offset: 0x263D9CC VA: 0x263D9CC
	private static string[] ReadAllLines(StreamReader reader) { }

	// RVA: 0x263DAD0 Offset: 0x263DAD0 VA: 0x263DAD0
	public static string ReadAllText(string path) { }

	// RVA: 0x263DB40 Offset: 0x263DB40 VA: 0x263DB40
	public static string ReadAllText(string path, Encoding encoding) { }

	// RVA: 0x263DCC0 Offset: 0x263DCC0 VA: 0x263DCC0
	public static void WriteAllBytes(string path, byte[] bytes) { }

	// RVA: 0x263DE10 Offset: 0x263DE10 VA: 0x263DE10
	public static void WriteAllLines(string path, string[] contents) { }

	// RVA: 0x263DFCC Offset: 0x263DFCC VA: 0x263DFCC
	private static void WriteAllLines(StreamWriter writer, string[] contents) { }

	// RVA: 0x263E060 Offset: 0x263E060 VA: 0x263E060
	public static void WriteAllText(string path, string contents) { }

	// RVA: 0x263E0E0 Offset: 0x263E0E0 VA: 0x263E0E0
	public static void WriteAllText(string path, string contents, Encoding encoding) { }

	// RVA: 0x263CD7C Offset: 0x263CD7C VA: 0x263CD7C
	private static DateTime get_DefaultLocalFileTime() { }
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0xBC527C Offset: 0xBC527C VA: 0xBC527C
[ComVisibleAttribute] // RVA: 0xBC527C Offset: 0xBC527C VA: 0xBC527C
[Serializable]
public enum FileAccess // TypeDefIndex: 272
{
	// Fields
	public int value__; // 0x0
	public const FileAccess Read = 1;
	public const FileAccess Write = 2;
	public const FileAccess ReadWrite = 3;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC52B8 Offset: 0xBC52B8 VA: 0xBC52B8
[FlagsAttribute] // RVA: 0xBC52B8 Offset: 0xBC52B8 VA: 0xBC52B8
[Serializable]
public enum FileAttributes // TypeDefIndex: 273
{
	// Fields
	public int value__; // 0x0
	public const FileAttributes Archive = 32;
	public const FileAttributes Compressed = 2048;
	public const FileAttributes Device = 64;
	public const FileAttributes Directory = 16;
	public const FileAttributes Encrypted = 16384;
	public const FileAttributes Hidden = 2;
	public const FileAttributes Normal = 128;
	public const FileAttributes NotContentIndexed = 8192;
	public const FileAttributes Offline = 4096;
	public const FileAttributes ReadOnly = 1;
	public const FileAttributes ReparsePoint = 1024;
	public const FileAttributes SparseFile = 512;
	public const FileAttributes System = 4;
	public const FileAttributes Temporary = 256;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC52F4 Offset: 0xBC52F4 VA: 0xBC52F4
[Serializable]
public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 274
{
	// Fields
	private bool exists; // 0x59

	// Properties
	public override bool Exists { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x263BF70 Offset: 0x263BF70 VA: 0x263BF70
	public void .ctor(string fileName) { }

	// RVA: 0x263E240 Offset: 0x263E240 VA: 0x263E240
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263E244 Offset: 0x263E244 VA: 0x263E244 Slot: 11
	internal override void InternalRefresh() { }

	// RVA: 0x263E270 Offset: 0x263E270 VA: 0x263E270 Slot: 8
	public override bool get_Exists() { }

	// RVA: 0x263E318 Offset: 0x263E318 VA: 0x263E318 Slot: 9
	public override string get_Name() { }

	// RVA: 0x263E380 Offset: 0x263E380 VA: 0x263E380 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5308 Offset: 0xBC5308 VA: 0xBC5308
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 275
{
	// Fields
	private const int Result = -2147024894;
	private string msg; // 0x60
	private string fileName; // 0x68
	private string fusionLog; // 0x70

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x263E384 Offset: 0x263E384 VA: 0x263E384
	public void .ctor() { }

	// RVA: 0x263E40C Offset: 0x263E40C VA: 0x263E40C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263E520 Offset: 0x263E520 VA: 0x263E520 Slot: 6
	public override string get_Message() { }

	// RVA: 0x263E528 Offset: 0x263E528 VA: 0x263E528 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263E5F0 Offset: 0x263E5F0 VA: 0x263E5F0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC531C Offset: 0xBC531C VA: 0xBC531C
[Serializable]
public enum FileMode // TypeDefIndex: 276
{
	// Fields
	public int value__; // 0x0
	public const FileMode CreateNew = 1;
	public const FileMode Create = 2;
