	// RVA: 0x1ACF118 Offset: 0x1ACF118 VA: 0x1ACF118
	public EventCampaignEntity[] GetEventFriendPoints() { }

	// RVA: 0x1ACF120 Offset: 0x1ACF120 VA: 0x1ACF120
	public UserServantLeaderEntity GetLeaderInfo() { }

	// RVA: 0x1ACBF20 Offset: 0x1ACBF20 VA: 0x1ACBF20
	public void ClearItem() { }

	// RVA: 0x1ACF154 Offset: 0x1ACF154 VA: 0x1ACF154
	public void ModifyItem() { }

	// RVA: 0x1ACC1DC Offset: 0x1ACC1DC VA: 0x1ACC1DC
	public void SetItem(SupportServantData supportServantData, int deckNum, int classPos, EventCampaignEntity[] friendPointCampaigns, SupportSelectMenu.CallbackFunc callback) { }

	// RVA: 0x1ACC3D0 Offset: 0x1ACC3D0 VA: 0x1ACC3D0
	public void ChangeEvent(EventCampaignEntity[] changeEventFriendPoints) { }

	// RVA: 0x1ACF21C Offset: 0x1ACF21C VA: 0x1ACF21C
	public void OnClickItem() { }

	// RVA: 0x1ACF380 Offset: 0x1ACF380 VA: 0x1ACF380
	public void OnLongPressItem() { }

	// RVA: 0x1ACF58C Offset: 0x1ACF58C VA: 0x1ACF58C
	public void OnClickItemEquip() { }

	// RVA: 0x1ACF5A4 Offset: 0x1ACF5A4 VA: 0x1ACF5A4
	public void OnLongPressItemEquip() { }

	// RVA: 0x1ACF684 Offset: 0x1ACF684 VA: 0x1ACF684
	protected void EndShowEquip(bool isDecide) { }

	// RVA: 0x1ACF234 Offset: 0x1ACF234 VA: 0x1ACF234
	private void clickSelectItem(SupportSelectMenu.ResultKind result, int deckNum, int classPos) { }

	// RVA: 0x1ACF704 Offset: 0x1ACF704 VA: 0x1ACF704
	public void AddDepth(int depth) { }

	// RVA: 0x1ACC538 Offset: 0x1ACC538 VA: 0x1ACC538
	public void SetActiveDragSwapGuide(bool flag) { }

	// RVA: 0x1ACF804 Offset: 0x1ACF804 VA: 0x1ACF804
	public void HideEquip() { }

	// RVA: 0x1ACF838 Offset: 0x1ACF838 VA: 0x1ACF838
	public void ShowEquip() { }

	// RVA: 0x1ACF86C Offset: 0x1ACF86C VA: 0x1ACF86C
	public void ActivateEquipOnly() { }
}

// Namespace: 
public class SupportSelectRootComponent : SceneRootComponent // TypeDefIndex: 10837
{
	// Fields
	protected static float EDIT_SCENE_FADE_TIME; // 0x0
	private const string INITIAL_PAGE_INDEX = "SUPPORT_SETTING_SCENE_INITIAL_PAGE_INDEX";
	[SerializeField] // RVA: 0xC79D44 Offset: 0xC79D44 VA: 0xC79D44
	protected UISkinSprite backSkinSprite; // 0x38
	[SerializeField] // RVA: 0xC79D54 Offset: 0xC79D54 VA: 0xC79D54
	protected SupportSelectMenu supportSelectMenu; // 0x40
	[SerializeField] // RVA: 0xC79D64 Offset: 0xC79D64 VA: 0xC79D64
	protected SupportServantSelectMenu supportServantSelectMenu; // 0x48
	[SerializeField] // RVA: 0xC79D74 Offset: 0xC79D74 VA: 0xC79D74
	protected SupportSelectConfirmMenu supportSelectConfirmMenu; // 0x50
	[SerializeField] // RVA: 0xC79D84 Offset: 0xC79D84 VA: 0xC79D84
	private SupportSelectConfirmDeckMenu confirmDeckMenu; // 0x58
	[SerializeField] // RVA: 0xC79D94 Offset: 0xC79D94 VA: 0xC79D94
	private SupportSelectCopyDeckSelectMenu copyDeckSelectMenu; // 0x60
	[SerializeField] // RVA: 0xC79DA4 Offset: 0xC79DA4 VA: 0xC79DA4
	private SupportSelectConfirmCopyMenu copyConfirmMenu; // 0x68
	[SerializeField] // RVA: 0xC79DB4 Offset: 0xC79DB4 VA: 0xC79DB4
	protected CancelConfirmMenu cancelConfirmMenu; // 0x70
	[SerializeField] // RVA: 0xC79DC4 Offset: 0xC79DC4 VA: 0xC79DC4
	protected TitleInfoControl titleInfo; // 0x78
	[SerializeField] // RVA: 0xC79DD4 Offset: 0xC79DD4 VA: 0xC79DD4
	protected SupportDeckNameInputMenu deckNameInputMenu; // 0x80
	protected string editDeckName; // 0x88
	[SerializeField] // RVA: 0xC79DE4 Offset: 0xC79DE4 VA: 0xC79DE4
	protected SupportSelectEditMenu supportEditMenu; // 0x90
	[SerializeField] // RVA: 0xC79DF4 Offset: 0xC79DF4 VA: 0xC79DF4
	protected UISprite blackMask; // 0x98
	[SerializeField] // RVA: 0xC79E04 Offset: 0xC79E04 VA: 0xC79E04
	protected UIScrollView scrollView; // 0xA0
	[SerializeField] // RVA: 0xC79E14 Offset: 0xC79E14 VA: 0xC79E14
	protected FollowerQuestInfomationDraw followerQuestInfomationDraw; // 0xA8
	[SerializeField] // RVA: 0xC79E24 Offset: 0xC79E24 VA: 0xC79E24
	protected GameObject applyIconObj; // 0xB0
	[SerializeField] // RVA: 0xC79E34 Offset: 0xC79E34 VA: 0xC79E34
	protected UISprite bgTxtSprite; // 0xB8
	[SerializeField] // RVA: 0xC79E44 Offset: 0xC79E44 VA: 0xC79E44
	private SupportDeckFixErrorDialog fixErrorDialog; // 0xC0
	[SerializeField] // RVA: 0xC79E54 Offset: 0xC79E54 VA: 0xC79E54
	private CancelConfirmDeckIdDialog cancelConfirmDeckIdDialog; // 0xC8
	protected SupportSelectRootComponent.State state; // 0xD0
	protected SupportServantData[] supportServantData; // 0xD8
	protected SupportServantData[] orgSupportServantData; // 0xE0
	protected SupportServantData[] tmpSupportServantData; // 0xE8
	protected string[] cacheAssetNameList; // 0xF0
	private int selectNum; // 0xF8
	private int classPos; // 0xFC
	private bool isEdit; // 0x100
	private bool isDragSwapState; // 0x101
	private int copyTargetDeckId; // 0x104
	protected SupportInfoJump supportInfoJump; // 0x108
	protected SceneJumpInfo sceneJumpInfo; // 0x110
	private EventUpValSetupInfo eventSetupInfo; // 0x118
	private int[] tempFixMainQuestSupportDeckIds; // 0x120
	private int[] tempFixEventQuestSupportDeckIds; // 0x128
	private const string SVTEQ_SCROLL_SAVE_KEY = "SvtEqScrollBarValue";
	[CompilerGeneratedAttribute] // RVA: 0xC79E64 Offset: 0xC79E64 VA: 0xC79E64
	private static Func<int, bool> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC79E74 Offset: 0xC79E74 VA: 0xC79E74
	private static Func<int, bool> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC79E84 Offset: 0xC79E84 VA: 0xC79E84
	private static Func<int, bool> <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC79E94 Offset: 0xC79E94 VA: 0xC79E94
	private static Action <>f__am$cache3; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC79EA4 Offset: 0xC79EA4 VA: 0xC79EA4
	private static Func<int, bool> <>f__am$cache4; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC79EB4 Offset: 0xC79EB4 VA: 0xC79EB4
	private static Func<int, bool> <>f__am$cache5; // 0x30

	// Methods

	// RVA: 0x1ACF89C Offset: 0x1ACF89C VA: 0x1ACF89C
	public void .ctor() { }

	// RVA: 0x1ACF944 Offset: 0x1ACF944 VA: 0x1ACF944 Slot: 4
	public override void beginInitialize() { }

	// RVA: 0x1ACFAB0 Offset: 0x1ACFAB0 VA: 0x1ACFAB0
	private void RefreshSupportServantData() { }

	// RVA: 0x1AD019C Offset: 0x1AD019C VA: 0x1AD019C
	private void InitSupportServantData() { }

	// RVA: 0x1AD0220 Offset: 0x1AD0220 VA: 0x1AD0220
	private int GetCurrentDeckID() { }

	// RVA: 0x1AD027C Offset: 0x1AD027C VA: 0x1AD027C
	private bool IsFixedMainQuestSupportDeckIdNow(int checkDeckId) { }

	// RVA: 0x1AD02EC Offset: 0x1AD02EC VA: 0x1AD02EC
	private bool IsFixedEventQuestSupportDeckIdNow(int checkDeckId) { }

	// RVA: 0x1AD035C Offset: 0x1AD035C VA: 0x1AD035C
	private void SetCurrentSupportDeckIds(out int currentMainQuestSupportDeckId) { }

	// RVA: 0x1AD0384 Offset: 0x1AD0384 VA: 0x1AD0384
	private bool IsValidServantData(int index) { }

	// RVA: 0x1AD03F8 Offset: 0x1AD03F8 VA: 0x1AD03F8
	private void SetFriendInfo(out int deckIndex) { }

	// RVA: 0x1AD105C Offset: 0x1AD105C VA: 0x1AD105C
	private void SetFriendInfoPrepareBattle() { }

	// RVA: 0x1AD1B30 Offset: 0x1AD1B30 VA: 0x1AD1B30
	private void StartUp() { }

	// RVA: 0x1AD27FC Offset: 0x1AD27FC VA: 0x1AD27FC Slot: 5
	public override void beginStartUp(object data) { }

	// RVA: 0x1AD2A50 Offset: 0x1AD2A50 VA: 0x1AD2A50
	protected void EndLoadCommonBg() { }

	// RVA: 0x1AD2B5C Offset: 0x1AD2B5C VA: 0x1AD2B5C
	public void modifyCenterItemCallBack() { }

	// RVA: 0x1AD22DC Offset: 0x1AD22DC VA: 0x1AD22DC
	private void SetActiveApplyIcon() { }

	// RVA: 0x1AD3070 Offset: 0x1AD3070 VA: 0x1AD3070 Slot: 7
	public override void beginFinish() { }

	// RVA: 0x1AD32D4 Offset: 0x1AD32D4 VA: 0x1AD32D4
	public void Init() { }

	// RVA: 0x1AD32D8 Offset: 0x1AD32D8 VA: 0x1AD32D8
	public void Quit() { }

	// RVA: 0x1AD320C Offset: 0x1AD320C VA: 0x1AD320C
	protected void SetCacheAssetNameList(string[] list) { }

	// RVA: 0x1AD27F8 Offset: 0x1AD27F8 VA: 0x1AD27F8
	public void RefreshInfo() { }

	// RVA: 0x1AD0238 Offset: 0x1AD0238 VA: 0x1AD0238
	private int getCenterNum() { }

	// RVA: 0x1AD26B4 Offset: 0x1AD26B4 VA: 0x1AD26B4
	private void setEditUI(bool editOn) { }

	// RVA: 0x1AD32E0 Offset: 0x1AD32E0 VA: 0x1AD32E0
	private void ChangeTitle() { }

	// RVA: 0x1AD236C Offset: 0x1AD236C VA: 0x1AD236C
	private void setInfoUIDisp(bool disp) { }

	// RVA: 0x1AD3350 Offset: 0x1AD3350 VA: 0x1AD3350
	private void RequestApi() { }

	// RVA: 0x1AD3FC8 Offset: 0x1AD3FC8 VA: 0x1AD3FC8
	private void CallbackUpdateDeckIdApi(string result) { }

	// RVA: 0x1AD4040 Offset: 0x1AD4040 VA: 0x1AD4040
	protected void EndSupportSelectMenu(SupportSelectMenu.ResultKind result, int deckNum, int classPos) { }

	// RVA: 0x1AD3B6C Offset: 0x1AD3B6C VA: 0x1AD3B6C
	private bool IsUpdateDeckId() { }

	// RVA: 0x1AD598C Offset: 0x1AD598C VA: 0x1AD598C
	public void RequestDeckName() { }

	// RVA: 0x1AD5AE0 Offset: 0x1AD5AE0 VA: 0x1AD5AE0
	public void OnBackSelect(SupportSelectRootComponent.ResultKind result, int classPos, UserServantEntity entity) { }

	// RVA: 0x1AD616C Offset: 0x1AD616C VA: 0x1AD616C
	private void ExecutionServantSet(SupportSelectRootComponent.ResultKind result, int classPos, UserServantEntity entity) { }

	// RVA: 0x1AD66F8 Offset: 0x1AD66F8 VA: 0x1AD66F8
	protected void EndSupportServantEquipListMenu(SupportSelectRootComponent.ResultKind result, int classPos, SupportServantEquipListViewItem item) { }

	// RVA: 0x1AD6E54 Offset: 0x1AD6E54 VA: 0x1AD6E54
	private void SetEquip(SupportSelectRootComponent.ResultKind result, int classPos, SupportServantEquipListViewItem item) { }

	// RVA: 0x1AD75D8 Offset: 0x1AD75D8 VA: 0x1AD75D8
	protected void EndSupportServantDragSwap(SupportSelectRootComponent.SwapKind kind, int classPos1, UserServantLeaderEntity leader1, int classPos2, UserServantLeaderEntity leader2) { }

	// RVA: 0x1AD78BC Offset: 0x1AD78BC VA: 0x1AD78BC
	protected void EndShowServant(bool isDecide) { }

	// RVA: 0x1AD79E4 Offset: 0x1AD79E4 VA: 0x1AD79E4
	protected void EndShowServantWithQuest(bool isDecide, int questId) { }

	// RVA: 0x1AD7AAC Offset: 0x1AD7AAC VA: 0x1AD7AAC
	protected void EndCloseShowServantQuestJump() { }

	// RVA: 0x1AD7B18 Offset: 0x1AD7B18 VA: 0x1AD7B18
	protected void EndShowEquip(bool isDecide) { }

	// RVA: 0x1AD7BC0 Offset: 0x1AD7BC0 VA: 0x1AD7BC0
	protected void EndCloseServantEquipListDecide() { }

	// RVA: 0x1AD7BEC Offset: 0x1AD7BEC VA: 0x1AD7BEC
	protected void EndCloseServantEquipListCancel() { }

	// RVA: 0x1AD7C18 Offset: 0x1AD7C18 VA: 0x1AD7C18
	private void UpdateTempFixDeckId(int idx, int deckId, bool isEvent) { }

	// RVA: 0x1AD7EC8 Offset: 0x1AD7EC8 VA: 0x1AD7EC8
	private List<string> GetFixedErrorList(int idx, int nowDeckId, int[] fixDeckIds, bool isMain) { }

	// RVA: 0x1AD850C Offset: 0x1AD850C VA: 0x1AD850C
	private void OnClickFixMainDeckButton(int idx) { }

	// RVA: 0x1AD8824 Offset: 0x1AD8824 VA: 0x1AD8824
	public void OnClickFixMainQuestSupportDeck() { }

	// RVA: 0x1AD882C Offset: 0x1AD882C VA: 0x1AD882C
	public void OnClickFixMainQuestSupportDeck2() { }

	// RVA: 0x1AD8834 Offset: 0x1AD8834 VA: 0x1AD8834
	public void OnClickFixMainQuestSupportDeck3() { }

	// RVA: 0x1AD883C Offset: 0x1AD883C VA: 0x1AD883C
	private void OnClickFixEventDeckButton(int idx) { }

	// RVA: 0x1AD8AE4 Offset: 0x1AD8AE4 VA: 0x1AD8AE4
	public void OnClickFixEventQuestSupportDeck() { }

	// RVA: 0x1AD8AEC Offset: 0x1AD8AEC VA: 0x1AD8AEC
	public void OnClickFixEventQuestSupportDeck2() { }

	// RVA: 0x1AD8AF4 Offset: 0x1AD8AF4 VA: 0x1AD8AF4
	public void OnClickFixEventQuestSupportDeck3() { }

	// RVA: 0x1AD87B4 Offset: 0x1AD87B4 VA: 0x1AD87B4
	private void PlaySEOnClickFixQuestSupportDeck(bool isFixed) { }

	// RVA: 0x1AD8AFC Offset: 0x1AD8AFC VA: 0x1AD8AFC
	public void OnClickBack() { }

	// RVA: 0x1AD90DC Offset: 0x1AD90DC VA: 0x1AD90DC
	private void EndChangeDeckIdCancelConfirmMenu(bool isDecide) { }

	// RVA: 0x1AD91C8 Offset: 0x1AD91C8 VA: 0x1AD91C8
	public void EndCancelConfirmMenu(bool isDecide) { }

	// RVA: 0x1AD39A0 Offset: 0x1AD39A0 VA: 0x1AD39A0
	private void ReturnScene(string result) { }

	// RVA: 0x1AD92BC Offset: 0x1AD92BC VA: 0x1AD92BC
	private void EndConfirmMenu(bool flag) { }

	// RVA: 0x1AD58A0 Offset: 0x1AD58A0 VA: 0x1AD58A0
	private void OpenSupportEditMenu() { }

	// RVA: 0x1AD9300 Offset: 0x1AD9300 VA: 0x1AD9300
	protected void EndSupportEditMenu(SupportSelectEditMenu.ResultKind resultKind) { }

	// RVA: 0x1AD98F4 Offset: 0x1AD98F4 VA: 0x1AD98F4
	private bool IsPossibleCopy(int idx, int[] fixDeckIds) { }

	// RVA: 0x1AD93D0 Offset: 0x1AD93D0 VA: 0x1AD93D0
	private void SelectCopySupportDeck() { }

	// RVA: 0x1AD9BAC Offset: 0x1AD9BAC VA: 0x1AD9BAC
	private void EndSelectCopySupportDeck(int deckId) { }

	// RVA: 0x1AD9CDC Offset: 0x1AD9CDC VA: 0x1AD9CDC
	private void ConfirmDeckCopy(int targetDeckId) { }

	// RVA: 0x1AD9E08 Offset: 0x1AD9E08 VA: 0x1AD9E08
	private void EndConfirmDeckCopy(bool isDecide) { }

	// RVA: 0x1AD9660 Offset: 0x1AD9660 VA: 0x1AD9660
	private void RemoveAll() { }

	// RVA: 0x1ADA380 Offset: 0x1ADA380 VA: 0x1ADA380
	private void EndRemoveAll(bool isDecide) { }

	// RVA: 0x1AD973C Offset: 0x1AD973C VA: 0x1AD973C
	private void InitAll() { }

	// RVA: 0x1ADA5D0 Offset: 0x1ADA5D0 VA: 0x1ADA5D0
	private void EndInitAll(bool isDecide) { }

	// RVA: 0x1AD9818 Offset: 0x1AD9818 VA: 0x1AD9818
	private void RemoveAllEquip() { }

	// RVA: 0x1ADA894 Offset: 0x1ADA894 VA: 0x1ADA894
	private void EndRemoveAllEquip(bool isDecide) { }

	// RVA: 0x1AD5788 Offset: 0x1AD5788 VA: 0x1AD5788
	private void ChangeDeckName() { }

	// RVA: 0x1ADAB18 Offset: 0x1ADAB18 VA: 0x1ADAB18
	private void EndChangeDeckName(bool isDecide, string changeName) { }

	// RVA: 0x1AD53A8 Offset: 0x1AD53A8 VA: 0x1AD53A8
	private bool isUpdate(bool servant = True, bool equip = True) { }

	// RVA: 0x1AD23DC Offset: 0x1AD23DC VA: 0x1AD23DC
	private void initSupportServantDatas() { }

	// RVA: 0x1AD56D8 Offset: 0x1AD56D8 VA: 0x1AD56D8
	private void SaveTemp(int targetIdx = -1) { }

	// RVA: 0x1AD256C Offset: 0x1AD256C VA: 0x1AD256C
	private void CopySupportData(SupportServantData[] orgData, SupportServantData[] toData, bool isInit = False) { }

	// RVA: 0x1AD357C Offset: 0x1AD357C VA: 0x1AD357C
	private bool IsFinallyUpdate() { }

	// RVA: 0x1ADB280 Offset: 0x1ADB280 VA: 0x1ADB280
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1F60 Offset: 0xCD1F60 VA: 0xCD1F60
	// RVA: 0x1ADB2D4 Offset: 0x1ADB2D4 VA: 0x1ADB2D4
	private static bool <SetFriendInfoPrepareBattle>m__0(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1F70 Offset: 0xCD1F70 VA: 0xCD1F70
	// RVA: 0x1ADB2E0 Offset: 0x1ADB2E0 VA: 0x1ADB2E0
	private void <beginStartUp>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1F80 Offset: 0xCD1F80 VA: 0xCD1F80
	[DebuggerHiddenAttribute] // RVA: 0xCD1F80 Offset: 0xCD1F80 VA: 0xCD1F80
	// RVA: 0x1ADB2E4 Offset: 0x1ADB2E4 VA: 0x1ADB2E4
	private void <beginStartUp>__BaseCallProxy0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1FB8 Offset: 0xCD1FB8 VA: 0xCD1FB8
	// RVA: 0x1ADB2EC Offset: 0x1ADB2EC VA: 0x1ADB2EC
	private void <EndLoadCommonBg>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1FC8 Offset: 0xCD1FC8 VA: 0xCD1FC8
	// RVA: 0x1ADB348 Offset: 0x1ADB348 VA: 0x1ADB348
	private static bool <EndSupportSelectMenu>m__3(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1FD8 Offset: 0xCD1FD8 VA: 0xCD1FD8
	// RVA: 0x1ADB354 Offset: 0x1ADB354 VA: 0x1ADB354
	private static bool <EndSupportSelectMenu>m__4(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1FE8 Offset: 0xCD1FE8 VA: 0xCD1FE8
	// RVA: 0x1ADB360 Offset: 0x1ADB360 VA: 0x1ADB360
	private static void <EndSupportSelectMenu>m__5() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD1FF8 Offset: 0xCD1FF8 VA: 0xCD1FF8
	// RVA: 0x1ADB3F8 Offset: 0x1ADB3F8 VA: 0x1ADB3F8
	private static bool <IsUpdateDeckId>m__6(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2008 Offset: 0xCD2008 VA: 0xCD2008
	// RVA: 0x1ADB404 Offset: 0x1ADB404 VA: 0x1ADB404
	private static bool <IsUpdateDeckId>m__7(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2018 Offset: 0xCD2018 VA: 0xCD2018
	// RVA: 0x1ADB410 Offset: 0x1ADB410 VA: 0x1ADB410
	private void <EndChangeDeckName>m__8() { }
}

// Namespace: 
protected enum SupportSelectRootComponent.State // TypeDefIndex: 10838
{
	// Fields
	public int value__; // 0x0
	public const SupportSelectRootComponent.State INIT = 0;
	public const SupportSelectRootComponent.State SELECT = 1;
	public const SupportSelectRootComponent.State INPUT_SERVANT_SELECT = 2;
	public const SupportSelectRootComponent.State INPUT_EQUIP_SELECT = 3;
	public const SupportSelectRootComponent.State INFO = 4;
	public const SupportSelectRootComponent.State QUIT_SCENE = 5;
}

// Namespace: 
public enum SupportSelectRootComponent.ResultKind // TypeDefIndex: 10839
{
	// Fields
	public int value__; // 0x0
	public const SupportSelectRootComponent.ResultKind CANCEL = 0;
	public const SupportSelectRootComponent.ResultKind DECIDE = 1;
	public const SupportSelectRootComponent.ResultKind REMOVE = 2;
}

// Namespace: 
public enum SupportSelectRootComponent.SwapKind // TypeDefIndex: 10840
{
	// Fields
	public int value__; // 0x0
	public const SupportSelectRootComponent.SwapKind SERVANT = 0;
	public const SupportSelectRootComponent.SwapKind EQUIPMENT = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45654 Offset: 0xC45654 VA: 0xC45654
private sealed class SupportSelectRootComponent.<OnBackSelect>c__AnonStorey0 // TypeDefIndex: 10841
{
	// Fields
	internal SupportSelectRootComponent.ResultKind result; // 0x10
	internal int classPos; // 0x14
	internal UserServantEntity entity; // 0x18
	internal SupportSelectRootComponent $this; // 0x20

	// Methods

	// RVA: 0x1AD6164 Offset: 0x1AD6164 VA: 0x1AD6164
	public void .ctor() { }

	// RVA: 0x1ADB6D4 Offset: 0x1ADB6D4 VA: 0x1ADB6D4
	internal void <>m__0(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45664 Offset: 0xC45664 VA: 0xC45664
private sealed class SupportSelectRootComponent.<EndSupportServantEquipListMenu>c__AnonStorey1 // TypeDefIndex: 10842
{
	// Fields
	internal SupportSelectRootComponent.ResultKind result; // 0x10
	internal int classPos; // 0x14
	internal SupportServantEquipListViewItem item; // 0x18
	internal SupportSelectRootComponent $this; // 0x20

	// Methods

	// RVA: 0x1AD6E44 Offset: 0x1AD6E44 VA: 0x1AD6E44
	public void .ctor() { }

	// RVA: 0x1ADB414 Offset: 0x1ADB414 VA: 0x1ADB414
	internal void <>m__0(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45674 Offset: 0xC45674 VA: 0xC45674
private sealed class SupportSelectRootComponent.<GetFixedErrorList>c__AnonStorey2 // TypeDefIndex: 10843
{
	// Fields
	internal UserServantLeaderEntity svtInfo; // 0x10

	// Methods

	// RVA: 0x1AD84FC Offset: 0x1AD84FC VA: 0x1AD84FC
	public void .ctor() { }

	// RVA: 0x1ADB63C Offset: 0x1ADB63C VA: 0x1ADB63C
	internal bool <>m__0(UserServantLeaderEntity x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45684 Offset: 0xC45684 VA: 0xC45684
private sealed class SupportSelectRootComponent.<IsPossibleCopy>c__AnonStorey3 // TypeDefIndex: 10844
{
	// Fields
	internal UserServantLeaderEntity svtInfo; // 0x10

	// Methods

	// RVA: 0x1AD9BA4 Offset: 0x1AD9BA4 VA: 0x1AD9BA4
	public void .ctor() { }

	// RVA: 0x1ADB688 Offset: 0x1ADB688 VA: 0x1ADB688
	internal bool <>m__0(UserServantLeaderEntity x) { }
}

// Namespace: 
public class SupportSelectUIDragDropListViewSurface : UIDragDropListViewSurface // TypeDefIndex: 10845
{
	// Fields
	[SerializeField] // RVA: 0xC79EC4 Offset: 0xC79EC4 VA: 0xC79EC4
	private SupportSelectListViewDropObject dropObject; // 0x18

	// Properties
	public SupportSelectListViewDropObject DropObject { get; set; }

	// Methods

	// RVA: 0x1ADB904 Offset: 0x1ADB904 VA: 0x1ADB904
	public void .ctor() { }

	// RVA: 0x1ACB280 Offset: 0x1ACB280 VA: 0x1ACB280
	public void set_DropObject(SupportSelectListViewDropObject value) { }

	// RVA: 0x1ADB90C Offset: 0x1ADB90C VA: 0x1ADB90C
	public SupportSelectListViewDropObject get_DropObject() { }
}

// Namespace: 
public class SupportServantData // TypeDefIndex: 10846
{
	// Fields
	protected UserServantLeaderEntity[] userServantLeaderEntityList; // 0x10
	protected long[] servantIdList; // 0x18
	protected long[] oldServantIdList; // 0x20
	protected long[] equipIdList; // 0x28
	protected long[] oldEquipIdList; // 0x30
	private string[] className; // 0x38
	protected bool isFriendInfo; // 0x40
	protected ServantStatusDialog.Kind kind; // 0x44
	protected bool isSelectServant; // 0x48
	protected EventUpValSetupInfo eventSetupInfo; // 0x50
	protected EventUpValSetupInfo eventSetupInfo2; // 0x58
	protected QuestRestrictionInfo questRestrictionInfo; // 0x60
	private long pushUserServantId; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC79ED4 Offset: 0xC79ED4 VA: 0xC79ED4
	[DebuggerBrowsableAttribute] // RVA: 0xC79ED4 Offset: 0xC79ED4 VA: 0xC79ED4
	private int <deckId>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC79F10 Offset: 0xC79F10 VA: 0xC79F10
	[DebuggerBrowsableAttribute] // RVA: 0xC79F10 Offset: 0xC79F10 VA: 0xC79F10
	private string <deckName>k__BackingField; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC79F4C Offset: 0xC79F4C VA: 0xC79F4C
	[DebuggerBrowsableAttribute] // RVA: 0xC79F4C Offset: 0xC79F4C VA: 0xC79F4C
	private string <oldDeckName>k__BackingField; // 0x80

	// Properties
	public int deckId { get; set; }
	public string deckName { get; set; }
	public string oldDeckName { get; set; }
	public bool IsNoServant { get; }
	public bool IsFriendInfo { get; }
	public ServantStatusDialog.Kind Kind { get; }
	public bool IsSelectServant { get; }
	public EventUpValSetupInfo EventSetupInfo { get; set; }
	public EventUpValSetupInfo EventSetupInfo2 { get; }
	public QuestRestrictionInfo QuestRestriction { get; }
	public long PushUserServantId { get; set; }

	// Methods

	// RVA: 0x1ACFD90 Offset: 0x1ACFD90 VA: 0x1ACFD90
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2028 Offset: 0xCD2028 VA: 0xCD2028
	// RVA: 0x1ADB914 Offset: 0x1ADB914 VA: 0x1ADB914
	public int get_deckId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2038 Offset: 0xCD2038 VA: 0xCD2038
	// RVA: 0x1ADB91C Offset: 0x1ADB91C VA: 0x1ADB91C
	public void set_deckId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2048 Offset: 0xCD2048 VA: 0xCD2048
	// RVA: 0x1AC922C Offset: 0x1AC922C VA: 0x1AC922C
	public string get_deckName() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2058 Offset: 0xCD2058 VA: 0xCD2058
	// RVA: 0x1AD5AD8 Offset: 0x1AD5AD8 VA: 0x1AD5AD8
	public void set_deckName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2068 Offset: 0xCD2068 VA: 0xCD2068
	// RVA: 0x1ADB924 Offset: 0x1ADB924 VA: 0x1ADB924
	public string get_oldDeckName() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2078 Offset: 0xCD2078 VA: 0xCD2078
	// RVA: 0x1ADB92C Offset: 0x1ADB92C VA: 0x1ADB92C
	private void set_oldDeckName(string value) { }

	// RVA: 0x1ADAD18 Offset: 0x1ADAD18 VA: 0x1ADAD18
	public void Init(int deckId, EventUpValSetupInfo eventUpSetupInfo) { }

	// RVA: 0x1ADAA44 Offset: 0x1ADAA44 VA: 0x1ADAA44
	public string getDefaultDeckName() { }

	// RVA: 0x1ADA870 Offset: 0x1ADA870 VA: 0x1ADA870
	public void ResetDeckName() { }

	// RVA: 0x1AD0BE8 Offset: 0x1AD0BE8 VA: 0x1AD0BE8
	public void Init(OtherUserGameEntity otherData, FriendStatus.Kind friendKind, bool isSelectServant, EventUpValSetupInfo _eventSetupInfo, OtherUserGameEntity.ReturnSupportServantType displayType, int deckId) { }

	// RVA: 0x1AD1628 Offset: 0x1AD1628 VA: 0x1AD1628
	public void Init(FollowerInfo followerInfo, FriendStatus.Kind friendKind, bool isSelectServant, EventUpValSetupInfo _eventSetupInfo, QuestRestrictionInfo questRestrictionInfo, int deckId) { }

	// RVA: 0x1ACC4E4 Offset: 0x1ACC4E4 VA: 0x1ACC4E4
	public UserServantLeaderEntity getUserServantLeaderEntity(int classPos) { }

	// RVA: 0x1AD63DC Offset: 0x1AD63DC VA: 0x1AD63DC
	public void setServantData(int classPos, UserServantEntity entity) { }

	// RVA: 0x1AD6608 Offset: 0x1AD6608 VA: 0x1AD6608
	public void removeServantData(int classPos) { }

	// RVA: 0x1AD7374 Offset: 0x1AD7374 VA: 0x1AD7374
	public void setEquipData(int classPos, long userSvtId, int svtId = -1) { }

	// RVA: 0x1AD7184 Offset: 0x1AD7184 VA: 0x1AD7184
	public void removeEquipData(int classPos) { }

	// RVA: 0x1ADB934 Offset: 0x1ADB934 VA: 0x1ADB934
	public long getMember(int classPos) { }

	// RVA: 0x1AD8504 Offset: 0x1AD8504 VA: 0x1AD8504
	public UserServantLeaderEntity[] GetUserServantLeaderList() { }

	// RVA: 0x1ACF538 Offset: 0x1ACF538 VA: 0x1ACF538
	public long getServant(int classPos) { }

	// RVA: 0x1ADAC00 Offset: 0x1ADAC00 VA: 0x1ADAC00
	public long getOldServant(int classPos) { }

	// RVA: 0x1ADB9E4 Offset: 0x1ADB9E4 VA: 0x1ADB9E4
	public int getServantSum() { }

	// RVA: 0x1AD717C Offset: 0x1AD717C VA: 0x1AD717C
	public long[] GetEquipList() { }

	// RVA: 0x1ACF630 Offset: 0x1ACF630 VA: 0x1ACF630
	public long getEquip(int classPos) { }

	// RVA: 0x1ADAC54 Offset: 0x1ADAC54 VA: 0x1ADAC54
	public long getOldEquip(int classPos) { }

	// RVA: 0x1ADBABC Offset: 0x1ADBABC VA: 0x1ADBABC
	public int getEquipSum() { }

	// RVA: 0x1ADBB94 Offset: 0x1ADBB94 VA: 0x1ADBB94
	public bool isUseServant(long userSvtId) { }

	// RVA: 0x1ADBC70 Offset: 0x1ADBC70 VA: 0x1ADBC70
	public string updateCheck(int classPos) { }

	// RVA: 0x1ADC198 Offset: 0x1ADC198 VA: 0x1ADC198
	public string updateNameCheck() { }

	// RVA: 0x1AD5600 Offset: 0x1AD5600 VA: 0x1AD5600
	public bool get_IsNoServant() { }

	// RVA: 0x1ADC418 Offset: 0x1ADC418 VA: 0x1ADC418
	public string getClassName(int classPos) { }

	// RVA: 0x1ACA3F4 Offset: 0x1ACA3F4 VA: 0x1ACA3F4
	public bool get_IsFriendInfo() { }

	// RVA: 0x1AD5780 Offset: 0x1AD5780 VA: 0x1AD5780
	public ServantStatusDialog.Kind get_Kind() { }

	// RVA: 0x1ACBDA4 Offset: 0x1ACBDA4 VA: 0x1ACBDA4
	public bool get_IsSelectServant() { }

	// RVA: 0x1ADC4C4 Offset: 0x1ADC4C4 VA: 0x1ADC4C4
	public EventUpValSetupInfo get_EventSetupInfo() { }

	// RVA: 0x1AD2364 Offset: 0x1AD2364 VA: 0x1AD2364
	public void set_EventSetupInfo(EventUpValSetupInfo value) { }

	// RVA: 0x1AD5768 Offset: 0x1AD5768 VA: 0x1AD5768
	public EventUpValSetupInfo get_EventSetupInfo2() { }

	// RVA: 0x1ACBDAC Offset: 0x1ACBDAC VA: 0x1ACBDAC
	public QuestRestrictionInfo get_QuestRestriction() { }

	// RVA: 0x1ADC4CC Offset: 0x1ADC4CC VA: 0x1ADC4CC
	public bool IsEmpty() { }

	// RVA: 0x1ADC508 Offset: 0x1ADC508 VA: 0x1ADC508
	public bool IsDefaultDeckName() { }

	// RVA: 0x1ADACA8 Offset: 0x1ADACA8 VA: 0x1ADACA8
	public bool IsChangeDeckName() { }

	// RVA: 0x1AD66F0 Offset: 0x1AD66F0 VA: 0x1AD66F0
	public void set_PushUserServantId(long value) { }

	// RVA: 0x1ADC588 Offset: 0x1ADC588 VA: 0x1ADC588
	public long get_PushUserServantId() { }

	// RVA: 0x1ADB11C Offset: 0x1ADB11C VA: 0x1ADB11C
	public void ResetOld() { }

	// RVA: 0x1AD381C Offset: 0x1AD381C VA: 0x1AD381C
	public void SetOld(SupportServantData data) { }

	// RVA: 0x1AD9F80 Offset: 0x1AD9F80 VA: 0x1AD9F80
	public void CopyData(SupportServantData data, bool isInit = False) { }
}

// Namespace: 
public enum SupportServantData.ClassPos // TypeDefIndex: 10847
{
	// Fields
	public int value__; // 0x0
	public const SupportServantData.ClassPos NONE = -1;
	public const SupportServantData.ClassPos ALL = 0;
	public const SupportServantData.ClassPos SABER = 1;
	public const SupportServantData.ClassPos ARCHER = 2;
	public const SupportServantData.ClassPos LANCER = 3;
	public const SupportServantData.ClassPos RIDER = 4;
	public const SupportServantData.ClassPos CASTER = 5;
	public const SupportServantData.ClassPos ASSASSIN = 6;
	public const SupportServantData.ClassPos BERSERKER = 7;
	public const SupportServantData.ClassPos EXTRA = 8;
	public const SupportServantData.ClassPos SUM = 9;
}

// Namespace: 
public class SupportServantEquipListMenu : BaseMenu // TypeDefIndex: 10848
{
	// Fields
	[SerializeField] // RVA: 0xC79F88 Offset: 0xC79F88 VA: 0xC79F88
	protected SupportServantEquipListViewManager supportServantEquipListViewManager; // 0x58
	[SerializeField] // RVA: 0xC79F98 Offset: 0xC79F98 VA: 0xC79F98
	protected TitleInfoControl titleInfo; // 0x60
	[SerializeField] // RVA: 0xC79FA8 Offset: 0xC79FA8 VA: 0xC79FA8
	protected UILabel explanationLabel; // 0x68
	[SerializeField] // RVA: 0xC79FB8 Offset: 0xC79FB8 VA: 0xC79FB8
	protected UISprite normalTabSprite; // 0x70
	[SerializeField] // RVA: 0xC79FC8 Offset: 0xC79FC8 VA: 0xC79FC8
	protected UICommonButton normalTabButton; // 0x78
	[SerializeField] // RVA: 0xC79FD8 Offset: 0xC79FD8 VA: 0xC79FD8
	protected UISprite lockTabSprite; // 0x80
	[SerializeField] // RVA: 0xC79FE8 Offset: 0xC79FE8 VA: 0xC79FE8
	protected UICommonButton lockTabButton; // 0x88
	[SerializeField] // RVA: 0xC79FF8 Offset: 0xC79FF8 VA: 0xC79FF8
	protected UISprite choiceTabSprite; // 0x90
	[SerializeField] // RVA: 0xC7A008 Offset: 0xC7A008 VA: 0xC7A008
	protected UICommonButton choiceTabButton; // 0x98
	[SerializeField] // RVA: 0xC7A018 Offset: 0xC7A018 VA: 0xC7A018
	protected UISprite scaleChangeTabSprite; // 0xA0
	[SerializeField] // RVA: 0xC7A028 Offset: 0xC7A028 VA: 0xC7A028
	protected UICommonButton scaleChangeTabButton; // 0xA8
	private SupportServantEquipListMenu.ModeKind tabModeKind; // 0xB0
	protected SupportServantEquipListMenu.State state; // 0xB4
	[CompilerGeneratedAttribute] // RVA: 0xC7A038 Offset: 0xC7A038 VA: 0xC7A038
	[DebuggerBrowsableAttribute] // RVA: 0xC7A038 Offset: 0xC7A038 VA: 0xC7A038
	private SupportServantEquipListMenu.CallbackFunc callbackFunc; // 0xB8
	protected Action closeCallbackFunc; // 0xC0
	protected SupportServantEquipListMenu.RequestCallbackFunc requedstCallback; // 0xC8
	protected int selectNum; // 0xD0
	private SupportServantData supportServantData; // 0xD8
	private int classPos; // 0xE0
	private bool isSelectedSvt; // 0xE4

	// Methods

	// RVA: 0x1ADC590 Offset: 0x1ADC590 VA: 0x1ADC590
	public void .ctor() { }

	// RVA: 0x1ADC5F8 Offset: 0x1ADC5F8 VA: 0x1ADC5F8
	protected void add_callbackFunc(SupportServantEquipListMenu.CallbackFunc value) { }

	// RVA: 0x1ADC6E4 Offset: 0x1ADC6E4 VA: 0x1ADC6E4
	protected void remove_callbackFunc(SupportServantEquipListMenu.CallbackFunc value) { }

	// RVA: 0x1ADC7D0 Offset: 0x1ADC7D0 VA: 0x1ADC7D0
	public void Init() { }

	// RVA: 0x1ADCCA4 Offset: 0x1ADCCA4 VA: 0x1ADCCA4
	public void Open(SupportServantData[] supportServantDatas, int nowDeckNum, int classPos, EventUpValSetupInfo eventSetupInfo, int nowDeckId, int[] fixMainDeckIds, int[] fixEventDeckIds, SupportServantEquipListMenu.CallbackFunc callback) { }

	// RVA: 0x1ADD62C Offset: 0x1ADD62C VA: 0x1ADD62C
	protected void EndOpen() { }

	// RVA: 0x1ADD758 Offset: 0x1ADD758 VA: 0x1ADD758
	public void Close() { }

	// RVA: 0x1ADD760 Offset: 0x1ADD760 VA: 0x1ADD760
	public void Close(Action callback) { }

	// RVA: 0x1ADD7F8 Offset: 0x1ADD7F8 VA: 0x1ADD7F8
	protected void EndCloseList() { }

	// RVA: 0x1ADD7FC Offset: 0x1ADD7FC VA: 0x1ADD7FC
	protected void EndClose() { }

	// RVA: 0x1ADD838 Offset: 0x1ADD838 VA: 0x1ADD838
	protected void Callback(SupportSelectRootComponent.ResultKind result, int classPos, SupportServantEquipListViewItem item) { }

	// RVA: 0x1ADD544 Offset: 0x1ADD544 VA: 0x1ADD544
	protected void SetListManagerStatus() { }

	// RVA: 0x1ADDBD8 Offset: 0x1ADDBD8 VA: 0x1ADDBD8
	public void OnClickDecide() { }

	// RVA: 0x1ADDDA8 Offset: 0x1ADDDA8 VA: 0x1ADDDA8
	protected void Decide() { }

	// RVA: 0x1ADE054 Offset: 0x1ADE054 VA: 0x1ADE054
	protected void EndDecide(bool isRequest) { }

	// RVA: 0x1ADE5C4 Offset: 0x1ADE5C4 VA: 0x1ADE5C4
	protected void EndCloseEventServantWarning() { }

	// RVA: 0x1ADE5E8 Offset: 0x1ADE5E8 VA: 0x1ADE5E8
	public void OnClickCancel() { }

	// RVA: 0x1ADE6CC Offset: 0x1ADE6CC VA: 0x1ADE6CC
	protected void endCancelButton(bool isRequest) { }

	// RVA: 0x1ADE778 Offset: 0x1ADE778 VA: 0x1ADE778
	protected void OnSelectServantEquip(SupportServantEquipListViewManager.ResultKind kind, int n) { }

	// RVA: 0x1ADF29C Offset: 0x1ADF29C VA: 0x1ADF29C
	protected void EndShowServantEquip(bool isDecide) { }

	// RVA: 0x1ADF380 Offset: 0x1ADF380 VA: 0x1ADF380
	protected void EndCloseShowServantEquip() { }

	// RVA: 0x1ADF418 Offset: 0x1ADF418 VA: 0x1ADF418
	public void onClickNormalTabButton() { }

	// RVA: 0x1ADF4D0 Offset: 0x1ADF4D0 VA: 0x1ADF4D0
	protected void EndClickTabNormal(bool isRequest) { }

	// RVA: 0x1ADF530 Offset: 0x1ADF530 VA: 0x1ADF530
	public void onClickLockTabButton() { }

	// RVA: 0x1ADF644 Offset: 0x1ADF644 VA: 0x1ADF644
	protected void EndClickTabLock(bool isRequest) { }

	// RVA: 0x1ADF6A4 Offset: 0x1ADF6A4 VA: 0x1ADF6A4
	public void onClickChoiceTabButton() { }

	// RVA: 0x1ADF7B8 Offset: 0x1ADF7B8 VA: 0x1ADF7B8
	protected void EndClickTabChoice(bool isRequest) { }

	// RVA: 0x1ADC934 Offset: 0x1ADC934 VA: 0x1ADC934
	private void setModeTabKind(SupportServantEquipListMenu.ModeKind modeKind) { }

	// RVA: 0x1ADDE58 Offset: 0x1ADDE58 VA: 0x1ADDE58
	public void StatusRequest(SupportServantEquipListMenu.RequestCallbackFunc callback) { }

	// RVA: 0x1AE000C Offset: 0x1AE000C VA: 0x1AE000C
	protected void EndStatusSync(string result) { }

	// RVA: 0x1AE002C Offset: 0x1AE002C VA: 0x1AE002C
	public void OnClickScaleChange() { }
}

// Namespace: 
public enum SupportServantEquipListMenu.ModeKind // TypeDefIndex: 10849
{
	// Fields
	public int value__; // 0x0
	public const SupportServantEquipListMenu.ModeKind NORMAL = 0;
	public const SupportServantEquipListMenu.ModeKind LOCK = 1;
	public const SupportServantEquipListMenu.ModeKind CHOICE = 2;
	public const SupportServantEquipListMenu.ModeKind SUM = 3;
}

// Namespace: 
protected enum SupportServantEquipListMenu.State // TypeDefIndex: 10850
{
	// Fields
	public int value__; // 0x0
	public const SupportServantEquipListMenu.State INIT = 0;
	public const SupportServantEquipListMenu.State OPEN = 1;
	public const SupportServantEquipListMenu.State INPUT = 2;
	public const SupportServantEquipListMenu.State SELECTED = 3;
	public const SupportServantEquipListMenu.State CLOSE = 4;
	public const SupportServantEquipListMenu.State SHOW_STATUS = 5;
	public const SupportServantEquipListMenu.State WARNING = 6;
}

// Namespace: 
public sealed class SupportServantEquipListMenu.CallbackFunc : MulticastDelegate // TypeDefIndex: 10851
{
	// Methods

	// RVA: 0x1AD5770 Offset: 0x1AD5770 VA: 0x1AD5770
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1ADD84C Offset: 0x1ADD84C VA: 0x1ADD84C Slot: 11
	public virtual void Invoke(SupportSelectRootComponent.ResultKind result, int classPos, SupportServantEquipListViewItem item) { }

	// RVA: 0x1AE01D8 Offset: 0x1AE01D8 VA: 0x1AE01D8 Slot: 12
	public virtual IAsyncResult BeginInvoke(SupportSelectRootComponent.ResultKind result, int classPos, SupportServantEquipListViewItem item, AsyncCallback callback, object object) { }

	// RVA: 0x1AE0290 Offset: 0x1AE0290 VA: 0x1AE0290 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class SupportServantEquipListMenu.RequestCallbackFunc : MulticastDelegate // TypeDefIndex: 10852
{
	// Methods

	// RVA: 0x1ADDE48 Offset: 0x1ADDE48 VA: 0x1ADDE48
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1ADFDE0 Offset: 0x1ADFDE0 VA: 0x1ADFDE0 Slot: 11
	public virtual void Invoke(bool isRequest) { }

	// RVA: 0x1AE029C Offset: 0x1AE029C VA: 0x1AE029C Slot: 12
	public virtual IAsyncResult BeginInvoke(bool isRequest, AsyncCallback callback, object object) { }

	// RVA: 0x1AE032C Offset: 0x1AE032C VA: 0x1AE032C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class SupportServantEquipListViewItem : ListViewItem // TypeDefIndex: 10853
{
	// Fields
	protected UserServantEntity userSvtEntity; // 0x70
	protected UserServantEntity equippedUserSvtEntity; // 0x78
	protected ServantEntity servantEntity; // 0x80
	protected EventUpValSetupInfo eventSetupInfo; // 0x88
	protected int classId; // 0x90
	protected int rarity; // 0x94
	protected bool isOldBase; // 0x98
	protected bool isBase; // 0x99
	protected bool isUse; // 0x9A
	protected bool isLock; // 0x9B
	protected bool isChoice; // 0x9C
	protected ListViewSort.BonusFilterKind bonusKind; // 0xA0
	protected int bonusKindId; // 0xA4
	protected bool isEventUpVal; // 0xA8
	protected long amountSortValue; // 0xB0
	protected bool isSwapLock; // 0xB8
	protected bool isSwapChoice; // 0xB9
	protected bool isInvalidRarity; // 0xBA
	protected int[] categoryIdList; // 0xC0
	protected IconLabelInfo iconLabelInfo1; // 0xC8
	protected IconLabelInfo iconLabelInfo2; // 0xD0

	// Properties
	public UserServantEntity UserServant { get; }
	public ServantEntity Servant { get; }
	public string NameText { get; }
	public int Attack { get; }
	public int AdjustAttack { get; }
	public int Hp { get; }
	public int AdjustHp { get; }
	public int Cost { get; }
	public bool IsBase { get; set; }
	public bool IsUse { get; }
	public bool IsLock { get; }
	public bool IsCanNotSelect { get; }
	public bool IsSwapLock { get; }
	public bool IsDispLock { get; }
	public bool IsChoice { get; }
	public bool IsSwapChoice { get; }
	public bool IsDispChoice { get; }
	public IconLabelInfo IconInfo1 { get; }
	public IconLabelInfo IconInfo2 { get; }
	public bool IsInvalidRarity { get; }

	// Methods

	// RVA: 0x1AE0338 Offset: 0x1AE0338 VA: 0x1AE0338
	public void .ctor(int index, UserServantEntity userSvtEntity, long targetSvtEquipId, long oldTargetSvtEquipId, long[] useSvtEquipList, UserServantEntity equippedUserSvtEntity, EventUpValSetupInfo eventSetupInfo, SupportServantData[] supportServantData, int nowDeckId, int[] fixMainDeckIds, int[] fixEventDeckIds, bool isFixMainDeck, bool isFixEventDeck) { }

	// RVA: 0x1AE092C Offset: 0x1AE092C VA: 0x1AE092C
	public void Modify(UserServantEntity userSvtEntity, long targetSvtEquipId) { }

	// RVA: 0x1AE0958 Offset: 0x1AE0958 VA: 0x1AE0958
	public void ModifyItem(UserServantEntity userSvtEntity, long targetSvtEquipId) { }

	// RVA: 0x1AE0BBC Offset: 0x1AE0BBC VA: 0x1AE0BBC
	public void ModifyLockItem() { }

	// RVA: 0x1AE0C00 Offset: 0x1AE0C00 VA: 0x1AE0C00
	public void ModifyChoiceItem() { }

	// RVA: 0x1AE0C44 Offset: 0x1AE0C44 VA: 0x1AE0C44 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1AE0C4C Offset: 0x1AE0C4C VA: 0x1AE0C4C Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x1AE14A4 Offset: 0x1AE14A4 VA: 0x1AE14A4 Slot: 5
	public override bool IsMatchFilter(ListViewSort sort) { }

