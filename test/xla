	// RVA: 0x23B38E4 Offset: 0x23B38E4 VA: 0x23B38E4
	public static IDigest CreateHash(SignatureAndHashAlgorithm signatureAndHashAlgorithm) { }

	// RVA: 0x23B3990 Offset: 0x23B3990 VA: 0x23B3990
	public static IDigest CloneHash(byte hashAlgorithm, IDigest hash) { }

	// RVA: 0x23B21D8 Offset: 0x23B21D8 VA: 0x23B21D8
	public static IDigest CreatePrfHash(int prfAlgorithm) { }

	// RVA: 0x23B3EC8 Offset: 0x23B3EC8 VA: 0x23B3EC8
	public static IDigest ClonePrfHash(int prfAlgorithm, IDigest hash) { }

	// RVA: 0x23B3DFC Offset: 0x23B3DFC VA: 0x23B3DFC
	public static byte GetHashAlgorithmForPrfAlgorithm(int prfAlgorithm) { }

	// RVA: 0x23B3FF4 Offset: 0x23B3FF4 VA: 0x23B3FF4
	public static DerObjectIdentifier GetOidForHashAlgorithm(byte hashAlgorithm) { }

	// RVA: 0x23B41C8 Offset: 0x23B41C8 VA: 0x23B41C8
	internal static short GetClientCertificateType(Certificate clientCertificate, Certificate serverCertificate) { }

	// RVA: 0x23B44F4 Offset: 0x23B44F4 VA: 0x23B44F4
	internal static void TrackHashAlgorithms(TlsHandshakeHash handshakeHash, IList supportedSignatureAlgorithms) { }

	// RVA: 0x23B48C4 Offset: 0x23B48C4 VA: 0x23B48C4
	public static bool HasSigningCapability(byte clientCertificateType) { }

	// RVA: 0x23B48EC Offset: 0x23B48EC VA: 0x23B48EC
	public static TlsSigner CreateTlsSigner(byte clientCertificateType) { }

	// RVA: 0x23B49F8 Offset: 0x23B49F8 VA: 0x23B49F8
	private static byte[][] GenSsl3Const() { }

	// RVA: 0x23B0330 Offset: 0x23B0330 VA: 0x23B0330
	private static IList VectorOfOne(object obj) { }

	// RVA: 0x23B4AF8 Offset: 0x23B4AF8 VA: 0x23B4AF8
	public static int GetCipherType(int ciphersuite) { }

	// RVA: 0x23B4BC8 Offset: 0x23B4BC8 VA: 0x23B4BC8
	public static int GetEncryptionAlgorithm(int ciphersuite) { }

	// RVA: 0x23B4DBC Offset: 0x23B4DBC VA: 0x23B4DBC
	public static int GetKeyExchangeAlgorithm(int ciphersuite) { }

	// RVA: 0x23B4F50 Offset: 0x23B4F50 VA: 0x23B4F50
	public static int GetMacAlgorithm(int ciphersuite) { }

	// RVA: 0x23B5094 Offset: 0x23B5094 VA: 0x23B5094
	public static ProtocolVersion GetMinimumVersion(int ciphersuite) { }

	// RVA: 0x23B51E8 Offset: 0x23B51E8 VA: 0x23B51E8
	public static bool IsAeadCipherSuite(int ciphersuite) { }

	// RVA: 0x23B5258 Offset: 0x23B5258 VA: 0x23B5258
	public static bool IsBlockCipherSuite(int ciphersuite) { }

	// RVA: 0x23B52C8 Offset: 0x23B52C8 VA: 0x23B52C8
	public static bool IsStreamCipherSuite(int ciphersuite) { }

	// RVA: 0x23B5338 Offset: 0x23B5338 VA: 0x23B5338
	public static bool IsValidCipherSuiteForVersion(int cipherSuite, ProtocolVersion serverVersion) { }

	// RVA: 0x23B53E4 Offset: 0x23B53E4 VA: 0x23B53E4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Utilities
internal sealed class Pack // TypeDefIndex: 5006
{
	// Methods

	// RVA: 0x23B5520 Offset: 0x23B5520 VA: 0x23B5520
	private void .ctor() { }

	// RVA: 0x23B5528 Offset: 0x23B5528 VA: 0x23B5528
	internal static void UInt16_To_BE(ushort n, byte[] bs) { }

	// RVA: 0x23B5594 Offset: 0x23B5594 VA: 0x23B5594
	internal static void UInt16_To_BE(ushort n, byte[] bs, int off) { }

	// RVA: 0x23B5624 Offset: 0x23B5624 VA: 0x23B5624
	internal static ushort BE_To_UInt16(byte[] bs) { }

	// RVA: 0x23B5688 Offset: 0x23B5688 VA: 0x23B5688
	internal static ushort BE_To_UInt16(byte[] bs, int off) { }

	// RVA: 0x23B5710 Offset: 0x23B5710 VA: 0x23B5710
	internal static byte[] UInt32_To_BE(uint n) { }

	// RVA: 0x23B586C Offset: 0x23B586C VA: 0x23B586C
	internal static void UInt32_To_BE(uint n, byte[] bs) { }

	// RVA: 0x23B577C Offset: 0x23B577C VA: 0x23B577C
	internal static void UInt32_To_BE(uint n, byte[] bs, int off) { }

	// RVA: 0x23B5920 Offset: 0x23B5920 VA: 0x23B5920
	internal static byte[] UInt32_To_BE(uint[] ns) { }

	// RVA: 0x23B599C Offset: 0x23B599C VA: 0x23B599C
	internal static void UInt32_To_BE(uint[] ns, byte[] bs, int off) { }

	// RVA: 0x23B5A28 Offset: 0x23B5A28 VA: 0x23B5A28
	internal static uint BE_To_UInt32(byte[] bs) { }

	// RVA: 0x23B5AE0 Offset: 0x23B5AE0 VA: 0x23B5AE0
	internal static uint BE_To_UInt32(byte[] bs, int off) { }

	// RVA: 0x23B5BD4 Offset: 0x23B5BD4 VA: 0x23B5BD4
	internal static void BE_To_UInt32(byte[] bs, int off, uint[] ns) { }

	// RVA: 0x23B5C68 Offset: 0x23B5C68 VA: 0x23B5C68
	internal static byte[] UInt64_To_BE(ulong n) { }

	// RVA: 0x23B5D24 Offset: 0x23B5D24 VA: 0x23B5D24
	internal static void UInt64_To_BE(ulong n, byte[] bs) { }

	// RVA: 0x23B5CE4 Offset: 0x23B5CE4 VA: 0x23B5CE4
	internal static void UInt64_To_BE(ulong n, byte[] bs, int off) { }

	// RVA: 0x23B5D58 Offset: 0x23B5D58 VA: 0x23B5D58
	internal static byte[] UInt64_To_BE(ulong[] ns) { }

	// RVA: 0x23B5DD4 Offset: 0x23B5DD4 VA: 0x23B5DD4
	internal static void UInt64_To_BE(ulong[] ns, byte[] bs, int off) { }

	// RVA: 0x23B5E70 Offset: 0x23B5E70 VA: 0x23B5E70
	internal static ulong BE_To_UInt64(byte[] bs) { }

	// RVA: 0x23B5EA8 Offset: 0x23B5EA8 VA: 0x23B5EA8
	internal static ulong BE_To_UInt64(byte[] bs, int off) { }

	// RVA: 0x23B5EEC Offset: 0x23B5EEC VA: 0x23B5EEC
	internal static void BE_To_UInt64(byte[] bs, int off, ulong[] ns) { }

	// RVA: 0x23B5F98 Offset: 0x23B5F98 VA: 0x23B5F98
	internal static void UInt16_To_LE(ushort n, byte[] bs) { }

	// RVA: 0x23B6004 Offset: 0x23B6004 VA: 0x23B6004
	internal static void UInt16_To_LE(ushort n, byte[] bs, int off) { }

	// RVA: 0x23B6094 Offset: 0x23B6094 VA: 0x23B6094
	internal static ushort LE_To_UInt16(byte[] bs) { }

	// RVA: 0x23B60FC Offset: 0x23B60FC VA: 0x23B60FC
	internal static ushort LE_To_UInt16(byte[] bs, int off) { }

	// RVA: 0x23B6188 Offset: 0x23B6188 VA: 0x23B6188
	internal static byte[] UInt32_To_LE(uint n) { }

	// RVA: 0x23B62E4 Offset: 0x23B62E4 VA: 0x23B62E4
	internal static void UInt32_To_LE(uint n, byte[] bs) { }

	// RVA: 0x23B61F4 Offset: 0x23B61F4 VA: 0x23B61F4
	internal static void UInt32_To_LE(uint n, byte[] bs, int off) { }

	// RVA: 0x23B6398 Offset: 0x23B6398 VA: 0x23B6398
	internal static byte[] UInt32_To_LE(uint[] ns) { }

	// RVA: 0x23B6414 Offset: 0x23B6414 VA: 0x23B6414
	internal static void UInt32_To_LE(uint[] ns, byte[] bs, int off) { }

	// RVA: 0x23B64A0 Offset: 0x23B64A0 VA: 0x23B64A0
	internal static uint LE_To_UInt32(byte[] bs) { }

	// RVA: 0x23B6558 Offset: 0x23B6558 VA: 0x23B6558
	internal static uint LE_To_UInt32(byte[] bs, int off) { }

	// RVA: 0x23B664C Offset: 0x23B664C VA: 0x23B664C
	internal static void LE_To_UInt32(byte[] bs, int off, uint[] ns) { }

	// RVA: 0x23B66E0 Offset: 0x23B66E0 VA: 0x23B66E0
	internal static void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count) { }

	// RVA: 0x23B6780 Offset: 0x23B6780 VA: 0x23B6780
	internal static uint[] LE_To_UInt32(byte[] bs, int off, int count) { }

	// RVA: 0x23B6854 Offset: 0x23B6854 VA: 0x23B6854
	internal static byte[] UInt64_To_LE(ulong n) { }

	// RVA: 0x23B690C Offset: 0x23B690C VA: 0x23B690C
	internal static void UInt64_To_LE(ulong n, byte[] bs) { }

	// RVA: 0x23B68D0 Offset: 0x23B68D0 VA: 0x23B68D0
	internal static void UInt64_To_LE(ulong n, byte[] bs, int off) { }

	// RVA: 0x23B693C Offset: 0x23B693C VA: 0x23B693C
	internal static ulong LE_To_UInt64(byte[] bs) { }

	// RVA: 0x23B6978 Offset: 0x23B6978 VA: 0x23B6978
	internal static ulong LE_To_UInt64(byte[] bs, int off) { }
}

// Namespace: Org.BouncyCastle.Math
[Serializable]
public class BigInteger // TypeDefIndex: 5007
{
	// Fields
	internal static readonly int[][] primeLists; // 0x0
	internal static readonly int[] primeProducts; // 0x8
	private const long IMASK = 4294967295;
	private const ulong UIMASK = 4294967295;
	private static readonly int[] ZeroMagnitude; // 0x10
	private static readonly byte[] ZeroEncoding; // 0x18
	private static readonly BigInteger[] SMALL_CONSTANTS; // 0x20
	public static readonly BigInteger Zero; // 0x28
	public static readonly BigInteger One; // 0x30
	public static readonly BigInteger Two; // 0x38
	public static readonly BigInteger Three; // 0x40
	public static readonly BigInteger Ten; // 0x48
	private static readonly byte[] BitLengthTable; // 0x50
	private const int chunk2 = 1;
	private const int chunk8 = 1;
	private const int chunk10 = 19;
	private const int chunk16 = 16;
	private static readonly BigInteger radix2; // 0x58
	private static readonly BigInteger radix2E; // 0x60
	private static readonly BigInteger radix8; // 0x68
	private static readonly BigInteger radix8E; // 0x70
	private static readonly BigInteger radix10; // 0x78
	private static readonly BigInteger radix10E; // 0x80
	private static readonly BigInteger radix16; // 0x88
	private static readonly BigInteger radix16E; // 0x90
	private static readonly SecureRandom RandomSource; // 0x98
	private static readonly int[] ExpWindowThresholds; // 0xA0
	private const int BitsPerByte = 8;
	private const int BitsPerInt = 32;
	private const int BytesPerInt = 4;
	private int[] magnitude; // 0x10
	private int sign; // 0x18
	private int nBits; // 0x1C
	private int nBitLength; // 0x20
	private int mQuote; // 0x24

	// Properties
	public int BitCount { get; }
	public int BitLength { get; }
	public int IntValue { get; }
	public long LongValue { get; }
	public int SignValue { get; }

	// Methods

	// RVA: 0x23B69C0 Offset: 0x23B69C0 VA: 0x23B69C0
	private static void .cctor() { }

	// RVA: 0x23B8AE8 Offset: 0x23B8AE8 VA: 0x23B8AE8
	private void .ctor(int signum, int[] mag, bool checkMag) { }

	// RVA: 0x23B90E4 Offset: 0x23B90E4 VA: 0x23B90E4
	public void .ctor(string value) { }

	// RVA: 0x23B90EC Offset: 0x23B90EC VA: 0x23B90EC
	public void .ctor(string str, int radix) { }

	// RVA: 0x23B9C14 Offset: 0x23B9C14 VA: 0x23B9C14
	public void .ctor(byte[] bytes) { }

	// RVA: 0x23B9C50 Offset: 0x23B9C50 VA: 0x23B9C50
	public void .ctor(byte[] bytes, int offset, int length) { }

	// RVA: 0x23BA1DC Offset: 0x23BA1DC VA: 0x23BA1DC
	public void .ctor(int sign, byte[] bytes) { }

	// RVA: 0x23BA228 Offset: 0x23BA228 VA: 0x23BA228
	public void .ctor(int sign, byte[] bytes, int offset, int length) { }

	// RVA: 0x23BA378 Offset: 0x23BA378 VA: 0x23BA378
	public void .ctor(int sizeInBits, Random random) { }

	// RVA: 0x23BA564 Offset: 0x23BA564 VA: 0x23BA564
	public void .ctor(int bitLength, int certainty, Random random) { }

	// RVA: 0x23BA54C Offset: 0x23BA54C VA: 0x23BA54C
	private static int GetByteLength(int nBits) { }

	// RVA: 0x23BAB20 Offset: 0x23BAB20 VA: 0x23BAB20
	internal static BigInteger Arbitrary(int sizeInBits) { }

	// RVA: 0x23B9FBC Offset: 0x23B9FBC VA: 0x23B9FBC
	private static int[] MakeMagnitude(byte[] bytes, int offset, int length) { }

	// RVA: 0x23BABAC Offset: 0x23BABAC VA: 0x23BABAC
	public BigInteger Abs() { }

	// RVA: 0x23BAC38 Offset: 0x23BAC38 VA: 0x23BAC38
	private static int[] AddMagnitudes(int[] a, int[] b) { }

	// RVA: 0x23B9B18 Offset: 0x23B9B18 VA: 0x23B9B18
	public BigInteger Add(BigInteger value) { }

	// RVA: 0x23BAF0C Offset: 0x23BAF0C VA: 0x23BAF0C
	private BigInteger AddToMagnitude(int[] magToAdd) { }

	// RVA: 0x23BB130 Offset: 0x23BB130 VA: 0x23BB130
	public BigInteger And(BigInteger value) { }

	// RVA: 0x23BB544 Offset: 0x23BB544 VA: 0x23BB544
	public BigInteger AndNot(BigInteger val) { }

	// RVA: 0x23BB580 Offset: 0x23BB580 VA: 0x23BB580
	public int get_BitCount() { }

	// RVA: 0x23BB6C8 Offset: 0x23BB6C8 VA: 0x23BB6C8
	public static int BitCnt(int i) { }

	// RVA: 0x23BB6FC Offset: 0x23BB6FC VA: 0x23BB6FC
	private static int CalcBitLength(int sign, int indx, int[] mag) { }

	// RVA: 0x23BBA4C Offset: 0x23BBA4C VA: 0x23BBA4C
	public int get_BitLength() { }

	// RVA: 0x23BB86C Offset: 0x23BB86C VA: 0x23BB86C
	internal static int BitLen(int w) { }

	// RVA: 0x23BBAE8 Offset: 0x23BBAE8 VA: 0x23BBAE8
	private bool QuickPow2Check() { }

	// RVA: 0x23BBB0C Offset: 0x23BBB0C VA: 0x23BBB0C
	public int CompareTo(object obj) { }

	// RVA: 0x23BBCB4 Offset: 0x23BBCB4 VA: 0x23BBCB4
	private static int CompareTo(int xIndx, int[] x, int yIndx, int[] y) { }

	// RVA: 0x23BBDD0 Offset: 0x23BBDD0 VA: 0x23BBDD0
	private static int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y) { }

	// RVA: 0x23BBBE4 Offset: 0x23BBBE4 VA: 0x23BBBE4
	public int CompareTo(BigInteger value) { }

	// RVA: 0x23BBECC Offset: 0x23BBECC VA: 0x23BBECC
	private int[] Divide(int[] x, int[] y) { }

	// RVA: 0x23BCC4C Offset: 0x23BCC4C VA: 0x23BCC4C
	public BigInteger Divide(BigInteger val) { }

	// RVA: 0x23BD1BC Offset: 0x23BD1BC VA: 0x23BD1BC
	public BigInteger[] DivideAndRemainder(BigInteger val) { }

	// RVA: 0x23BD71C Offset: 0x23BD71C VA: 0x23BD71C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x23BD7EC Offset: 0x23BD7EC VA: 0x23BD7EC
	private bool IsEqualMagnitude(BigInteger x) { }

	// RVA: 0x23BD904 Offset: 0x23BD904 VA: 0x23BD904
	public BigInteger Gcd(BigInteger value) { }

	// RVA: 0x23BDA7C Offset: 0x23BDA7C VA: 0x23BDA7C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23BDB78 Offset: 0x23BDB78 VA: 0x23BDB78
	private BigInteger Inc() { }

	// RVA: 0x23BDDD0 Offset: 0x23BDDD0 VA: 0x23BDDD0
	public int get_IntValue() { }

	// RVA: 0x23BDE78 Offset: 0x23BDE78 VA: 0x23BDE78
	public bool IsProbablePrime(int certainty) { }

	// RVA: 0x23BDE80 Offset: 0x23BDE80 VA: 0x23BDE80
	internal bool IsProbablePrime(int certainty, bool randomlySelected) { }

	// RVA: 0x23BA8F0 Offset: 0x23BA8F0 VA: 0x23BA8F0
	private bool CheckProbablePrime(int certainty, Random random, bool randomlySelected) { }

	// RVA: 0x23BE51C Offset: 0x23BE51C VA: 0x23BE51C
	public bool RabinMillerTest(int certainty, Random random) { }

	// RVA: 0x23BE1F8 Offset: 0x23BE1F8 VA: 0x23BE1F8
	internal bool RabinMillerTest(int certainty, Random random, bool randomlySelected) { }

	// RVA: 0x23BF078 Offset: 0x23BF078 VA: 0x23BF078
	public long get_LongValue() { }

	// RVA: 0x23BF150 Offset: 0x23BF150 VA: 0x23BF150
	public BigInteger Max(BigInteger value) { }

	// RVA: 0x23BF17C Offset: 0x23BF17C VA: 0x23BF17C
	public BigInteger Min(BigInteger value) { }

	// RVA: 0x23BD998 Offset: 0x23BD998 VA: 0x23BD998
	public BigInteger Mod(BigInteger m) { }

	// RVA: 0x23BF1A8 Offset: 0x23BF1A8 VA: 0x23BF1A8
	public BigInteger ModInverse(BigInteger m) { }

	// RVA: 0x23BF330 Offset: 0x23BF330 VA: 0x23BF330
	private BigInteger ModInversePow2(BigInteger m) { }

	// RVA: 0x23BF758 Offset: 0x23BF758 VA: 0x23BF758
	private static int ModInverse32(int d) { }

	// RVA: 0x23BF720 Offset: 0x23BF720 VA: 0x23BF720
	private static long ModInverse64(long d) { }

	// RVA: 0x23BF5A8 Offset: 0x23BF5A8 VA: 0x23BF5A8
	private static BigInteger ExtEuclid(BigInteger a, BigInteger b, out BigInteger u1Out) { }

	// RVA: 0x23BF788 Offset: 0x23BF788 VA: 0x23BF788
	private static void ZeroOut(int[] x) { }

	// RVA: 0x23BF7BC Offset: 0x23BF7BC VA: 0x23BF7BC
	public BigInteger ModPow(BigInteger e, BigInteger m) { }

	// RVA: 0x23BFA60 Offset: 0x23BFA60 VA: 0x23BFA60
	private static BigInteger ModPowBarrett(BigInteger b, BigInteger e, BigInteger m) { }

	// RVA: 0x23C0244 Offset: 0x23C0244 VA: 0x23C0244
	private static BigInteger ReduceBarrett(BigInteger x, BigInteger m, BigInteger mr, BigInteger yu) { }

	// RVA: 0x23BE948 Offset: 0x23BE948 VA: 0x23BE948
	private static BigInteger ModPowMonty(BigInteger b, BigInteger e, BigInteger m, bool convert) { }

	// RVA: 0x23C03EC Offset: 0x23C03EC VA: 0x23C03EC
	private static int[] GetWindowList(int[] mag, int extraBits) { }

	// RVA: 0x23C190C Offset: 0x23C190C VA: 0x23C190C
	private static int CreateWindowEntry(int mult, int zeroes) { }

	// RVA: 0x23C1924 Offset: 0x23C1924 VA: 0x23C1924
	private static int[] Square(int[] w, int[] x) { }

	// RVA: 0x23C1C28 Offset: 0x23C1C28 VA: 0x23C1C28
	private static int[] Multiply(int[] x, int[] y, int[] z) { }

	// RVA: 0x23C0864 Offset: 0x23C0864 VA: 0x23C0864
	private int GetMQuote() { }

	// RVA: 0x23C1688 Offset: 0x23C1688 VA: 0x23C1688
	private static void MontgomeryReduce(int[] x, int[] m, uint mDash) { }

	// RVA: 0x23C1084 Offset: 0x23C1084 VA: 0x23C1084
	private static void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus) { }

	// RVA: 0x23C0948 Offset: 0x23C0948 VA: 0x23C0948
	private static void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus) { }

	// RVA: 0x23C1E18 Offset: 0x23C1E18 VA: 0x23C1E18
	private static uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash) { }

	// RVA: 0x23B991C Offset: 0x23B991C VA: 0x23B991C
	public BigInteger Multiply(BigInteger val) { }

	// RVA: 0x23C00C0 Offset: 0x23C00C0 VA: 0x23C00C0
	public BigInteger Square() { }

	// RVA: 0x23BABBC Offset: 0x23BABBC VA: 0x23BABBC
	public BigInteger Negate() { }

	// RVA: 0x23C1E44 Offset: 0x23C1E44 VA: 0x23C1E44
	public BigInteger NextProbablePrime() { }

	// RVA: 0x23BB518 Offset: 0x23BB518 VA: 0x23BB518
	public BigInteger Not() { }

	// RVA: 0x23B8EF8 Offset: 0x23B8EF8 VA: 0x23B8EF8
	public BigInteger Pow(int exp) { }

	// RVA: 0x23C2124 Offset: 0x23C2124 VA: 0x23C2124
	public static BigInteger ProbablePrime(int bitLength, Random random) { }

	// RVA: 0x23BE154 Offset: 0x23BE154 VA: 0x23BE154
	private int Remainder(int m) { }

	// RVA: 0x23C2198 Offset: 0x23C2198 VA: 0x23C2198
	private static int[] Remainder(int[] x, int[] y) { }

	// RVA: 0x23BE640 Offset: 0x23BE640 VA: 0x23BE640
	public BigInteger Remainder(BigInteger n) { }

	// RVA: 0x23BD5C4 Offset: 0x23BD5C4 VA: 0x23BD5C4
	private int[] LastNBits(int n) { }

	// RVA: 0x23C069C Offset: 0x23C069C VA: 0x23C069C
	private BigInteger DivideWords(int w) { }

	// RVA: 0x23C0798 Offset: 0x23C0798 VA: 0x23C0798
	private BigInteger RemainderWords(int w) { }

	// RVA: 0x23BC500 Offset: 0x23BC500 VA: 0x23BC500
	private static int[] ShiftLeft(int[] mag, int n) { }

	// RVA: 0x23C2684 Offset: 0x23C2684 VA: 0x23C2684
	private static int ShiftLeftOneInPlace(int[] x, int carry) { }

	// RVA: 0x23B97A8 Offset: 0x23B97A8 VA: 0x23B97A8
	public BigInteger ShiftLeft(int n) { }

	// RVA: 0x23BCA24 Offset: 0x23BCA24 VA: 0x23BCA24
	private static void ShiftRightInPlace(int start, int[] mag, int n) { }

	// RVA: 0x23BC8CC Offset: 0x23BC8CC VA: 0x23BC8CC
	private static void ShiftRightOneInPlace(int start, int[] mag) { }

	// RVA: 0x23BCEB8 Offset: 0x23BCEB8 VA: 0x23BCEB8
	public BigInteger ShiftRight(int n) { }

	// RVA: 0x23C2734 Offset: 0x23C2734 VA: 0x23C2734
	public int get_SignValue() { }

	// RVA: 0x23BC78C Offset: 0x23BC78C VA: 0x23BC78C
	private static int[] Subtract(int xStart, int[] x, int yStart, int[] y) { }

	// RVA: 0x23BAD7C Offset: 0x23BAD7C VA: 0x23BAD7C
	public BigInteger Subtract(BigInteger n) { }

	// RVA: 0x23BDCBC Offset: 0x23BDCBC VA: 0x23BDCBC
	private static int[] doSubBigLil(int[] bigMag, int[] lilMag) { }

	// RVA: 0x23C273C Offset: 0x23C273C VA: 0x23C273C
	public byte[] ToByteArray() { }

	// RVA: 0x23C2CB0 Offset: 0x23C2CB0 VA: 0x23C2CB0
	public byte[] ToByteArrayUnsigned() { }

	// RVA: 0x23C2744 Offset: 0x23C2744 VA: 0x23C2744
	private byte[] ToByteArray(bool unsigned) { }

	// RVA: 0x23C2CB8 Offset: 0x23C2CB8 VA: 0x23C2CB8 Slot: 3
	public override string ToString() { }

	// RVA: 0x23C2CC0 Offset: 0x23C2CC0 VA: 0x23C2CC0
	public string ToString(int radix) { }

	// RVA: 0x23C3918 Offset: 0x23C3918 VA: 0x23C3918
	private static void AppendZeroExtendedString(StringBuilder sb, string s, int minLength) { }

	// RVA: 0x23B8C54 Offset: 0x23B8C54 VA: 0x23B8C54
	private static BigInteger CreateUValueOf(ulong value) { }

	// RVA: 0x23C3998 Offset: 0x23C3998 VA: 0x23C3998
	private static BigInteger CreateValueOf(long value) { }

	// RVA: 0x23B8DE0 Offset: 0x23B8DE0 VA: 0x23B8DE0
	public static BigInteger ValueOf(long value) { }

	// RVA: 0x23C3A84 Offset: 0x23C3A84 VA: 0x23C3A84
	public int GetLowestSetBit() { }

	// RVA: 0x23BE524 Offset: 0x23BE524 VA: 0x23BE524
	private int GetLowestSetBitMaskFirst(int firstWordMask) { }

	// RVA: 0x23BE00C Offset: 0x23BE00C VA: 0x23BE00C
	public bool TestBit(int n) { }

	// RVA: 0x23C3A9C Offset: 0x23C3A9C VA: 0x23C3A9C
	public BigInteger Or(BigInteger value) { }

	// RVA: 0x23C3E64 Offset: 0x23C3E64 VA: 0x23C3E64
	public BigInteger Xor(BigInteger value) { }

	// RVA: 0x23C1FE8 Offset: 0x23C1FE8 VA: 0x23C1FE8
	public BigInteger SetBit(int n) { }

	// RVA: 0x23C438C Offset: 0x23C438C VA: 0x23C438C
	public BigInteger ClearBit(int n) { }

	// RVA: 0x23C44C8 Offset: 0x23C44C8 VA: 0x23C44C8
	public BigInteger FlipBit(int n) { }

	// RVA: 0x23C4228 Offset: 0x23C4228 VA: 0x23C4228
	private BigInteger FlipExistingBit(int n) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class SimpleBigDecimal // TypeDefIndex: 5008
{
	// Fields
	private readonly BigInteger bigInt; // 0x10
	private readonly int scale; // 0x18

	// Properties
	public int IntValue { get; }
	public long LongValue { get; }
	public int Scale { get; }

	// Methods

	// RVA: 0x23C45E0 Offset: 0x23C45E0 VA: 0x23C45E0
	public void .ctor(BigInteger bigInt, int scale) { }

	// RVA: 0x23C468C Offset: 0x23C468C VA: 0x23C468C
	private void .ctor(SimpleBigDecimal limBigDec) { }

	// RVA: 0x23C46E8 Offset: 0x23C46E8 VA: 0x23C46E8
	public static SimpleBigDecimal GetInstance(BigInteger val, int scale) { }

	// RVA: 0x23C4778 Offset: 0x23C4778 VA: 0x23C4778
	private void CheckScale(SimpleBigDecimal b) { }

	// RVA: 0x23C4824 Offset: 0x23C4824 VA: 0x23C4824
	public SimpleBigDecimal AdjustScale(int newScale) { }

	// RVA: 0x23C490C Offset: 0x23C490C VA: 0x23C490C
	public SimpleBigDecimal Add(SimpleBigDecimal b) { }

	// RVA: 0x23C49C0 Offset: 0x23C49C0 VA: 0x23C49C0
	public SimpleBigDecimal Add(BigInteger b) { }

	// RVA: 0x23C4A78 Offset: 0x23C4A78 VA: 0x23C4A78
	public SimpleBigDecimal Negate() { }

	// RVA: 0x23C4B08 Offset: 0x23C4B08 VA: 0x23C4B08
	public SimpleBigDecimal Subtract(SimpleBigDecimal b) { }

	// RVA: 0x23C4B44 Offset: 0x23C4B44 VA: 0x23C4B44
	public SimpleBigDecimal Subtract(BigInteger b) { }

	// RVA: 0x23C4BFC Offset: 0x23C4BFC VA: 0x23C4BFC
	public SimpleBigDecimal Multiply(SimpleBigDecimal b) { }

	// RVA: 0x23C4CB0 Offset: 0x23C4CB0 VA: 0x23C4CB0
	public SimpleBigDecimal Multiply(BigInteger b) { }

	// RVA: 0x23C4D48 Offset: 0x23C4D48 VA: 0x23C4D48
	public SimpleBigDecimal Divide(SimpleBigDecimal b) { }

	// RVA: 0x23C4E1C Offset: 0x23C4E1C VA: 0x23C4E1C
	public SimpleBigDecimal Divide(BigInteger b) { }

	// RVA: 0x23C4EB4 Offset: 0x23C4EB4 VA: 0x23C4EB4
	public SimpleBigDecimal ShiftLeft(int n) { }

	// RVA: 0x23C4F4C Offset: 0x23C4F4C VA: 0x23C4F4C
	public int CompareTo(SimpleBigDecimal val) { }

	// RVA: 0x23C4F98 Offset: 0x23C4F98 VA: 0x23C4F98
	public int CompareTo(BigInteger val) { }

	// RVA: 0x23C4FF4 Offset: 0x23C4FF4 VA: 0x23C4FF4
	public BigInteger Floor() { }

	// RVA: 0x23C5028 Offset: 0x23C5028 VA: 0x23C5028
	public BigInteger Round() { }

	// RVA: 0x23C50F4 Offset: 0x23C50F4 VA: 0x23C50F4
	public int get_IntValue() { }

	// RVA: 0x23C5120 Offset: 0x23C5120 VA: 0x23C5120
	public long get_LongValue() { }

	// RVA: 0x23C514C Offset: 0x23C514C VA: 0x23C514C
	public int get_Scale() { }

	// RVA: 0x23C5154 Offset: 0x23C5154 VA: 0x23C5154 Slot: 3
	public override string ToString() { }

	// RVA: 0x23C5518 Offset: 0x23C5518 VA: 0x23C5518 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x23C5600 Offset: 0x23C5600 VA: 0x23C5600 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class Tnaf // TypeDefIndex: 5009
{
	// Fields
	private static readonly BigInteger MinusOne; // 0x0
	private static readonly BigInteger MinusTwo; // 0x8
	private static readonly BigInteger MinusThree; // 0x10
	private static readonly BigInteger Four; // 0x18
	public const sbyte Width = 4;
	public const sbyte Pow2Width = 16;
	public static readonly ZTauElement[] Alpha0; // 0x20
	public static readonly sbyte[][] Alpha0Tnaf; // 0x28
	public static readonly ZTauElement[] Alpha1; // 0x30
	public static readonly sbyte[][] Alpha1Tnaf; // 0x38

	// Methods

	// RVA: 0x23C5644 Offset: 0x23C5644 VA: 0x23C5644
	public void .ctor() { }

	// RVA: 0x23C564C Offset: 0x23C564C VA: 0x23C564C
	public static BigInteger Norm(sbyte mu, ZTauElement lambda) { }

	// RVA: 0x23C5808 Offset: 0x23C5808 VA: 0x23C5808
	public static SimpleBigDecimal Norm(sbyte mu, SimpleBigDecimal u, SimpleBigDecimal v) { }

	// RVA: 0x23C5974 Offset: 0x23C5974 VA: 0x23C5974
	public static ZTauElement Round(SimpleBigDecimal lambda0, SimpleBigDecimal lambda1, sbyte mu) { }

	// RVA: 0x23C5E2C Offset: 0x23C5E2C VA: 0x23C5E2C
	public static SimpleBigDecimal ApproximateDivisionByN(BigInteger k, BigInteger s, BigInteger vm, sbyte a, int m, int c) { }

	// RVA: 0x23C5FF0 Offset: 0x23C5FF0 VA: 0x23C5FF0
	public static sbyte[] TauAdicNaf(sbyte mu, ZTauElement lambda) { }

	// RVA: 0x23C645C Offset: 0x23C645C VA: 0x23C645C
	public static AbstractF2mPoint Tau(AbstractF2mPoint p) { }

	// RVA: 0x23C6490 Offset: 0x23C6490 VA: 0x23C6490
	public static sbyte GetMu(AbstractF2mCurve curve) { }

	// RVA: 0x23C65B0 Offset: 0x23C65B0 VA: 0x23C65B0
	public static sbyte GetMu(ECFieldElement curveA) { }

	// RVA: 0x23C65F4 Offset: 0x23C65F4 VA: 0x23C65F4
	public static sbyte GetMu(int curveA) { }

	// RVA: 0x23C6604 Offset: 0x23C6604 VA: 0x23C6604
	public static BigInteger[] GetLucas(sbyte mu, int k, bool doV) { }

	// RVA: 0x23C6840 Offset: 0x23C6840 VA: 0x23C6840
	public static BigInteger GetTw(sbyte mu, int w) { }

	// RVA: 0x23C6A20 Offset: 0x23C6A20 VA: 0x23C6A20
	public static BigInteger[] GetSi(AbstractF2mCurve curve) { }

	// RVA: 0x23C6F0C Offset: 0x23C6F0C VA: 0x23C6F0C
	public static BigInteger[] GetSi(int fieldSize, int curveA, BigInteger cofactor) { }

	// RVA: 0x23C6E50 Offset: 0x23C6E50 VA: 0x23C6E50
	protected static int GetShiftsForCofactor(BigInteger h) { }

	// RVA: 0x23C726C Offset: 0x23C726C VA: 0x23C726C
	public static ZTauElement PartModReduction(BigInteger k, int m, sbyte a, BigInteger[] s, sbyte mu, sbyte c) { }

	// RVA: 0x23C75E8 Offset: 0x23C75E8 VA: 0x23C75E8
	public static AbstractF2mPoint MultiplyRTnaf(AbstractF2mPoint p, BigInteger k) { }

	// RVA: 0x23C77CC Offset: 0x23C77CC VA: 0x23C77CC
	public static AbstractF2mPoint MultiplyTnaf(AbstractF2mPoint p, ZTauElement lambda) { }

	// RVA: 0x23C7938 Offset: 0x23C7938 VA: 0x23C7938
	public static AbstractF2mPoint MultiplyFromTnaf(AbstractF2mPoint p, sbyte[] u) { }

	// RVA: 0x23C7C38 Offset: 0x23C7C38 VA: 0x23C7C38
	public static sbyte[] TauAdicWNaf(sbyte mu, ZTauElement lambda, sbyte width, BigInteger pow2w, BigInteger tw, ZTauElement[] alpha) { }

	// RVA: 0x23C8154 Offset: 0x23C8154 VA: 0x23C8154
	public static AbstractF2mPoint[] GetPreComp(AbstractF2mPoint p, sbyte a) { }

	// RVA: 0x23C8388 Offset: 0x23C8388 VA: 0x23C8388
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class ZTauElement // TypeDefIndex: 5010
{
	// Fields
	public readonly BigInteger u; // 0x10
	public readonly BigInteger v; // 0x18

	// Methods

	// RVA: 0x2650A68 Offset: 0x2650A68 VA: 0x2650A68
	public void .ctor(BigInteger u, BigInteger v) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519 : AbstractFpCurve // TypeDefIndex: 5011
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int Curve25519_DEFAULT_COORDS = 4;
	protected readonly Curve25519Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2653138 Offset: 0x2653138 VA: 0x2653138
	public void .ctor() { }

	// RVA: 0x265331C Offset: 0x265331C VA: 0x265331C Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2653374 Offset: 0x2653374 VA: 0x2653374 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2653380 Offset: 0x2653380 VA: 0x2653380 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x26533E8 Offset: 0x26533E8 VA: 0x26533E8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26533F0 Offset: 0x26533F0 VA: 0x26533F0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x265346C Offset: 0x265346C VA: 0x265346C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26535F0 Offset: 0x26535F0 VA: 0x26535F0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2653750 Offset: 0x2653750 VA: 0x2653750 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26537F0 Offset: 0x26537F0 VA: 0x26537F0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519Field // TypeDefIndex: 5012
{
	// Fields
	internal static readonly uint[] P; // 0x0
	private const uint P7 = 2147483647;
	private static readonly uint[] PExt; // 0x8
	private const uint PInv = 19;

	// Methods

	// RVA: 0x2653874 Offset: 0x2653874 VA: 0x2653874
	public void .ctor() { }

	// RVA: 0x265387C Offset: 0x265387C VA: 0x265387C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2653A18 Offset: 0x2653A18 VA: 0x2653A18
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2653D08 Offset: 0x2653D08 VA: 0x2653D08
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2653DD0 Offset: 0x2653DD0 VA: 0x2653DD0
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2653E94 Offset: 0x2653E94 VA: 0x2653E94
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2653F7C Offset: 0x2653F7C VA: 0x2653F7C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x26541B0 Offset: 0x26541B0 VA: 0x26541B0
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2654280 Offset: 0x2654280 VA: 0x2654280
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2654014 Offset: 0x2654014 VA: 0x2654014
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x265432C Offset: 0x265432C VA: 0x265432C
	public static void Reduce27(uint x, uint[] z) { }

	// RVA: 0x265445C Offset: 0x265445C VA: 0x265445C
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x26544EC Offset: 0x26544EC VA: 0x26544EC
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x26545D0 Offset: 0x26545D0 VA: 0x26545D0
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2654740 Offset: 0x2654740 VA: 0x2654740
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x26549F8 Offset: 0x26549F8 VA: 0x26549F8
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x265466C Offset: 0x265466C VA: 0x265466C
	private static uint AddPTo(uint[] z) { }

	// RVA: 0x26547E0 Offset: 0x26547E0 VA: 0x26547E0
	private static uint AddPExtTo(uint[] zz) { }

	// RVA: 0x2653948 Offset: 0x2653948 VA: 0x2653948
	private static int SubPFrom(uint[] z) { }

	// RVA: 0x2653AEC Offset: 0x2653AEC VA: 0x2653AEC
	private static int SubPExtFrom(uint[] zz) { }

	// RVA: 0x2654AC4 Offset: 0x2654AC4 VA: 0x2654AC4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519FieldElement : ECFieldElement // TypeDefIndex: 5013
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	private static readonly uint[] PRECOMP_POW2; // 0x8
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x26534CC Offset: 0x26534CC VA: 0x26534CC
	public void .ctor(BigInteger x) { }

	// RVA: 0x2654B78 Offset: 0x2654B78 VA: 0x2654B78
	public void .ctor() { }

	// RVA: 0x2654BA8 Offset: 0x2654BA8 VA: 0x2654BA8
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2654BD4 Offset: 0x2654BD4 VA: 0x2654BD4 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2654BE0 Offset: 0x2654BE0 VA: 0x2654BE0 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2654BEC Offset: 0x2654BEC VA: 0x2654BEC Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2654C14 Offset: 0x2654C14 VA: 0x2654C14 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2654C20 Offset: 0x2654C20 VA: 0x2654C20 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2654C68 Offset: 0x2654C68 VA: 0x2654C68 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2654CE4 Offset: 0x2654CE4 VA: 0x2654CE4 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2654E88 Offset: 0x2654E88 VA: 0x2654E88 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2654F2C Offset: 0x2654F2C VA: 0x2654F2C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26550D0 Offset: 0x26550D0 VA: 0x26550D0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2655274 Offset: 0x2655274 VA: 0x2655274 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2655458 Offset: 0x2655458 VA: 0x2655458 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26554FC Offset: 0x26554FC VA: 0x26554FC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x26555A0 Offset: 0x26555A0 VA: 0x26555A0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2655680 Offset: 0x2655680 VA: 0x2655680 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x265595C Offset: 0x265595C VA: 0x265595C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x26559F8 Offset: 0x26559F8 VA: 0x26559F8 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2655A94 Offset: 0x2655A94 VA: 0x2655A94 Slot: 27
	public virtual bool Equals(Curve25519FieldElement other) { }

	// RVA: 0x2655AC0 Offset: 0x2655AC0 VA: 0x2655AC0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2655B68 Offset: 0x2655B68 VA: 0x2655B68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519Point : AbstractFpPoint // TypeDefIndex: 5014
{
	// Methods

	// RVA: 0x2653314 Offset: 0x2653314 VA: 0x2653314
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2653678 Offset: 0x2653678 VA: 0x2653678
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26537E4 Offset: 0x26537E4 VA: 0x26537E4
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2655C1C Offset: 0x2655C1C VA: 0x2655C1C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2655CBC Offset: 0x2655CBC VA: 0x2655CBC Slot: 14
	public override ECFieldElement GetZCoord(int index) { }

	// RVA: 0x2655CDC Offset: 0x2655CDC VA: 0x2655CDC Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x26567B8 Offset: 0x26567B8 VA: 0x26567B8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2656878 Offset: 0x2656878 VA: 0x2656878 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2656980 Offset: 0x2656980 VA: 0x2656980 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2656A20 Offset: 0x2656A20 VA: 0x2656A20 Slot: 29
	public override ECPoint Negate() { }

	// RVA: 0x2656B28 Offset: 0x2656B28 VA: 0x2656B28 Slot: 35
	protected virtual Curve25519FieldElement CalculateJacobianModifiedW(Curve25519FieldElement Z, uint[] ZSquared) { }

	// RVA: 0x2656D34 Offset: 0x2656D34 VA: 0x2656D34 Slot: 36
	protected virtual Curve25519FieldElement GetJacobianModifiedW() { }

