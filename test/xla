	public static byte[] ReadOpaque16(Stream input) { }

	// RVA: 0x1E4D194 Offset: 0x1E4D194 VA: 0x1E4D194
	public static byte[] ReadOpaque24(Stream input) { }

	// RVA: 0x1E4D200 Offset: 0x1E4D200 VA: 0x1E4D200
	public static byte[] ReadUint8Array(int count, Stream input) { }

	// RVA: 0x1E4D2F0 Offset: 0x1E4D2F0 VA: 0x1E4D2F0
	public static int[] ReadUint16Array(int count, Stream input) { }

	// RVA: 0x1E4D3E0 Offset: 0x1E4D3E0 VA: 0x1E4D3E0
	public static ProtocolVersion ReadVersion(byte[] buf, int offset) { }

	// RVA: 0x1E4D4B8 Offset: 0x1E4D4B8 VA: 0x1E4D4B8
	public static ProtocolVersion ReadVersion(Stream input) { }

	// RVA: 0x1E4D5A8 Offset: 0x1E4D5A8 VA: 0x1E4D5A8
	public static int ReadVersionRaw(byte[] buf, int offset) { }

	// RVA: 0x1E4D630 Offset: 0x1E4D630 VA: 0x1E4D630
	public static int ReadVersionRaw(Stream input) { }

	// RVA: 0x1E4D6F4 Offset: 0x1E4D6F4 VA: 0x1E4D6F4
	public static Asn1Object ReadAsn1Object(byte[] encoding) { }

	// RVA: 0x1E4D834 Offset: 0x1E4D834 VA: 0x1E4D834
	public static Asn1Object ReadDerObject(byte[] encoding) { }

	// RVA: 0x1E4D910 Offset: 0x1E4D910 VA: 0x1E4D910
	public static void WriteGmtUnixTime(byte[] buf, int offset) { }

	// RVA: 0x1E4DA64 Offset: 0x1E4DA64 VA: 0x1E4DA64
	public static void WriteVersion(ProtocolVersion version, Stream output) { }

	// RVA: 0x1E48F4C Offset: 0x1E48F4C VA: 0x1E48F4C
	public static void WriteVersion(ProtocolVersion version, byte[] buf, int offset) { }

	// RVA: 0x1E4DAF4 Offset: 0x1E4DAF4 VA: 0x1E4DAF4
	public static IList GetDefaultDssSignatureAlgorithms() { }

	// RVA: 0x1E4DC64 Offset: 0x1E4DC64 VA: 0x1E4DC64
	public static IList GetDefaultECDsaSignatureAlgorithms() { }

	// RVA: 0x1E4DCE8 Offset: 0x1E4DCE8 VA: 0x1E4DCE8
	public static IList GetDefaultRsaSignatureAlgorithms() { }

	// RVA: 0x1E4DD6C Offset: 0x1E4DD6C VA: 0x1E4DD6C
	public static byte[] GetExtensionData(IDictionary extensions, int extensionType) { }

	// RVA: 0x1E4DEC4 Offset: 0x1E4DEC4 VA: 0x1E4DEC4
	public static IList GetDefaultSupportedSignatureAlgorithms() { }

	// RVA: 0x1E4E0E0 Offset: 0x1E4E0E0 VA: 0x1E4E0E0
	public static SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(TlsContext context, TlsSignerCredentials signerCredentials) { }

	// RVA: 0x1E4E218 Offset: 0x1E4E218 VA: 0x1E4E218
	public static bool HasExpectedEmptyExtensionData(IDictionary extensions, int extensionType, byte alertDescription) { }

	// RVA: 0x1E4E2E0 Offset: 0x1E4E2E0 VA: 0x1E4E2E0
	public static TlsSession ImportSession(byte[] sessionID, SessionParameters sessionParameters) { }

	// RVA: 0x1E4E350 Offset: 0x1E4E350 VA: 0x1E4E350
	public static bool IsSignatureAlgorithmsExtensionAllowed(ProtocolVersion clientVersion) { }

	// RVA: 0x1E4E3F0 Offset: 0x1E4E3F0 VA: 0x1E4E3F0
	public static void AddSignatureAlgorithmsExtension(IDictionary extensions, IList supportedSignatureAlgorithms) { }

	// RVA: 0x1E4E5B4 Offset: 0x1E4E5B4 VA: 0x1E4E5B4
	public static IList GetSignatureAlgorithmsExtension(IDictionary extensions) { }

	// RVA: 0x1E4E50C Offset: 0x1E4E50C VA: 0x1E4E50C
	public static byte[] CreateSignatureAlgorithmsExtension(IList supportedSignatureAlgorithms) { }

	// RVA: 0x1E4E650 Offset: 0x1E4E650 VA: 0x1E4E650
	public static IList ReadSignatureAlgorithmsExtension(byte[] extensionData) { }

	// RVA: 0x1E4E760 Offset: 0x1E4E760 VA: 0x1E4E760
	public static void EncodeSupportedSignatureAlgorithms(IList supportedSignatureAlgorithms, bool allowAnonymous, Stream output) { }

	// RVA: 0x1E4ED08 Offset: 0x1E4ED08 VA: 0x1E4ED08
	public static IList ParseSupportedSignatureAlgorithms(bool allowAnonymous, Stream input) { }

	// RVA: 0x1E4EEF4 Offset: 0x1E4EEF4 VA: 0x1E4EEF4
	public static void VerifySupportedSignatureAlgorithm(IList supportedSignatureAlgorithms, SignatureAndHashAlgorithm signatureAlgorithm) { }

	// RVA: 0x1E4F480 Offset: 0x1E4F480 VA: 0x1E4F480
	public static byte[] PRF(TlsContext context, byte[] secret, string asciiLabel, byte[] seed, int size) { }

	// RVA: 0x1E4FDA0 Offset: 0x1E4FDA0 VA: 0x1E4FDA0
	public static byte[] PRF_legacy(byte[] secret, string asciiLabel, byte[] seed, int size) { }

	// RVA: 0x1E4F828 Offset: 0x1E4F828 VA: 0x1E4F828
	internal static byte[] PRF_legacy(byte[] secret, byte[] label, byte[] labelSeed, int size) { }

	// RVA: 0x1E4F728 Offset: 0x1E4F728 VA: 0x1E4F728
	internal static byte[] Concat(byte[] a, byte[] b) { }

	// RVA: 0x1E4FAB8 Offset: 0x1E4FAB8 VA: 0x1E4FAB8
	internal static void HMacHash(IDigest digest, byte[] secret, byte[] seed, byte[] output) { }

	// RVA: 0x1E4772C Offset: 0x1E4772C VA: 0x1E4772C
	internal static void ValidateKeyUsage(X509CertificateStructure c, int keyUsageBits) { }

	// RVA: 0x1E4A4F0 Offset: 0x1E4A4F0 VA: 0x1E4A4F0
	internal static byte[] CalculateKeyBlock(TlsContext context, int size) { }

	// RVA: 0x1E4FE4C Offset: 0x1E4FE4C VA: 0x1E4FE4C
	internal static byte[] CalculateKeyBlock_Ssl(byte[] master_secret, byte[] random, int size) { }

	// RVA: 0x1E50484 Offset: 0x1E50484 VA: 0x1E50484
	internal static byte[] CalculateMasterSecret(TlsContext context, byte[] pre_master_secret) { }

	// RVA: 0x1E506CC Offset: 0x1E506CC VA: 0x1E506CC
	internal static byte[] CalculateMasterSecret_Ssl(byte[] pre_master_secret, byte[] random) { }

	// RVA: 0x1E50CE4 Offset: 0x1E50CE4 VA: 0x1E50CE4
	internal static byte[] CalculateVerifyData(TlsContext context, string asciiLabel, byte[] handshakeHash) { }

	// RVA: 0x1E48B80 Offset: 0x1E48B80 VA: 0x1E48B80
	public static IDigest CreateHash(byte hashAlgorithm) { }

	// RVA: 0x1E50E68 Offset: 0x1E50E68 VA: 0x1E50E68
	public static IDigest CreateHash(SignatureAndHashAlgorithm signatureAndHashAlgorithm) { }

	// RVA: 0x1E50F14 Offset: 0x1E50F14 VA: 0x1E50F14
	public static IDigest CloneHash(byte hashAlgorithm, IDigest hash) { }

	// RVA: 0x1E4FA20 Offset: 0x1E4FA20 VA: 0x1E4FA20
	public static IDigest CreatePrfHash(int prfAlgorithm) { }

	// RVA: 0x1E5144C Offset: 0x1E5144C VA: 0x1E5144C
	public static IDigest ClonePrfHash(int prfAlgorithm, IDigest hash) { }

	// RVA: 0x1E51380 Offset: 0x1E51380 VA: 0x1E51380
	public static byte GetHashAlgorithmForPrfAlgorithm(int prfAlgorithm) { }

	// RVA: 0x1E48CF4 Offset: 0x1E48CF4 VA: 0x1E48CF4
	public static DerObjectIdentifier GetOidForHashAlgorithm(byte hashAlgorithm) { }

	// RVA: 0x1E51578 Offset: 0x1E51578 VA: 0x1E51578
	internal static short GetClientCertificateType(Certificate clientCertificate, Certificate serverCertificate) { }

	// RVA: 0x1E518A4 Offset: 0x1E518A4 VA: 0x1E518A4
	internal static void TrackHashAlgorithms(TlsHandshakeHash handshakeHash, IList supportedSignatureAlgorithms) { }

	// RVA: 0x1E51C74 Offset: 0x1E51C74 VA: 0x1E51C74
	public static bool HasSigningCapability(byte clientCertificateType) { }

	// RVA: 0x1E51C9C Offset: 0x1E51C9C VA: 0x1E51C9C
	public static TlsSigner CreateTlsSigner(byte clientCertificateType) { }

	// RVA: 0x1E51DA8 Offset: 0x1E51DA8 VA: 0x1E51DA8
	private static byte[][] GenSsl3Const() { }

	// RVA: 0x1E4DB78 Offset: 0x1E4DB78 VA: 0x1E4DB78
	private static IList VectorOfOne(object obj) { }

	// RVA: 0x1E51EA8 Offset: 0x1E51EA8 VA: 0x1E51EA8
	public static int GetCipherType(int ciphersuite) { }

	// RVA: 0x1E51F78 Offset: 0x1E51F78 VA: 0x1E51F78
	public static int GetEncryptionAlgorithm(int ciphersuite) { }

	// RVA: 0x1E5216C Offset: 0x1E5216C VA: 0x1E5216C
	public static int GetKeyExchangeAlgorithm(int ciphersuite) { }

	// RVA: 0x1E52300 Offset: 0x1E52300 VA: 0x1E52300
	public static int GetMacAlgorithm(int ciphersuite) { }

	// RVA: 0x1E52444 Offset: 0x1E52444 VA: 0x1E52444
	public static ProtocolVersion GetMinimumVersion(int ciphersuite) { }

	// RVA: 0x1E52598 Offset: 0x1E52598 VA: 0x1E52598
	public static bool IsAeadCipherSuite(int ciphersuite) { }

	// RVA: 0x1E52608 Offset: 0x1E52608 VA: 0x1E52608
	public static bool IsBlockCipherSuite(int ciphersuite) { }

	// RVA: 0x1E52678 Offset: 0x1E52678 VA: 0x1E52678
	public static bool IsStreamCipherSuite(int ciphersuite) { }

	// RVA: 0x1E526E8 Offset: 0x1E526E8 VA: 0x1E526E8
	public static bool IsValidCipherSuiteForVersion(int cipherSuite, ProtocolVersion serverVersion) { }

	// RVA: 0x1E52794 Offset: 0x1E52794 VA: 0x1E52794
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Utilities
internal sealed class Pack // TypeDefIndex: 5006
{
	// Methods

	// RVA: 0x1E528D0 Offset: 0x1E528D0 VA: 0x1E528D0
	private void .ctor() { }

	// RVA: 0x1E528D8 Offset: 0x1E528D8 VA: 0x1E528D8
	internal static void UInt16_To_BE(ushort n, byte[] bs) { }

	// RVA: 0x1E52944 Offset: 0x1E52944 VA: 0x1E52944
	internal static void UInt16_To_BE(ushort n, byte[] bs, int off) { }

	// RVA: 0x1E529D4 Offset: 0x1E529D4 VA: 0x1E529D4
	internal static ushort BE_To_UInt16(byte[] bs) { }

	// RVA: 0x1E52A38 Offset: 0x1E52A38 VA: 0x1E52A38
	internal static ushort BE_To_UInt16(byte[] bs, int off) { }

	// RVA: 0x1E52AC0 Offset: 0x1E52AC0 VA: 0x1E52AC0
	internal static byte[] UInt32_To_BE(uint n) { }

	// RVA: 0x1E52C1C Offset: 0x1E52C1C VA: 0x1E52C1C
	internal static void UInt32_To_BE(uint n, byte[] bs) { }

	// RVA: 0x1E52B2C Offset: 0x1E52B2C VA: 0x1E52B2C
	internal static void UInt32_To_BE(uint n, byte[] bs, int off) { }

	// RVA: 0x1E52CD0 Offset: 0x1E52CD0 VA: 0x1E52CD0
	internal static byte[] UInt32_To_BE(uint[] ns) { }

	// RVA: 0x1E52D4C Offset: 0x1E52D4C VA: 0x1E52D4C
	internal static void UInt32_To_BE(uint[] ns, byte[] bs, int off) { }

	// RVA: 0x1E52DD8 Offset: 0x1E52DD8 VA: 0x1E52DD8
	internal static uint BE_To_UInt32(byte[] bs) { }

	// RVA: 0x1E52E90 Offset: 0x1E52E90 VA: 0x1E52E90
	internal static uint BE_To_UInt32(byte[] bs, int off) { }

	// RVA: 0x1E52F84 Offset: 0x1E52F84 VA: 0x1E52F84
	internal static void BE_To_UInt32(byte[] bs, int off, uint[] ns) { }

	// RVA: 0x1E53018 Offset: 0x1E53018 VA: 0x1E53018
	internal static byte[] UInt64_To_BE(ulong n) { }

	// RVA: 0x1E530D4 Offset: 0x1E530D4 VA: 0x1E530D4
	internal static void UInt64_To_BE(ulong n, byte[] bs) { }

	// RVA: 0x1E53094 Offset: 0x1E53094 VA: 0x1E53094
	internal static void UInt64_To_BE(ulong n, byte[] bs, int off) { }

	// RVA: 0x1E53108 Offset: 0x1E53108 VA: 0x1E53108
	internal static byte[] UInt64_To_BE(ulong[] ns) { }

	// RVA: 0x1E53184 Offset: 0x1E53184 VA: 0x1E53184
	internal static void UInt64_To_BE(ulong[] ns, byte[] bs, int off) { }

	// RVA: 0x1E53220 Offset: 0x1E53220 VA: 0x1E53220
	internal static ulong BE_To_UInt64(byte[] bs) { }

	// RVA: 0x1E53258 Offset: 0x1E53258 VA: 0x1E53258
	internal static ulong BE_To_UInt64(byte[] bs, int off) { }

	// RVA: 0x1E5329C Offset: 0x1E5329C VA: 0x1E5329C
	internal static void BE_To_UInt64(byte[] bs, int off, ulong[] ns) { }

	// RVA: 0x1E53348 Offset: 0x1E53348 VA: 0x1E53348
	internal static void UInt16_To_LE(ushort n, byte[] bs) { }

	// RVA: 0x1E533B4 Offset: 0x1E533B4 VA: 0x1E533B4
	internal static void UInt16_To_LE(ushort n, byte[] bs, int off) { }

	// RVA: 0x1E53444 Offset: 0x1E53444 VA: 0x1E53444
	internal static ushort LE_To_UInt16(byte[] bs) { }

	// RVA: 0x1E534AC Offset: 0x1E534AC VA: 0x1E534AC
	internal static ushort LE_To_UInt16(byte[] bs, int off) { }

	// RVA: 0x1E53538 Offset: 0x1E53538 VA: 0x1E53538
	internal static byte[] UInt32_To_LE(uint n) { }

	// RVA: 0x1E53694 Offset: 0x1E53694 VA: 0x1E53694
	internal static void UInt32_To_LE(uint n, byte[] bs) { }

	// RVA: 0x1E535A4 Offset: 0x1E535A4 VA: 0x1E535A4
	internal static void UInt32_To_LE(uint n, byte[] bs, int off) { }

	// RVA: 0x1E53748 Offset: 0x1E53748 VA: 0x1E53748
	internal static byte[] UInt32_To_LE(uint[] ns) { }

	// RVA: 0x1E537C4 Offset: 0x1E537C4 VA: 0x1E537C4
	internal static void UInt32_To_LE(uint[] ns, byte[] bs, int off) { }

	// RVA: 0x1E53850 Offset: 0x1E53850 VA: 0x1E53850
	internal static uint LE_To_UInt32(byte[] bs) { }

	// RVA: 0x1E53908 Offset: 0x1E53908 VA: 0x1E53908
	internal static uint LE_To_UInt32(byte[] bs, int off) { }

	// RVA: 0x1E539FC Offset: 0x1E539FC VA: 0x1E539FC
	internal static void LE_To_UInt32(byte[] bs, int off, uint[] ns) { }

	// RVA: 0x1E53A90 Offset: 0x1E53A90 VA: 0x1E53A90
	internal static void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count) { }

	// RVA: 0x1E53B30 Offset: 0x1E53B30 VA: 0x1E53B30
	internal static uint[] LE_To_UInt32(byte[] bs, int off, int count) { }

	// RVA: 0x1E53C04 Offset: 0x1E53C04 VA: 0x1E53C04
	internal static byte[] UInt64_To_LE(ulong n) { }

	// RVA: 0x1E53CBC Offset: 0x1E53CBC VA: 0x1E53CBC
	internal static void UInt64_To_LE(ulong n, byte[] bs) { }

	// RVA: 0x1E53C80 Offset: 0x1E53C80 VA: 0x1E53C80
	internal static void UInt64_To_LE(ulong n, byte[] bs, int off) { }

	// RVA: 0x1E53CEC Offset: 0x1E53CEC VA: 0x1E53CEC
	internal static ulong LE_To_UInt64(byte[] bs) { }

	// RVA: 0x1E53D28 Offset: 0x1E53D28 VA: 0x1E53D28
	internal static ulong LE_To_UInt64(byte[] bs, int off) { }
}

// Namespace: Org.BouncyCastle.Math
[Serializable]
public class BigInteger // TypeDefIndex: 5007
{
	// Fields
	internal static readonly int[][] primeLists; // 0x0
	internal static readonly int[] primeProducts; // 0x8
	private const long IMASK = 4294967295;
	private const ulong UIMASK = 4294967295;
	private static readonly int[] ZeroMagnitude; // 0x10
	private static readonly byte[] ZeroEncoding; // 0x18
	private static readonly BigInteger[] SMALL_CONSTANTS; // 0x20
	public static readonly BigInteger Zero; // 0x28
	public static readonly BigInteger One; // 0x30
	public static readonly BigInteger Two; // 0x38
	public static readonly BigInteger Three; // 0x40
	public static readonly BigInteger Ten; // 0x48
	private static readonly byte[] BitLengthTable; // 0x50
	private const int chunk2 = 1;
	private const int chunk8 = 1;
	private const int chunk10 = 19;
	private const int chunk16 = 16;
	private static readonly BigInteger radix2; // 0x58
	private static readonly BigInteger radix2E; // 0x60
	private static readonly BigInteger radix8; // 0x68
	private static readonly BigInteger radix8E; // 0x70
	private static readonly BigInteger radix10; // 0x78
	private static readonly BigInteger radix10E; // 0x80
	private static readonly BigInteger radix16; // 0x88
	private static readonly BigInteger radix16E; // 0x90
	private static readonly SecureRandom RandomSource; // 0x98
	private static readonly int[] ExpWindowThresholds; // 0xA0
	private const int BitsPerByte = 8;
	private const int BitsPerInt = 32;
	private const int BytesPerInt = 4;
	private int[] magnitude; // 0x10
	private int sign; // 0x18
	private int nBits; // 0x1C
	private int nBitLength; // 0x20
	private int mQuote; // 0x24

	// Properties
	public int BitCount { get; }
	public int BitLength { get; }
	public int IntValue { get; }
	public long LongValue { get; }
	public int SignValue { get; }

	// Methods

	// RVA: 0x1E53D70 Offset: 0x1E53D70 VA: 0x1E53D70
	private static void .cctor() { }

	// RVA: 0x1E55E98 Offset: 0x1E55E98 VA: 0x1E55E98
	private void .ctor(int signum, int[] mag, bool checkMag) { }

	// RVA: 0x1E56494 Offset: 0x1E56494 VA: 0x1E56494
	public void .ctor(string value) { }

	// RVA: 0x1E5649C Offset: 0x1E5649C VA: 0x1E5649C
	public void .ctor(string str, int radix) { }

	// RVA: 0x1E56FC4 Offset: 0x1E56FC4 VA: 0x1E56FC4
	public void .ctor(byte[] bytes) { }

	// RVA: 0x1E57000 Offset: 0x1E57000 VA: 0x1E57000
	public void .ctor(byte[] bytes, int offset, int length) { }

	// RVA: 0x1E5758C Offset: 0x1E5758C VA: 0x1E5758C
	public void .ctor(int sign, byte[] bytes) { }

	// RVA: 0x1E575D8 Offset: 0x1E575D8 VA: 0x1E575D8
	public void .ctor(int sign, byte[] bytes, int offset, int length) { }

	// RVA: 0x1E57728 Offset: 0x1E57728 VA: 0x1E57728
	public void .ctor(int sizeInBits, Random random) { }

	// RVA: 0x1E57914 Offset: 0x1E57914 VA: 0x1E57914
	public void .ctor(int bitLength, int certainty, Random random) { }

	// RVA: 0x1E578FC Offset: 0x1E578FC VA: 0x1E578FC
	private static int GetByteLength(int nBits) { }

	// RVA: 0x1E57ED0 Offset: 0x1E57ED0 VA: 0x1E57ED0
	internal static BigInteger Arbitrary(int sizeInBits) { }

	// RVA: 0x1E5736C Offset: 0x1E5736C VA: 0x1E5736C
	private static int[] MakeMagnitude(byte[] bytes, int offset, int length) { }

	// RVA: 0x1E57F5C Offset: 0x1E57F5C VA: 0x1E57F5C
	public BigInteger Abs() { }

	// RVA: 0x1E57FE8 Offset: 0x1E57FE8 VA: 0x1E57FE8
	private static int[] AddMagnitudes(int[] a, int[] b) { }

	// RVA: 0x1E56EC8 Offset: 0x1E56EC8 VA: 0x1E56EC8
	public BigInteger Add(BigInteger value) { }

	// RVA: 0x1E582BC Offset: 0x1E582BC VA: 0x1E582BC
	private BigInteger AddToMagnitude(int[] magToAdd) { }

	// RVA: 0x1E584E0 Offset: 0x1E584E0 VA: 0x1E584E0
	public BigInteger And(BigInteger value) { }

	// RVA: 0x1E588F4 Offset: 0x1E588F4 VA: 0x1E588F4
	public BigInteger AndNot(BigInteger val) { }

	// RVA: 0x1E58930 Offset: 0x1E58930 VA: 0x1E58930
	public int get_BitCount() { }

	// RVA: 0x1E58A78 Offset: 0x1E58A78 VA: 0x1E58A78
	public static int BitCnt(int i) { }

	// RVA: 0x1E58AAC Offset: 0x1E58AAC VA: 0x1E58AAC
	private static int CalcBitLength(int sign, int indx, int[] mag) { }

	// RVA: 0x1E58DFC Offset: 0x1E58DFC VA: 0x1E58DFC
	public int get_BitLength() { }

	// RVA: 0x1E58C1C Offset: 0x1E58C1C VA: 0x1E58C1C
	internal static int BitLen(int w) { }

	// RVA: 0x1E58E98 Offset: 0x1E58E98 VA: 0x1E58E98
	private bool QuickPow2Check() { }

	// RVA: 0x1E58EBC Offset: 0x1E58EBC VA: 0x1E58EBC
	public int CompareTo(object obj) { }

	// RVA: 0x1E59064 Offset: 0x1E59064 VA: 0x1E59064
	private static int CompareTo(int xIndx, int[] x, int yIndx, int[] y) { }

	// RVA: 0x1E59180 Offset: 0x1E59180 VA: 0x1E59180
	private static int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y) { }

	// RVA: 0x1E58F94 Offset: 0x1E58F94 VA: 0x1E58F94
	public int CompareTo(BigInteger value) { }

	// RVA: 0x1E5927C Offset: 0x1E5927C VA: 0x1E5927C
	private int[] Divide(int[] x, int[] y) { }

	// RVA: 0x1E59FFC Offset: 0x1E59FFC VA: 0x1E59FFC
	public BigInteger Divide(BigInteger val) { }

	// RVA: 0x1E5A56C Offset: 0x1E5A56C VA: 0x1E5A56C
	public BigInteger[] DivideAndRemainder(BigInteger val) { }

	// RVA: 0x1E5AACC Offset: 0x1E5AACC VA: 0x1E5AACC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1E5AB9C Offset: 0x1E5AB9C VA: 0x1E5AB9C
	private bool IsEqualMagnitude(BigInteger x) { }

	// RVA: 0x1E5ACB4 Offset: 0x1E5ACB4 VA: 0x1E5ACB4
	public BigInteger Gcd(BigInteger value) { }

	// RVA: 0x1E5AE2C Offset: 0x1E5AE2C VA: 0x1E5AE2C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1E5AF28 Offset: 0x1E5AF28 VA: 0x1E5AF28
	private BigInteger Inc() { }

	// RVA: 0x1E5B180 Offset: 0x1E5B180 VA: 0x1E5B180
	public int get_IntValue() { }

	// RVA: 0x1E48240 Offset: 0x1E48240 VA: 0x1E48240
	public bool IsProbablePrime(int certainty) { }

	// RVA: 0x1E5B228 Offset: 0x1E5B228 VA: 0x1E5B228
	internal bool IsProbablePrime(int certainty, bool randomlySelected) { }

	// RVA: 0x1E57CA0 Offset: 0x1E57CA0 VA: 0x1E57CA0
	private bool CheckProbablePrime(int certainty, Random random, bool randomlySelected) { }

	// RVA: 0x1E5B8C4 Offset: 0x1E5B8C4 VA: 0x1E5B8C4
	public bool RabinMillerTest(int certainty, Random random) { }

	// RVA: 0x1E5B5A0 Offset: 0x1E5B5A0 VA: 0x1E5B5A0
	internal bool RabinMillerTest(int certainty, Random random, bool randomlySelected) { }

	// RVA: 0x1E5C420 Offset: 0x1E5C420 VA: 0x1E5C420
	public long get_LongValue() { }

	// RVA: 0x1E5C4F8 Offset: 0x1E5C4F8 VA: 0x1E5C4F8
	public BigInteger Max(BigInteger value) { }

	// RVA: 0x1E5C524 Offset: 0x1E5C524 VA: 0x1E5C524
	public BigInteger Min(BigInteger value) { }

	// RVA: 0x1E5AD48 Offset: 0x1E5AD48 VA: 0x1E5AD48
	public BigInteger Mod(BigInteger m) { }

	// RVA: 0x1E5C550 Offset: 0x1E5C550 VA: 0x1E5C550
	public BigInteger ModInverse(BigInteger m) { }

	// RVA: 0x1E5C6D8 Offset: 0x1E5C6D8 VA: 0x1E5C6D8
	private BigInteger ModInversePow2(BigInteger m) { }

	// RVA: 0x1E5CB00 Offset: 0x1E5CB00 VA: 0x1E5CB00
	private static int ModInverse32(int d) { }

	// RVA: 0x1E5CAC8 Offset: 0x1E5CAC8 VA: 0x1E5CAC8
	private static long ModInverse64(long d) { }

	// RVA: 0x1E5C950 Offset: 0x1E5C950 VA: 0x1E5C950
	private static BigInteger ExtEuclid(BigInteger a, BigInteger b, out BigInteger u1Out) { }

	// RVA: 0x1E5CB30 Offset: 0x1E5CB30 VA: 0x1E5CB30
	private static void ZeroOut(int[] x) { }

	// RVA: 0x1E5CB64 Offset: 0x1E5CB64 VA: 0x1E5CB64
	public BigInteger ModPow(BigInteger e, BigInteger m) { }

	// RVA: 0x1E5CE08 Offset: 0x1E5CE08 VA: 0x1E5CE08
	private static BigInteger ModPowBarrett(BigInteger b, BigInteger e, BigInteger m) { }

	// RVA: 0x1E5D5EC Offset: 0x1E5D5EC VA: 0x1E5D5EC
	private static BigInteger ReduceBarrett(BigInteger x, BigInteger m, BigInteger mr, BigInteger yu) { }

	// RVA: 0x1E5BCF0 Offset: 0x1E5BCF0 VA: 0x1E5BCF0
	private static BigInteger ModPowMonty(BigInteger b, BigInteger e, BigInteger m, bool convert) { }

	// RVA: 0x1E5D794 Offset: 0x1E5D794 VA: 0x1E5D794
	private static int[] GetWindowList(int[] mag, int extraBits) { }

	// RVA: 0x1E5ECB4 Offset: 0x1E5ECB4 VA: 0x1E5ECB4
	private static int CreateWindowEntry(int mult, int zeroes) { }

	// RVA: 0x1E5ECCC Offset: 0x1E5ECCC VA: 0x1E5ECCC
	private static int[] Square(int[] w, int[] x) { }

	// RVA: 0x1E5EFD0 Offset: 0x1E5EFD0 VA: 0x1E5EFD0
	private static int[] Multiply(int[] x, int[] y, int[] z) { }

	// RVA: 0x1E5DC0C Offset: 0x1E5DC0C VA: 0x1E5DC0C
	private int GetMQuote() { }

	// RVA: 0x1E5EA30 Offset: 0x1E5EA30 VA: 0x1E5EA30
	private static void MontgomeryReduce(int[] x, int[] m, uint mDash) { }

	// RVA: 0x1E5E42C Offset: 0x1E5E42C VA: 0x1E5E42C
	private static void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus) { }

	// RVA: 0x1E5DCF0 Offset: 0x1E5DCF0 VA: 0x1E5DCF0
	private static void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus) { }

	// RVA: 0x1E5F1C0 Offset: 0x1E5F1C0 VA: 0x1E5F1C0
	private static uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash) { }

	// RVA: 0x1E56CCC Offset: 0x1E56CCC VA: 0x1E56CCC
	public BigInteger Multiply(BigInteger val) { }

	// RVA: 0x1E5D468 Offset: 0x1E5D468 VA: 0x1E5D468
	public BigInteger Square() { }

	// RVA: 0x1E57F6C Offset: 0x1E57F6C VA: 0x1E57F6C
	public BigInteger Negate() { }

	// RVA: 0x1E5F1EC Offset: 0x1E5F1EC VA: 0x1E5F1EC
	public BigInteger NextProbablePrime() { }

	// RVA: 0x1E588C8 Offset: 0x1E588C8 VA: 0x1E588C8
	public BigInteger Not() { }

	// RVA: 0x1E562A8 Offset: 0x1E562A8 VA: 0x1E562A8
	public BigInteger Pow(int exp) { }

	// RVA: 0x1E5F4CC Offset: 0x1E5F4CC VA: 0x1E5F4CC
	public static BigInteger ProbablePrime(int bitLength, Random random) { }

	// RVA: 0x1E5B4FC Offset: 0x1E5B4FC VA: 0x1E5B4FC
	private int Remainder(int m) { }

	// RVA: 0x1E5F540 Offset: 0x1E5F540 VA: 0x1E5F540
	private static int[] Remainder(int[] x, int[] y) { }

	// RVA: 0x1E5B9E8 Offset: 0x1E5B9E8 VA: 0x1E5B9E8
	public BigInteger Remainder(BigInteger n) { }

	// RVA: 0x1E5A974 Offset: 0x1E5A974 VA: 0x1E5A974
	private int[] LastNBits(int n) { }

	// RVA: 0x1E5DA44 Offset: 0x1E5DA44 VA: 0x1E5DA44
	private BigInteger DivideWords(int w) { }

	// RVA: 0x1E5DB40 Offset: 0x1E5DB40 VA: 0x1E5DB40
	private BigInteger RemainderWords(int w) { }

	// RVA: 0x1E598B0 Offset: 0x1E598B0 VA: 0x1E598B0
	private static int[] ShiftLeft(int[] mag, int n) { }

	// RVA: 0x1E5FA2C Offset: 0x1E5FA2C VA: 0x1E5FA2C
	private static int ShiftLeftOneInPlace(int[] x, int carry) { }

	// RVA: 0x1E56B58 Offset: 0x1E56B58 VA: 0x1E56B58
	public BigInteger ShiftLeft(int n) { }

	// RVA: 0x1E59DD4 Offset: 0x1E59DD4 VA: 0x1E59DD4
	private static void ShiftRightInPlace(int start, int[] mag, int n) { }

	// RVA: 0x1E59C7C Offset: 0x1E59C7C VA: 0x1E59C7C
	private static void ShiftRightOneInPlace(int start, int[] mag) { }

	// RVA: 0x1E5A268 Offset: 0x1E5A268 VA: 0x1E5A268
	public BigInteger ShiftRight(int n) { }

	// RVA: 0x1E5FADC Offset: 0x1E5FADC VA: 0x1E5FADC
	public int get_SignValue() { }

	// RVA: 0x1E59B3C Offset: 0x1E59B3C VA: 0x1E59B3C
	private static int[] Subtract(int xStart, int[] x, int yStart, int[] y) { }

	// RVA: 0x1E5812C Offset: 0x1E5812C VA: 0x1E5812C
	public BigInteger Subtract(BigInteger n) { }

	// RVA: 0x1E5B06C Offset: 0x1E5B06C VA: 0x1E5B06C
	private static int[] doSubBigLil(int[] bigMag, int[] lilMag) { }

	// RVA: 0x1E5FAE4 Offset: 0x1E5FAE4 VA: 0x1E5FAE4
	public byte[] ToByteArray() { }

	// RVA: 0x1E60058 Offset: 0x1E60058 VA: 0x1E60058
	public byte[] ToByteArrayUnsigned() { }

	// RVA: 0x1E5FAEC Offset: 0x1E5FAEC VA: 0x1E5FAEC
	private byte[] ToByteArray(bool unsigned) { }

	// RVA: 0x1E60060 Offset: 0x1E60060 VA: 0x1E60060 Slot: 3
	public override string ToString() { }

	// RVA: 0x1E60068 Offset: 0x1E60068 VA: 0x1E60068
	public string ToString(int radix) { }

	// RVA: 0x1E60CC0 Offset: 0x1E60CC0 VA: 0x1E60CC0
	private static void AppendZeroExtendedString(StringBuilder sb, string s, int minLength) { }

	// RVA: 0x1E56004 Offset: 0x1E56004 VA: 0x1E56004
	private static BigInteger CreateUValueOf(ulong value) { }

	// RVA: 0x1E60D40 Offset: 0x1E60D40 VA: 0x1E60D40
	private static BigInteger CreateValueOf(long value) { }

	// RVA: 0x1E56190 Offset: 0x1E56190 VA: 0x1E56190
	public static BigInteger ValueOf(long value) { }

	// RVA: 0x1E60E2C Offset: 0x1E60E2C VA: 0x1E60E2C
	public int GetLowestSetBit() { }

	// RVA: 0x1E5B8CC Offset: 0x1E5B8CC VA: 0x1E5B8CC
	private int GetLowestSetBitMaskFirst(int firstWordMask) { }

	// RVA: 0x1E5B3B4 Offset: 0x1E5B3B4 VA: 0x1E5B3B4
	public bool TestBit(int n) { }

	// RVA: 0x1E60E44 Offset: 0x1E60E44 VA: 0x1E60E44
	public BigInteger Or(BigInteger value) { }

	// RVA: 0x1E6120C Offset: 0x1E6120C VA: 0x1E6120C
	public BigInteger Xor(BigInteger value) { }

	// RVA: 0x1E5F390 Offset: 0x1E5F390 VA: 0x1E5F390
	public BigInteger SetBit(int n) { }

	// RVA: 0x1E61734 Offset: 0x1E61734 VA: 0x1E61734
	public BigInteger ClearBit(int n) { }

	// RVA: 0x1E61870 Offset: 0x1E61870 VA: 0x1E61870
	public BigInteger FlipBit(int n) { }

	// RVA: 0x1E615D0 Offset: 0x1E615D0 VA: 0x1E615D0
	private BigInteger FlipExistingBit(int n) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class SimpleBigDecimal // TypeDefIndex: 5008
{
	// Fields
	private readonly BigInteger bigInt; // 0x10
	private readonly int scale; // 0x18

	// Properties
	public int IntValue { get; }
	public long LongValue { get; }
	public int Scale { get; }

	// Methods

	// RVA: 0x1E61988 Offset: 0x1E61988 VA: 0x1E61988
	public void .ctor(BigInteger bigInt, int scale) { }

	// RVA: 0x1E61A34 Offset: 0x1E61A34 VA: 0x1E61A34
	private void .ctor(SimpleBigDecimal limBigDec) { }

	// RVA: 0x1E61A90 Offset: 0x1E61A90 VA: 0x1E61A90
	public static SimpleBigDecimal GetInstance(BigInteger val, int scale) { }

	// RVA: 0x1E61B20 Offset: 0x1E61B20 VA: 0x1E61B20
	private void CheckScale(SimpleBigDecimal b) { }

	// RVA: 0x1E61BCC Offset: 0x1E61BCC VA: 0x1E61BCC
	public SimpleBigDecimal AdjustScale(int newScale) { }

	// RVA: 0x1E61CB4 Offset: 0x1E61CB4 VA: 0x1E61CB4
	public SimpleBigDecimal Add(SimpleBigDecimal b) { }

	// RVA: 0x1E61D68 Offset: 0x1E61D68 VA: 0x1E61D68
	public SimpleBigDecimal Add(BigInteger b) { }

	// RVA: 0x1E61E20 Offset: 0x1E61E20 VA: 0x1E61E20
	public SimpleBigDecimal Negate() { }

	// RVA: 0x1E61EB0 Offset: 0x1E61EB0 VA: 0x1E61EB0
	public SimpleBigDecimal Subtract(SimpleBigDecimal b) { }

	// RVA: 0x1E61EEC Offset: 0x1E61EEC VA: 0x1E61EEC
	public SimpleBigDecimal Subtract(BigInteger b) { }

	// RVA: 0x1E61FA4 Offset: 0x1E61FA4 VA: 0x1E61FA4
	public SimpleBigDecimal Multiply(SimpleBigDecimal b) { }

	// RVA: 0x1E62058 Offset: 0x1E62058 VA: 0x1E62058
	public SimpleBigDecimal Multiply(BigInteger b) { }

	// RVA: 0x1E620F0 Offset: 0x1E620F0 VA: 0x1E620F0
	public SimpleBigDecimal Divide(SimpleBigDecimal b) { }

	// RVA: 0x1E621C4 Offset: 0x1E621C4 VA: 0x1E621C4
	public SimpleBigDecimal Divide(BigInteger b) { }

	// RVA: 0x1E6225C Offset: 0x1E6225C VA: 0x1E6225C
	public SimpleBigDecimal ShiftLeft(int n) { }

	// RVA: 0x1E622F4 Offset: 0x1E622F4 VA: 0x1E622F4
	public int CompareTo(SimpleBigDecimal val) { }

	// RVA: 0x1E62340 Offset: 0x1E62340 VA: 0x1E62340
	public int CompareTo(BigInteger val) { }

	// RVA: 0x1E6239C Offset: 0x1E6239C VA: 0x1E6239C
	public BigInteger Floor() { }

	// RVA: 0x1E623D0 Offset: 0x1E623D0 VA: 0x1E623D0
	public BigInteger Round() { }

	// RVA: 0x1E6249C Offset: 0x1E6249C VA: 0x1E6249C
	public int get_IntValue() { }

	// RVA: 0x1E624C8 Offset: 0x1E624C8 VA: 0x1E624C8
	public long get_LongValue() { }

	// RVA: 0x1E624F4 Offset: 0x1E624F4 VA: 0x1E624F4
	public int get_Scale() { }

	// RVA: 0x1E624FC Offset: 0x1E624FC VA: 0x1E624FC Slot: 3
	public override string ToString() { }

	// RVA: 0x1E628C0 Offset: 0x1E628C0 VA: 0x1E628C0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1E629A8 Offset: 0x1E629A8 VA: 0x1E629A8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class Tnaf // TypeDefIndex: 5009
{
	// Fields
	private static readonly BigInteger MinusOne; // 0x0
	private static readonly BigInteger MinusTwo; // 0x8
	private static readonly BigInteger MinusThree; // 0x10
	private static readonly BigInteger Four; // 0x18
	public const sbyte Width = 4;
	public const sbyte Pow2Width = 16;
	public static readonly ZTauElement[] Alpha0; // 0x20
	public static readonly sbyte[][] Alpha0Tnaf; // 0x28
	public static readonly ZTauElement[] Alpha1; // 0x30
	public static readonly sbyte[][] Alpha1Tnaf; // 0x38

	// Methods

	// RVA: 0x1E629EC Offset: 0x1E629EC VA: 0x1E629EC
	public void .ctor() { }

	// RVA: 0x1E629F4 Offset: 0x1E629F4 VA: 0x1E629F4
	public static BigInteger Norm(sbyte mu, ZTauElement lambda) { }

	// RVA: 0x1E62BB0 Offset: 0x1E62BB0 VA: 0x1E62BB0
	public static SimpleBigDecimal Norm(sbyte mu, SimpleBigDecimal u, SimpleBigDecimal v) { }

	// RVA: 0x1E62D1C Offset: 0x1E62D1C VA: 0x1E62D1C
	public static ZTauElement Round(SimpleBigDecimal lambda0, SimpleBigDecimal lambda1, sbyte mu) { }

	// RVA: 0x1E631D4 Offset: 0x1E631D4 VA: 0x1E631D4
	public static SimpleBigDecimal ApproximateDivisionByN(BigInteger k, BigInteger s, BigInteger vm, sbyte a, int m, int c) { }

	// RVA: 0x1E63398 Offset: 0x1E63398 VA: 0x1E63398
	public static sbyte[] TauAdicNaf(sbyte mu, ZTauElement lambda) { }

	// RVA: 0x1E63804 Offset: 0x1E63804 VA: 0x1E63804
	public static AbstractF2mPoint Tau(AbstractF2mPoint p) { }

	// RVA: 0x1E63838 Offset: 0x1E63838 VA: 0x1E63838
	public static sbyte GetMu(AbstractF2mCurve curve) { }

	// RVA: 0x1E63958 Offset: 0x1E63958 VA: 0x1E63958
	public static sbyte GetMu(ECFieldElement curveA) { }

	// RVA: 0x1E6399C Offset: 0x1E6399C VA: 0x1E6399C
	public static sbyte GetMu(int curveA) { }

	// RVA: 0x1E639AC Offset: 0x1E639AC VA: 0x1E639AC
	public static BigInteger[] GetLucas(sbyte mu, int k, bool doV) { }

	// RVA: 0x1E63BE8 Offset: 0x1E63BE8 VA: 0x1E63BE8
	public static BigInteger GetTw(sbyte mu, int w) { }

	// RVA: 0x1E63DC8 Offset: 0x1E63DC8 VA: 0x1E63DC8
	public static BigInteger[] GetSi(AbstractF2mCurve curve) { }

	// RVA: 0x1E642B4 Offset: 0x1E642B4 VA: 0x1E642B4
	public static BigInteger[] GetSi(int fieldSize, int curveA, BigInteger cofactor) { }

	// RVA: 0x1E641F8 Offset: 0x1E641F8 VA: 0x1E641F8
	protected static int GetShiftsForCofactor(BigInteger h) { }

	// RVA: 0x1E64614 Offset: 0x1E64614 VA: 0x1E64614
	public static ZTauElement PartModReduction(BigInteger k, int m, sbyte a, BigInteger[] s, sbyte mu, sbyte c) { }

	// RVA: 0x1E64990 Offset: 0x1E64990 VA: 0x1E64990
	public static AbstractF2mPoint MultiplyRTnaf(AbstractF2mPoint p, BigInteger k) { }

	// RVA: 0x1E64B74 Offset: 0x1E64B74 VA: 0x1E64B74
	public static AbstractF2mPoint MultiplyTnaf(AbstractF2mPoint p, ZTauElement lambda) { }

	// RVA: 0x1E64CE0 Offset: 0x1E64CE0 VA: 0x1E64CE0
	public static AbstractF2mPoint MultiplyFromTnaf(AbstractF2mPoint p, sbyte[] u) { }

	// RVA: 0x1E64FE0 Offset: 0x1E64FE0 VA: 0x1E64FE0
	public static sbyte[] TauAdicWNaf(sbyte mu, ZTauElement lambda, sbyte width, BigInteger pow2w, BigInteger tw, ZTauElement[] alpha) { }

	// RVA: 0x1E654FC Offset: 0x1E654FC VA: 0x1E654FC
	public static AbstractF2mPoint[] GetPreComp(AbstractF2mPoint p, sbyte a) { }

	// RVA: 0x1E65730 Offset: 0x1E65730 VA: 0x1E65730
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Abc
internal class ZTauElement // TypeDefIndex: 5010
{
	// Fields
	public readonly BigInteger u; // 0x10
	public readonly BigInteger v; // 0x18

	// Methods

	// RVA: 0x24E98B8 Offset: 0x24E98B8 VA: 0x24E98B8
	public void .ctor(BigInteger u, BigInteger v) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519 : AbstractFpCurve // TypeDefIndex: 5011
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int Curve25519_DEFAULT_COORDS = 4;
	protected readonly Curve25519Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24EBF88 Offset: 0x24EBF88 VA: 0x24EBF88
	public void .ctor() { }

	// RVA: 0x24EC16C Offset: 0x24EC16C VA: 0x24EC16C Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24EC1C4 Offset: 0x24EC1C4 VA: 0x24EC1C4 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24EC1D0 Offset: 0x24EC1D0 VA: 0x24EC1D0 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24EC238 Offset: 0x24EC238 VA: 0x24EC238 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24EC240 Offset: 0x24EC240 VA: 0x24EC240 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24EC2BC Offset: 0x24EC2BC VA: 0x24EC2BC Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24EC440 Offset: 0x24EC440 VA: 0x24EC440 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24EC5A0 Offset: 0x24EC5A0 VA: 0x24EC5A0 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24EC640 Offset: 0x24EC640 VA: 0x24EC640
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519Field // TypeDefIndex: 5012
{
	// Fields
	internal static readonly uint[] P; // 0x0
	private const uint P7 = 2147483647;
	private static readonly uint[] PExt; // 0x8
	private const uint PInv = 19;

	// Methods

	// RVA: 0x24EC6C4 Offset: 0x24EC6C4 VA: 0x24EC6C4
	public void .ctor() { }

	// RVA: 0x24EC6CC Offset: 0x24EC6CC VA: 0x24EC6CC
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24EC868 Offset: 0x24EC868 VA: 0x24EC868
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24ECB58 Offset: 0x24ECB58 VA: 0x24ECB58
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24ECC20 Offset: 0x24ECC20 VA: 0x24ECC20
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24ECCE4 Offset: 0x24ECCE4 VA: 0x24ECCE4
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24ECDCC Offset: 0x24ECDCC VA: 0x24ECDCC
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24ED000 Offset: 0x24ED000 VA: 0x24ED000
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24ED0D0 Offset: 0x24ED0D0 VA: 0x24ED0D0
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24ECE64 Offset: 0x24ECE64 VA: 0x24ECE64
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24ED17C Offset: 0x24ED17C VA: 0x24ED17C
	public static void Reduce27(uint x, uint[] z) { }

	// RVA: 0x24ED2AC Offset: 0x24ED2AC VA: 0x24ED2AC
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24ED33C Offset: 0x24ED33C VA: 0x24ED33C
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24ED420 Offset: 0x24ED420 VA: 0x24ED420
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24ED590 Offset: 0x24ED590 VA: 0x24ED590
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24ED848 Offset: 0x24ED848 VA: 0x24ED848
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24ED4BC Offset: 0x24ED4BC VA: 0x24ED4BC
	private static uint AddPTo(uint[] z) { }

	// RVA: 0x24ED630 Offset: 0x24ED630 VA: 0x24ED630
	private static uint AddPExtTo(uint[] zz) { }

	// RVA: 0x24EC798 Offset: 0x24EC798 VA: 0x24EC798
	private static int SubPFrom(uint[] z) { }

	// RVA: 0x24EC93C Offset: 0x24EC93C VA: 0x24EC93C
	private static int SubPExtFrom(uint[] zz) { }

	// RVA: 0x24ED914 Offset: 0x24ED914 VA: 0x24ED914
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519FieldElement : ECFieldElement // TypeDefIndex: 5013
{
	// Fields
	public static readonly BigInteger Q; // 0x0
