	// RVA: 0x105D808 Offset: 0x105D808 VA: 0x105D808
	public long getRaidBossMaxHp(int raidId) { }

	// RVA: 0x105D840 Offset: 0x105D840 VA: 0x105D840
	public long[] getSuperBossSplitHp(int id) { }

	// RVA: 0x105D920 Offset: 0x105D920 VA: 0x105D920
	public long getSuperBossMaxHp(int id) { }

	// RVA: 0x105D958 Offset: 0x105D958 VA: 0x105D958
	public bool isNgContinue() { }

	// RVA: 0x105DA50 Offset: 0x105DA50 VA: 0x105DA50
	public bool isRaidLastDay() { }

	// RVA: 0x105DA84 Offset: 0x105DA84 VA: 0x105DA84
	public bool isRaidConnection() { }

	// RVA: 0x105DAB8 Offset: 0x105DAB8 VA: 0x105DAB8
	public bool isDispLoseResult() { }

	// RVA: 0x105DAE8 Offset: 0x105DAE8 VA: 0x105DAE8
	public bool isKnockdownTrialQuest() { }

	// RVA: 0x105DB1C Offset: 0x105DB1C VA: 0x105DB1C
	public bool isBattleResultLoseQuestClear() { }

	// RVA: 0x105DB50 Offset: 0x105DB50 VA: 0x105DB50
	public bool isBattleRetreatQuestClear() { }

	// RVA: 0x105DB84 Offset: 0x105DB84 VA: 0x105DB84
	public bool isNoResult() { }

	// RVA: 0x105DBB4 Offset: 0x105DBB4 VA: 0x105DBB4
	public bool isBreakOnBattleWin() { }

	// RVA: 0x105DBE4 Offset: 0x105DBE4 VA: 0x105DBE4
	public string getBattleFinishMovie() { }

	// RVA: 0x105DC14 Offset: 0x105DC14 VA: 0x105DC14
	public bool isBattleFinishMovie() { }

	// RVA: 0x105DC50 Offset: 0x105DC50 VA: 0x105DC50
	public bool isMoviePlay() { }

	// RVA: 0x105DCC4 Offset: 0x105DCC4 VA: 0x105DCC4
	public string[] getWaveStartMovie() { }

	// RVA: 0x105DCF4 Offset: 0x105DCF4 VA: 0x105DCF4
	public int[] getStartMovieWave() { }

	// RVA: 0x105DD24 Offset: 0x105DD24 VA: 0x105DD24
	public bool isProgressAfterMovie() { }

	// RVA: 0x105DD60 Offset: 0x105DD60 VA: 0x105DD60
	public bool IsMovieAfterCrossFade() { }

	// RVA: 0x105DD9C Offset: 0x105DD9C VA: 0x105DD9C
	public float GetMovieAfterCrossFadeTime() { }

	// RVA: 0x105DDE0 Offset: 0x105DDE0 VA: 0x105DDE0
	public int GetMovieAfterCrossFadeStartFrame() { }

	// RVA: 0x105DC88 Offset: 0x105DC88 VA: 0x105DC88
	public bool isWaveStartMovie() { }

	// RVA: 0x105DE10 Offset: 0x105DE10 VA: 0x105DE10
	public int GetOverWriteMasterImageId() { }

	// RVA: 0x105DE40 Offset: 0x105DE40 VA: 0x105DE40
	public int GetMasterIconImageId() { }

	// RVA: 0x105DF1C Offset: 0x105DF1C VA: 0x105DF1C
	public int GetMasterSkillCutinImageId() { }

	// RVA: 0x105DF38 Offset: 0x105DF38 VA: 0x105DF38
	public Vector3 GetMasterSkillCutinOffset() { }

	// RVA: 0x105DFF0 Offset: 0x105DFF0 VA: 0x105DFF0
	public int GetMasterCommandSpellCutinImageId() { }

	// RVA: 0x105E00C Offset: 0x105E00C VA: 0x105E00C
	public Vector3 GetCommandSpellCutinOffset() { }

	// RVA: 0x105E0C4 Offset: 0x105E0C4 VA: 0x105E0C4
	public int GetMasterIconResultImageId() { }

	// RVA: 0x105DE5C Offset: 0x105DE5C VA: 0x105DE5C
	public BattleMasterImageEntity GetBattleMasterImageEntity() { }

	// RVA: 0x105E0E0 Offset: 0x105E0E0 VA: 0x105E0E0
	public bool IsNotResetResultDispFlag() { }

	// RVA: 0x105E110 Offset: 0x105E110 VA: 0x105E110
	public bool isBreakOnBattleWinFadeColorBalck() { }

	// RVA: 0x105E140 Offset: 0x105E140 VA: 0x105E140
	public bool isBreakOnBattleWinAndWait(out float waitTime) { }

	// RVA: 0x105E194 Offset: 0x105E194 VA: 0x105E194
	public bool isBattleFinishCameraTargetAll() { }

	// RVA: 0x1049E38 Offset: 0x1049E38 VA: 0x1049E38
	public void setResultNone() { }

	// RVA: 0x105E1C4 Offset: 0x105E1C4 VA: 0x105E1C4
	public void setResultWin() { }

	// RVA: 0x105E1D0 Offset: 0x105E1D0 VA: 0x105E1D0
	public void setResultLose() { }

	// RVA: 0x105E1DC Offset: 0x105E1DC VA: 0x105E1DC
	public void setResultRetire() { }

	// RVA: 0x105E1E8 Offset: 0x105E1E8 VA: 0x105E1E8
	public bool isResultWin() { }

	// RVA: 0x105E1F8 Offset: 0x105E1F8 VA: 0x105E1F8
	public BattleData.WinResult getWinResult() { }

	// RVA: 0x105E214 Offset: 0x105E214 VA: 0x105E214
	public bool isAliveEntriesByForcedFlag(int[] entryIdArray) { }

	// RVA: 0x105E3AC Offset: 0x105E3AC VA: 0x105E3AC
	public void release() { }

	// RVA: 0x105E464 Offset: 0x105E464 VA: 0x105E464
	public BattleFieldData getBattleFieldData(int index) { }

	// RVA: 0x105E4B8 Offset: 0x105E4B8 VA: 0x105E4B8
	public PlayerFieldStatus getPlayerFieldStatus() { }

	// RVA: 0x105E4C0 Offset: 0x105E4C0 VA: 0x105E4C0
	public EnemyFieldStatus getEnemyFieldStatus() { }

	// RVA: 0x105E4C8 Offset: 0x105E4C8 VA: 0x105E4C8
	public int getNextUniqueID() { }

	// RVA: 0x105E514 Offset: 0x105E514 VA: 0x105E514
	public int getNextNextIndex() { }

	// RVA: 0x105D028 Offset: 0x105D028 VA: 0x105D028
	public BattleServantData createSummonEnemyServantData(int uniqueId, int index, int npcId, string saveStr) { }

	// RVA: 0x105CE98 Offset: 0x105CE98 VA: 0x105CE98
	public BattleServantData createSummonEnemyServantData(int uniqueId, int index, int npcId, BattleServantData.SaveData saveData) { }

	// RVA: 0x105E5F4 Offset: 0x105E5F4 VA: 0x105E5F4
	public int GetEnemySummonId(int index) { }

	// RVA: 0x105E674 Offset: 0x105E674 VA: 0x105E674
	public int getFieldSpace(int actId, out int targetIndex, bool forciblySelectEnemy = False) { }

	// RVA: 0x105E8C4 Offset: 0x105E8C4 VA: 0x105E8C4
	public bool isTargetLock() { }

	// RVA: 0x105E930 Offset: 0x105E930 VA: 0x105E930
	public int getTargetLock(int uniqueId, bool isMaster = False, int[] addIndiv) { }

	// RVA: 0x105EBDC Offset: 0x105EBDC VA: 0x105EBDC
	public void setTargetLock(List<int> _lockTargetIdList) { }

	// RVA: 0x104C054 Offset: 0x104C054 VA: 0x104C054
	public void onProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x105EC70 Offset: 0x105EC70 VA: 0x105EC70
	public void offProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x105EC80 Offset: 0x105EC80 VA: 0x105EC80
	public bool checkProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x105EC90 Offset: 0x105EC90 VA: 0x105EC90
	public void setProgresslist(bool isWave) { }

	// RVA: 0x105ECB0 Offset: 0x105ECB0 VA: 0x105ECB0
	public void SetProcesssFlgOnBattleResume() { }

	// RVA: 0x105ECC0 Offset: 0x105ECC0 VA: 0x105ECC0
	public BattleRaidInfo getRaidInfo(int day) { }

	// RVA: 0x105ED7C Offset: 0x105ED7C VA: 0x105ED7C Slot: 4
	public double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x105F214 Offset: 0x105F214 VA: 0x105F214 Slot: 5
	public bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x105F21C Offset: 0x105F21C VA: 0x105F21C
	public int getTurnSituationType() { }

	// RVA: 0x105F24C Offset: 0x105F24C VA: 0x105F24C
	public bool isTurnSituationType() { }

	// RVA: 0x105F27C Offset: 0x105F27C VA: 0x105F27C
	public int getSpecialShadowEffectId() { }

	// RVA: 0x105F2AC Offset: 0x105F2AC VA: 0x105F2AC
	public int[] GetShadowOffSvtIds() { }

	// RVA: 0x105F2DC Offset: 0x105F2DC VA: 0x105F2DC
	public int getStartBattleAssetId() { }

	// RVA: 0x105F33C Offset: 0x105F33C VA: 0x105F33C
	public bool disableSystemFadeStartBattle() { }

	// RVA: 0x105F39C Offset: 0x105F39C VA: 0x105F39C
	public bool isDisableChangeRaidDownMessage() { }

	// RVA: 0x105F3CC Offset: 0x105F3CC VA: 0x105F3CC
	public int[] getAliveEnemys() { }

	// RVA: 0x105F18C Offset: 0x105F18C VA: 0x105F18C
	public int getEnemyMasterCommandSpellCnt() { }

	// RVA: 0x10556E0 Offset: 0x10556E0 VA: 0x10556E0
	public void AddTotalTurnDamage(long damage) { }

	// RVA: 0x104FB60 Offset: 0x104FB60 VA: 0x104FB60
	public void RenewTurnDamageRecord() { }

	// RVA: 0x105F420 Offset: 0x105F420 VA: 0x105F420
	public void AddMasterSkillDelayIfNeeded() { }

	// RVA: 0x105F5BC Offset: 0x105F5BC VA: 0x105F5BC
	public void saveKnockdownEachWave() { }

	// RVA: 0x105F714 Offset: 0x105F714 VA: 0x105F714
	public void setQuestKnockdownResult() { }

	// RVA: 0x105F860 Offset: 0x105F860 VA: 0x105F860
	public int getQuestRecordType() { }

	// RVA: 0x105F880 Offset: 0x105F880 VA: 0x105F880
	public QuestKnockdownInfo getQuestKnockdownRecord() { }

	// RVA: 0x105F994 Offset: 0x105F994 VA: 0x105F994
	public Dictionary<string, object> getQuestRecordJson() { }

	// RVA: 0x1058264 Offset: 0x1058264 VA: 0x1058264
	private bool IsRetryableQuestPhase() { }

	// RVA: 0x105FB40 Offset: 0x105FB40 VA: 0x105FB40
	public bool CheckDoNotSelectCommandCard() { }

	// RVA: 0x1060284 Offset: 0x1060284 VA: 0x1060284
	public void ChangeDoNotSelectCommandServantList() { }

	// RVA: 0x1060448 Offset: 0x1060448 VA: 0x1060448
	public bool isDoNotSelectCommandServantCommandInCommandList() { }

	// RVA: 0x10605D8 Offset: 0x10605D8 VA: 0x10605D8
	public static void SaveServantCommonFlag(int servantId, int commonFlag) { }

	// RVA: 0x10609C8 Offset: 0x10609C8 VA: 0x10609C8
	public static Dictionary<int, int> GetSavedServantCommonFlagDict() { }

	// RVA: 0x1060C1C Offset: 0x1060C1C VA: 0x1060C1C
	public static int GetSavedServantCommonFlag(int servantId, int defaultFlag) { }

	// RVA: 0x105A58C Offset: 0x105A58C VA: 0x105A58C
	private void SetSavedCommandCardBuffData() { }

	// RVA: 0x1060CE8 Offset: 0x1060CE8 VA: 0x1060CE8
	public void UpdateContinueItemInfo() { }

	// RVA: 0x1060F20 Offset: 0x1060F20 VA: 0x1060F20
	public int GetContinueUseItemId() { }

	// RVA: 0x1060F50 Offset: 0x1060F50 VA: 0x1060F50
	public int GetContinueItemImageId() { }

	// RVA: 0x1060F80 Offset: 0x1060F80 VA: 0x1060F80
	public int GetContinueItemNum() { }

	// RVA: 0x1060FB0 Offset: 0x1060FB0 VA: 0x1060FB0
	public long GetContinueDeadLine() { }

	// RVA: 0x1060FE0 Offset: 0x1060FE0 VA: 0x1060FE0
	public bool EnableContinueItem() { }

	// RVA: 0x1061304 Offset: 0x1061304 VA: 0x1061304
	public int[] GetAssistIdArray() { }

	// RVA: 0x1061334 Offset: 0x1061334 VA: 0x1061334
	public int[] GetAssistWeightArray() { }

	// RVA: 0x1061364 Offset: 0x1061364 VA: 0x1061364
	public bool ExistDropItem() { }

	// RVA: 0x1061458 Offset: 0x1061458 VA: 0x1061458
	public BgmEntity getBgmMasterFromCostume(int uniqueID) { }

	// RVA: 0x104A264 Offset: 0x104A264 VA: 0x104A264
	private void InitializeTemporaryCommandSpell() { }

	// RVA: 0x105F1AC Offset: 0x105F1AC VA: 0x105F1AC
	public int CheckCurrentTemporaryCommandSpell(UserGameEntity userGame) { }

	// RVA: 0x10616E4 Offset: 0x10616E4 VA: 0x10616E4
	public void LossTemporaryCommandSpell(int val) { }

	// RVA: 0x10616D0 Offset: 0x10616D0 VA: 0x10616D0
	public bool IsUseTemporaryCommandSpell() { }

	// RVA: 0x105B440 Offset: 0x105B440 VA: 0x105B440
	private void LoadBattleStartVoice() { }

	// RVA: 0x10616F8 Offset: 0x10616F8 VA: 0x10616F8
	public bool CheckDefenceTargetBroken() { }

	// RVA: 0x104C064 Offset: 0x104C064 VA: 0x104C064
	public bool CheckDefenceTargetData() { }

	// RVA: 0x1061724 Offset: 0x1061724 VA: 0x1061724
	public void RegisterItemDroppedSkillShiftInfo(BattleServantData svtData) { }

	// RVA: 0x1057148 Offset: 0x1057148 VA: 0x1057148
	public int[] GetItemDroppedSkillShiftUniqueIdArray() { }

	// RVA: 0x1057178 Offset: 0x1057178 VA: 0x1057178
	public long[] GetItemDroppedSkillShiftNpcSvtIdArray() { }

	// RVA: 0x106175C Offset: 0x106175C VA: 0x106175C
	public void SetWasAttackTargetId(int actorId, int targetId) { }

	// RVA: 0x10617A8 Offset: 0x10617A8 VA: 0x10617A8
	public void SetWasAttackTargetIdList(int actorId, int[] targetIdlist) { }

	// RVA: 0x1061830 Offset: 0x1061830 VA: 0x1061830
	public void ResetWasAttackTargetId() { }

	// RVA: 0x106191C Offset: 0x106191C VA: 0x106191C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC9B8 Offset: 0xCCC9B8 VA: 0xCCC9B8
	// RVA: 0x10619B8 Offset: 0x10619B8 VA: 0x10619B8
	private static bool <IsDeckNoUserSvt>m__0(RestrictionEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC9C8 Offset: 0xCCC9C8 VA: 0xCCC9C8
	// RVA: 0x10619E8 Offset: 0x10619E8 VA: 0x10619E8
	private static int <GetSubServantUsableDeckIndex>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC9D8 Offset: 0xCCC9D8 VA: 0xCCC9D8
	// RVA: 0x1061A14 Offset: 0x1061A14 VA: 0x1061A14
	private void <RefreshAllSubServantDeckIndex>m__2(bool isEnemy) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC9E8 Offset: 0xCCC9E8 VA: 0xCCC9E8
	// RVA: 0x1061B08 Offset: 0x1061B08 VA: 0x1061B08
	private static bool <GetRestockServantLogicList>m__3(RestockServantLogic x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC9F8 Offset: 0xCCC9F8 VA: 0xCCC9F8
	// RVA: 0x1061B34 Offset: 0x1061B34 VA: 0x1061B34
	private static void <turnProgressing>m__4(AiNpcBattleServantData npc) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA08 Offset: 0xCCCA08 VA: 0xCCCA08
	// RVA: 0x1061B60 Offset: 0x1061B60 VA: 0x1061B60
	private static int <loadMasterSkill>m__5(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA18 Offset: 0xCCCA18 VA: 0xCCCA18
	// RVA: 0x1061B64 Offset: 0x1061B64 VA: 0x1061B64
	private static int <getPlayerSubServantData>m__6(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA28 Offset: 0xCCCA28 VA: 0xCCCA28
	// RVA: 0x1061BB8 Offset: 0x1061BB8 VA: 0x1061BB8
	private static int <getEnemySubBackServantData>m__7(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA38 Offset: 0xCCCA38 VA: 0xCCCA38
	// RVA: 0x1061C0C Offset: 0x1061C0C VA: 0x1061C0C
	private static int <getSubPlayerServantList>m__8(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA48 Offset: 0xCCCA48 VA: 0xCCCA48
	// RVA: 0x1061C60 Offset: 0x1061C60 VA: 0x1061C60
	private static bool <GetSubServantArray>m__9(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA58 Offset: 0xCCCA58 VA: 0xCCCA58
	// RVA: 0x1061C90 Offset: 0x1061C90 VA: 0x1061C90
	private static int <GetSubServantArray>m__A(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA68 Offset: 0xCCCA68 VA: 0xCCCA68
	// RVA: 0x1061CBC Offset: 0x1061CBC VA: 0x1061CBC
	private static int <GetRestockableSubServantArray>m__B(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA78 Offset: 0xCCCA78 VA: 0xCCCA78
	// RVA: 0x1061CE8 Offset: 0x1061CE8 VA: 0x1061CE8
	private static int <getWaveClearTurn>m__C(string s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA88 Offset: 0xCCCA88 VA: 0xCCCA88
	// RVA: 0x1061D14 Offset: 0x1061D14 VA: 0x1061D14
	private static BattleServantData.SaveData <SaveTurnData>m__D(AiNpcBattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCA98 Offset: 0xCCCA98 VA: 0xCCCA98
	// RVA: 0x1061D48 Offset: 0x1061D48 VA: 0x1061D48
	private static BattleServantData.ConnectData <getActionList>m__E(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAA8 Offset: 0xCCCAA8 VA: 0xCCCAA8
	// RVA: 0x1061D74 Offset: 0x1061D74 VA: 0x1061D74
	private static BattleData.CHAIN_COUNT_TYPE <loadQuest>m__F(string key) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAB8 Offset: 0xCCCAB8 VA: 0xCCCAB8
	// RVA: 0x1061E38 Offset: 0x1061E38 VA: 0x1061E38
	private static int <loadSaveTurnNstage>m__10(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAC8 Offset: 0xCCCAC8 VA: 0xCCCAC8
	// RVA: 0x1061E8C Offset: 0x1061E8C VA: 0x1061E8C
	private static bool <IsAliveOtherRaidTypeBoss>m__11(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAD8 Offset: 0xCCCAD8 VA: 0xCCCAD8
	// RVA: 0x1061EE8 Offset: 0x1061EE8 VA: 0x1061EE8
	private static bool <GetRaidType>m__12(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAE8 Offset: 0xCCCAE8 VA: 0xCCCAE8
	// RVA: 0x1061F14 Offset: 0x1061F14 VA: 0x1061F14
	private static bool <isAliveEntriesByForcedFlag>m__13(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCAF8 Offset: 0xCCCAF8 VA: 0xCCCAF8
	// RVA: 0x1061F20 Offset: 0x1061F20 VA: 0x1061F20
	private static bool <saveKnockdownEachWave>m__14(BattleServantData x) { }
}

// Namespace: 
public class BattleData.CommandHistory // TypeDefIndex: 8829
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC61A0C Offset: 0xC61A0C VA: 0xC61A0C
	public int uid; // 0x10
	[PackKeyAttribute] // RVA: 0xC61A44 Offset: 0xC61A44 VA: 0xC61A44
	public int ty; // 0x14

	// Methods

	// RVA: 0x11185AC Offset: 0x11185AC VA: 0x11185AC
	public void .ctor() { }
}

// Namespace: 
public enum BattleData.WinResult // TypeDefIndex: 8830
{
	// Fields
	public int value__; // 0x0
	public const BattleData.WinResult None = 0;
	public const BattleData.WinResult Normal = 1;
	public const BattleData.WinResult TimeLimit = 2;
	public const BattleData.WinResult Lose = 3;
}

// Namespace: 
public enum BattleData.TYPETURN // TypeDefIndex: 8831
{
	// Fields
	public int value__; // 0x0
	public const BattleData.TYPETURN PLAYER = 1;
	public const BattleData.TYPETURN ENEMY = 2;
}

// Namespace: 
public enum BattleData.MULTI_TARGET_POS // TypeDefIndex: 8832
{
	// Fields
	public int value__; // 0x0
	public const BattleData.MULTI_TARGET_POS UP = 0;
	public const BattleData.MULTI_TARGET_POS CORE = 1;
	public const BattleData.MULTI_TARGET_POS UNDER = 2;
}

// Namespace: 
public enum BattleData.CHAIN_COUNT_TYPE // TypeDefIndex: 8833
{
	// Fields
	public int value__; // 0x0
	public const BattleData.CHAIN_COUNT_TYPE ARTS = 1;
	public const BattleData.CHAIN_COUNT_TYPE BUSTER = 2;
	public const BattleData.CHAIN_COUNT_TYPE QUICK = 3;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE = 4;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_ARTS = 5;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_BUSTER = 6;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_QUICK = 7;
	public const BattleData.CHAIN_COUNT_TYPE TREASURE_DVC = 8;
}

// Namespace: 
public class BattleData.SaveData // TypeDefIndex: 8834
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC61A7C Offset: 0xC61A7C VA: 0xC61A7C
	public int initturn; // 0x10
	[PackKeyAttribute] // RVA: 0xC61AB4 Offset: 0xC61AB4 VA: 0xC61AB4
	public int wavecount; // 0x14
	[PackKeyAttribute] // RVA: 0xC61AEC Offset: 0xC61AEC VA: 0xC61AEC
	public int turnCount; // 0x18
	[PackKeyAttribute] // RVA: 0xC61B24 Offset: 0xC61B24 VA: 0xC61B24
	public int totalTurnCount; // 0x1C
	[PackKeyAttribute] // RVA: 0xC61B5C Offset: 0xC61B5C VA: 0xC61B5C
	public int globaltargetId; // 0x20
	[PackKeyAttribute] // RVA: 0xC61B94 Offset: 0xC61B94 VA: 0xC61B94
	public int criticalstars; // 0x24
	[PackKeyAttribute] // RVA: 0xC61BCC Offset: 0xC61BCC VA: 0xC61BCC
	public int totalCriticalstars; // 0x28
	[PackKeyAttribute] // RVA: 0xC61C04 Offset: 0xC61C04 VA: 0xC61C04
	public int addCriticalstars; // 0x2C
	[PackKeyAttribute] // RVA: 0xC61C3C Offset: 0xC61C3C VA: 0xC61C3C
	public int subCriticalCount; // 0x30
	[PackKeyAttribute] // RVA: 0xC61C74 Offset: 0xC61C74 VA: 0xC61C74
	public int prevCriticalstars; // 0x34
	[PackKeyAttribute] // RVA: 0xC61CAC Offset: 0xC61CAC VA: 0xC61CAC
	public bool isCalcCritical; // 0x38
	[PackKeyAttribute] // RVA: 0xC61CE4 Offset: 0xC61CE4 VA: 0xC61CE4
	public int[] commandCriticalArray; // 0x40
	[PackKeyAttribute] // RVA: 0xC61D1C Offset: 0xC61D1C VA: 0xC61D1C
	public int[] p_entryid; // 0x48
	[PackKeyAttribute] // RVA: 0xC61D54 Offset: 0xC61D54 VA: 0xC61D54
	public int[] e_entryid; // 0x50
	[PackKeyAttribute] // RVA: 0xC61D8C Offset: 0xC61D8C VA: 0xC61D8C
	public int[] master_infoId; // 0x58
	[PackKeyAttribute] // RVA: 0xC61DC4 Offset: 0xC61DC4 VA: 0xC61DC4
	public int[] master_skillTurn; // 0x60
	[PackKeyAttribute] // RVA: 0xC61DFC Offset: 0xC61DFC VA: 0xC61DFC
	public int[] master_sealedTurn; // 0x68
	[PackKeyAttribute] // RVA: 0xC61E34 Offset: 0xC61E34 VA: 0xC61E34
	public BattleData.CommandHistory[] history; // 0x70
	[PackKeyAttribute] // RVA: 0xC61E6C Offset: 0xC61E6C VA: 0xC61E6C
	public BattleDropItem[] drop; // 0x78
	[PackKeyAttribute] // RVA: 0xC61EA4 Offset: 0xC61EA4 VA: 0xC61EA4
	public int shuffleIndex; // 0x80
	[PackKeyAttribute] // RVA: 0xC61EDC Offset: 0xC61EDC VA: 0xC61EDC
	public BattleCommandData[] drawcard; // 0x88
	[PackKeyAttribute] // RVA: 0xC61F14 Offset: 0xC61F14 VA: 0xC61F14
	public BattleCommandData[] shufflecard; // 0x90
	[PackKeyAttribute] // RVA: 0xC61F4C Offset: 0xC61F4C VA: 0xC61F4C
	public int randLogicCount; // 0x98
	[PackKeyAttribute] // RVA: 0xC61F84 Offset: 0xC61F84 VA: 0xC61F84
	public int randGutsCount; // 0x9C
	[PackKeyAttribute] // RVA: 0xC61FBC Offset: 0xC61FBC VA: 0xC61FBC
	public Dictionary<string, object> voicePlayedList; // 0xA0
	[PackKeyAttribute] // RVA: 0xC61FF4 Offset: 0xC61FF4 VA: 0xC61FF4
	public long bstate; // 0xA8
	[PackKeyAttribute] // RVA: 0xC6202C Offset: 0xC6202C VA: 0xC6202C
	public int[] usedTurnArray; // 0xB0
	[PackKeyAttribute] // RVA: 0xC62064 Offset: 0xC62064 VA: 0xC62064
	public byte[] logHeader_MP; // 0xB8
	[PackKeyAttribute] // RVA: 0xC6209C Offset: 0xC6209C VA: 0xC6209C
	public byte[] logData_MP; // 0xC0
	[PackKeyAttribute] // RVA: 0xC620D4 Offset: 0xC620D4 VA: 0xC620D4
	public BattleServantData.SaveData[] p_svlist_MP; // 0xC8
	[PackKeyAttribute] // RVA: 0xC6210C Offset: 0xC6210C VA: 0xC6210C
	public BattleServantData.SaveData[] e_svlist_MP; // 0xD0
	[DisablePackAttribute] // RVA: 0xC62144 Offset: 0xC62144 VA: 0xC62144
	public string logHeader; // 0xD8
	[DisablePackAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
	public string logData; // 0xE0
	[DisablePackAttribute] // RVA: 0xC62164 Offset: 0xC62164 VA: 0xC62164
	public Dictionary<string, object> p_svlist; // 0xE8
	[DisablePackAttribute] // RVA: 0xC62174 Offset: 0xC62174 VA: 0xC62174
	public Dictionary<string, object> e_svlist; // 0xF0
	[PackKeyAttribute] // RVA: 0xC62184 Offset: 0xC62184 VA: 0xC62184
	public BattleFieldData.SaveData[] savefield_datalist; // 0xF8
	[PackKeyAttribute] // RVA: 0xC621BC Offset: 0xC621BC VA: 0xC621BC
	public int maxEnemyUniqueID; // 0x100
	[PackKeyAttribute] // RVA: 0xC621F4 Offset: 0xC621F4 VA: 0xC621F4
	public int maxEnemyIndex; // 0x104
	[PackKeyAttribute] // RVA: 0xC6222C Offset: 0xC6222C VA: 0xC6222C
	public int progresslistflg; // 0x108
	[PackKeyAttribute] // RVA: 0xC62264 Offset: 0xC62264 VA: 0xC62264
	public BattlePerformanceBg.SaveData savebgData; // 0x110
	[PackKeyAttribute] // RVA: 0xC6229C Offset: 0xC6229C VA: 0xC6229C
	public int enemyMasterSpellUseCnt; // 0x118
	[PackKeyAttribute] // RVA: 0xC622D4 Offset: 0xC622D4 VA: 0xC622D4
	public long maxTurnDamage; // 0x120
	[PackKeyAttribute] // RVA: 0xC6230C Offset: 0xC6230C VA: 0xC6230C
	public string[] firstNpPlayUserSvtIdList; // 0x128
	[PackKeyAttribute] // RVA: 0xC62344 Offset: 0xC62344 VA: 0xC62344
	public int[] firstNpPlaySeqIdList; // 0x130
	[PackKeyAttribute] // RVA: 0xC6237C Offset: 0xC6237C VA: 0xC6237C
	public BattleCommandData[] fixedCommands; // 0x138
	[PackKeyAttribute] // RVA: 0xC623B4 Offset: 0xC623B4 VA: 0xC623B4
	public int[] overrideBgmData; // 0x140
	[PackKeyAttribute] // RVA: 0xC623EC Offset: 0xC623EC VA: 0xC623EC
	public Dictionary<string, object> usedEventMasterSkillDict; // 0x148
	[PackKeyAttribute] // RVA: 0xC62424 Offset: 0xC62424 VA: 0xC62424
	public int[] waveKnockdownNums; // 0x150
	[PackKeyAttribute] // RVA: 0xC6245C Offset: 0xC6245C VA: 0xC6245C
	public bool loseBattleFlg; // 0x158
	[PackKeyAttribute] // RVA: 0xC62494 Offset: 0xC62494 VA: 0xC62494
	public int[] overwriteBgIndividuality; // 0x160
	[PackKeyAttribute] // RVA: 0xC624CC Offset: 0xC624CC VA: 0xC624CC
	public bool winBattleNotRelatedSurvivalStatusFlg; // 0x168
	[PackKeyAttribute] // RVA: 0xC62504 Offset: 0xC62504 VA: 0xC62504
	public int attackIndex; // 0x16C
	[PackKeyAttribute] // RVA: 0xC6253C Offset: 0xC6253C VA: 0xC6253C
	public int[] joinCurTurnUniqueIds; // 0x170
	[PackKeyAttribute] // RVA: 0xC62574 Offset: 0xC62574 VA: 0xC62574
	public int temporarySpell; // 0x178
	[PackKeyAttribute] // RVA: 0xC625AC Offset: 0xC625AC VA: 0xC625AC
	public bool[] enemyAppearValids; // 0x180
	[PackKeyAttribute] // RVA: 0xC625E4 Offset: 0xC625E4 VA: 0xC625E4
	public BattleDefenceTargetData.SaveData saveDefenceTargetData; // 0x188
	[PackKeyAttribute] // RVA: 0xC6261C Offset: 0xC6261C VA: 0xC6261C
	public long masterSkillUseWaveTurn; // 0x190
	[PackKeyAttribute] // RVA: 0xC62654 Offset: 0xC62654 VA: 0xC62654
	public int[] skillShiftUniqueIds; // 0x198
	[PackKeyAttribute] // RVA: 0xC6268C Offset: 0xC6268C VA: 0xC6268C
	public long[] skillShiftNpcSvtIds; // 0x1A0
	[PackKeyAttribute] // RVA: 0xC626C4 Offset: 0xC626C4 VA: 0xC626C4
	public string[] voicePlayedOver64Info; // 0x1A8
	[PackKeyAttribute] // RVA: 0xC626FC Offset: 0xC626FC VA: 0xC626FC
	public Dictionary<string, object> chainCountDict; // 0x1B0
	[PackKeyAttribute] // RVA: 0xC62734 Offset: 0xC62734 VA: 0xC62734
	public UseSkillEachTurn.SaveData useSkillEachTurn; // 0x1B8
	[PackKeyAttribute] // RVA: 0xC6276C Offset: 0xC6276C VA: 0xC6276C
	public BattleServantData.SaveData[] aiNpcSvts; // 0x1C0

	// Methods

	// RVA: 0x11185B4 Offset: 0x11185B4 VA: 0x11185B4
	public void .ctor() { }
}

// Namespace: 
public enum BattleData.PROGRESS // TypeDefIndex: 8835
{
	// Fields
	public int value__; // 0x0
	public const BattleData.PROGRESS FIELDAI_WAVESTART = 1;
	public const BattleData.PROGRESS BOOSTITEM = 2;
	public const BattleData.PROGRESS WAVEBUFF = 4;
	public const BattleData.PROGRESS FIRST_ENTRY = 8;
	public const BattleData.PROGRESS ENEMYAI_WAVE = 16;
	public const BattleData.PROGRESS FIELDAI_TURNSTART = 32;
	public const BattleData.PROGRESS QUEST_BEHAVIOR = 64;
	public const BattleData.PROGRESS GIMMICK = 128;
	public const BattleData.PROGRESS BOOST_SKILL = 256;
	public const BattleData.PROGRESS ASSIST = 512;
	public const BattleData.PROGRESS FIELDAI_ENTRY = 1024;
	public const BattleData.PROGRESS PRECHECK_END_BATTLE = 2048;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C44 Offset: 0xC43C44 VA: 0xC43C44
private sealed class BattleData.<getMasterSkillInfo>c__AnonStorey2 // TypeDefIndex: 8836
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x11183E4 Offset: 0x11183E4 VA: 0x11183E4
	public void .ctor() { }

	// RVA: 0x11183EC Offset: 0x11183EC VA: 0x11183EC
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C54 Offset: 0xC43C54 VA: 0xC43C54
private sealed class BattleData.<loadMasterSkill>c__AnonStorey3 // TypeDefIndex: 8837
{
	// Fields
	internal int[] addIdxs; // 0x10

	// Methods

	// RVA: 0x11184C0 Offset: 0x11184C0 VA: 0x11184C0
	public void .ctor() { }

	// RVA: 0x11184C8 Offset: 0x11184C8 VA: 0x11184C8
	internal int <>m__0(int a, int b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C64 Offset: 0xC43C64 VA: 0xC43C64
private sealed class BattleData.<getBoostSkillInfo>c__AnonStorey4 // TypeDefIndex: 8838
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1118308 Offset: 0x1118308 VA: 0x1118308
	public void .ctor() { }

	// RVA: 0x1118310 Offset: 0x1118310 VA: 0x1118310
	internal bool <>m__0(BattleBoostItemInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C74 Offset: 0xC43C74 VA: 0xC43C74
private sealed class BattleData.<CheckFreshBuffDataList>c__AnonStorey5 // TypeDefIndex: 8839
{
	// Fields
	internal BuffEntity ent; // 0x10

	// Methods

	// RVA: 0x1117FD0 Offset: 0x1117FD0 VA: 0x1117FD0
	public void .ctor() { }

	// RVA: 0x1117FD8 Offset: 0x1117FD8 VA: 0x1117FD8
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C84 Offset: 0xC43C84 VA: 0xC43C84
private sealed class BattleData.<GetAiNpcServantData>c__AnonStorey6 // TypeDefIndex: 8840
{
	// Fields
	internal int id; // 0x10

	// Methods

	// RVA: 0x1118010 Offset: 0x1118010 VA: 0x1118010
	public void .ctor() { }

	// RVA: 0x1118018 Offset: 0x1118018 VA: 0x1118018
	internal bool <>m__0(AiNpcBattleServantData data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C94 Offset: 0xC43C94 VA: 0xC43C94
private sealed class BattleData.<getPlayerServantIDList>c__AnonStorey7 // TypeDefIndex: 8841
{
	// Fields
	internal List<int> result; // 0x10

	// Methods

	// RVA: 0x111843C Offset: 0x111843C VA: 0x111843C
	public void .ctor() { }

	// RVA: 0x1118444 Offset: 0x1118444 VA: 0x1118444
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CA4 Offset: 0xC43CA4 VA: 0xC43CA4
private sealed class BattleData.<GetRestockableSubServantArray>c__AnonStorey8 // TypeDefIndex: 8842
{
	// Fields
	internal int deckIndex; // 0x10

	// Methods

	// RVA: 0x1118050 Offset: 0x1118050 VA: 0x1118050
	public void .ctor() { }

	// RVA: 0x1118058 Offset: 0x1118058 VA: 0x1118058
	internal bool <>m__0(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CB4 Offset: 0xC43CB4 VA: 0xC43CB4
private sealed class BattleData.<getFieldPlayerServantIDList>c__AnonStorey9 // TypeDefIndex: 8843
{
	// Fields
	internal List<int> result; // 0x10

	// Methods

	// RVA: 0x1118360 Offset: 0x1118360 VA: 0x1118360
	public void .ctor() { }

	// RVA: 0x1118368 Offset: 0x1118368 VA: 0x1118368
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CC4 Offset: 0xC43CC4 VA: 0xC43CC4
private sealed class BattleData.<loadQuest>c__AnonStoreyA // TypeDefIndex: 8844
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1118568 Offset: 0x1118568 VA: 0x1118568
	public void .ctor() { }

	// RVA: 0x1118570 Offset: 0x1118570 VA: 0x1118570
	internal bool <>m__0(BattleServantData.SaveData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CD4 Offset: 0xC43CD4 VA: 0xC43CD4
private sealed class BattleData.<LoadAiNpcServant>c__AnonStoreyB // TypeDefIndex: 8845
{
	// Fields
	internal BattleDeckServantData deckSvt; // 0x10

	// Methods

	// RVA: 0x11180BC Offset: 0x11180BC VA: 0x11180BC
	public void .ctor() { }

	// RVA: 0x11180C4 Offset: 0x11180C4 VA: 0x11180C4
	internal bool <>m__0(BattleServantData.SaveData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CE4 Offset: 0xC43CE4 VA: 0xC43CE4
private sealed class BattleData.<PartsIntoTheBodyDelay>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8846
{
	// Fields
	internal BattleData $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAD50 Offset: 0xCDAD50 VA: 0xCDAD50
	// RVA: 0x1118118 Offset: 0x1118118 VA: 0x1118118
	public void .ctor() { }

	// RVA: 0x1118120 Offset: 0x1118120 VA: 0x1118120 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAD60 Offset: 0xCDAD60 VA: 0xCDAD60
	// RVA: 0x1118234 Offset: 0x1118234 VA: 0x1118234 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAD70 Offset: 0xCDAD70 VA: 0xCDAD70
	// RVA: 0x111823C Offset: 0x111823C VA: 0x111823C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAD80 Offset: 0xCDAD80 VA: 0xCDAD80
	// RVA: 0x1118244 Offset: 0x1118244 VA: 0x1118244 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAD90 Offset: 0xCDAD90 VA: 0xCDAD90
	// RVA: 0x1118258 Offset: 0x1118258 VA: 0x1118258 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43CF4 Offset: 0xC43CF4 VA: 0xC43CF4
private sealed class BattleData.<RefreshAllSubServantDeckIndex>c__AnonStorey1 // TypeDefIndex: 8847
{
	// Fields
	internal int deckIndex; // 0x10

	// Methods

	// RVA: 0x11182C0 Offset: 0x11182C0 VA: 0x11182C0
	public void .ctor() { }

	// RVA: 0x11182C8 Offset: 0x11182C8 VA: 0x11182C8
	internal void <>m__0(BattleServantData x) { }
}

// Namespace: 
public class QuestKnockdownInfo // TypeDefIndex: 8848
{
	// Fields
	public long knockdownNum; // 0x10
	public long totalDamage; // 0x18

	// Methods

	// RVA: 0x12078E4 Offset: 0x12078E4 VA: 0x12078E4
	public void .ctor() { }

	// RVA: 0x120790C Offset: 0x120790C VA: 0x120790C
	public void init() { }
}

// Namespace: 
public class QuestKnockdownResult // TypeDefIndex: 8849
{
	// Fields
	public bool isNewRecord; // 0x10
	public bool isTrialOpen; // 0x11
	public QuestKnockdownInfo current; // 0x18
	public QuestKnockdownInfo record; // 0x20

	// Methods

	// RVA: 0x1207914 Offset: 0x1207914 VA: 0x1207914
	public void .ctor(bool isRecord, BattleData data) { }
}

// Namespace: 
public class FieldAliveServantData // TypeDefIndex: 8850
{
	// Fields
	public List<BattleServantData> playerIdList; // 0x10
	public List<BattleServantData> enemyIdList; // 0x18

	// Methods

	// RVA: 0x13662F8 Offset: 0x13662F8 VA: 0x13662F8
	public void .ctor() { }

	// RVA: 0x1366388 Offset: 0x1366388 VA: 0x1366388
	public void addSvtData(bool isEnemySide, BattleServantData svtData) { }

	// RVA: 0x136640C Offset: 0x136640C VA: 0x136640C
	public List<BattleServantData> getTargetSideSvtDataList(bool isEnemySide) { }
}

// Namespace: 
public class SimpleHpData // TypeDefIndex: 8851
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC627A4 Offset: 0xC627A4 VA: 0xC627A4
	[DebuggerBrowsableAttribute] // RVA: 0xC627A4 Offset: 0xC627A4 VA: 0xC627A4
	private int <Hp>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC627E0 Offset: 0xC627E0 VA: 0xC627E0
	[DebuggerBrowsableAttribute] // RVA: 0xC627E0 Offset: 0xC627E0 VA: 0xC627E0
	private int <MaxHp>k__BackingField; // 0x14

	// Properties
	public int Hp { get; set; }
	public int MaxHp { get; set; }
	public int TotalDamage { get; }

	// Methods

	// RVA: 0x1521768 Offset: 0x1521768 VA: 0x1521768
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB08 Offset: 0xCCCB08 VA: 0xCCCB08
	// RVA: 0x15217D8 Offset: 0x15217D8 VA: 0x15217D8
	private void set_Hp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB18 Offset: 0xCCCB18 VA: 0xCCCB18
	// RVA: 0x15217E8 Offset: 0x15217E8 VA: 0x15217E8
	public int get_Hp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB28 Offset: 0xCCCB28 VA: 0xCCCB28
	// RVA: 0x15217E0 Offset: 0x15217E0 VA: 0x15217E0
	private void set_MaxHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB38 Offset: 0xCCCB38 VA: 0xCCCB38
	// RVA: 0x15217F0 Offset: 0x15217F0 VA: 0x15217F0
	public int get_MaxHp() { }

	// RVA: 0x15217F8 Offset: 0x15217F8 VA: 0x15217F8
	public int get_TotalDamage() { }
}

// Namespace: 
public class EnemySimpleHpData : SimpleHpData // TypeDefIndex: 8852
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC6281C Offset: 0xC6281C VA: 0xC6281C
	[DebuggerBrowsableAttribute] // RVA: 0xC6281C Offset: 0xC6281C VA: 0xC6281C
	private int <NextTpTurn>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC62858 Offset: 0xC62858 VA: 0xC62858
	[DebuggerBrowsableAttribute] // RVA: 0xC62858 Offset: 0xC62858 VA: 0xC62858
	private int <MaxTpTurn>k__BackingField; // 0x1C

	// Properties
	public int NextTpTurn { get; set; }
	public int MaxTpTurn { get; set; }

	// Methods

	// RVA: 0x16FE07C Offset: 0x16FE07C VA: 0x16FE07C
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB48 Offset: 0xCCCB48 VA: 0xCCCB48
	// RVA: 0x16FE0D8 Offset: 0x16FE0D8 VA: 0x16FE0D8
	private void set_NextTpTurn(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB58 Offset: 0xCCCB58 VA: 0xCCCB58
	// RVA: 0x16FE0E8 Offset: 0x16FE0E8 VA: 0x16FE0E8
	public int get_NextTpTurn() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB68 Offset: 0xCCCB68 VA: 0xCCCB68
	// RVA: 0x16FE0E0 Offset: 0x16FE0E0 VA: 0x16FE0E0
	private void set_MaxTpTurn(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB78 Offset: 0xCCCB78 VA: 0xCCCB78
	// RVA: 0x16FE0F0 Offset: 0x16FE0F0 VA: 0x16FE0F0
	public int get_MaxTpTurn() { }
}

// Namespace: 
public struct SimpleSkillData // TypeDefIndex: 8853
{
	// Fields
	public int id; // 0x0
	public int lv; // 0x4

	// Methods

	// RVA: 0xD5769C Offset: 0xD5769C VA: 0xD5769C
	public void .ctor(int skillId, int skillLv = 1) { }
}

// Namespace: 
public class DisplayEffectInheritData // TypeDefIndex: 8854
{
	// Fields
	public Dictionary<int, float> popTiming; // 0x10
	private bool isSetNextPossibleTime; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC62894 Offset: 0xC62894 VA: 0xC62894
	[DebuggerBrowsableAttribute] // RVA: 0xC62894 Offset: 0xC62894 VA: 0xC62894
	private float <EffectInterval>k__BackingField; // 0x1C
