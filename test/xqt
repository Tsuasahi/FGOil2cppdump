	protected Vector3 offset; // 0x18
	protected readonly Vector3 offsetZero; // 0x24

	// Properties
	public bool IsActive { get; }
	public Vector3 Offset { get; }

	// Methods

	// RVA: 0x1674554 Offset: 0x1674554 VA: 0x1674554
	public void .ctor(GameObject obj, Vector3 offset) { }

	// RVA: 0x1674604 Offset: 0x1674604 VA: 0x1674604
	public bool get_IsActive() { }

	// RVA: 0x16746A4 Offset: 0x16746A4 VA: 0x16746A4
	public Vector3 get_Offset() { }
}

// Namespace: 
public class UseSkillEachTurn // TypeDefIndex: 8832
{
	// Fields
	private long waveTurn; // 0x10
	private HashSet<long> hashSkillId; // 0x18

	// Methods

	// RVA: 0x20380F4 Offset: 0x20380F4 VA: 0x20380F4
	public void .ctor() { }

	// RVA: 0x2038164 Offset: 0x2038164 VA: 0x2038164
	public void AddUseSkillId(long waveTurn, int skillId) { }

	// RVA: 0x2038214 Offset: 0x2038214 VA: 0x2038214
	public bool IsUseThisTurn(BattleData data, long[] skillIds) { }

	// RVA: 0x20382E4 Offset: 0x20382E4 VA: 0x20382E4
	public UseSkillEachTurn.SaveData GetSaveData() { }

	// RVA: 0x2038390 Offset: 0x2038390 VA: 0x2038390
	public void SetSaveData(UseSkillEachTurn.SaveData sv) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A1AC Offset: 0xD3A1AC VA: 0xD3A1AC
	// RVA: 0x2038418 Offset: 0x2038418 VA: 0x2038418
	private bool <IsUseThisTurn>m__0(long id) { }
}

// Namespace: 
public class UseSkillEachTurn.SaveData // TypeDefIndex: 8833
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCF604 Offset: 0xCCF604 VA: 0xCCF604
	public long waveTurn; // 0x10
	[PackKeyAttribute] // RVA: 0xCCF63C Offset: 0xCCF63C VA: 0xCCF63C
	public long[] skillIds; // 0x18

	// Methods

	// RVA: 0x2038388 Offset: 0x2038388 VA: 0x2038388
	public void .ctor() { }
}

// Namespace: 
public static class BattleDataDefine // TypeDefIndex: 8834
{
	// Fields
	public static readonly int OVERWRITE_ATK_RATE_PRIORITY; // 0x0
	public static readonly int OVERWRITE_DEF_RATE_PRIORITY; // 0x4
	public static readonly float PERCENTAGE_DENOMINATOR; // 0x8
	public static readonly float PERMILLAGE_DENOMINATOR; // 0xC
	public static readonly int CRITICAL_HIT_RANDOM_MAX; // 0x10
	public const float SIDE_EFFECT_TOTAL_TIME = 1.25;
	public const float EFFECT_INTERVAL_TIME = 0.3;
	public const float EFFECT_NO_INTERVAL_TIME = 0.01;
	public const int DEFAULT_FIELD_NUM = 3;
	public static readonly string ASSET_BATTLE_COMMON; // 0x18

	// Methods

	// RVA: 0x1659408 Offset: 0x1659408 VA: 0x1659408
	private static void .cctor() { }
}

// Namespace: 
public enum BattleDataDefine.FieldActorPosition // TypeDefIndex: 8835
{
	// Fields
	public int value__; // 0x0
	public const BattleDataDefine.FieldActorPosition FRONT = 0;
	public const BattleDataDefine.FieldActorPosition CENTER = 1;
	public const BattleDataDefine.FieldActorPosition BACK = 2;
}

// Namespace: 
public enum BattleDataDefine.RaidType // TypeDefIndex: 8836
{
	// Fields
	public int value__; // 0x0
	public const BattleDataDefine.RaidType NONE = 0;
	public const BattleDataDefine.RaidType RAID = 1;
	public const BattleDataDefine.RaidType SUPER_BOSS = 2;
}

// Namespace: 
public static class BattleDebug // TypeDefIndex: 8837
{
	// Fields
	private static Queue<string> logQueue; // 0x0
	private const int MAXQUEUE = 1000;

	// Methods

	// RVA: 0x16594A4 Offset: 0x16594A4 VA: 0x16594A4
	public static BattleDebug.TAG getTag(int param) { }

	[ConditionalAttribute] // RVA: 0xD3A1BC Offset: 0xD3A1BC VA: 0xD3A1BC
	// RVA: 0x16594A8 Offset: 0x16594A8 VA: 0x16594A8
	public static void Log(string str, BattleDebug.TAG tag = 0) { }

	[ConditionalAttribute] // RVA: 0xD3A1F4 Offset: 0xD3A1F4 VA: 0xD3A1F4
	// RVA: 0x16594AC Offset: 0x16594AC VA: 0x16594AC
	public static void Log(LinkedList<BattleLogicTask> taskList, BattleDebug.TAG tag = 0) { }

	// RVA: 0x16594B0 Offset: 0x16594B0 VA: 0x16594B0
	public static void Reset() { }

	// RVA: 0x1659534 Offset: 0x1659534 VA: 0x1659534
	public static string[] getLoglist(string serchText, BattleDebug.TAG tag = 0, bool reverseFlg = False) { }

	[ConditionalAttribute] // RVA: 0xD3A22C Offset: 0xD3A22C VA: 0xD3A22C
	// RVA: 0x1659738 Offset: 0x1659738 VA: 0x1659738
	public static void CheckNull(string errorText, object obj) { }

	[ConditionalAttribute] // RVA: 0xD3A264 Offset: 0xD3A264 VA: 0xD3A264
	// RVA: 0x16597C4 Offset: 0x16597C4 VA: 0x16597C4
	public static void DebugLog(string str) { }

	[ConditionalAttribute] // RVA: 0xD3A29C Offset: 0xD3A29C VA: 0xD3A29C
	// RVA: 0x16597C8 Offset: 0x16597C8 VA: 0x16597C8
	public static void WarningLog(string str) { }

	[ConditionalAttribute] // RVA: 0xD3A2D4 Offset: 0xD3A2D4 VA: 0xD3A2D4
	// RVA: 0x16597CC Offset: 0x16597CC VA: 0x16597CC
	public static void ErrorLog(string str) { }

	[ConditionalAttribute] // RVA: 0xD3A30C Offset: 0xD3A30C VA: 0xD3A30C
	// RVA: 0x16597D0 Offset: 0x16597D0 VA: 0x16597D0
	public static void OutputError(string errorText) { }

	// RVA: 0x1659840 Offset: 0x1659840 VA: 0x1659840
	private static void .cctor() { }
}

// Namespace: 
public enum BattleDebug.TAG // TypeDefIndex: 8838
{
	// Fields
	public int value__; // 0x0
	public const BattleDebug.TAG NONE = 0;
	public const BattleDebug.TAG SKILL = 1;
	public const BattleDebug.TAG ACTION = 2;
	public const BattleDebug.TAG FUNCTION = 3;
	public const BattleDebug.TAG AI = 4;
	public const BattleDebug.TAG ANIMATION = 5;
	public const BattleDebug.TAG KEISAN = 6;
	public const BattleDebug.TAG PRINT = 7;
	public const BattleDebug.TAG BUFF = 8;
	public const BattleDebug.TAG PERF = 9;
	public const BattleDebug.TAG LOGIC = 10;
	public const BattleDebug.TAG NEW_AI = 11;
	public const BattleDebug.TAG DEBUG = 100;
	public const BattleDebug.TAG WARNING = 101;
	public const BattleDebug.TAG ERROR = 102;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDA0 Offset: 0xCAFDA0 VA: 0xCAFDA0
private sealed class BattleDebug.<getLoglist>c__AnonStorey0 // TypeDefIndex: 8839
{
	// Fields
	internal BattleDebug.TAG tag; // 0x10
	internal string serchText; // 0x18

	// Methods

	// RVA: 0x1659730 Offset: 0x1659730 VA: 0x1659730
	public void .ctor() { }

	// RVA: 0x16598B4 Offset: 0x16598B4 VA: 0x16598B4
	internal bool <>m__0(string s) { }

	// RVA: 0x16599B4 Offset: 0x16599B4 VA: 0x16599B4
	internal bool <>m__1(string s) { }
}

// Namespace: 
public class BattleDeckServantData : DeckServantData // TypeDefIndex: 8840
{
	// Fields
	public int uniqueId; // 0x3C
	public string name; // 0x40
	public int roleType; // 0x48
	public DropInfo[] dropInfos; // 0x50
	public int npcId; // 0x58
	public Dictionary<string, object> enemyScript; // 0x60
	public Dictionary<string, object> infoScript; // 0x68
	public int index; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCCF674 Offset: 0xCCF674 VA: 0xCCF674
	private static Converter<object, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCCF684 Offset: 0xCCF684 VA: 0xCCF684
	private static Converter<object, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCCF694 Offset: 0xCCF694 VA: 0xCCF694
	private static Converter<object, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCF6A4 Offset: 0xCCF6A4 VA: 0xCCF6A4
	private static Converter<object, int> <>f__am$cache3; // 0x18

	// Methods

	// RVA: 0x1659A64 Offset: 0x1659A64 VA: 0x1659A64
	public void .ctor() { }

	// RVA: 0x1659A6C Offset: 0x1659A6C VA: 0x1659A6C
	public bool isEscape() { }

	// RVA: 0x1659B7C Offset: 0x1659B7C VA: 0x1659B7C
	public bool isDeadStand() { }

	// RVA: 0x1659BD0 Offset: 0x1659BD0 VA: 0x1659BD0
	public bool isDeadEffect() { }

	// RVA: 0x1659C24 Offset: 0x1659C24 VA: 0x1659C24
	public bool isDeadWait() { }

	// RVA: 0x1659C78 Offset: 0x1659C78 VA: 0x1659C78
	public bool isAppear() { }

	// RVA: 0x1659CCC Offset: 0x1659CCC VA: 0x1659CCC
	public bool IsNoVoice() { }

	// RVA: 0x1659D20 Offset: 0x1659D20 VA: 0x1659D20
	public int getRoleType() { }

	// RVA: 0x1659D28 Offset: 0x1659D28 VA: 0x1659D28
	public bool isRaid() { }

	// RVA: 0x1659DEC Offset: 0x1659DEC VA: 0x1659DEC
	public int getRaidId() { }

	// RVA: 0x1659EF0 Offset: 0x1659EF0 VA: 0x1659EF0
	public bool isSuperBoss() { }

	// RVA: 0x1659F40 Offset: 0x1659F40 VA: 0x1659F40
	public int getSuperBossId() { }

	// RVA: 0x1659F94 Offset: 0x1659F94 VA: 0x1659F94
	public int getHpBarType() { }

	// RVA: 0x1659FE8 Offset: 0x1659FE8 VA: 0x1659FE8
	public bool isLeader() { }

	// RVA: 0x165A03C Offset: 0x165A03C VA: 0x165A03C
	public int getScale() { }

	// RVA: 0x165A090 Offset: 0x165A090 VA: 0x165A090
	private int getOverWriteSvtVoiceIdOld() { }

	// RVA: 0x165A0E4 Offset: 0x165A0E4 VA: 0x165A0E4
	public bool isAddition() { }

	// RVA: 0x165A1A8 Offset: 0x165A1A8 VA: 0x165A1A8
	public string getEnemyTreasureDeviceVoiceId() { }

	// RVA: 0x165A308 Offset: 0x165A308 VA: 0x165A308
	public int getChangeAttri() { }

	// RVA: 0x165A35C Offset: 0x165A35C VA: 0x165A35C
	public int getBillBoardGroup() { }

	// RVA: 0x165A3B0 Offset: 0x165A3B0 VA: 0x165A3B0
	public bool isMultiTargetCore() { }

	// RVA: 0x165A404 Offset: 0x165A404 VA: 0x165A404
	public bool isMultiTargetUp() { }

	// RVA: 0x165A458 Offset: 0x165A458 VA: 0x165A458
	public bool isMultiTargetUnder() { }

	// RVA: 0x165A4AC Offset: 0x165A4AC VA: 0x165A4AC
	public bool isMultiTargetBattleStartPos() { }

	// RVA: 0x165A500 Offset: 0x165A500 VA: 0x165A500
	public int getMultiTargetBattleDeadChangePos() { }

	// RVA: 0x1659AC0 Offset: 0x1659AC0 VA: 0x1659AC0
	public bool checkScript(string key, int val) { }

	// RVA: 0x1659D78 Offset: 0x1659D78 VA: 0x1659D78
	public bool isScript(string key) { }

	// RVA: 0x165A134 Offset: 0x165A134 VA: 0x165A134
	public bool isInfoScript(string key) { }

	// RVA: 0x1659E40 Offset: 0x1659E40 VA: 0x1659E40
	public int getScript(string key, int defVal = 0) { }

	// RVA: 0x165A1FC Offset: 0x165A1FC VA: 0x165A1FC
	public string getScriptStr(string key, string defVal) { }

	// RVA: 0x1658EAC Offset: 0x1658EAC VA: 0x1658EAC
	public int getUniqueID() { }

	// RVA: 0x165A554 Offset: 0x165A554 VA: 0x165A554
	public long getUserServantID() { }

	// RVA: 0x165A55C Offset: 0x165A55C VA: 0x165A55C
	public int getSummonNpcId(int index) { }

	// RVA: 0x165A788 Offset: 0x165A788 VA: 0x165A788
	public int[] getShiftList() { }

	// RVA: 0x165A968 Offset: 0x165A968 VA: 0x165A968
	public int GetDefShiftPosition(long defVal = -1) { }

	// RVA: 0x165A9D8 Offset: 0x165A9D8 VA: 0x165A9D8
	public int[] getShiftClearBuffIndiv() { }

	// RVA: 0x165ABB8 Offset: 0x165ABB8 VA: 0x165ABB8
	public int[] getChangeList() { }

	// RVA: 0x165AD98 Offset: 0x165AD98 VA: 0x165AD98
	public bool IsChangeDropItemByShift() { }

	// RVA: 0x165ADE8 Offset: 0x165ADE8 VA: 0x165ADE8
	public bool getIsForceDropItem() { }

	// RVA: 0x165AE54 Offset: 0x165AE54 VA: 0x165AE54
	public bool checkEntryIndex(int entryIndex) { }

	// RVA: 0x165AED8 Offset: 0x165AED8 VA: 0x165AED8
	public string getTDName() { }

	// RVA: 0x165AF50 Offset: 0x165AF50 VA: 0x165AF50
	public string getTDRuby() { }

	// RVA: 0x165AFC8 Offset: 0x165AFC8 VA: 0x165AFC8
	public bool getEnableNpInfo() { }

	// RVA: 0x165B040 Offset: 0x165B040 VA: 0x165B040
	public int getNpCharge() { }

	// RVA: 0x165B0B8 Offset: 0x165B0B8 VA: 0x165B0B8
	private bool tryGetSvtChange(out Dictionary<string, object> dict) { }

	// RVA: 0x165B1BC Offset: 0x165B1BC VA: 0x165B1BC
	private bool tryGetSvtChangeInt(string key, int priority, out int value) { }

	// RVA: 0x165B4AC Offset: 0x165B4AC VA: 0x165B4AC
	public int getOverwriteSvtVoiceId(int battleSvtId) { }

	// RVA: 0x165B594 Offset: 0x165B594 VA: 0x165B594
	public bool IsLeaveEventJoin() { }

	// RVA: 0x165B6A4 Offset: 0x165B6A4 VA: 0x165B6A4
	public bool isHideShadow() { }

	// RVA: 0x165B6F8 Offset: 0x165B6F8 VA: 0x165B6F8
	public int GetFollowerType(int oldFollowerType) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A344 Offset: 0xD3A344 VA: 0xD3A344
	// RVA: 0x165B708 Offset: 0x165B708 VA: 0x165B708
	private static int <getSummonNpcId>m__0(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A354 Offset: 0xD3A354 VA: 0xD3A354
	// RVA: 0x165B784 Offset: 0x165B784 VA: 0x165B784
	private static int <getShiftList>m__1(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A364 Offset: 0xD3A364 VA: 0xD3A364
	// RVA: 0x165B800 Offset: 0x165B800 VA: 0x165B800
	private static int <getShiftClearBuffIndiv>m__2(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A374 Offset: 0xD3A374 VA: 0xD3A374
	// RVA: 0x165B87C Offset: 0x165B87C VA: 0x165B87C
	private static int <getChangeList>m__3(object x) { }
}

// Namespace: 
public class BattleDefenceTargetData // TypeDefIndex: 8841
{
	// Fields
	public int nowHp; // 0x10
	public int maxHp; // 0x14
	public BattleBuffData buffData; // 0x18
	public int uiId; // 0x20

	// Methods

	// RVA: 0x165B8F8 Offset: 0x165B8F8 VA: 0x165B8F8
	public void .ctor() { }

	// RVA: 0x165B900 Offset: 0x165B900 VA: 0x165B900
	public void Initialize(int nowHp, int maxHp, int uiId) { }

	// RVA: 0x165B9A4 Offset: 0x165B9A4 VA: 0x165B9A4
	public BattleDefenceTargetData.SaveData GetSaveData() { }

	// RVA: 0x165BA90 Offset: 0x165BA90 VA: 0x165BA90
	public void SetSaveData(BattleDefenceTargetData.SaveData saveData) { }

	// RVA: 0x165BB48 Offset: 0x165BB48 VA: 0x165BB48
	public void DamageResult(int damage) { }

	// RVA: 0x165BB5C Offset: 0x165BB5C VA: 0x165BB5C
	public void BuffTurnProgress(BattlePerformanceDefenceTarget defenceTarget) { }

	// RVA: 0x165BD48 Offset: 0x165BD48 VA: 0x165BD48
	public void RecoverDefenceTarget(int recoverValue) { }
}

// Namespace: 
public class BattleDefenceTargetData.SaveData // TypeDefIndex: 8842
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCF6B4 Offset: 0xCCF6B4 VA: 0xCCF6B4
	public int nowHp; // 0x10
	[PackKeyAttribute] // RVA: 0xCCF6EC Offset: 0xCCF6EC VA: 0xCCF6EC
	public int maxHp; // 0x14
	[PackKeyAttribute] // RVA: 0xCCF724 Offset: 0xCCF724 VA: 0xCCF724
	public BattleBuffData.SaveData buffDataSave; // 0x18
	[PackKeyAttribute] // RVA: 0xCCF75C Offset: 0xCCF75C VA: 0xCCF75C
	public int uiId; // 0x20

	// Methods

	// RVA: 0x165BA88 Offset: 0x165BA88 VA: 0x165BA88
	public void .ctor() { }
}

// Namespace: 
public class BattleDropItem // TypeDefIndex: 8843
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCF794 Offset: 0xCCF794 VA: 0xCCF794
	public bool isNew; // 0x10
	[PackKeyAttribute] // RVA: 0xCCF7CC Offset: 0xCCF7CC VA: 0xCCF7CC
	public int type; // 0x14
	[PackKeyAttribute] // RVA: 0xCCF804 Offset: 0xCCF804 VA: 0xCCF804
	public int objectId; // 0x18
	[PackKeyAttribute] // RVA: 0xCCF83C Offset: 0xCCF83C VA: 0xCCF83C
	public long userSvtId; // 0x20
	[PackKeyAttribute] // RVA: 0xCCF874 Offset: 0xCCF874 VA: 0xCCF874
	public int limitCount; // 0x28
	[PackKeyAttribute] // RVA: 0xCCF8AC Offset: 0xCCF8AC VA: 0xCCF8AC
	public int num; // 0x2C
	[PackKeyAttribute] // RVA: 0xCCF8E4 Offset: 0xCCF8E4 VA: 0xCCF8E4
	public bool isRateUp; // 0x30
	[PackKeyAttribute] // RVA: 0xCCF91C Offset: 0xCCF91C VA: 0xCCF91C
	public int originalNum; // 0x34
	[PackKeyAttribute] // RVA: 0xCCF954 Offset: 0xCCF954 VA: 0xCCF954
	public int eventGroupId; // 0x38
	[PackKeyAttribute] // RVA: 0xCCF98C Offset: 0xCCF98C VA: 0xCCF98C
	public int rarity; // 0x3C
	[PackKeyAttribute] // RVA: 0xCCF9C4 Offset: 0xCCF9C4 VA: 0xCCF9C4
	public int sellQp; // 0x40
	[PackKeyAttribute] // RVA: 0xCCF9FC Offset: 0xCCF9FC VA: 0xCCF9FC
	public int sellMana; // 0x44
	[PackKeyAttribute] // RVA: 0xCCFA34 Offset: 0xCCFA34 VA: 0xCCFA34
	public int dropUpRate; // 0x48

	// Methods

	// RVA: 0x16603DC Offset: 0x16603DC VA: 0x16603DC
	public void .ctor() { }

	// RVA: 0x16603EC Offset: 0x16603EC VA: 0x16603EC
	public void setData(DropInfo info) { }

	// RVA: 0x16604C8 Offset: 0x16604C8 VA: 0x16604C8
	public int getTotalNum() { }

	// RVA: 0x16604F0 Offset: 0x16604F0 VA: 0x16604F0
	public int getOriginalNum() { }

	// RVA: 0x1660534 Offset: 0x1660534 VA: 0x1660534
	public int getBonusAddNum() { }

	// RVA: 0x1660510 Offset: 0x1660510 VA: 0x1660510
	public int getBonusAddNumClamp() { }

	// RVA: 0x1660554 Offset: 0x1660554 VA: 0x1660554
	public bool isBonusAdd() { }

	// RVA: 0x166057C Offset: 0x166057C VA: 0x166057C
	public void setNum(int num, int original) { }

	// RVA: 0x1660588 Offset: 0x1660588 VA: 0x1660588
	public bool isAutoSellItem() { }
}

// Namespace: 
public class BattleDropItemComponent : MonoBehaviour // TypeDefIndex: 8844
{
	// Fields
	public GameObject newflag; // 0x18
	public GameObject additemflg; // 0x20
	public BattleServantFaceIconComponent servant; // 0x28
	public BattleItemIconComponent item; // 0x30
	public GameObject possessionRoot; // 0x38
	public UILabel possessionLabel; // 0x40
	public AutoSellInfoComponent autoSellInfo; // 0x48
	public UISprite back; // 0x50
	public GameObject AcquisitionUpObj; // 0x58
	public UILabel AcquisitionUpLabel; // 0x60
	public UISprite materialTdSprite; // 0x68
	private const int NORMAL_RATE = 1000;
	private static readonly float PossessionLabelWidth; // 0x0
	private BattleDropItem itemData; // 0x70
	protected BattleDropItemComponent.ClickDelegate callbackFunc; // 0x78
	private int possessionNum; // 0x80
	private Gift.Type gifttype; // 0x84

	// Methods

	// RVA: 0x16605AC Offset: 0x16605AC VA: 0x16605AC
	public void .ctor() { }

	// RVA: 0x16605B4 Offset: 0x16605B4 VA: 0x16605B4
	public void SetTouch(bool flg) { }

	// RVA: 0x1660690 Offset: 0x1660690 VA: 0x1660690
	public void SetDepth(int basedepth) { }

	// RVA: 0x1660694 Offset: 0x1660694 VA: 0x1660694
	public void Set(BattleDropItem indata) { }

	// RVA: 0x1661238 Offset: 0x1661238 VA: 0x1661238
	public void ShowAcquisitionUp(BattleDropItem indata) { }

	// RVA: 0x166142C Offset: 0x166142C VA: 0x166142C
	public void Set(BattleDropItem indata, int possessionNum) { }

	// RVA: 0x1661434 Offset: 0x1661434 VA: 0x1661434
	public void SetCallBack(BattleDropItemComponent.ClickDelegate call) { }

	// RVA: 0x16608C0 Offset: 0x16608C0 VA: 0x16608C0
	public void SetServant() { }

	// RVA: 0x1660B08 Offset: 0x1660B08 VA: 0x1660B08
	public void SetItem() { }

	// RVA: 0x1660DCC Offset: 0x1660DCC VA: 0x1660DCC
	public void SetCommandCode() { }

	// RVA: 0x1660F40 Offset: 0x1660F40 VA: 0x1660F40
	public void SetEventPointBuff() { }

	// RVA: 0x16610C4 Offset: 0x16610C4 VA: 0x16610C4
	public void SetAutoSellItem() { }

	// RVA: 0x1661544 Offset: 0x1661544 VA: 0x1661544
	public void ShowAutoSellItem() { }

	// RVA: 0x16615FC Offset: 0x16615FC VA: 0x16615FC
	public void Show() { }

	// RVA: 0x1660810 Offset: 0x1660810 VA: 0x1660810
	public void setRateUp(bool flg) { }

	// RVA: 0x166143C Offset: 0x166143C VA: 0x166143C
	public void SetMaterialTd(bool flg) { }

	// RVA: 0x1661634 Offset: 0x1661634 VA: 0x1661634
	public void ShowPossessionNum() { }

	// RVA: 0x1661A98 Offset: 0x1661A98 VA: 0x1661A98
	public void ShowDropNum() { }

	// RVA: 0x1661864 Offset: 0x1661864 VA: 0x1661864
	public void SetPossession(int num) { }

	// RVA: 0x1661BFC Offset: 0x1661BFC VA: 0x1661BFC
	public void OnClick() { }

	// RVA: 0x1662080 Offset: 0x1662080 VA: 0x1662080
	private static void .cctor() { }
}

// Namespace: 
public sealed class BattleDropItemComponent.ClickDelegate : MulticastDelegate // TypeDefIndex: 8845
{
	// Methods

	// RVA: 0x16620D4 Offset: 0x16620D4 VA: 0x16620D4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1661CE0 Offset: 0x1661CE0 VA: 0x1661CE0 Slot: 11
	public virtual void Invoke(BattleDropItem item) { }

	// RVA: 0x16620E4 Offset: 0x16620E4 VA: 0x16620E4 Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleDropItem item, AsyncCallback callback, object object) { }

	// RVA: 0x1662108 Offset: 0x1662108 VA: 0x1662108 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleEffectControl : BaseMonoBehaviour // TypeDefIndex: 8846
{
	// Fields
	[SerializeField] // RVA: 0xCCFA6C Offset: 0xCCFA6C VA: 0xCCFA6C
	private GameObject[] EffectList; // 0x18
	private Spawner spawner; // 0x20
	[SerializeField] // RVA: 0xCCFA7C Offset: 0xCCFA7C VA: 0xCCFA7C
	private GameObject[] damageObjectlist; // 0x28
	[SerializeField] // RVA: 0xCCFA8C Offset: 0xCCFA8C VA: 0xCCFA8C
	private GameObject buffIconObject; // 0x30
	[SerializeField] // RVA: 0xCCFA9C Offset: 0xCCFA9C VA: 0xCCFA9C
	private GameObject avoidanceObject; // 0x38
	[SerializeField] // RVA: 0xCCFAAC Offset: 0xCCFAAC VA: 0xCCFAAC
	private GameObject avoidanceTextObject; // 0x40
	[SerializeField] // RVA: 0xCCFABC Offset: 0xCCFABC VA: 0xCCFABC
	private GameObject invincibleObject; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCCFACC Offset: 0xCCFACC VA: 0xCCFACC
	[DebuggerBrowsableAttribute] // RVA: 0xCCFACC Offset: 0xCCFACC VA: 0xCCFACC
	private GameObject <specialInvincibleObject>k__BackingField; // 0x50
	[SerializeField] // RVA: 0xCCFB08 Offset: 0xCCFB08 VA: 0xCCFB08
	private GameObject[] buffTextObjectlist; // 0x58
	[SerializeField] // RVA: 0xCCFB18 Offset: 0xCCFB18 VA: 0xCCFB18
	private GameObject[] buffTextClassIconObjectList; // 0x60

	// Properties
	public GameObject specialInvincibleObject { get; set; }

	// Methods

	// RVA: 0x1662C90 Offset: 0x1662C90 VA: 0x1662C90
	public void .ctor() { }

	// RVA: 0x1662C98 Offset: 0x1662C98 VA: 0x1662C98
	private void Start() { }

	// RVA: 0x16631B0 Offset: 0x16631B0 VA: 0x16631B0
	public GameObject getListEffect(BattleEffectControl.ID id) { }

	// RVA: 0x1663234 Offset: 0x1663234 VA: 0x1663234
	public GameObject getDamageObject(bool critical, bool week, bool resist) { }

	// RVA: 0x1663334 Offset: 0x1663334 VA: 0x1663334
	public GameObject setBuffIconObject(BattleBuffData.ShowBuffData[] bufflist) { }

	// RVA: 0x16634D0 Offset: 0x16634D0 VA: 0x16634D0
	public GameObject getavoidanceObject() { }

	// RVA: 0x16634D8 Offset: 0x16634D8 VA: 0x16634D8
	public GameObject GetAvoidanceTextObject() { }

	// RVA: 0x16634E0 Offset: 0x16634E0 VA: 0x16634E0
	public GameObject getinvincibleObject() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A384 Offset: 0xD3A384 VA: 0xD3A384
	// RVA: 0x16634E8 Offset: 0x16634E8 VA: 0x16634E8
	public GameObject get_specialInvincibleObject() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A394 Offset: 0xD3A394 VA: 0xD3A394
	// RVA: 0x16634F0 Offset: 0x16634F0 VA: 0x16634F0
	private void set_specialInvincibleObject(GameObject value) { }

	// RVA: 0x16634F8 Offset: 0x16634F8 VA: 0x16634F8
	public GameObject getBuffTextObject(int color) { }

	// RVA: 0x16635A4 Offset: 0x16635A4 VA: 0x16635A4
	public GameObject getBuffTextClassIconObject(int color) { }

	// RVA: 0x1663650 Offset: 0x1663650 VA: 0x1663650
	public GameObject getTreasureObject(int rarity, Transform rootTr) { }

	// RVA: 0x1663824 Offset: 0x1663824 VA: 0x1663824
	public GameObject getEffectInstantiate(BattleEffectControl.ID id) { }

	// RVA: 0x16638CC Offset: 0x16638CC VA: 0x16638CC
	public void destroyInstantiate(GameObject obj) { }

	// RVA: 0x1663908 Offset: 0x1663908 VA: 0x1663908
	public void SetSpecialInvincibleObject(GameObject obj) { }
}

// Namespace: 
public enum BattleEffectControl.ID // TypeDefIndex: 8847
{
	// Fields
	public int value__; // 0x0
	public const BattleEffectControl.ID DAMAGE_NO = 0;
	public const BattleEffectControl.ID CRITICAL_DAMAGE__NO = 1;
	public const BattleEffectControl.ID TITLE_CRITICAL = 2;
	public const BattleEffectControl.ID TITLE_WEEK = 3;
	public const BattleEffectControl.ID STAR = 4;
	public const BattleEffectControl.ID SERVANT = 5;
	public const BattleEffectControl.ID HEAL_NO = 6;
	public const BattleEffectControl.ID REGIST = 7;
	public const BattleEffectControl.ID TITLE_CRITICAL_MISS = 8;
	public const BattleEffectControl.ID STAR_DEAL = 9;
}

// Namespace: 
public class BattleEffectForceFPS : MonoBehaviour // TypeDefIndex: 8848
{
	// Fields
	[SerializeField] // RVA: 0xCCFB28 Offset: 0xCCFB28 VA: 0xCCFB28
	private float targetFps; // 0x18
	[SerializeField] // RVA: 0xCCFB38 Offset: 0xCCFB38 VA: 0xCCFB38
	[TooltipAttribute] // RVA: 0xCCFB38 Offset: 0xCCFB38 VA: 0xCCFB38
	private SimpleAnimation[] targetSimpleAnimations; // 0x20
	[SerializeField] // RVA: 0xCCFB84 Offset: 0xCCFB84 VA: 0xCCFB84
	[TooltipAttribute] // RVA: 0xCCFB84 Offset: 0xCCFB84 VA: 0xCCFB84
	private Animation[] targetAnimations; // 0x28
	private float progressDeltaTime; // 0x30

	// Methods

	// RVA: 0x1663910 Offset: 0x1663910 VA: 0x1663910
	public void .ctor() { }

	// RVA: 0x1663920 Offset: 0x1663920 VA: 0x1663920
	private void Start() { }

	// RVA: 0x16639B8 Offset: 0x16639B8 VA: 0x16639B8
	private void LateUpdate() { }
}

// Namespace: 
public static class BattleEffectUtility // TypeDefIndex: 8849
{
	// Fields
	public static int battleEffectId; // 0x0
	private static Vector3 wkVec; // 0x4
	private static EffectMaster effectMst; // 0x10
	private static AuraEffectPosOverwriteMaster auraPosOverwriteMst; // 0x18
	private static string[] scalelist; // 0x20

	// Methods

	// RVA: 0x1663EA8 Offset: 0x1663EA8 VA: 0x1663EA8
	public static int setBattleEffectId(int inId) { }

	// RVA: 0x1663F20 Offset: 0x1663F20 VA: 0x1663F20
	public static GameObject loadEffectToNode(GameObject targetObject, int effectId, GameObject procObject, Vector3 offset, int svtId, int limitCount, BattleEffectUtility.EffectLoadArgument arg) { }

	// RVA: 0x1664C24 Offset: 0x1664C24 VA: 0x1664C24
	public static GameObject loadEffectToNode(GameObject targetObject, int effectId, GameObject procObject, int svtId, int limitCount) { }

	// RVA: 0x1664CCC Offset: 0x1664CCC VA: 0x1664CCC
	public static string GetSideEffectPath(int effectId) { }

	// RVA: 0x1664D6C Offset: 0x1664D6C VA: 0x1664D6C
	public static void showSideEffect(Transform parent, int effectId, Vector3 scl) { }

	// RVA: 0x1664EC0 Offset: 0x1664EC0 VA: 0x1664EC0
	public static GameObject loadActivateSideEffect() { }

	// RVA: 0x1664F50 Offset: 0x1664F50 VA: 0x1664F50
	public static void AddRelatedFunctionEffectIdList(int[] funcIds, ref List<int> effectIdList) { }

	// RVA: 0x1665104 Offset: 0x1665104 VA: 0x1665104
	public static string[] GetBattleCommonEffectPathList(int[] effectIdList) { }

	// RVA: 0x16652F8 Offset: 0x16652F8 VA: 0x16652F8
	public static void GetBattleCommonEffectPathAndName(string baseName, out string path, out string name) { }

	// RVA: 0x1665448 Offset: 0x1665448 VA: 0x1665448
	public static GameObject getEffectObjectSafe(int effectId, GameObject procObject, bool isPlaySe = True, float lostTime = 1) { }

	// RVA: 0x1664520 Offset: 0x1664520 VA: 0x1664520
	public static GameObject getEffectObject(int effectId, GameObject procObject, bool isPlaySe = True) { }

	// RVA: 0x166556C Offset: 0x166556C VA: 0x166556C
	public static string getEffectSeName(int effectId) { }

	// RVA: 0x1665638 Offset: 0x1665638 VA: 0x1665638
	public static GameObject getEffectObject(ResourceFolder folder, string name, GameObject actorObject) { }

	// RVA: 0x16657B0 Offset: 0x16657B0 VA: 0x16657B0
	public static GameObject ChangeServantView(GameObject actorObj, bool isShadow, bool isChoco) { }

	// RVA: 0x1665D3C Offset: 0x1665D3C VA: 0x1665D3C
	public static string getNodeNameFromEffectEntity(int id) { }

	// RVA: 0x1665EA0 Offset: 0x1665EA0 VA: 0x1665EA0
	private static void .cctor() { }
}

// Namespace: 
public enum BattleEffectUtility.EffectFolderType // TypeDefIndex: 8850
{
	// Fields
	public int value__; // 0x0
	public const BattleEffectUtility.EffectFolderType COMMON = 1;
	public const BattleEffectUtility.EffectFolderType NOBLE = 2;
	public const BattleEffectUtility.EffectFolderType WEAPON = 3;
	public const BattleEffectUtility.EffectFolderType BATTLEASSET = 4;
	public const BattleEffectUtility.EffectFolderType BATTLECOMMON = 5;
}

// Namespace: 
public class BattleEffectUtility.EffectLoadArgument // TypeDefIndex: 8851
{
	// Fields
	protected string effectNodeName; // 0x10

	// Methods

	// RVA: 0x16662E4 Offset: 0x16662E4 VA: 0x16662E4
	public void .ctor() { }

	// RVA: 0x16662EC Offset: 0x16662EC VA: 0x16662EC Slot: 4
	public virtual string GetParentNodeName(string defNodeName) { }

	// RVA: 0x16662FC Offset: 0x16662FC VA: 0x16662FC Slot: 5
	public virtual Transform GetParentNode(GameObject targetObj, Transform defParentTr) { }
}

// Namespace: 
public class BattleEffectUtility.BuffEffectLoadArgument : BattleEffectUtility.EffectLoadArgument // TypeDefIndex: 8852
{
	// Methods

	// RVA: 0x166623C Offset: 0x166623C VA: 0x166623C
	public void .ctor(BattleActorControl bActor) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDB0 Offset: 0xCAFDB0 VA: 0xCAFDB0
private sealed class BattleEffectUtility.<showSideEffect>c__AnonStorey0 // TypeDefIndex: 8853
{
	// Fields
	internal string name; // 0x10
	internal Transform parent; // 0x18
	internal Vector3 scl; // 0x20

	// Methods

	// RVA: 0x1664EB8 Offset: 0x1664EB8 VA: 0x1664EB8
	public void .ctor() { }

	// RVA: 0x16660C4 Offset: 0x16660C4 VA: 0x16660C4
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class BaseBattleEvent // TypeDefIndex: 8854
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCFBD0 Offset: 0xCCFBD0 VA: 0xCCFBD0
	[DebuggerBrowsableAttribute] // RVA: 0xCCFBD0 Offset: 0xCCFBD0 VA: 0xCCFBD0
	private BattleData <Data>k__BackingField; // 0x10
	private int battleEndReduceBuffTurnFlag; // 0x18

	// Properties
	public BattleData Data { get; set; }
	public BattleEntity BattleEnt { get; }
	public BattleInfoData BattleInfo { get; }
	public virtual bool IsPrecedingPlayer { get; }
	public bool IsBattleEndReduceBuffTurn { get; }

	// Methods

	// RVA: 0x14800D8 Offset: 0x14800D8 VA: 0x14800D8
	public void .ctor() { }

	// RVA: 0x14800E8 Offset: 0x14800E8 VA: 0x14800E8
	public static BaseBattleEvent MakeBattleEvent(BattleData data) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3A4 Offset: 0xD3A3A4 VA: 0xD3A3A4
	// RVA: 0x14801CC Offset: 0x14801CC VA: 0x14801CC
	private void set_Data(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3B4 Offset: 0xD3A3B4 VA: 0xD3A3B4
	// RVA: 0x14801D4 Offset: 0x14801D4 VA: 0x14801D4
	public BattleData get_Data() { }

	// RVA: 0x14801DC Offset: 0x14801DC VA: 0x14801DC
	public BattleEntity get_BattleEnt() { }

	// RVA: 0x148020C Offset: 0x148020C VA: 0x148020C
	public BattleInfoData get_BattleInfo() { }

	// RVA: 0x1480238 Offset: 0x1480238 VA: 0x1480238 Slot: 4
	public virtual bool get_IsPrecedingPlayer() { }

	// RVA: 0x1480240 Offset: 0x1480240 VA: 0x1480240
	public bool get_IsBattleEndReduceBuffTurn() { }

	// RVA: 0x14802E0 Offset: 0x14802E0 VA: 0x14802E0 Slot: 5
	public virtual void Init(BattleData data) { }

	// RVA: 0x14802E8 Offset: 0x14802E8 VA: 0x14802E8 Slot: 6
	public virtual BaseBattleServantEvent GetServantEvent() { }

	// RVA: 0x148034C Offset: 0x148034C VA: 0x148034C
	protected void InitAtkManager(bool isPrecedingPlayer, BattleData data) { }

	// RVA: 0x14803A4 Offset: 0x14803A4 VA: 0x14803A4 Slot: 7
	public virtual void InitWave() { }

	// RVA: 0x14803A8 Offset: 0x14803A8 VA: 0x14803A8 Slot: 8
	public virtual void InitBGData(ref int bgNo, ref int bgType) { }

	// RVA: 0x14803AC Offset: 0x14803AC VA: 0x14803AC Slot: 9
	public virtual void InitStageData(StageEntity stage) { }

	// RVA: 0x14803B0 Offset: 0x14803B0 VA: 0x14803B0 Slot: 10
	public virtual void InitServantData(bool isPlayer) { }

	// RVA: 0x14803B4 Offset: 0x14803B4 VA: 0x14803B4 Slot: 11
	public virtual void InitServantDataPrevAdd(BattleServantData svtData) { }

	// RVA: 0x14803B8 Offset: 0x14803B8 VA: 0x14803B8 Slot: 12
	public virtual void InitPlayerMasterInfo() { }

	// RVA: 0x14803BC Offset: 0x14803BC VA: 0x14803BC Slot: 13
	public virtual int GetResultBgmId(int curBgmId) { }

	// RVA: 0x14803C4 Offset: 0x14803C4 VA: 0x14803C4 Slot: 14
	public virtual bool SendBattleResult(BattleResultRequest.Argument arg, NetworkManager.ResultCallbackFunc func) { }

	// RVA: 0x14803CC Offset: 0x14803CC VA: 0x14803CC Slot: 15
	public virtual void InitStartResult(BattleResultComponent.resultData result) { }

	// RVA: 0x14803D0 Offset: 0x14803D0 VA: 0x14803D0 Slot: 16
	public virtual bool GoNextScene() { }

	// RVA: 0x14803D8 Offset: 0x14803D8 VA: 0x14803D8 Slot: 17
	public virtual void GetSaveData(BattleData.SaveData save) { }

	// RVA: 0x14803DC Offset: 0x14803DC VA: 0x14803DC Slot: 18
	public virtual void SetSaveData(BattleData.SaveData save) { }

	// RVA: 0x14803E0 Offset: 0x14803E0 VA: 0x14803E0 Slot: 19
	public virtual bool IsUseDefeatPointReady(BattleServantData svtData) { }

	// RVA: 0x14803E8 Offset: 0x14803E8 VA: 0x14803E8 Slot: 20
	public virtual bool IsLogicEscape(BattleServantData svtData) { }

	// RVA: 0x14803F0 Offset: 0x14803F0 VA: 0x14803F0 Slot: 21
	public virtual bool IsTakeOverNextBattleBuff(BattleBuffData.BuffData buff, BuffEntity buffEnt, DataVals baseVals) { }

	// RVA: 0x14803F8 Offset: 0x14803F8 VA: 0x14803F8 Slot: 22
	public virtual bool IsActionPassiveSkillOnBattle(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1480400 Offset: 0x1480400 VA: 0x1480400 Slot: 23
	public virtual int GetProgressBuffTurnCond(BuffEntity buffEnt) { }

	// RVA: 0x14804C0 Offset: 0x14804C0 VA: 0x14804C0 Slot: 24
	public virtual void SetDefaultPassiveBuffShowState(BattleBuffData.BuffData buff) { }

	// RVA: 0x14804C4 Offset: 0x14804C4 VA: 0x14804C4 Slot: 25
	public virtual void InitBattleStartTurn(bool isPlayer) { }

	// RVA: 0x14804C8 Offset: 0x14804C8 VA: 0x14804C8 Slot: 26
	public virtual bool IsRemainBattleEndWave() { }

	// RVA: 0x14804D0 Offset: 0x14804D0 VA: 0x14804D0 Slot: 27
	public virtual bool IsCommandAttackable() { }

	// RVA: 0x14804D8 Offset: 0x14804D8 VA: 0x14804D8 Slot: 28
	public virtual bool CheckBuffCommonProgressTurn(int svtUniqueId) { }

	// RVA: 0x14804E0 Offset: 0x14804E0 VA: 0x14804E0 Slot: 29
	public virtual void ProgressBuffTurn(BattleBuffData buffData, BattleBuffData.BuffData buff, bool isEndEnemyTurn, int defCondState) { }

	// RVA: 0x1480518 Offset: 0x1480518 VA: 0x1480518 Slot: 30
	public virtual int MakeTurnCondStateByServant(int selfUniqueId) { }

	// RVA: 0x1480520 Offset: 0x1480520 VA: 0x1480520 Slot: 31
	public virtual void ProgressNoExecJoinServantsBuff(int[] execUniqueIds, bool isEndEnemyTurn) { }

	// RVA: 0x14806D8 Offset: 0x14806D8 VA: 0x14806D8 Slot: 32
	public virtual bool IsPossibleAddBuffParam(BattleServantData svtData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDC0 Offset: 0xCAFDC0 VA: 0xCAFDC0
private sealed class BaseBattleEvent.<ProgressNoExecJoinServantsBuff>c__AnonStorey0 // TypeDefIndex: 8855
{
	// Fields
	internal int[] execUniqueIds; // 0x10
	internal bool isEndEnemyTurn; // 0x18
	internal BaseBattleEvent $this; // 0x20

	// Methods

	// RVA: 0x14806D0 Offset: 0x14806D0 VA: 0x14806D0
	public void .ctor() { }

	// RVA: 0x148070C Offset: 0x148070C VA: 0x148070C
	internal bool <>m__0(BattleServantData x) { }

	// RVA: 0x14807F8 Offset: 0x14807F8 VA: 0x14807F8
	internal void <>m__1(BattleServantData x) { }
}

