	private ulong totalLength; // 0x88
	private byte[] atBlock; // 0x90
	private int atBlockPos; // 0x98
	private ulong atLength; // 0xA0
	private ulong atLengthPre; // 0xA8

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E19FC4 Offset: 0x1E19FC4 VA: 0x1E19FC4
	public void .ctor(IBlockCipher c) { }

	// RVA: 0x1E19FCC Offset: 0x1E19FCC VA: 0x1E19FCC
	public void .ctor(IBlockCipher c, IGcmMultiplier m) { }

	// RVA: 0x1E1A180 Offset: 0x1E1A180 VA: 0x1E1A180 Slot: 17
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E1A274 Offset: 0x1E1A274 VA: 0x1E1A274 Slot: 5
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E1A27C Offset: 0x1E1A27C VA: 0x1E1A27C Slot: 18
	public virtual int GetBlockSize() { }

	// RVA: 0x1E1A284 Offset: 0x1E1A284 VA: 0x1E1A284 Slot: 19
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E1AA60 Offset: 0x1E1AA60 VA: 0x1E1AA60 Slot: 20
	public virtual byte[] GetMac() { }

	// RVA: 0x1E1AA6C Offset: 0x1E1AA6C VA: 0x1E1AA6C Slot: 21
	public virtual int GetOutputSize(int len) { }

	// RVA: 0x1E1AA94 Offset: 0x1E1AA94 VA: 0x1E1AA94 Slot: 22
	public virtual int GetUpdateOutputSize(int len) { }

	// RVA: 0x1E1AACC Offset: 0x1E1AACC VA: 0x1E1AACC Slot: 23
	public virtual void ProcessAadByte(byte input) { }

	// RVA: 0x1E1AB60 Offset: 0x1E1AB60 VA: 0x1E1AB60 Slot: 24
	public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x1E1AC5C Offset: 0x1E1AC5C VA: 0x1E1AC5C
	private void InitCipher() { }

	// RVA: 0x1E1AE10 Offset: 0x1E1AE10 VA: 0x1E1AE10 Slot: 25
	public virtual int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x1E1AF8C Offset: 0x1E1AF8C VA: 0x1E1AF8C Slot: 26
	public virtual int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff) { }

	// RVA: 0x1E1AEC4 Offset: 0x1E1AEC4 VA: 0x1E1AEC4
	private void OutputBlock(byte[] output, int offset) { }

	// RVA: 0x1E1B218 Offset: 0x1E1B218 VA: 0x1E1B218 Slot: 12
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E1B9E0 Offset: 0x1E1B9E0 VA: 0x1E1B9E0 Slot: 27
	public virtual void Reset() { }

	// RVA: 0x1E1B860 Offset: 0x1E1B860 VA: 0x1E1B860
	private void Reset(bool clearMac) { }

	// RVA: 0x1E1B12C Offset: 0x1E1B12C VA: 0x1E1B12C
	private void gCTRBlock(byte[] block, byte[] output, int outOff) { }

	// RVA: 0x1E1B754 Offset: 0x1E1B754 VA: 0x1E1B754
	private void gCTRPartial(byte[] buf, int off, int len, byte[] output, int outOff) { }

	// RVA: 0x1E1A8E8 Offset: 0x1E1A8E8 VA: 0x1E1A8E8
	private void gHASH(byte[] Y, byte[] b, int len) { }

	// RVA: 0x1E1A968 Offset: 0x1E1A968 VA: 0x1E1A968
	private void gHASHBlock(byte[] Y, byte[] b) { }

	// RVA: 0x1E1AD00 Offset: 0x1E1AD00 VA: 0x1E1AD00
	private void gHASHPartial(byte[] Y, byte[] b, int off, int len) { }

	// RVA: 0x1E1B9E8 Offset: 0x1E1B9E8 VA: 0x1E1B9E8
	private byte[] GetNextCounterBlock() { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class GOfbBlockCipher : IBlockCipher // TypeDefIndex: 4791
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] ofbV; // 0x18
	private byte[] ofbOutV; // 0x20
	private readonly int blockSize; // 0x28
	private readonly IBlockCipher cipher; // 0x30
	private bool firstStep; // 0x38
	private int N3; // 0x3C
	private int N4; // 0x40
	private const int C1 = 16843012;
	private const int C2 = 16843009;

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E15FE8 Offset: 0x1E15FE8 VA: 0x1E15FE8
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E162A8 Offset: 0x1E162A8 VA: 0x1E162A8
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E162B0 Offset: 0x1E162B0 VA: 0x1E162B0 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E165E0 Offset: 0x1E165E0 VA: 0x1E165E0 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E166D4 Offset: 0x1E166D4 VA: 0x1E166D4 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E166DC Offset: 0x1E166DC VA: 0x1E166DC Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E166E4 Offset: 0x1E166E4 VA: 0x1E166E4 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E164F4 Offset: 0x1E164F4 VA: 0x1E164F4 Slot: 9
	public void Reset() { }

	// RVA: 0x1E16B08 Offset: 0x1E16B08 VA: 0x1E16B08
	private int bytesToint(byte[] inBytes, int inOff) { }

	// RVA: 0x1E16C00 Offset: 0x1E16C00 VA: 0x1E16C00
	private void intTobytes(int num, byte[] outBytes, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public interface IAeadBlockCipher // TypeDefIndex: 4792
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IBlockCipher GetUnderlyingCipher();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int GetBlockSize();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void ProcessAadByte(byte input);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void ProcessAadBytes(byte[] inBytes, int inOff, int len);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int ProcessByte(byte input, byte[] outBytes, int outOff);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int DoFinal(byte[] outBytes, int outOff);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract byte[] GetMac();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetUpdateOutputSize(int len);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetOutputSize(int len);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class OcbBlockCipher : IAeadBlockCipher // TypeDefIndex: 4793
{
	// Fields
	private const int BLOCK_SIZE = 16;
	private readonly IBlockCipher hashCipher; // 0x10
	private readonly IBlockCipher mainCipher; // 0x18
	private bool forEncryption; // 0x20
	private int macSize; // 0x24
	private byte[] initialAssociatedText; // 0x28
	private IList L; // 0x30
	private byte[] L_Asterisk; // 0x38
	private byte[] L_Dollar; // 0x40
	private byte[] KtopInput; // 0x48
	private byte[] Stretch; // 0x50
	private byte[] OffsetMAIN_0; // 0x58
	private byte[] hashBlock; // 0x60
	private byte[] mainBlock; // 0x68
	private int hashBlockPos; // 0x70
	private int mainBlockPos; // 0x74
	private long hashBlockCount; // 0x78
	private long mainBlockCount; // 0x80
	private byte[] OffsetHASH; // 0x88
	private byte[] Sum; // 0x90
	private byte[] OffsetMAIN; // 0x98
	private byte[] Checksum; // 0xA0
	private byte[] macBlock; // 0xA8

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E1BCCC Offset: 0x1E1BCCC VA: 0x1E1BCCC
	public void .ctor(IBlockCipher hashCipher, IBlockCipher mainCipher) { }

	// RVA: 0x1E1C0E8 Offset: 0x1E1C0E8 VA: 0x1E1C0E8 Slot: 17
	public virtual IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E1C0F0 Offset: 0x1E1C0F0 VA: 0x1E1C0F0 Slot: 18
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E1C1E4 Offset: 0x1E1C1E4 VA: 0x1E1C1E4 Slot: 19
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E1CA38 Offset: 0x1E1CA38 VA: 0x1E1CA38 Slot: 20
	protected virtual int ProcessNonce(byte[] N) { }

	// RVA: 0x1E1CD20 Offset: 0x1E1CD20 VA: 0x1E1CD20 Slot: 21
	public virtual int GetBlockSize() { }

	// RVA: 0x1E1CD28 Offset: 0x1E1CD28 VA: 0x1E1CD28 Slot: 22
	public virtual byte[] GetMac() { }

	// RVA: 0x1E1CD34 Offset: 0x1E1CD34 VA: 0x1E1CD34 Slot: 23
	public virtual int GetOutputSize(int len) { }

	// RVA: 0x1E1CD5C Offset: 0x1E1CD5C VA: 0x1E1CD5C Slot: 24
	public virtual int GetUpdateOutputSize(int len) { }

	// RVA: 0x1E1CD94 Offset: 0x1E1CD94 VA: 0x1E1CD94 Slot: 25
	public virtual void ProcessAadByte(byte input) { }

	// RVA: 0x1E1CE3C Offset: 0x1E1CE3C VA: 0x1E1CE3C Slot: 26
	public virtual void ProcessAadBytes(byte[] input, int off, int len) { }

	// RVA: 0x1E1CF38 Offset: 0x1E1CF38 VA: 0x1E1CF38 Slot: 27
	public virtual int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x1E1CFF8 Offset: 0x1E1CFF8 VA: 0x1E1CFF8 Slot: 28
	public virtual int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff) { }

	// RVA: 0x1E1D118 Offset: 0x1E1D118 VA: 0x1E1D118 Slot: 29
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E1D678 Offset: 0x1E1D678 VA: 0x1E1D678 Slot: 30
	public virtual void Reset() { }

	// RVA: 0x1E1D68C Offset: 0x1E1D68C VA: 0x1E1D68C Slot: 31
	protected virtual void Clear(byte[] bs) { }

	// RVA: 0x1E1D6A8 Offset: 0x1E1D6A8 VA: 0x1E1D6A8 Slot: 32
	protected virtual byte[] GetLSub(int n) { }

	// RVA: 0x1E1DA58 Offset: 0x1E1DA58 VA: 0x1E1DA58 Slot: 33
	protected virtual void ProcessHashBlock() { }

	// RVA: 0x1E1DAF8 Offset: 0x1E1DAF8 VA: 0x1E1DAF8 Slot: 34
	protected virtual void ProcessMainBlock(byte[] output, int outOff) { }

	// RVA: 0x1E1DCD4 Offset: 0x1E1DCD4 VA: 0x1E1DCD4 Slot: 35
	protected virtual void Reset(bool clearMac) { }

	// RVA: 0x1E1DEE4 Offset: 0x1E1DEE4 VA: 0x1E1DEE4 Slot: 36
	protected virtual void UpdateHASH(byte[] LSub) { }

	// RVA: 0x1E1C984 Offset: 0x1E1C984 VA: 0x1E1C984
	protected static byte[] OCB_double(byte[] block) { }

	// RVA: 0x1E1D538 Offset: 0x1E1D538 VA: 0x1E1D538
	protected static void OCB_extend(byte[] block, int pos) { }

	// RVA: 0x1E1DAD0 Offset: 0x1E1DAD0 VA: 0x1E1DAD0
	protected static int OCB_ntz(long x) { }

	// RVA: 0x1E1DFE0 Offset: 0x1E1DFE0 VA: 0x1E1DFE0
	protected static int ShiftLeft(byte[] block, byte[] output) { }

	// RVA: 0x1E1D5D4 Offset: 0x1E1D5D4 VA: 0x1E1D5D4
	protected static void Xor(byte[] block, byte[] val) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class OfbBlockCipher : IBlockCipher // TypeDefIndex: 4794
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] ofbV; // 0x18
	private byte[] ofbOutV; // 0x20
	private readonly int blockSize; // 0x28
	private readonly IBlockCipher cipher; // 0x30

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E1E08C Offset: 0x1E1E08C VA: 0x1E1E08C
	public void .ctor(IBlockCipher cipher, int blockSize) { }

	// RVA: 0x1E1E29C Offset: 0x1E1E29C VA: 0x1E1E29C
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E1E2A4 Offset: 0x1E1E2A4 VA: 0x1E1E2A4 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E1E5C8 Offset: 0x1E1E5C8 VA: 0x1E1E5C8 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E1E6F0 Offset: 0x1E1E6F0 VA: 0x1E1E6F0 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E1E6F8 Offset: 0x1E1E6F8 VA: 0x1E1E6F8 Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E1E700 Offset: 0x1E1E700 VA: 0x1E1E700 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E1E4DC Offset: 0x1E1E4DC VA: 0x1E1E4DC Slot: 9
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class OpenPgpCfbBlockCipher : IBlockCipher // TypeDefIndex: 4795
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] FR; // 0x18
	private byte[] FRE; // 0x20
	private readonly IBlockCipher cipher; // 0x28
	private readonly int blockSize; // 0x30
	private int count; // 0x34
	private bool forEncryption; // 0x38

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E1E9D8 Offset: 0x1E1E9D8 VA: 0x1E1E9D8
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E1EAEC Offset: 0x1E1EAEC VA: 0x1E1EAEC
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E1EAF4 Offset: 0x1E1EAF4 VA: 0x1E1EAF4 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E1EBE8 Offset: 0x1E1EBE8 VA: 0x1E1EBE8 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E1EBF0 Offset: 0x1E1EBF0 VA: 0x1E1EBF0 Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E1ECA8 Offset: 0x1E1ECA8 VA: 0x1E1ECA8 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E1FE3C Offset: 0x1E1FE3C VA: 0x1E1FE3C Slot: 9
	public void Reset() { }

	// RVA: 0x1E1FF2C Offset: 0x1E1FF2C VA: 0x1E1FF2C Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E20154 Offset: 0x1E20154 VA: 0x1E20154
	private byte EncryptByte(byte data, int blockOff) { }

	// RVA: 0x1E1ECB8 Offset: 0x1E1ECB8 VA: 0x1E1ECB8
	private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x1E1F534 Offset: 0x1E1F534 VA: 0x1E1F534
	private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class SicBlockCipher : IBlockCipher // TypeDefIndex: 4796
{
	// Fields
	private readonly IBlockCipher cipher; // 0x10
	private readonly int blockSize; // 0x18
	private readonly byte[] counter; // 0x20
	private readonly byte[] counterOut; // 0x28
	private byte[] IV; // 0x30

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E11FD4 Offset: 0x1E11FD4 VA: 0x1E11FD4
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E201B8 Offset: 0x1E201B8 VA: 0x1E201B8 Slot: 10
	public virtual IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E201C0 Offset: 0x1E201C0 VA: 0x1E201C0 Slot: 11
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E204BC Offset: 0x1E204BC VA: 0x1E204BC Slot: 12
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E205B0 Offset: 0x1E205B0 VA: 0x1E205B0 Slot: 13
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E205B8 Offset: 0x1E205B8 VA: 0x1E205B8 Slot: 14
	public virtual int GetBlockSize() { }

	// RVA: 0x1E20670 Offset: 0x1E20670 VA: 0x1E20670 Slot: 15
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E208C0 Offset: 0x1E208C0 VA: 0x1E208C0 Slot: 16
	public virtual void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class X509Utilities // TypeDefIndex: 4797
{
	// Fields
	private static readonly Asn1Null derNull; // 0x0
	private static readonly IDictionary algorithms; // 0x8
	private static readonly IDictionary exParams; // 0x10
	private static readonly ISet noParams; // 0x18

	// Methods

	// RVA: 0x1E224F0 Offset: 0x1E224F0 VA: 0x1E224F0
	private static void .cctor() { }

	// RVA: 0x1E24BEC Offset: 0x1E24BEC VA: 0x1E24BEC
	public void .ctor() { }

	// RVA: 0x1E24BF4 Offset: 0x1E24BF4 VA: 0x1E24BF4
	private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID) { }

	// RVA: 0x1E21638 Offset: 0x1E21638 VA: 0x1E21638
	internal static string GetSignatureName(AlgorithmIdentifier sigAlgId) { }

	// RVA: 0x1E24AE0 Offset: 0x1E24AE0 VA: 0x1E24AE0
	private static RsassaPssParameters CreatePssParams(AlgorithmIdentifier hashAlgId, int saltSize) { }

	// RVA: 0x1E20A6C Offset: 0x1E20A6C VA: 0x1E20A6C
	internal static DerObjectIdentifier GetAlgorithmOid(string algorithmName) { }

	// RVA: 0x1E20CE0 Offset: 0x1E20CE0 VA: 0x1E20CE0
	internal static AlgorithmIdentifier GetSigAlgID(DerObjectIdentifier sigOid, string algorithmName) { }

	// RVA: 0x1E21314 Offset: 0x1E21314 VA: 0x1E21314
	internal static IEnumerable GetAlgNames() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class SignerBucket : Stream // TypeDefIndex: 4798
{
	// Fields
	protected readonly ISigner signer; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1E21BEC Offset: 0x1E21BEC VA: 0x1E21BEC
	public void .ctor(ISigner signer) { }

	// RVA: 0x1E21E20 Offset: 0x1E21E20 VA: 0x1E21E20 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E21E88 Offset: 0x1E21E88 VA: 0x1E21E88 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x1E21EF0 Offset: 0x1E21EF0 VA: 0x1E21EF0 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E21FEC Offset: 0x1E21FEC VA: 0x1E21FEC Slot: 24
	public override void WriteByte(byte b) { }

	// RVA: 0x1E220B4 Offset: 0x1E220B4 VA: 0x1E220B4 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1E220BC Offset: 0x1E220BC VA: 0x1E220BC Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1E220C4 Offset: 0x1E220C4 VA: 0x1E220C4 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1E220CC Offset: 0x1E220CC VA: 0x1E220CC Slot: 9
	public override long get_Length() { }

	// RVA: 0x1E220D4 Offset: 0x1E220D4 VA: 0x1E220D4 Slot: 10
	public override long get_Position() { }

	// RVA: 0x1E2213C Offset: 0x1E2213C VA: 0x1E2213C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1E221A4 Offset: 0x1E221A4 VA: 0x1E221A4 Slot: 18
	public override void Flush() { }

	// RVA: 0x1E221A8 Offset: 0x1E221A8 VA: 0x1E221A8 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1E22210 Offset: 0x1E22210 VA: 0x1E22210 Slot: 22
	public override void SetLength(long length) { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
public class Asn1SignatureFactory : ISignatureFactory // TypeDefIndex: 4799
{
	// Fields
	private readonly AlgorithmIdentifier algID; // 0x10
	private readonly string algorithm; // 0x18
	private readonly AsymmetricKeyParameter privateKey; // 0x20
	private readonly SecureRandom random; // 0x28

	// Properties
	public object AlgorithmDetails { get; }
	public static IEnumerable SignatureAlgNames { get; }

	// Methods

	// RVA: 0x1E209C0 Offset: 0x1E209C0 VA: 0x1E209C0
	public void .ctor(string algorithm, AsymmetricKeyParameter privateKey) { }

	// RVA: 0x1E209C8 Offset: 0x1E209C8 VA: 0x1E209C8
	public void .ctor(string algorithm, AsymmetricKeyParameter privateKey, SecureRandom random) { }

	// RVA: 0x1E2106C Offset: 0x1E2106C VA: 0x1E2106C Slot: 4
	public object get_AlgorithmDetails() { }

	// RVA: 0x1E21074 Offset: 0x1E21074 VA: 0x1E21074 Slot: 5
	public IStreamCalculator CreateCalculator() { }

	// RVA: 0x1E212B8 Offset: 0x1E212B8 VA: 0x1E212B8
	public static IEnumerable get_SignatureAlgNames() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class SigCalculator : IStreamCalculator // TypeDefIndex: 4800
{
	// Fields
	private readonly ISigner sig; // 0x10
	private readonly Stream stream; // 0x18

	// Properties
	public Stream Stream { get; }

	// Methods

	// RVA: 0x1E2123C Offset: 0x1E2123C VA: 0x1E2123C
	internal void .ctor(ISigner sig) { }

	// RVA: 0x1E21C68 Offset: 0x1E21C68 VA: 0x1E21C68 Slot: 4
	public Stream get_Stream() { }

	// RVA: 0x1E21C70 Offset: 0x1E21C70 VA: 0x1E21C70 Slot: 5
	public object GetResult() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class SigResult : IBlockResult // TypeDefIndex: 4801
{
	// Fields
	private readonly ISigner sig; // 0x10

	// Methods

	// RVA: 0x1E21CD8 Offset: 0x1E21CD8 VA: 0x1E21CD8
	internal void .ctor(ISigner sig) { }

	// RVA: 0x1E21D04 Offset: 0x1E21D04 VA: 0x1E21D04 Slot: 4
	public byte[] Collect() { }

	// RVA: 0x1E21DBC Offset: 0x1E21DBC VA: 0x1E21DBC Slot: 5
	public int Collect(byte[] destination, int offset) { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
public class Asn1VerifierFactory : IVerifierFactory // TypeDefIndex: 4802
{
	// Fields
	private readonly AlgorithmIdentifier algID; // 0x10
	private readonly AsymmetricKeyParameter publicKey; // 0x18

	// Properties
	public object AlgorithmDetails { get; }

	// Methods

	// RVA: 0x1E21420 Offset: 0x1E21420 VA: 0x1E21420
	public void .ctor(string algorithm, AsymmetricKeyParameter publicKey) { }

	// RVA: 0x1E214B4 Offset: 0x1E214B4 VA: 0x1E214B4
	public void .ctor(AlgorithmIdentifier algorithm, AsymmetricKeyParameter publicKey) { }

	// RVA: 0x1E214EC Offset: 0x1E214EC VA: 0x1E214EC Slot: 4
	public object get_AlgorithmDetails() { }

	// RVA: 0x1E214F4 Offset: 0x1E214F4 VA: 0x1E214F4 Slot: 5
	public IStreamCalculator CreateCalculator() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class VerifierCalculator : IStreamCalculator // TypeDefIndex: 4803
{
	// Fields
	private readonly ISigner sig; // 0x10
	private readonly Stream stream; // 0x18

	// Properties
	public Stream Stream { get; }

	// Methods

	// RVA: 0x1E219F0 Offset: 0x1E219F0 VA: 0x1E219F0
	internal void .ctor(ISigner sig) { }

	// RVA: 0x1E22278 Offset: 0x1E22278 VA: 0x1E22278 Slot: 4
	public Stream get_Stream() { }

	// RVA: 0x1E22280 Offset: 0x1E22280 VA: 0x1E22280 Slot: 5
	public object GetResult() { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
internal class VerifierResult : IVerifier // TypeDefIndex: 4804
{
	// Fields
	private readonly ISigner sig; // 0x10

	// Methods

	// RVA: 0x1E222E8 Offset: 0x1E222E8 VA: 0x1E222E8
	internal void .ctor(ISigner sig) { }

	// RVA: 0x1E22314 Offset: 0x1E22314 VA: 0x1E22314 Slot: 4
	public bool IsVerified(byte[] signature) { }

	// RVA: 0x1E223DC Offset: 0x1E223DC VA: 0x1E223DC Slot: 5
	public bool IsVerified(byte[] signature, int off, int length) { }
}

// Namespace: Org.BouncyCastle.Crypto.Operators
public class Asn1VerifierFactoryProvider : IVerifierFactoryProvider // TypeDefIndex: 4805
{
	// Fields
	private readonly AsymmetricKeyParameter publicKey; // 0x10

	// Properties
	public IEnumerable SignatureAlgNames { get; }

	// Methods

	// RVA: 0x1E21A6C Offset: 0x1E21A6C VA: 0x1E21A6C
	public void .ctor(AsymmetricKeyParameter publicKey) { }

	// RVA: 0x1E21A98 Offset: 0x1E21A98 VA: 0x1E21A98 Slot: 4
	public IVerifierFactory CreateVerifierFactory(object algorithmDetails) { }

	// RVA: 0x1E21B90 Offset: 0x1E21B90 VA: 0x1E21B90
	public IEnumerable get_SignatureAlgNames() { }
}

// Namespace: Org.BouncyCastle.Crypto
[Serializable]
public class OutputLengthException : DataLengthException // TypeDefIndex: 4806
{
	// Methods

	// RVA: 0x1E24FD0 Offset: 0x1E24FD0 VA: 0x1E24FD0
	public void .ctor() { }

	// RVA: 0x1E24FD8 Offset: 0x1E24FD8 VA: 0x1E24FD8
	public void .ctor(string message) { }

	// RVA: 0x1E24FE0 Offset: 0x1E24FE0 VA: 0x1E24FE0
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public interface IBlockCipherPadding // TypeDefIndex: 4807
{
	// Properties
	public abstract string PaddingName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(SecureRandom random);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_PaddingName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int AddPadding(byte[] input, int inOff);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int PadCount(byte[] input);
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class ISO10126d2Padding : IBlockCipherPadding // TypeDefIndex: 4808
{
	// Fields
	private SecureRandom random; // 0x10

	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1E24FE8 Offset: 0x1E24FE8 VA: 0x1E24FE8
	public void .ctor() { }

	// RVA: 0x1E24FF0 Offset: 0x1E24FF0 VA: 0x1E24FF0 Slot: 4
	public void Init(SecureRandom random) { }

	// RVA: 0x1E25078 Offset: 0x1E25078 VA: 0x1E25078 Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1E250C0 Offset: 0x1E250C0 VA: 0x1E250C0 Slot: 6
	public int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1E251AC Offset: 0x1E251AC VA: 0x1E251AC Slot: 7
	public int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class ISO7816d4Padding : IBlockCipherPadding // TypeDefIndex: 4809
{
	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1E07FE8 Offset: 0x1E07FE8 VA: 0x1E07FE8
	public void .ctor() { }

	// RVA: 0x1E2527C Offset: 0x1E2527C VA: 0x1E2527C Slot: 4
	public void Init(SecureRandom random) { }

	// RVA: 0x1E25280 Offset: 0x1E25280 VA: 0x1E25280 Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1E07FF0 Offset: 0x1E07FF0 VA: 0x1E07FF0 Slot: 6
	public int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1E252C8 Offset: 0x1E252C8 VA: 0x1E252C8 Slot: 7
	public int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class PaddedBufferedBlockCipher : BufferedBlockCipher // TypeDefIndex: 4810
{
	// Fields
	private readonly IBlockCipherPadding padding; // 0x28

	// Methods

	// RVA: 0x1E253CC Offset: 0x1E253CC VA: 0x1E253CC
	public void .ctor(IBlockCipher cipher, IBlockCipherPadding padding) { }

	// RVA: 0x1E254C4 Offset: 0x1E254C4 VA: 0x1E254C4
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E25540 Offset: 0x1E25540 VA: 0x1E25540 Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E25714 Offset: 0x1E25714 VA: 0x1E25714 Slot: 25
	public override int GetOutputSize(int length) { }

	// RVA: 0x1E2579C Offset: 0x1E2579C VA: 0x1E2579C Slot: 26
	public override int GetUpdateOutputSize(int length) { }

	// RVA: 0x1E25800 Offset: 0x1E25800 VA: 0x1E25800 Slot: 28
	public override int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x1E25968 Offset: 0x1E25968 VA: 0x1E25968 Slot: 32
	public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x1E25C4C Offset: 0x1E25C4C VA: 0x1E25C4C Slot: 36
	public override int DoFinal(byte[] output, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class Pkcs7Padding : IBlockCipherPadding // TypeDefIndex: 4811
{
	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1E25538 Offset: 0x1E25538 VA: 0x1E25538
	public void .ctor() { }

	// RVA: 0x1E26158 Offset: 0x1E26158 VA: 0x1E26158 Slot: 4
	public void Init(SecureRandom random) { }

	// RVA: 0x1E2615C Offset: 0x1E2615C VA: 0x1E2615C Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1E261A4 Offset: 0x1E261A4 VA: 0x1E261A4 Slot: 6
	public int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1E26220 Offset: 0x1E26220 VA: 0x1E26220 Slot: 7
	public int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class TbcPadding : IBlockCipherPadding // TypeDefIndex: 4812
{
	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1E2635C Offset: 0x1E2635C VA: 0x1E2635C
	public void .ctor() { }

	// RVA: 0x1E26364 Offset: 0x1E26364 VA: 0x1E26364 Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1E263AC Offset: 0x1E263AC VA: 0x1E263AC Slot: 8
	public virtual void Init(SecureRandom random) { }

	// RVA: 0x1E263B0 Offset: 0x1E263B0 VA: 0x1E263B0 Slot: 9
	public virtual int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1E264C0 Offset: 0x1E264C0 VA: 0x1E264C0 Slot: 10
	public virtual int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class X923Padding : IBlockCipherPadding // TypeDefIndex: 4813
{
	// Fields
	private SecureRandom random; // 0x10

	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1E26578 Offset: 0x1E26578 VA: 0x1E26578
	public void .ctor() { }

	// RVA: 0x1E26580 Offset: 0x1E26580 VA: 0x1E26580 Slot: 4
	public void Init(SecureRandom random) { }

	// RVA: 0x1E26588 Offset: 0x1E26588 VA: 0x1E26588 Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1E265D0 Offset: 0x1E265D0 VA: 0x1E265D0 Slot: 6
	public int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1E266D4 Offset: 0x1E266D4 VA: 0x1E266D4 Slot: 7
	public int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Paddings
public class ZeroBytePadding : IBlockCipherPadding // TypeDefIndex: 4814
{
	// Properties
	public string PaddingName { get; }

	// Methods

	// RVA: 0x1DC7A88 Offset: 0x1DC7A88 VA: 0x1DC7A88
	public void .ctor() { }

	// RVA: 0x1DC7A90 Offset: 0x1DC7A90 VA: 0x1DC7A90 Slot: 5
	public string get_PaddingName() { }

	// RVA: 0x1DC7AD8 Offset: 0x1DC7AD8 VA: 0x1DC7AD8 Slot: 4
	public void Init(SecureRandom random) { }

	// RVA: 0x1DC7ADC Offset: 0x1DC7ADC VA: 0x1DC7ADC Slot: 6
	public int AddPadding(byte[] input, int inOff) { }

	// RVA: 0x1DC7B54 Offset: 0x1DC7B54 VA: 0x1DC7B54 Slot: 7
	public int PadCount(byte[] input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class AeadParameters : ICipherParameters // TypeDefIndex: 4815
{
	// Fields
	private readonly byte[] associatedText; // 0x10
	private readonly byte[] nonce; // 0x18
	private readonly KeyParameter key; // 0x20
	private readonly int macSize; // 0x28

	// Properties
	public virtual KeyParameter Key { get; }
	public virtual int MacSize { get; }

	// Methods

	// RVA: 0x1DC7BD0 Offset: 0x1DC7BD0 VA: 0x1DC7BD0
	public void .ctor(KeyParameter key, int macSize, byte[] nonce) { }

	// RVA: 0x1DC7C14 Offset: 0x1DC7C14 VA: 0x1DC7C14
	public void .ctor(KeyParameter key, int macSize, byte[] nonce, byte[] associatedText) { }

	// RVA: 0x1DC7C64 Offset: 0x1DC7C64 VA: 0x1DC7C64 Slot: 4
	public virtual KeyParameter get_Key() { }

	// RVA: 0x1DC7C6C Offset: 0x1DC7C6C VA: 0x1DC7C6C Slot: 5
	public virtual int get_MacSize() { }

	// RVA: 0x1DC7C74 Offset: 0x1DC7C74 VA: 0x1DC7C74 Slot: 6
	public virtual byte[] GetAssociatedText() { }

	// RVA: 0x1DC7C7C Offset: 0x1DC7C7C VA: 0x1DC7C7C Slot: 7
	public virtual byte[] GetNonce() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DesEdeParameters : DesParameters // TypeDefIndex: 4816
{
	// Fields
	public const int DesEdeKeyLength = 24;

	// Methods

	// RVA: 0x1DC8E7C Offset: 0x1DC8E7C VA: 0x1DC8E7C
	public void .ctor(byte[] key) { }

	// RVA: 0x1DC919C Offset: 0x1DC919C VA: 0x1DC919C
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1DC8F14 Offset: 0x1DC8F14 VA: 0x1DC8F14
	private static byte[] FixKey(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1DC9268 Offset: 0x1DC9268 VA: 0x1DC9268
	public static bool IsWeakKey(byte[] key, int offset, int length) { }

	// RVA: 0x1DC9498 Offset: 0x1DC9498 VA: 0x1DC9498
	public static bool IsWeakKey(byte[] key, int offset) { }

	// RVA: 0x1DC9238 Offset: 0x1DC9238 VA: 0x1DC9238
	public static bool IsWeakKey(byte[] key) { }

	// RVA: 0x1DC94D0 Offset: 0x1DC94D0 VA: 0x1DC94D0
	public static bool IsRealEdeKey(byte[] key, int offset) { }

	// RVA: 0x1DC9518 Offset: 0x1DC9518 VA: 0x1DC9518
	public static bool IsReal2Key(byte[] key, int offset) { }

	// RVA: 0x1DC95D0 Offset: 0x1DC95D0 VA: 0x1DC95D0
	public static bool IsReal3Key(byte[] key, int offset) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DesParameters : KeyParameter // TypeDefIndex: 4817
{
	// Fields
	public const int DesKeyLength = 8;
	private const int N_DES_WEAK_KEYS = 16;
	private static readonly byte[] DES_weak_keys; // 0x0

	// Methods

	// RVA: 0x1DC90D4 Offset: 0x1DC90D4 VA: 0x1DC90D4
	public void .ctor(byte[] key) { }

	// RVA: 0x1DC98E8 Offset: 0x1DC98E8 VA: 0x1DC98E8
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1DC9308 Offset: 0x1DC9308 VA: 0x1DC9308
	public static bool IsWeakKey(byte[] key, int offset) { }

	// RVA: 0x1DC9880 Offset: 0x1DC9880 VA: 0x1DC9880
	public static bool IsWeakKey(byte[] key) { }

	// RVA: 0x1DC9B18 Offset: 0x1DC9B18 VA: 0x1DC9B18
	public static byte SetOddParity(byte b) { }

	// RVA: 0x1DC9B38 Offset: 0x1DC9B38 VA: 0x1DC9B38
	public static void SetOddParity(byte[] bytes) { }

	// RVA: 0x1DC9C28 Offset: 0x1DC9C28 VA: 0x1DC9C28
