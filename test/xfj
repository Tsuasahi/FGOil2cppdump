	public const MonoIOError ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
	public const MonoIOError ERROR_SXS_XML_E_BADXMLCASE = 14069;
	public const MonoIOError ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
	public const MonoIOError ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
	public const MonoIOError ERROR_SXS_XML_E_INVALID_VERSION = 14072;
	public const MonoIOError ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
	public const MonoIOError ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
	public const MonoIOError ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
	public const MonoIOError ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
	public const MonoIOError ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
	public const MonoIOError ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
	public const MonoIOError ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
	public const MonoIOError ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
}

// Namespace: System.IO
internal class MonoSyncFileStream : FileStream // TypeDefIndex: 1332
{
	// Methods

	// RVA: 0x1F27768 Offset: 0x1F27768 VA: 0x1F27768
	public void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize) { }

	// RVA: 0x1F27778 Offset: 0x1F27778 VA: 0x1F27778 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x1F279D4 Offset: 0x1F279D4 VA: 0x1F279D4 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x1F27B08 Offset: 0x1F27B08 VA: 0x1F27B08 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x1F27D64 Offset: 0x1F27D64 VA: 0x1F27D64 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }
}

// Namespace: 
private sealed class MonoSyncFileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 1333
{
	// Methods

	// RVA: 0x1F27910 Offset: 0x1F27910 VA: 0x1F27910
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F282B8 Offset: 0x1F282B8 VA: 0x1F282B8 Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F27920 Offset: 0x1F27920 VA: 0x1F27920 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x1F27AFC Offset: 0x1F27AFC VA: 0x1F27AFC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoSyncFileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 1334
{
	// Methods

	// RVA: 0x1F27CA0 Offset: 0x1F27CA0 VA: 0x1F27CA0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F27EC4 Offset: 0x1F27EC4 VA: 0x1F27EC4 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F27CB0 Offset: 0x1F27CB0 VA: 0x1F27CB0 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x1F27E88 Offset: 0x1F27E88 VA: 0x1F27E88 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net.Cache
public class RequestCachePolicy // TypeDefIndex: 1335
{
	// Methods

	[MonoTODOAttribute] // RVA: 0xBD1688 Offset: 0xBD1688 VA: 0xBD1688
	// RVA: 0x1F2B2DC Offset: 0x1F2B2DC VA: 0x1F2B2DC Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net.NetworkInformation
public enum DuplicateAddressDetectionState // TypeDefIndex: 1336
{
	// Fields
	public int value__; // 0x0
	public const DuplicateAddressDetectionState Invalid = 0;
	public const DuplicateAddressDetectionState Tentative = 1;
	public const DuplicateAddressDetectionState Duplicate = 2;
	public const DuplicateAddressDetectionState Deprecated = 3;
	public const DuplicateAddressDetectionState Preferred = 4;
}

// Namespace: System.Net.NetworkInformation
public abstract class GatewayIPAddressInformation // TypeDefIndex: 1337
{
	// Properties
	public abstract IPAddress Address { get; }

	// Methods

	// RVA: 0x1FF3274 Offset: 0x1FF3274 VA: 0x1FF3274
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPAddress get_Address();
}

// Namespace: System.Net.NetworkInformation
internal class GatewayIPAddressInformationImpl : GatewayIPAddressInformation // TypeDefIndex: 1338
{
	// Fields
	private IPAddress address; // 0x10

	// Properties
	public override IPAddress Address { get; }

	// Methods

	// RVA: 0x1FF3848 Offset: 0x1FF3848 VA: 0x1FF3848
	public void .ctor(IPAddress address) { }

	// RVA: 0x1FF3874 Offset: 0x1FF3874 VA: 0x1FF3874 Slot: 4
	public override IPAddress get_Address() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xBD05D4 Offset: 0xBD05D4 VA: 0xBD05D4
public class GatewayIPAddressInformationCollection : IEnumerable, IEnumerable<GatewayIPAddressInformation>, ICollection<GatewayIPAddressInformation> // TypeDefIndex: 1339
{
	// Fields
	private List<GatewayIPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual GatewayIPAddressInformation Item { get; }

	// Methods

	// RVA: 0x1FF327C Offset: 0x1FF327C VA: 0x1FF327C
	protected void .ctor() { }

	// RVA: 0x1FF32EC Offset: 0x1FF32EC VA: 0x1FF32EC Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1FF3380 Offset: 0x1FF3380 VA: 0x1FF3380 Slot: 13
	public virtual void Add(GatewayIPAddressInformation address) { }

	// RVA: 0x1FF344C Offset: 0x1FF344C VA: 0x1FF344C Slot: 14
	public virtual void Clear() { }

	// RVA: 0x1FF3508 Offset: 0x1FF3508 VA: 0x1FF3508 Slot: 15
	public virtual bool Contains(GatewayIPAddressInformation address) { }

	// RVA: 0x1FF3578 Offset: 0x1FF3578 VA: 0x1FF3578 Slot: 16
	public virtual void CopyTo(GatewayIPAddressInformation[] array, int offset) { }

	// RVA: 0x1FF35F0 Offset: 0x1FF35F0 VA: 0x1FF35F0 Slot: 17
	public virtual IEnumerator<GatewayIPAddressInformation> GetEnumerator() { }

	// RVA: 0x1FF36A4 Offset: 0x1FF36A4 VA: 0x1FF36A4 Slot: 18
	public virtual bool Remove(GatewayIPAddressInformation address) { }

	// RVA: 0x1FF3770 Offset: 0x1FF3770 VA: 0x1FF3770 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0x1FF37D0 Offset: 0x1FF37D0 VA: 0x1FF37D0 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1FF37D8 Offset: 0x1FF37D8 VA: 0x1FF37D8 Slot: 21
	public virtual GatewayIPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32GatewayIPAddressInformationCollection : GatewayIPAddressInformationCollection // TypeDefIndex: 1340
{
	// Fields
	public static readonly Win32GatewayIPAddressInformationCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x2005C40 Offset: 0x2005C40 VA: 0x2005C40
	private void .ctor(bool isReadOnly) { }

	// RVA: 0x2005C70 Offset: 0x2005C70 VA: 0x2005C70
	public void .ctor(Win32_IP_ADDR_STRING[] al) { }

	// RVA: 0x2005F50 Offset: 0x2005F50 VA: 0x2005F50
	private static void .cctor() { }

	// RVA: 0x2005DD4 Offset: 0x2005DD4 VA: 0x2005DD4
	private void AddSubsequently(IntPtr head) { }

	// RVA: 0x2005FBC Offset: 0x2005FBC VA: 0x2005FBC Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxGatewayIPAddressInformationCollection : GatewayIPAddressInformationCollection // TypeDefIndex: 1341
{
	// Fields
	public static readonly LinuxGatewayIPAddressInformationCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1FF5078 Offset: 0x1FF5078 VA: 0x1FF5078
	private void .ctor(bool isReadOnly) { }

	// RVA: 0x1FF50A4 Offset: 0x1FF50A4 VA: 0x1FF50A4
	public void .ctor(IPAddressCollection col) { }

	// RVA: 0x1FF5324 Offset: 0x1FF5324 VA: 0x1FF5324
	private static void .cctor() { }

	// RVA: 0x1FF538C Offset: 0x1FF538C VA: 0x1FF538C Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xBD060C Offset: 0xBD060C VA: 0xBD060C
public class IPAddressCollection : IEnumerable, ICollection<IPAddress>, IEnumerable<IPAddress> // TypeDefIndex: 1342
{
	// Fields
	private IList<IPAddress> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual IPAddress Item { get; }

	// Methods

	// RVA: 0x1FF387C Offset: 0x1FF387C VA: 0x1FF387C
	protected internal void .ctor() { }

	// RVA: 0x1FF38EC Offset: 0x1FF38EC VA: 0x1FF38EC Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1FF39A0 Offset: 0x1FF39A0 VA: 0x1FF39A0
	internal void SetReadOnly() { }

	// RVA: 0x1FF3B1C Offset: 0x1FF3B1C VA: 0x1FF3B1C Slot: 13
	public virtual void Add(IPAddress address) { }

	// RVA: 0x1FF3C40 Offset: 0x1FF3C40 VA: 0x1FF3C40 Slot: 14
	public virtual void Clear() { }

	// RVA: 0x1FF3D54 Offset: 0x1FF3D54 VA: 0x1FF3D54 Slot: 15
	public virtual bool Contains(IPAddress address) { }

	// RVA: 0x1FF3E1C Offset: 0x1FF3E1C VA: 0x1FF3E1C Slot: 16
	public virtual void CopyTo(IPAddress[] array, int offset) { }

	// RVA: 0x1FF3EEC Offset: 0x1FF3EEC VA: 0x1FF3EEC Slot: 17
	public virtual IEnumerator<IPAddress> GetEnumerator() { }

	// RVA: 0x1FF3FA0 Offset: 0x1FF3FA0 VA: 0x1FF3FA0 Slot: 18
	public virtual bool Remove(IPAddress address) { }

	// RVA: 0x1FF40C4 Offset: 0x1FF40C4 VA: 0x1FF40C4 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0x1FF4178 Offset: 0x1FF4178 VA: 0x1FF4178 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1FF4230 Offset: 0x1FF4230 VA: 0x1FF4230 Slot: 21
	public virtual IPAddress get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPAddressCollection : IPAddressCollection // TypeDefIndex: 1343
{
	// Fields
	public static readonly Win32IPAddressCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x2005FC4 Offset: 0x2005FC4 VA: 0x2005FC4
	private void .ctor() { }

	// RVA: 0x2005FCC Offset: 0x2005FCC VA: 0x2005FCC
	public void .ctor(IntPtr[] heads) { }

	// RVA: 0x20061A0 Offset: 0x20061A0 VA: 0x20061A0
	public void .ctor(Win32_IP_ADDR_STRING[] al) { }

	// RVA: 0x20062D4 Offset: 0x20062D4 VA: 0x20062D4
	private static void .cctor() { }

	// RVA: 0x200637C Offset: 0x200637C VA: 0x200637C
	public static Win32IPAddressCollection FromAnycast(IntPtr ptr) { }

	// RVA: 0x200650C Offset: 0x200650C VA: 0x200650C
	public static Win32IPAddressCollection FromDnsServer(IntPtr ptr) { }

	// RVA: 0x2006054 Offset: 0x2006054 VA: 0x2006054
	private void AddSubsequentlyString(IntPtr head) { }

	// RVA: 0x200669C Offset: 0x200669C VA: 0x200669C Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPAddressInformation // TypeDefIndex: 1344
{
	// Properties
	public abstract IPAddress Address { get; }
	public abstract bool IsDnsEligible { get; }
	public abstract bool IsTransient { get; }

	// Methods

	// RVA: 0x1FF42F8 Offset: 0x1FF42F8 VA: 0x1FF42F8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPAddress get_Address();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsDnsEligible();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsTransient();
}

// Namespace: System.Net.NetworkInformation
internal class IPAddressInformationImpl : IPAddressInformation // TypeDefIndex: 1345
{
	// Fields
	private IPAddress address; // 0x10
	private bool is_dns_eligible; // 0x18
	private bool is_transient; // 0x19

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	[MonoTODOAttribute] // RVA: 0xBD32F4 Offset: 0xBD32F4 VA: 0xBD32F4
	public override bool IsTransient { get; }

	// Methods

	// RVA: 0x1FF48CC Offset: 0x1FF48CC VA: 0x1FF48CC
	public void .ctor(IPAddress address, bool isDnsEligible, bool isTransient) { }

	// RVA: 0x1FF4918 Offset: 0x1FF4918 VA: 0x1FF4918 Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0x1FF4920 Offset: 0x1FF4920 VA: 0x1FF4920 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0x1FF4928 Offset: 0x1FF4928 VA: 0x1FF4928 Slot: 6
	public override bool get_IsTransient() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xBD0644 Offset: 0xBD0644 VA: 0xBD0644
public class IPAddressInformationCollection : IEnumerable, IEnumerable<IPAddressInformation>, ICollection<IPAddressInformation> // TypeDefIndex: 1346
{
	// Fields
	private List<IPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual IPAddressInformation Item { get; }

	// Methods

	// RVA: 0x1FF4300 Offset: 0x1FF4300 VA: 0x1FF4300
	internal void .ctor() { }

	// RVA: 0x1FF4370 Offset: 0x1FF4370 VA: 0x1FF4370 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1FF4404 Offset: 0x1FF4404 VA: 0x1FF4404 Slot: 13
	public virtual void Add(IPAddressInformation address) { }

	// RVA: 0x1FF44D0 Offset: 0x1FF44D0 VA: 0x1FF44D0 Slot: 14
	public virtual void Clear() { }

	// RVA: 0x1FF458C Offset: 0x1FF458C VA: 0x1FF458C Slot: 15
	public virtual bool Contains(IPAddressInformation address) { }

	// RVA: 0x1FF45FC Offset: 0x1FF45FC VA: 0x1FF45FC Slot: 16
	public virtual void CopyTo(IPAddressInformation[] array, int offset) { }

	// RVA: 0x1FF4674 Offset: 0x1FF4674 VA: 0x1FF4674 Slot: 17
	public virtual IEnumerator<IPAddressInformation> GetEnumerator() { }

	// RVA: 0x1FF4728 Offset: 0x1FF4728 VA: 0x1FF4728 Slot: 18
	public virtual bool Remove(IPAddressInformation address) { }

	// RVA: 0x1FF47F4 Offset: 0x1FF47F4 VA: 0x1FF47F4 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0x1FF4854 Offset: 0x1FF4854 VA: 0x1FF4854 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1FF485C Offset: 0x1FF485C VA: 0x1FF485C Slot: 21
	public virtual IPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class IPAddressInformationImplCollection : IPAddressInformationCollection // TypeDefIndex: 1347
{
	// Fields
	public static readonly IPAddressInformationImplCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1FF4930 Offset: 0x1FF4930 VA: 0x1FF4930
	private void .ctor(bool isReadOnly) { }

	// RVA: 0x1FF495C Offset: 0x1FF495C VA: 0x1FF495C
	private static void .cctor() { }

	// RVA: 0x1FF49C4 Offset: 0x1FF49C4 VA: 0x1FF49C4 Slot: 20
	public override bool get_IsReadOnly() { }

	// RVA: 0x1FF49CC Offset: 0x1FF49CC VA: 0x1FF49CC
	public static IPAddressInformationCollection Win32FromAnycast(IntPtr ptr) { }

	// RVA: 0x1FF4BBC Offset: 0x1FF4BBC VA: 0x1FF4BBC
	public static IPAddressInformationImplCollection LinuxFromAnycast(IList<IPAddress> addresses) { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPGlobalProperties // TypeDefIndex: 1348
{
	// Properties
	public abstract string DhcpScopeName { get; }
	public abstract string DomainName { get; }
	public abstract string HostName { get; }
	public abstract bool IsWinsProxy { get; }
	public abstract NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0x1FF4EC0 Offset: 0x1FF4EC0 VA: 0x1FF4EC0
	protected void .ctor() { }

	// RVA: 0x1FF4EC8 Offset: 0x1FF4EC8 VA: 0x1FF4EC8
	public static IPGlobalProperties GetIPGlobalProperties() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract TcpConnectionInformation[] GetActiveTcpConnections();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPEndPoint[] GetActiveTcpListeners();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IPEndPoint[] GetActiveUdpListeners();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IcmpV4Statistics GetIcmpV4Statistics();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract IcmpV6Statistics GetIcmpV6Statistics();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract IPGlobalStatistics GetIPv4GlobalStatistics();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract IPGlobalStatistics GetIPv6GlobalStatistics();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract TcpStatistics GetTcpIPv4Statistics();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract TcpStatistics GetTcpIPv6Statistics();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract UdpStatistics GetUdpIPv4Statistics();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract UdpStatistics GetUdpIPv6Statistics();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract string get_DhcpScopeName();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract string get_DomainName();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract string get_HostName();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool get_IsWinsProxy();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract NetBiosNodeType get_NodeType();
}

// Namespace: System.Net.NetworkInformation
internal class MibIPGlobalProperties : IPGlobalProperties // TypeDefIndex: 1349
{
	// Fields
	public const string ProcDir = "/proc";
	public const string CompatProcDir = "/usr/compat/linux/proc";
	public readonly string StatisticsFile; // 0x10
	public readonly string StatisticsFileIPv6; // 0x18
	public readonly string TcpFile; // 0x20
	public readonly string Tcp6File; // 0x28
	public readonly string UdpFile; // 0x30
	public readonly string Udp6File; // 0x38
	private static readonly char[] wsChars; // 0x0

	// Properties
	public override string DhcpScopeName { get; }
	public override string DomainName { get; }
	public override string HostName { get; }
	public override bool IsWinsProxy { get; }
	public override NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0x1FF91A4 Offset: 0x1FF91A4 VA: 0x1FF91A4
	public void .ctor(string procDir) { }

	// RVA: 0x1FF92C4 Offset: 0x1FF92C4 VA: 0x1FF92C4
	private static void .cctor() { }

	// RVA: 0x1FF9378 Offset: 0x1FF9378 VA: 0x1FF9378
	private static extern int gethostname(byte[] name, int len) { }

	// RVA: 0x1FF942C Offset: 0x1FF942C VA: 0x1FF942C
	private static extern int getdomainname(byte[] name, int len) { }

	// RVA: 0x1FF94E0 Offset: 0x1FF94E0 VA: 0x1FF94E0
	private StringDictionary GetProperties4(string item) { }

	// RVA: 0x1FF9B90 Offset: 0x1FF9B90 VA: 0x1FF9B90
	private StringDictionary GetProperties6(string item) { }

	// RVA: 0x1FF9AD4 Offset: 0x1FF9AD4 VA: 0x1FF9AD4
	private Exception CreateException(string file, string msg) { }

	// RVA: 0x1FFA090 Offset: 0x1FFA090 VA: 0x1FFA090
	private IPEndPoint[] GetLocalAddresses(List<string[]> list) { }

	// RVA: 0x1FFA1EC Offset: 0x1FFA1EC VA: 0x1FFA1EC
	private IPEndPoint ToEndpoint(string s) { }

	// RVA: 0x1FFA404 Offset: 0x1FFA404 VA: 0x1FFA404
	private void GetRows(string file, List<string[]> list) { }

	// RVA: 0x1FFA6A0 Offset: 0x1FFA6A0 VA: 0x1FFA6A0 Slot: 4
	public override TcpConnectionInformation[] GetActiveTcpConnections() { }

	// RVA: 0x1FFA958 Offset: 0x1FFA958 VA: 0x1FFA958 Slot: 5
	public override IPEndPoint[] GetActiveTcpListeners() { }

	// RVA: 0x1FFA9DC Offset: 0x1FFA9DC VA: 0x1FFA9DC Slot: 6
	public override IPEndPoint[] GetActiveUdpListeners() { }

	// RVA: 0x1FFAA60 Offset: 0x1FFAA60 VA: 0x1FFAA60 Slot: 7
	public override IcmpV4Statistics GetIcmpV4Statistics() { }

	// RVA: 0x1FFAB0C Offset: 0x1FFAB0C VA: 0x1FFAB0C Slot: 8
	public override IcmpV6Statistics GetIcmpV6Statistics() { }

	// RVA: 0x1FFABB8 Offset: 0x1FFABB8 VA: 0x1FFABB8 Slot: 9
	public override IPGlobalStatistics GetIPv4GlobalStatistics() { }

	// RVA: 0x1FFAC64 Offset: 0x1FFAC64 VA: 0x1FFAC64 Slot: 10
	public override IPGlobalStatistics GetIPv6GlobalStatistics() { }

	// RVA: 0x1FFACE4 Offset: 0x1FFACE4 VA: 0x1FFACE4 Slot: 11
	public override TcpStatistics GetTcpIPv4Statistics() { }

	// RVA: 0x1FFAD90 Offset: 0x1FFAD90 VA: 0x1FFAD90 Slot: 12
	public override TcpStatistics GetTcpIPv6Statistics() { }

	// RVA: 0x1FFAE10 Offset: 0x1FFAE10 VA: 0x1FFAE10 Slot: 13
	public override UdpStatistics GetUdpIPv4Statistics() { }

	// RVA: 0x1FFAEBC Offset: 0x1FFAEBC VA: 0x1FFAEBC Slot: 14
	public override UdpStatistics GetUdpIPv6Statistics() { }

	// RVA: 0x1FFAF3C Offset: 0x1FFAF3C VA: 0x1FFAF3C Slot: 15
	public override string get_DhcpScopeName() { }

	// RVA: 0x1FFAFA4 Offset: 0x1FFAFA4 VA: 0x1FFAFA4 Slot: 16
	public override string get_DomainName() { }

	// RVA: 0x1FFB0E8 Offset: 0x1FFB0E8 VA: 0x1FFB0E8 Slot: 17
	public override string get_HostName() { }

	// RVA: 0x1FFB22C Offset: 0x1FFB22C VA: 0x1FFB22C Slot: 18
	public override bool get_IsWinsProxy() { }

	// RVA: 0x1FFB234 Offset: 0x1FFB234 VA: 0x1FFB234 Slot: 19
	public override NetBiosNodeType get_NodeType() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPGlobalProperties : IPGlobalProperties // TypeDefIndex: 1350
{
	// Fields
	public const int AF_INET = 2;
	public const int AF_INET6 = 23;

	// Properties
	public override string DhcpScopeName { get; }
	public override string DomainName { get; }
	public override string HostName { get; }
	public override bool IsWinsProxy { get; }
	public override NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0x20066A4 Offset: 0x20066A4 VA: 0x20066A4
	public void .ctor() { }

	// RVA: 0x20066AC Offset: 0x20066AC VA: 0x20066AC
	private void FillTcpTable(out List<Win32IPGlobalProperties.Win32_MIB_TCPROW> tab4, out List<Win32IPGlobalProperties.Win32_MIB_TCP6ROW> tab6) { }

	// RVA: 0x2006C60 Offset: 0x2006C60 VA: 0x2006C60
	private bool IsListenerState(TcpState state) { }

	// RVA: 0x2006C88 Offset: 0x2006C88 VA: 0x2006C88 Slot: 4
	public override TcpConnectionInformation[] GetActiveTcpConnections() { }

	// RVA: 0x2007024 Offset: 0x2007024 VA: 0x2007024 Slot: 5
	public override IPEndPoint[] GetActiveTcpListeners() { }

	// RVA: 0x20073C4 Offset: 0x20073C4 VA: 0x20073C4 Slot: 6
	public override IPEndPoint[] GetActiveUdpListeners() { }

	// RVA: 0x2007A98 Offset: 0x2007A98 VA: 0x2007A98 Slot: 7
	public override IcmpV4Statistics GetIcmpV4Statistics() { }

	// RVA: 0x2007CD4 Offset: 0x2007CD4 VA: 0x2007CD4 Slot: 8
	public override IcmpV6Statistics GetIcmpV6Statistics() { }

	// RVA: 0x2007EF4 Offset: 0x2007EF4 VA: 0x2007EF4 Slot: 9
	public override IPGlobalStatistics GetIPv4GlobalStatistics() { }

	// RVA: 0x20080D8 Offset: 0x20080D8 VA: 0x20080D8 Slot: 10
	public override IPGlobalStatistics GetIPv6GlobalStatistics() { }

	// RVA: 0x20081DC Offset: 0x20081DC VA: 0x20081DC Slot: 11
	public override TcpStatistics GetTcpIPv4Statistics() { }

	// RVA: 0x20083DC Offset: 0x20083DC VA: 0x20083DC Slot: 12
	public override TcpStatistics GetTcpIPv6Statistics() { }

	// RVA: 0x20084FC Offset: 0x20084FC VA: 0x20084FC Slot: 13
	public override UdpStatistics GetUdpIPv4Statistics() { }

	// RVA: 0x20086D8 Offset: 0x20086D8 VA: 0x20086D8 Slot: 14
	public override UdpStatistics GetUdpIPv6Statistics() { }

	// RVA: 0x20087D4 Offset: 0x20087D4 VA: 0x20087D4 Slot: 15
	public override string get_DhcpScopeName() { }

	// RVA: 0x2008870 Offset: 0x2008870 VA: 0x2008870 Slot: 16
	public override string get_DomainName() { }

	// RVA: 0x200889C Offset: 0x200889C VA: 0x200889C Slot: 17
	public override string get_HostName() { }

	// RVA: 0x20088C8 Offset: 0x20088C8 VA: 0x20088C8 Slot: 18
	public override bool get_IsWinsProxy() { }

	// RVA: 0x20088FC Offset: 0x20088FC VA: 0x20088FC Slot: 19
	public override NetBiosNodeType get_NodeType() { }

	// RVA: 0x2006ADC Offset: 0x2006ADC VA: 0x2006ADC
	private static extern int GetTcpTable(byte[] pTcpTable, ref int pdwSize, bool bOrder) { }

	// RVA: 0x2006BA0 Offset: 0x2006BA0 VA: 0x2006BA0
	private static extern int GetTcp6Table(byte[] TcpTable, ref int SizePointer, bool Order) { }

	// RVA: 0x2007800 Offset: 0x2007800 VA: 0x2007800
	private static extern int GetUdpTable(byte[] pUdpTable, ref int pdwSize, bool bOrder) { }

	// RVA: 0x2007938 Offset: 0x2007938 VA: 0x2007938
	private static extern int GetUdp6Table(byte[] Udp6Table, ref int SizePointer, bool Order) { }

	// RVA: 0x20082FC Offset: 0x20082FC VA: 0x20082FC
	private static extern int GetTcpStatisticsEx(out Win32_MIB_TCPSTATS pStats, int dwFamily) { }

	// RVA: 0x20085F8 Offset: 0x20085F8 VA: 0x20085F8
	private static extern int GetUdpStatisticsEx(out Win32_MIB_UDPSTATS pStats, int dwFamily) { }

	// RVA: 0x2007BCC Offset: 0x2007BCC VA: 0x2007BCC
	private static extern int GetIcmpStatistics(out Win32_MIBICMPINFO pStats, int dwFamily) { }

	// RVA: 0x2007DD0 Offset: 0x2007DD0 VA: 0x2007DD0
	private static extern int GetIcmpStatisticsEx(out Win32_MIB_ICMP_EX pStats, int dwFamily) { }

	// RVA: 0x2007FF8 Offset: 0x2007FF8 VA: 0x2007FF8
	private static extern int GetIPStatisticsEx(out Win32_MIB_IPSTATS pStats, int dwFamily) { }
}

// Namespace: 
private struct Win32IPGlobalProperties.Win32_IN6_ADDR // TypeDefIndex: 1351
{
	// Fields
	public byte[] Bytes; // 0x0
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_TCPROW // TypeDefIndex: 1352
{
	// Fields
	public TcpState State; // 0x10
	public uint LocalAddr; // 0x14
	public int LocalPort; // 0x18
	public uint RemoteAddr; // 0x1C
	public int RemotePort; // 0x20

	// Properties
	public IPEndPoint LocalEndPoint { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public TcpConnectionInformation TcpInfo { get; }

	// Methods

	// RVA: 0x2006B98 Offset: 0x2006B98 VA: 0x2006B98
	public void .ctor() { }

	// RVA: 0x20072B0 Offset: 0x20072B0 VA: 0x20072B0
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0x20089C8 Offset: 0x20089C8 VA: 0x20089C8
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0x2006F04 Offset: 0x2006F04 VA: 0x2006F04
	public TcpConnectionInformation get_TcpInfo() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_TCP6ROW // TypeDefIndex: 1353
{
	// Fields
	public TcpState State; // 0x10
	public Win32IPGlobalProperties.Win32_IN6_ADDR LocalAddr; // 0x18
	public uint LocalScopeId; // 0x20
	public int LocalPort; // 0x24
	public Win32IPGlobalProperties.Win32_IN6_ADDR RemoteAddr; // 0x28
	public uint RemoteScopeId; // 0x30
	public int RemotePort; // 0x34

	// Properties
	public IPEndPoint LocalEndPoint { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public TcpConnectionInformation TcpInfo { get; }

	// Methods

	// RVA: 0x2006C58 Offset: 0x2006C58 VA: 0x2006C58
	public void .ctor() { }

	// RVA: 0x2007324 Offset: 0x2007324 VA: 0x2007324
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0x2008928 Offset: 0x2008928 VA: 0x2008928
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0x2006F94 Offset: 0x2006F94 VA: 0x2006F94
	public TcpConnectionInformation get_TcpInfo() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_UDPROW // TypeDefIndex: 1354
{
	// Fields
	public uint LocalAddr; // 0x10
	public int LocalPort; // 0x14

	// Properties
	public IPEndPoint LocalEndPoint { get; }

	// Methods

	// RVA: 0x20078BC Offset: 0x20078BC VA: 0x20078BC
	public void .ctor() { }

	// RVA: 0x20078C4 Offset: 0x20078C4 VA: 0x20078C4
	public IPEndPoint get_LocalEndPoint() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_UDP6ROW // TypeDefIndex: 1355
{
	// Fields
	public Win32IPGlobalProperties.Win32_IN6_ADDR LocalAddr; // 0x10
	public uint LocalScopeId; // 0x18
	public int LocalPort; // 0x1C

	// Properties
	public IPEndPoint LocalEndPoint { get; }

	// Methods

	// RVA: 0x20079F0 Offset: 0x20079F0 VA: 0x20079F0
	public void .ctor() { }

	// RVA: 0x20079F8 Offset: 0x20079F8 VA: 0x20079F8
	public IPEndPoint get_LocalEndPoint() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPGlobalStatistics // TypeDefIndex: 1356
{
	// Properties
	public abstract int DefaultTtl { get; }
	public abstract bool ForwardingEnabled { get; }
	public abstract int NumberOfInterfaces { get; }
	public abstract int NumberOfIPAddresses { get; }
	public abstract int NumberOfRoutes { get; }
	public abstract long OutputPacketRequests { get; }
	public abstract long OutputPacketRoutingDiscards { get; }
	public abstract long OutputPacketsDiscarded { get; }
	public abstract long OutputPacketsWithNoRoute { get; }
	public abstract long PacketFragmentFailures { get; }
	public abstract long PacketReassembliesRequired { get; }
	public abstract long PacketReassemblyFailures { get; }
	public abstract long PacketReassemblyTimeout { get; }
	public abstract long PacketsFragmented { get; }
	public abstract long PacketsReassembled { get; }
	public abstract long ReceivedPackets { get; }
	public abstract long ReceivedPacketsDelivered { get; }
	public abstract long ReceivedPacketsDiscarded { get; }
	public abstract long ReceivedPacketsForwarded { get; }
	public abstract long ReceivedPacketsWithAddressErrors { get; }
	public abstract long ReceivedPacketsWithHeadersErrors { get; }
	public abstract long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0x1FF5038 Offset: 0x1FF5038 VA: 0x1FF5038
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_DefaultTtl();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_ForwardingEnabled();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int get_NumberOfInterfaces();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int get_NumberOfIPAddresses();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_NumberOfRoutes();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_OutputPacketRequests();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_OutputPacketRoutingDiscards();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_OutputPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_OutputPacketsWithNoRoute();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_PacketFragmentFailures();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_PacketReassembliesRequired();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_PacketReassemblyFailures();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long get_PacketReassemblyTimeout();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract long get_PacketsFragmented();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract long get_PacketsReassembled();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract long get_ReceivedPackets();

	// RVA: -1 Offset: -1 Slot: 20
	public abstract long get_ReceivedPacketsDelivered();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract long get_ReceivedPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 22
	public abstract long get_ReceivedPacketsForwarded();

	// RVA: -1 Offset: -1 Slot: 23
	public abstract long get_ReceivedPacketsWithAddressErrors();

	// RVA: -1 Offset: -1 Slot: 24
	public abstract long get_ReceivedPacketsWithHeadersErrors();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract long get_ReceivedPacketsWithUnknownProtocol();
}

// Namespace: System.Net.NetworkInformation
internal class MibIPGlobalStatistics : IPGlobalStatistics // TypeDefIndex: 1357
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override int DefaultTtl { get; }
	public override bool ForwardingEnabled { get; }
	public override int NumberOfInterfaces { get; }
	public override int NumberOfIPAddresses { get; }
	public override int NumberOfRoutes { get; }
	public override long OutputPacketRequests { get; }
	public override long OutputPacketRoutingDiscards { get; }
	public override long OutputPacketsDiscarded { get; }
	public override long OutputPacketsWithNoRoute { get; }
	public override long PacketFragmentFailures { get; }
	public override long PacketReassembliesRequired { get; }
	public override long PacketReassemblyFailures { get; }
	public override long PacketReassemblyTimeout { get; }
	public override long PacketsFragmented { get; }
	public override long PacketsReassembled { get; }
	public override long ReceivedPackets { get; }
	public override long ReceivedPacketsDelivered { get; }
	public override long ReceivedPacketsDiscarded { get; }
	public override long ReceivedPacketsForwarded { get; }
	public override long ReceivedPacketsWithAddressErrors { get; }
	public override long ReceivedPacketsWithHeadersErrors { get; }
	public override long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0x1FFAC38 Offset: 0x1FFAC38 VA: 0x1FFAC38
	public void .ctor(StringDictionary dic) { }

	// RVA: 0x1FFB23C Offset: 0x1FFB23C VA: 0x1FFB23C
	private long Get(string name) { }

	// RVA: 0x1FFB320 Offset: 0x1FFB320 VA: 0x1FFB320 Slot: 4
	public override int get_DefaultTtl() { }

	// RVA: 0x1FFB374 Offset: 0x1FFB374 VA: 0x1FFB374 Slot: 5
	public override bool get_ForwardingEnabled() { }

	// RVA: 0x1FFB3D0 Offset: 0x1FFB3D0 VA: 0x1FFB3D0 Slot: 6
	public override int get_NumberOfInterfaces() { }

	// RVA: 0x1FFB424 Offset: 0x1FFB424 VA: 0x1FFB424 Slot: 7
	public override int get_NumberOfIPAddresses() { }

	// RVA: 0x1FFB478 Offset: 0x1FFB478 VA: 0x1FFB478 Slot: 8
	public override int get_NumberOfRoutes() { }

	// RVA: 0x1FFB4CC Offset: 0x1FFB4CC VA: 0x1FFB4CC Slot: 9
	public override long get_OutputPacketRequests() { }

	// RVA: 0x1FFB51C Offset: 0x1FFB51C VA: 0x1FFB51C Slot: 10
	public override long get_OutputPacketRoutingDiscards() { }

	// RVA: 0x1FFB56C Offset: 0x1FFB56C VA: 0x1FFB56C Slot: 11
	public override long get_OutputPacketsDiscarded() { }

	// RVA: 0x1FFB5BC Offset: 0x1FFB5BC VA: 0x1FFB5BC Slot: 12
	public override long get_OutputPacketsWithNoRoute() { }

	// RVA: 0x1FFB60C Offset: 0x1FFB60C VA: 0x1FFB60C Slot: 13
	public override long get_PacketFragmentFailures() { }

	// RVA: 0x1FFB65C Offset: 0x1FFB65C VA: 0x1FFB65C Slot: 14
	public override long get_PacketReassembliesRequired() { }

	// RVA: 0x1FFB6AC Offset: 0x1FFB6AC VA: 0x1FFB6AC Slot: 15
	public override long get_PacketReassemblyFailures() { }

	// RVA: 0x1FFB6FC Offset: 0x1FFB6FC VA: 0x1FFB6FC Slot: 16
	public override long get_PacketReassemblyTimeout() { }

	// RVA: 0x1FFB74C Offset: 0x1FFB74C VA: 0x1FFB74C Slot: 17
	public override long get_PacketsFragmented() { }
