	public override int EndRead(IAsyncResult asyncResult) { }
}

// Namespace: 
private sealed class MonoSyncFileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 1333
{
	// Methods

	// RVA: 0xEC3284 Offset: 0xEC3284 VA: 0xEC3284
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEC3C2C Offset: 0xEC3C2C VA: 0xEC3C2C Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0xEC3294 Offset: 0xEC3294 VA: 0xEC3294 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0xEC3470 Offset: 0xEC3470 VA: 0xEC3470 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoSyncFileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 1334
{
	// Methods

	// RVA: 0xEC3614 Offset: 0xEC3614 VA: 0xEC3614
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEC3838 Offset: 0xEC3838 VA: 0xEC3838 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0xEC3624 Offset: 0xEC3624 VA: 0xEC3624 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0xEC37FC Offset: 0xEC37FC VA: 0xEC37FC Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net.Cache
public class RequestCachePolicy // TypeDefIndex: 1335
{
	// Methods

	[MonoTODOAttribute] // RVA: 0xC3D7B0 Offset: 0xC3D7B0 VA: 0xC3D7B0
	// RVA: 0xEC6C50 Offset: 0xEC6C50 VA: 0xEC6C50 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net.NetworkInformation
public enum DuplicateAddressDetectionState // TypeDefIndex: 1336
{
	// Fields
	public int value__; // 0x0
	public const DuplicateAddressDetectionState Invalid = 0;
	public const DuplicateAddressDetectionState Tentative = 1;
	public const DuplicateAddressDetectionState Duplicate = 2;
	public const DuplicateAddressDetectionState Deprecated = 3;
	public const DuplicateAddressDetectionState Preferred = 4;
}

// Namespace: System.Net.NetworkInformation
public abstract class GatewayIPAddressInformation // TypeDefIndex: 1337
{
	// Properties
	public abstract IPAddress Address { get; }

	// Methods

	// RVA: 0xF5D6F4 Offset: 0xF5D6F4 VA: 0xF5D6F4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPAddress get_Address();
}

// Namespace: System.Net.NetworkInformation
internal class GatewayIPAddressInformationImpl : GatewayIPAddressInformation // TypeDefIndex: 1338
{
	// Fields
	private IPAddress address; // 0x10

	// Properties
	public override IPAddress Address { get; }

	// Methods

	// RVA: 0xF5DCC8 Offset: 0xF5DCC8 VA: 0xF5DCC8
	public void .ctor(IPAddress address) { }

	// RVA: 0xF5DCF4 Offset: 0xF5DCF4 VA: 0xF5DCF4 Slot: 4
	public override IPAddress get_Address() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xC3C6FC Offset: 0xC3C6FC VA: 0xC3C6FC
public class GatewayIPAddressInformationCollection : IEnumerable, IEnumerable<GatewayIPAddressInformation>, ICollection<GatewayIPAddressInformation> // TypeDefIndex: 1339
{
	// Fields
	private List<GatewayIPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual GatewayIPAddressInformation Item { get; }

	// Methods

	// RVA: 0xF5D6FC Offset: 0xF5D6FC VA: 0xF5D6FC
	protected void .ctor() { }

	// RVA: 0xF5D76C Offset: 0xF5D76C VA: 0xF5D76C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xF5D800 Offset: 0xF5D800 VA: 0xF5D800 Slot: 13
	public virtual void Add(GatewayIPAddressInformation address) { }

	// RVA: 0xF5D8CC Offset: 0xF5D8CC VA: 0xF5D8CC Slot: 14
	public virtual void Clear() { }

	// RVA: 0xF5D988 Offset: 0xF5D988 VA: 0xF5D988 Slot: 15
	public virtual bool Contains(GatewayIPAddressInformation address) { }

	// RVA: 0xF5D9F8 Offset: 0xF5D9F8 VA: 0xF5D9F8 Slot: 16
	public virtual void CopyTo(GatewayIPAddressInformation[] array, int offset) { }

	// RVA: 0xF5DA70 Offset: 0xF5DA70 VA: 0xF5DA70 Slot: 17
	public virtual IEnumerator<GatewayIPAddressInformation> GetEnumerator() { }

	// RVA: 0xF5DB24 Offset: 0xF5DB24 VA: 0xF5DB24 Slot: 18
	public virtual bool Remove(GatewayIPAddressInformation address) { }

	// RVA: 0xF5DBF0 Offset: 0xF5DBF0 VA: 0xF5DBF0 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0xF5DC50 Offset: 0xF5DC50 VA: 0xF5DC50 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0xF5DC58 Offset: 0xF5DC58 VA: 0xF5DC58 Slot: 21
	public virtual GatewayIPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32GatewayIPAddressInformationCollection : GatewayIPAddressInformationCollection // TypeDefIndex: 1340
{
	// Fields
	public static readonly Win32GatewayIPAddressInformationCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0xF700C0 Offset: 0xF700C0 VA: 0xF700C0
	private void .ctor(bool isReadOnly) { }

	// RVA: 0xF700F0 Offset: 0xF700F0 VA: 0xF700F0
	public void .ctor(Win32_IP_ADDR_STRING[] al) { }

	// RVA: 0xF703D0 Offset: 0xF703D0 VA: 0xF703D0
	private static void .cctor() { }

	// RVA: 0xF70254 Offset: 0xF70254 VA: 0xF70254
	private void AddSubsequently(IntPtr head) { }

	// RVA: 0xF7043C Offset: 0xF7043C VA: 0xF7043C Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxGatewayIPAddressInformationCollection : GatewayIPAddressInformationCollection // TypeDefIndex: 1341
{
	// Fields
	public static readonly LinuxGatewayIPAddressInformationCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0xF5F4F8 Offset: 0xF5F4F8 VA: 0xF5F4F8
	private void .ctor(bool isReadOnly) { }

	// RVA: 0xF5F524 Offset: 0xF5F524 VA: 0xF5F524
	public void .ctor(IPAddressCollection col) { }

	// RVA: 0xF5F7A4 Offset: 0xF5F7A4 VA: 0xF5F7A4
	private static void .cctor() { }

	// RVA: 0xF5F80C Offset: 0xF5F80C VA: 0xF5F80C Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xC3C734 Offset: 0xC3C734 VA: 0xC3C734
public class IPAddressCollection : IEnumerable, ICollection<IPAddress>, IEnumerable<IPAddress> // TypeDefIndex: 1342
{
	// Fields
	private IList<IPAddress> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual IPAddress Item { get; }

	// Methods

	// RVA: 0xF5DCFC Offset: 0xF5DCFC VA: 0xF5DCFC
	protected internal void .ctor() { }

	// RVA: 0xF5DD6C Offset: 0xF5DD6C VA: 0xF5DD6C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xF5DE20 Offset: 0xF5DE20 VA: 0xF5DE20
	internal void SetReadOnly() { }

	// RVA: 0xF5DF9C Offset: 0xF5DF9C VA: 0xF5DF9C Slot: 13
	public virtual void Add(IPAddress address) { }

	// RVA: 0xF5E0C0 Offset: 0xF5E0C0 VA: 0xF5E0C0 Slot: 14
	public virtual void Clear() { }

	// RVA: 0xF5E1D4 Offset: 0xF5E1D4 VA: 0xF5E1D4 Slot: 15
	public virtual bool Contains(IPAddress address) { }

	// RVA: 0xF5E29C Offset: 0xF5E29C VA: 0xF5E29C Slot: 16
	public virtual void CopyTo(IPAddress[] array, int offset) { }

	// RVA: 0xF5E36C Offset: 0xF5E36C VA: 0xF5E36C Slot: 17
	public virtual IEnumerator<IPAddress> GetEnumerator() { }

	// RVA: 0xF5E420 Offset: 0xF5E420 VA: 0xF5E420 Slot: 18
	public virtual bool Remove(IPAddress address) { }

	// RVA: 0xF5E544 Offset: 0xF5E544 VA: 0xF5E544 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0xF5E5F8 Offset: 0xF5E5F8 VA: 0xF5E5F8 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0xF5E6B0 Offset: 0xF5E6B0 VA: 0xF5E6B0 Slot: 21
	public virtual IPAddress get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPAddressCollection : IPAddressCollection // TypeDefIndex: 1343
{
	// Fields
	public static readonly Win32IPAddressCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0xF70444 Offset: 0xF70444 VA: 0xF70444
	private void .ctor() { }

	// RVA: 0xF7044C Offset: 0xF7044C VA: 0xF7044C
	public void .ctor(IntPtr[] heads) { }

	// RVA: 0xF70620 Offset: 0xF70620 VA: 0xF70620
	public void .ctor(Win32_IP_ADDR_STRING[] al) { }

	// RVA: 0xF70754 Offset: 0xF70754 VA: 0xF70754
	private static void .cctor() { }

	// RVA: 0xF707FC Offset: 0xF707FC VA: 0xF707FC
	public static Win32IPAddressCollection FromAnycast(IntPtr ptr) { }

	// RVA: 0xF7098C Offset: 0xF7098C VA: 0xF7098C
	public static Win32IPAddressCollection FromDnsServer(IntPtr ptr) { }

	// RVA: 0xF704D4 Offset: 0xF704D4 VA: 0xF704D4
	private void AddSubsequentlyString(IntPtr head) { }

	// RVA: 0xF70B1C Offset: 0xF70B1C VA: 0xF70B1C Slot: 20
	public override bool get_IsReadOnly() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPAddressInformation // TypeDefIndex: 1344
{
	// Properties
	public abstract IPAddress Address { get; }
	public abstract bool IsDnsEligible { get; }
	public abstract bool IsTransient { get; }

	// Methods

	// RVA: 0xF5E778 Offset: 0xF5E778 VA: 0xF5E778
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPAddress get_Address();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsDnsEligible();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsTransient();
}

// Namespace: System.Net.NetworkInformation
internal class IPAddressInformationImpl : IPAddressInformation // TypeDefIndex: 1345
{
	// Fields
	private IPAddress address; // 0x10
	private bool is_dns_eligible; // 0x18
	private bool is_transient; // 0x19

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	[MonoTODOAttribute] // RVA: 0xC3F41C Offset: 0xC3F41C VA: 0xC3F41C
	public override bool IsTransient { get; }

	// Methods

	// RVA: 0xF5ED4C Offset: 0xF5ED4C VA: 0xF5ED4C
	public void .ctor(IPAddress address, bool isDnsEligible, bool isTransient) { }

	// RVA: 0xF5ED98 Offset: 0xF5ED98 VA: 0xF5ED98 Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0xF5EDA0 Offset: 0xF5EDA0 VA: 0xF5EDA0 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0xF5EDA8 Offset: 0xF5EDA8 VA: 0xF5EDA8 Slot: 6
	public override bool get_IsTransient() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xC3C76C Offset: 0xC3C76C VA: 0xC3C76C
public class IPAddressInformationCollection : IEnumerable, IEnumerable<IPAddressInformation>, ICollection<IPAddressInformation> // TypeDefIndex: 1346
{
	// Fields
	private List<IPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual IPAddressInformation Item { get; }

	// Methods

	// RVA: 0xF5E780 Offset: 0xF5E780 VA: 0xF5E780
	internal void .ctor() { }

	// RVA: 0xF5E7F0 Offset: 0xF5E7F0 VA: 0xF5E7F0 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xF5E884 Offset: 0xF5E884 VA: 0xF5E884 Slot: 13
	public virtual void Add(IPAddressInformation address) { }

	// RVA: 0xF5E950 Offset: 0xF5E950 VA: 0xF5E950 Slot: 14
	public virtual void Clear() { }

	// RVA: 0xF5EA0C Offset: 0xF5EA0C VA: 0xF5EA0C Slot: 15
	public virtual bool Contains(IPAddressInformation address) { }

	// RVA: 0xF5EA7C Offset: 0xF5EA7C VA: 0xF5EA7C Slot: 16
	public virtual void CopyTo(IPAddressInformation[] array, int offset) { }

	// RVA: 0xF5EAF4 Offset: 0xF5EAF4 VA: 0xF5EAF4 Slot: 17
	public virtual IEnumerator<IPAddressInformation> GetEnumerator() { }

	// RVA: 0xF5EBA8 Offset: 0xF5EBA8 VA: 0xF5EBA8 Slot: 18
	public virtual bool Remove(IPAddressInformation address) { }

	// RVA: 0xF5EC74 Offset: 0xF5EC74 VA: 0xF5EC74 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0xF5ECD4 Offset: 0xF5ECD4 VA: 0xF5ECD4 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0xF5ECDC Offset: 0xF5ECDC VA: 0xF5ECDC Slot: 21
	public virtual IPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class IPAddressInformationImplCollection : IPAddressInformationCollection // TypeDefIndex: 1347
{
	// Fields
	public static readonly IPAddressInformationImplCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0xF5EDB0 Offset: 0xF5EDB0 VA: 0xF5EDB0
	private void .ctor(bool isReadOnly) { }

	// RVA: 0xF5EDDC Offset: 0xF5EDDC VA: 0xF5EDDC
	private static void .cctor() { }

	// RVA: 0xF5EE44 Offset: 0xF5EE44 VA: 0xF5EE44 Slot: 20
	public override bool get_IsReadOnly() { }

	// RVA: 0xF5EE4C Offset: 0xF5EE4C VA: 0xF5EE4C
	public static IPAddressInformationCollection Win32FromAnycast(IntPtr ptr) { }

	// RVA: 0xF5F03C Offset: 0xF5F03C VA: 0xF5F03C
	public static IPAddressInformationImplCollection LinuxFromAnycast(IList<IPAddress> addresses) { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPGlobalProperties // TypeDefIndex: 1348
{
	// Properties
	public abstract string DhcpScopeName { get; }
	public abstract string DomainName { get; }
	public abstract string HostName { get; }
	public abstract bool IsWinsProxy { get; }
	public abstract NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0xF5F340 Offset: 0xF5F340 VA: 0xF5F340
	protected void .ctor() { }

	// RVA: 0xF5F348 Offset: 0xF5F348 VA: 0xF5F348
	public static IPGlobalProperties GetIPGlobalProperties() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract TcpConnectionInformation[] GetActiveTcpConnections();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IPEndPoint[] GetActiveTcpListeners();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract IPEndPoint[] GetActiveUdpListeners();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IcmpV4Statistics GetIcmpV4Statistics();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract IcmpV6Statistics GetIcmpV6Statistics();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract IPGlobalStatistics GetIPv4GlobalStatistics();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract IPGlobalStatistics GetIPv6GlobalStatistics();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract TcpStatistics GetTcpIPv4Statistics();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract TcpStatistics GetTcpIPv6Statistics();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract UdpStatistics GetUdpIPv4Statistics();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract UdpStatistics GetUdpIPv6Statistics();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract string get_DhcpScopeName();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract string get_DomainName();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract string get_HostName();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool get_IsWinsProxy();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract NetBiosNodeType get_NodeType();
}

// Namespace: System.Net.NetworkInformation
internal class MibIPGlobalProperties : IPGlobalProperties // TypeDefIndex: 1349
{
	// Fields
	public const string ProcDir = "/proc";
	public const string CompatProcDir = "/usr/compat/linux/proc";
	public readonly string StatisticsFile; // 0x10
	public readonly string StatisticsFileIPv6; // 0x18
	public readonly string TcpFile; // 0x20
	public readonly string Tcp6File; // 0x28
	public readonly string UdpFile; // 0x30
	public readonly string Udp6File; // 0x38
	private static readonly char[] wsChars; // 0x0

	// Properties
	public override string DhcpScopeName { get; }
	public override string DomainName { get; }
	public override string HostName { get; }
	public override bool IsWinsProxy { get; }
	public override NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0xF63624 Offset: 0xF63624 VA: 0xF63624
	public void .ctor(string procDir) { }

	// RVA: 0xF63744 Offset: 0xF63744 VA: 0xF63744
	private static void .cctor() { }

	// RVA: 0xF637F8 Offset: 0xF637F8 VA: 0xF637F8
	private static extern int gethostname(byte[] name, int len) { }

	// RVA: 0xF638AC Offset: 0xF638AC VA: 0xF638AC
	private static extern int getdomainname(byte[] name, int len) { }

	// RVA: 0xF63960 Offset: 0xF63960 VA: 0xF63960
	private StringDictionary GetProperties4(string item) { }

	// RVA: 0xF64010 Offset: 0xF64010 VA: 0xF64010
	private StringDictionary GetProperties6(string item) { }

	// RVA: 0xF63F54 Offset: 0xF63F54 VA: 0xF63F54
	private Exception CreateException(string file, string msg) { }

	// RVA: 0xF64510 Offset: 0xF64510 VA: 0xF64510
	private IPEndPoint[] GetLocalAddresses(List<string[]> list) { }

	// RVA: 0xF6466C Offset: 0xF6466C VA: 0xF6466C
	private IPEndPoint ToEndpoint(string s) { }

	// RVA: 0xF64884 Offset: 0xF64884 VA: 0xF64884
	private void GetRows(string file, List<string[]> list) { }

	// RVA: 0xF64B20 Offset: 0xF64B20 VA: 0xF64B20 Slot: 4
	public override TcpConnectionInformation[] GetActiveTcpConnections() { }

	// RVA: 0xF64DD8 Offset: 0xF64DD8 VA: 0xF64DD8 Slot: 5
	public override IPEndPoint[] GetActiveTcpListeners() { }

	// RVA: 0xF64E5C Offset: 0xF64E5C VA: 0xF64E5C Slot: 6
	public override IPEndPoint[] GetActiveUdpListeners() { }

	// RVA: 0xF64EE0 Offset: 0xF64EE0 VA: 0xF64EE0 Slot: 7
	public override IcmpV4Statistics GetIcmpV4Statistics() { }

	// RVA: 0xF64F8C Offset: 0xF64F8C VA: 0xF64F8C Slot: 8
	public override IcmpV6Statistics GetIcmpV6Statistics() { }

	// RVA: 0xF65038 Offset: 0xF65038 VA: 0xF65038 Slot: 9
	public override IPGlobalStatistics GetIPv4GlobalStatistics() { }

	// RVA: 0xF650E4 Offset: 0xF650E4 VA: 0xF650E4 Slot: 10
	public override IPGlobalStatistics GetIPv6GlobalStatistics() { }

	// RVA: 0xF65164 Offset: 0xF65164 VA: 0xF65164 Slot: 11
	public override TcpStatistics GetTcpIPv4Statistics() { }

	// RVA: 0xF65210 Offset: 0xF65210 VA: 0xF65210 Slot: 12
	public override TcpStatistics GetTcpIPv6Statistics() { }

	// RVA: 0xF65290 Offset: 0xF65290 VA: 0xF65290 Slot: 13
	public override UdpStatistics GetUdpIPv4Statistics() { }

	// RVA: 0xF6533C Offset: 0xF6533C VA: 0xF6533C Slot: 14
	public override UdpStatistics GetUdpIPv6Statistics() { }

	// RVA: 0xF653BC Offset: 0xF653BC VA: 0xF653BC Slot: 15
	public override string get_DhcpScopeName() { }

	// RVA: 0xF65424 Offset: 0xF65424 VA: 0xF65424 Slot: 16
	public override string get_DomainName() { }

	// RVA: 0xF65568 Offset: 0xF65568 VA: 0xF65568 Slot: 17
	public override string get_HostName() { }

	// RVA: 0xF656AC Offset: 0xF656AC VA: 0xF656AC Slot: 18
	public override bool get_IsWinsProxy() { }

	// RVA: 0xF656B4 Offset: 0xF656B4 VA: 0xF656B4 Slot: 19
	public override NetBiosNodeType get_NodeType() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPGlobalProperties : IPGlobalProperties // TypeDefIndex: 1350
{
	// Fields
	public const int AF_INET = 2;
	public const int AF_INET6 = 23;

	// Properties
	public override string DhcpScopeName { get; }
	public override string DomainName { get; }
	public override string HostName { get; }
	public override bool IsWinsProxy { get; }
	public override NetBiosNodeType NodeType { get; }

	// Methods

	// RVA: 0xF70B24 Offset: 0xF70B24 VA: 0xF70B24
	public void .ctor() { }

	// RVA: 0xF70B2C Offset: 0xF70B2C VA: 0xF70B2C
	private void FillTcpTable(out List<Win32IPGlobalProperties.Win32_MIB_TCPROW> tab4, out List<Win32IPGlobalProperties.Win32_MIB_TCP6ROW> tab6) { }

	// RVA: 0xF710E0 Offset: 0xF710E0 VA: 0xF710E0
	private bool IsListenerState(TcpState state) { }

	// RVA: 0xF71108 Offset: 0xF71108 VA: 0xF71108 Slot: 4
	public override TcpConnectionInformation[] GetActiveTcpConnections() { }

	// RVA: 0xF714A4 Offset: 0xF714A4 VA: 0xF714A4 Slot: 5
	public override IPEndPoint[] GetActiveTcpListeners() { }

	// RVA: 0xF71844 Offset: 0xF71844 VA: 0xF71844 Slot: 6
	public override IPEndPoint[] GetActiveUdpListeners() { }

	// RVA: 0xF71F18 Offset: 0xF71F18 VA: 0xF71F18 Slot: 7
	public override IcmpV4Statistics GetIcmpV4Statistics() { }

	// RVA: 0xF72154 Offset: 0xF72154 VA: 0xF72154 Slot: 8
	public override IcmpV6Statistics GetIcmpV6Statistics() { }

	// RVA: 0xF72374 Offset: 0xF72374 VA: 0xF72374 Slot: 9
	public override IPGlobalStatistics GetIPv4GlobalStatistics() { }

	// RVA: 0xF72558 Offset: 0xF72558 VA: 0xF72558 Slot: 10
	public override IPGlobalStatistics GetIPv6GlobalStatistics() { }

	// RVA: 0xF7265C Offset: 0xF7265C VA: 0xF7265C Slot: 11
	public override TcpStatistics GetTcpIPv4Statistics() { }

	// RVA: 0xF7285C Offset: 0xF7285C VA: 0xF7285C Slot: 12
	public override TcpStatistics GetTcpIPv6Statistics() { }

	// RVA: 0xF7297C Offset: 0xF7297C VA: 0xF7297C Slot: 13
	public override UdpStatistics GetUdpIPv4Statistics() { }

	// RVA: 0xF72B58 Offset: 0xF72B58 VA: 0xF72B58 Slot: 14
	public override UdpStatistics GetUdpIPv6Statistics() { }

	// RVA: 0xF72C54 Offset: 0xF72C54 VA: 0xF72C54 Slot: 15
	public override string get_DhcpScopeName() { }

	// RVA: 0xF72CF0 Offset: 0xF72CF0 VA: 0xF72CF0 Slot: 16
	public override string get_DomainName() { }

	// RVA: 0xF72D1C Offset: 0xF72D1C VA: 0xF72D1C Slot: 17
	public override string get_HostName() { }

	// RVA: 0xF72D48 Offset: 0xF72D48 VA: 0xF72D48 Slot: 18
	public override bool get_IsWinsProxy() { }

	// RVA: 0xF72D7C Offset: 0xF72D7C VA: 0xF72D7C Slot: 19
	public override NetBiosNodeType get_NodeType() { }

	// RVA: 0xF70F5C Offset: 0xF70F5C VA: 0xF70F5C
	private static extern int GetTcpTable(byte[] pTcpTable, ref int pdwSize, bool bOrder) { }

	// RVA: 0xF71020 Offset: 0xF71020 VA: 0xF71020
	private static extern int GetTcp6Table(byte[] TcpTable, ref int SizePointer, bool Order) { }

	// RVA: 0xF71C80 Offset: 0xF71C80 VA: 0xF71C80
	private static extern int GetUdpTable(byte[] pUdpTable, ref int pdwSize, bool bOrder) { }

	// RVA: 0xF71DB8 Offset: 0xF71DB8 VA: 0xF71DB8
	private static extern int GetUdp6Table(byte[] Udp6Table, ref int SizePointer, bool Order) { }

	// RVA: 0xF7277C Offset: 0xF7277C VA: 0xF7277C
	private static extern int GetTcpStatisticsEx(out Win32_MIB_TCPSTATS pStats, int dwFamily) { }

	// RVA: 0xF72A78 Offset: 0xF72A78 VA: 0xF72A78
	private static extern int GetUdpStatisticsEx(out Win32_MIB_UDPSTATS pStats, int dwFamily) { }

	// RVA: 0xF7204C Offset: 0xF7204C VA: 0xF7204C
	private static extern int GetIcmpStatistics(out Win32_MIBICMPINFO pStats, int dwFamily) { }

	// RVA: 0xF72250 Offset: 0xF72250 VA: 0xF72250
	private static extern int GetIcmpStatisticsEx(out Win32_MIB_ICMP_EX pStats, int dwFamily) { }

	// RVA: 0xF72478 Offset: 0xF72478 VA: 0xF72478
	private static extern int GetIPStatisticsEx(out Win32_MIB_IPSTATS pStats, int dwFamily) { }
}

// Namespace: 
private struct Win32IPGlobalProperties.Win32_IN6_ADDR // TypeDefIndex: 1351
{
	// Fields
	public byte[] Bytes; // 0x0
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_TCPROW // TypeDefIndex: 1352
{
	// Fields
	public TcpState State; // 0x10
	public uint LocalAddr; // 0x14
	public int LocalPort; // 0x18
	public uint RemoteAddr; // 0x1C
	public int RemotePort; // 0x20

	// Properties
	public IPEndPoint LocalEndPoint { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public TcpConnectionInformation TcpInfo { get; }

	// Methods

	// RVA: 0xF71018 Offset: 0xF71018 VA: 0xF71018
	public void .ctor() { }

	// RVA: 0xF71730 Offset: 0xF71730 VA: 0xF71730
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0xF72E48 Offset: 0xF72E48 VA: 0xF72E48
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0xF71384 Offset: 0xF71384 VA: 0xF71384
	public TcpConnectionInformation get_TcpInfo() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_TCP6ROW // TypeDefIndex: 1353
{
	// Fields
	public TcpState State; // 0x10
	public Win32IPGlobalProperties.Win32_IN6_ADDR LocalAddr; // 0x18
	public uint LocalScopeId; // 0x20
	public int LocalPort; // 0x24
	public Win32IPGlobalProperties.Win32_IN6_ADDR RemoteAddr; // 0x28
	public uint RemoteScopeId; // 0x30
	public int RemotePort; // 0x34

	// Properties
	public IPEndPoint LocalEndPoint { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public TcpConnectionInformation TcpInfo { get; }

	// Methods

	// RVA: 0xF710D8 Offset: 0xF710D8 VA: 0xF710D8
	public void .ctor() { }

	// RVA: 0xF717A4 Offset: 0xF717A4 VA: 0xF717A4
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0xF72DA8 Offset: 0xF72DA8 VA: 0xF72DA8
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0xF71414 Offset: 0xF71414 VA: 0xF71414
	public TcpConnectionInformation get_TcpInfo() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_UDPROW // TypeDefIndex: 1354
{
	// Fields
	public uint LocalAddr; // 0x10
	public int LocalPort; // 0x14

	// Properties
	public IPEndPoint LocalEndPoint { get; }

	// Methods

	// RVA: 0xF71D3C Offset: 0xF71D3C VA: 0xF71D3C
	public void .ctor() { }

	// RVA: 0xF71D44 Offset: 0xF71D44 VA: 0xF71D44
	public IPEndPoint get_LocalEndPoint() { }
}

// Namespace: 
private class Win32IPGlobalProperties.Win32_MIB_UDP6ROW // TypeDefIndex: 1355
{
	// Fields
	public Win32IPGlobalProperties.Win32_IN6_ADDR LocalAddr; // 0x10
	public uint LocalScopeId; // 0x18
	public int LocalPort; // 0x1C

	// Properties
	public IPEndPoint LocalEndPoint { get; }

	// Methods

	// RVA: 0xF71E70 Offset: 0xF71E70 VA: 0xF71E70
	public void .ctor() { }

	// RVA: 0xF71E78 Offset: 0xF71E78 VA: 0xF71E78
	public IPEndPoint get_LocalEndPoint() { }
}

// Namespace: System.Net.NetworkInformation
public abstract class IPGlobalStatistics // TypeDefIndex: 1356
{
	// Properties
	public abstract int DefaultTtl { get; }
	public abstract bool ForwardingEnabled { get; }
	public abstract int NumberOfInterfaces { get; }
	public abstract int NumberOfIPAddresses { get; }
	public abstract int NumberOfRoutes { get; }
	public abstract long OutputPacketRequests { get; }
	public abstract long OutputPacketRoutingDiscards { get; }
	public abstract long OutputPacketsDiscarded { get; }
	public abstract long OutputPacketsWithNoRoute { get; }
	public abstract long PacketFragmentFailures { get; }
	public abstract long PacketReassembliesRequired { get; }
	public abstract long PacketReassemblyFailures { get; }
	public abstract long PacketReassemblyTimeout { get; }
	public abstract long PacketsFragmented { get; }
	public abstract long PacketsReassembled { get; }
	public abstract long ReceivedPackets { get; }
	public abstract long ReceivedPacketsDelivered { get; }
	public abstract long ReceivedPacketsDiscarded { get; }
	public abstract long ReceivedPacketsForwarded { get; }
	public abstract long ReceivedPacketsWithAddressErrors { get; }
	public abstract long ReceivedPacketsWithHeadersErrors { get; }
	public abstract long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0xF5F4B8 Offset: 0xF5F4B8 VA: 0xF5F4B8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_DefaultTtl();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_ForwardingEnabled();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int get_NumberOfInterfaces();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int get_NumberOfIPAddresses();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_NumberOfRoutes();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_OutputPacketRequests();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_OutputPacketRoutingDiscards();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_OutputPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract long get_OutputPacketsWithNoRoute();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract long get_PacketFragmentFailures();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract long get_PacketReassembliesRequired();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract long get_PacketReassemblyFailures();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract long get_PacketReassemblyTimeout();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract long get_PacketsFragmented();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract long get_PacketsReassembled();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract long get_ReceivedPackets();

	// RVA: -1 Offset: -1 Slot: 20
	public abstract long get_ReceivedPacketsDelivered();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract long get_ReceivedPacketsDiscarded();

	// RVA: -1 Offset: -1 Slot: 22
	public abstract long get_ReceivedPacketsForwarded();

	// RVA: -1 Offset: -1 Slot: 23
	public abstract long get_ReceivedPacketsWithAddressErrors();

	// RVA: -1 Offset: -1 Slot: 24
	public abstract long get_ReceivedPacketsWithHeadersErrors();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract long get_ReceivedPacketsWithUnknownProtocol();
}

// Namespace: System.Net.NetworkInformation
internal class MibIPGlobalStatistics : IPGlobalStatistics // TypeDefIndex: 1357
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override int DefaultTtl { get; }
	public override bool ForwardingEnabled { get; }
	public override int NumberOfInterfaces { get; }
	public override int NumberOfIPAddresses { get; }
	public override int NumberOfRoutes { get; }
	public override long OutputPacketRequests { get; }
	public override long OutputPacketRoutingDiscards { get; }
	public override long OutputPacketsDiscarded { get; }
	public override long OutputPacketsWithNoRoute { get; }
	public override long PacketFragmentFailures { get; }
	public override long PacketReassembliesRequired { get; }
	public override long PacketReassemblyFailures { get; }
	public override long PacketReassemblyTimeout { get; }
	public override long PacketsFragmented { get; }
	public override long PacketsReassembled { get; }
	public override long ReceivedPackets { get; }
	public override long ReceivedPacketsDelivered { get; }
	public override long ReceivedPacketsDiscarded { get; }
	public override long ReceivedPacketsForwarded { get; }
	public override long ReceivedPacketsWithAddressErrors { get; }
	public override long ReceivedPacketsWithHeadersErrors { get; }
	public override long ReceivedPacketsWithUnknownProtocol { get; }

	// Methods

	// RVA: 0xF650B8 Offset: 0xF650B8 VA: 0xF650B8
	public void .ctor(StringDictionary dic) { }

	// RVA: 0xF656BC Offset: 0xF656BC VA: 0xF656BC
	private long Get(string name) { }

	// RVA: 0xF657A0 Offset: 0xF657A0 VA: 0xF657A0 Slot: 4
	public override int get_DefaultTtl() { }

	// RVA: 0xF657F4 Offset: 0xF657F4 VA: 0xF657F4 Slot: 5
	public override bool get_ForwardingEnabled() { }

	// RVA: 0xF65850 Offset: 0xF65850 VA: 0xF65850 Slot: 6
	public override int get_NumberOfInterfaces() { }

	// RVA: 0xF658A4 Offset: 0xF658A4 VA: 0xF658A4 Slot: 7
	public override int get_NumberOfIPAddresses() { }

	// RVA: 0xF658F8 Offset: 0xF658F8 VA: 0xF658F8 Slot: 8
	public override int get_NumberOfRoutes() { }

	// RVA: 0xF6594C Offset: 0xF6594C VA: 0xF6594C Slot: 9
	public override long get_OutputPacketRequests() { }

	// RVA: 0xF6599C Offset: 0xF6599C VA: 0xF6599C Slot: 10
	public override long get_OutputPacketRoutingDiscards() { }

	// RVA: 0xF659EC Offset: 0xF659EC VA: 0xF659EC Slot: 11
	public override long get_OutputPacketsDiscarded() { }

	// RVA: 0xF65A3C Offset: 0xF65A3C VA: 0xF65A3C Slot: 12
	public override long get_OutputPacketsWithNoRoute() { }

	// RVA: 0xF65A8C Offset: 0xF65A8C VA: 0xF65A8C Slot: 13
	public override long get_PacketFragmentFailures() { }

	// RVA: 0xF65ADC Offset: 0xF65ADC VA: 0xF65ADC Slot: 14
	public override long get_PacketReassembliesRequired() { }

	// RVA: 0xF65B2C Offset: 0xF65B2C VA: 0xF65B2C Slot: 15
	public override long get_PacketReassemblyFailures() { }

	// RVA: 0xF65B7C Offset: 0xF65B7C VA: 0xF65B7C Slot: 16
	public override long get_PacketReassemblyTimeout() { }

	// RVA: 0xF65BCC Offset: 0xF65BCC VA: 0xF65BCC Slot: 17
	public override long get_PacketsFragmented() { }

	// RVA: 0xF65C1C Offset: 0xF65C1C VA: 0xF65C1C Slot: 18
	public override long get_PacketsReassembled() { }

	// RVA: 0xF65C6C Offset: 0xF65C6C VA: 0xF65C6C Slot: 19
	public override long get_ReceivedPackets() { }

	// RVA: 0xF65CBC Offset: 0xF65CBC VA: 0xF65CBC Slot: 20
	public override long get_ReceivedPacketsDelivered() { }

	// RVA: 0xF65D0C Offset: 0xF65D0C VA: 0xF65D0C Slot: 21
	public override long get_ReceivedPacketsDiscarded() { }

	// RVA: 0xF65D5C Offset: 0xF65D5C VA: 0xF65D5C Slot: 22
	public override long get_ReceivedPacketsForwarded() { }

	// RVA: 0xF65DAC Offset: 0xF65DAC VA: 0xF65DAC Slot: 23
	public override long get_ReceivedPacketsWithAddressErrors() { }

	// RVA: 0xF65DFC Offset: 0xF65DFC VA: 0xF65DFC Slot: 24
	public override long get_ReceivedPacketsWithHeadersErrors() { }

	// RVA: 0xF65E4C Offset: 0xF65E4C VA: 0xF65E4C Slot: 25
	public override long get_ReceivedPacketsWithUnknownProtocol() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32IPGlobalStatistics : IPGlobalStatistics // TypeDefIndex: 1358
{
	// Fields
	private Win32_MIB_IPSTATS info; // 0x10

	// Properties
