	// RVA: 0x24FF590 Offset: 0x24FF590 VA: 0x24FF590 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24FF5F0 Offset: 0x24FF5F0 VA: 0x24FF5F0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FF750 Offset: 0x24FF750 VA: 0x24FF750 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FF7F0 Offset: 0x24FF7F0 VA: 0x24FF7F0 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x24FF7F8 Offset: 0x24FF7F8 VA: 0x24FF7F8 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x24FF800 Offset: 0x24FF800 VA: 0x24FF800 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x24FF808 Offset: 0x24FF808 VA: 0x24FF808 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x24FF810 Offset: 0x24FF810 VA: 0x24FF810 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x24FF818 Offset: 0x24FF818 VA: 0x24FF818 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571K1Point : AbstractF2mPoint // TypeDefIndex: 5112
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x24FF4B8 Offset: 0x24FF4B8 VA: 0x24FF4B8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FF678 Offset: 0x24FF678 VA: 0x24FF678
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FF7E4 Offset: 0x24FF7E4 VA: 0x24FF7E4
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FF820 Offset: 0x24FF820 VA: 0x24FF820 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24FF8C0 Offset: 0x24FF8C0 VA: 0x24FF8C0 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x24FF9E0 Offset: 0x24FF9E0 VA: 0x24FF9E0 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x24FFA70 Offset: 0x24FFA70 VA: 0x24FFA70 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2500308 Offset: 0x2500308 VA: 0x2500308 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x250072C Offset: 0x250072C VA: 0x250072C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2500CCC Offset: 0x2500CCC VA: 0x2500CCC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571R1Curve : AbstractF2mCurve // TypeDefIndex: 5113
{
	// Fields
	private const int SecT571R1_DEFAULT_COORDS = 6;
	protected readonly SecT571R1Point m_infinity; // 0x58
	internal static readonly SecT571FieldElement SecT571R1_B; // 0x0
	internal static readonly SecT571FieldElement SecT571R1_B_SQRT; // 0x8

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2500E50 Offset: 0x2500E50 VA: 0x2500E50
	public void .ctor() { }

	// RVA: 0x2500FCC Offset: 0x2500FCC VA: 0x2500FCC Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2501024 Offset: 0x2501024 VA: 0x2501024 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2501030 Offset: 0x2501030 VA: 0x2501030 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2501038 Offset: 0x2501038 VA: 0x2501038 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2501040 Offset: 0x2501040 VA: 0x2501040 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x25010A0 Offset: 0x25010A0 VA: 0x25010A0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2501200 Offset: 0x2501200 VA: 0x2501200 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x25012A0 Offset: 0x25012A0 VA: 0x25012A0 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x25012A8 Offset: 0x25012A8 VA: 0x25012A8 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x25012B0 Offset: 0x25012B0 VA: 0x25012B0 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x25012B8 Offset: 0x25012B8 VA: 0x25012B8 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x25012C0 Offset: 0x25012C0 VA: 0x25012C0 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x25012C8 Offset: 0x25012C8 VA: 0x25012C8 Slot: 43
	public virtual int get_K3() { }

	// RVA: 0x25012D0 Offset: 0x25012D0 VA: 0x25012D0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571R1Point : AbstractF2mPoint // TypeDefIndex: 5114
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2500FC4 Offset: 0x2500FC4 VA: 0x2500FC4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2501128 Offset: 0x2501128 VA: 0x2501128
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2501294 Offset: 0x2501294 VA: 0x2501294
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2501454 Offset: 0x2501454 VA: 0x2501454 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x25014F4 Offset: 0x25014F4 VA: 0x25014F4 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2501614 Offset: 0x2501614 VA: 0x2501614 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x25016A4 Offset: 0x25016A4 VA: 0x25016A4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2501F58 Offset: 0x2501F58 VA: 0x2501F58 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x250230C Offset: 0x250230C VA: 0x250230C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x25028E4 Offset: 0x25028E4 VA: 0x25028E4 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class ECAlgorithms // TypeDefIndex: 5115
{
	// Methods

	// RVA: 0x2502A68 Offset: 0x2502A68 VA: 0x2502A68
	public void .ctor() { }

	// RVA: 0x2502A70 Offset: 0x2502A70 VA: 0x2502A70
	public static bool IsF2mCurve(ECCurve c) { }

	// RVA: 0x2502AA8 Offset: 0x2502AA8 VA: 0x2502AA8
	public static bool IsF2mField(IFiniteField field) { }

	// RVA: 0x2502C58 Offset: 0x2502C58 VA: 0x2502C58
	public static bool IsFpCurve(ECCurve c) { }

	// RVA: 0x2502C90 Offset: 0x2502C90 VA: 0x2502C90
	public static bool IsFpField(IFiniteField field) { }

	// RVA: 0x2502D50 Offset: 0x2502D50 VA: 0x2502D50
	public static ECPoint SumOfMultiplies(ECPoint[] ps, BigInteger[] ks) { }

	// RVA: 0x2503008 Offset: 0x2503008 VA: 0x2503008
	public static ECPoint SumOfTwoMultiplies(ECPoint P, BigInteger a, ECPoint Q, BigInteger b) { }

	// RVA: 0x250404C Offset: 0x250404C VA: 0x250404C
	public static ECPoint ShamirsTrick(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x25032F8 Offset: 0x25032F8 VA: 0x25032F8
	public static ECPoint ImportPoint(ECCurve c, ECPoint p) { }

	// RVA: 0x250481C Offset: 0x250481C VA: 0x250481C
	public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len) { }

	// RVA: 0x2504824 Offset: 0x2504824 VA: 0x2504824
	public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len, ECFieldElement scale) { }

	// RVA: 0x2504C50 Offset: 0x2504C50 VA: 0x2504C50
	public static ECPoint ReferenceMultiply(ECPoint p, BigInteger k) { }

	// RVA: 0x25039A4 Offset: 0x25039A4 VA: 0x25039A4
	public static ECPoint ValidatePoint(ECPoint p) { }

	// RVA: 0x25040B0 Offset: 0x25040B0 VA: 0x25040B0
	internal static ECPoint ImplShamirsTrickJsf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x2503D80 Offset: 0x2503D80 VA: 0x2503D80
	internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x2505198 Offset: 0x2505198 VA: 0x2505198
	internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPointMap pointMapQ, BigInteger l) { }

	// RVA: 0x2504E6C Offset: 0x2504E6C VA: 0x2504E6C
	private static ECPoint ImplShamirsTrickWNaf(ECPoint[] preCompP, ECPoint[] preCompNegP, byte[] wnafP, ECPoint[] preCompQ, ECPoint[] preCompNegQ, byte[] wnafQ) { }

	// RVA: 0x2503A50 Offset: 0x2503A50 VA: 0x2503A50
	internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, BigInteger[] ks) { }

	// RVA: 0x25033E4 Offset: 0x25033E4 VA: 0x25033E4
	internal static ECPoint ImplSumOfMultipliesGlv(ECPoint[] ps, BigInteger[] ks, GlvEndomorphism glvEndomorphism) { }

	// RVA: 0x25058B4 Offset: 0x25058B4 VA: 0x25058B4
	internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, ECPointMap pointMap, BigInteger[] ks) { }

	// RVA: 0x2505450 Offset: 0x2505450 VA: 0x2505450
	private static ECPoint ImplSumOfMultiplies(bool[] negs, WNafPreCompInfo[] infos, byte[][] wnafs) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECCurve // TypeDefIndex: 5116
{
	// Fields
	public const int COORD_AFFINE = 0;
	public const int COORD_HOMOGENEOUS = 1;
	public const int COORD_JACOBIAN = 2;
	public const int COORD_JACOBIAN_CHUDNOVSKY = 3;
	public const int COORD_JACOBIAN_MODIFIED = 4;
	public const int COORD_LAMBDA_AFFINE = 5;
	public const int COORD_LAMBDA_PROJECTIVE = 6;
	public const int COORD_SKEWED = 7;
	protected readonly IFiniteField m_field; // 0x10
	protected ECFieldElement m_a; // 0x18
	protected ECFieldElement m_b; // 0x20
	protected BigInteger m_order; // 0x28
	protected BigInteger m_cofactor; // 0x30
	protected int m_coord; // 0x38
	protected ECEndomorphism m_endomorphism; // 0x40
	protected ECMultiplier m_multiplier; // 0x48

	// Properties
	public abstract int FieldSize { get; }
	public abstract ECPoint Infinity { get; }
	public virtual IFiniteField Field { get; }
	public virtual ECFieldElement A { get; }
	public virtual ECFieldElement B { get; }
	public virtual BigInteger Order { get; }
	public virtual BigInteger Cofactor { get; }
	public virtual int CoordinateSystem { get; }

	// Methods

	// RVA: 0x2505DCC Offset: 0x2505DCC VA: 0x2505DCC
	protected void .ctor(IFiniteField field) { }

	// RVA: 0x2505DF8 Offset: 0x2505DF8 VA: 0x2505DF8
	public static int[] GetAllCoordinateSystems() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_FieldSize();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract ECFieldElement FromBigInteger(BigInteger x);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool IsValidFieldElement(BigInteger x);

	// RVA: 0x2505E64 Offset: 0x2505E64 VA: 0x2505E64 Slot: 7
	public virtual ECCurve.Config Configure() { }

	// RVA: 0x2505F38 Offset: 0x2505F38 VA: 0x2505F38 Slot: 8
	public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y) { }

	// RVA: 0x2506000 Offset: 0x2506000 VA: 0x2506000 Slot: 9
	public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: 0x25060D8 Offset: 0x25060D8 VA: 0x25060D8 Slot: 10
	public virtual ECPoint CreatePoint(BigInteger x, BigInteger y) { }

	// RVA: 0x25060E8 Offset: 0x25060E8 VA: 0x25060E8 Slot: 11
	public virtual ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: -1 Offset: -1 Slot: 12
	protected abstract ECCurve CloneCurve();

	// RVA: -1 Offset: -1 Slot: 13
	protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);

	// RVA: -1 Offset: -1 Slot: 14
	protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);

	// RVA: 0x2506150 Offset: 0x2506150 VA: 0x2506150 Slot: 15
	protected virtual ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x25061FC Offset: 0x25061FC VA: 0x25061FC Slot: 16
	public virtual bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2506208 Offset: 0x2506208 VA: 0x2506208 Slot: 17
	public virtual PreCompInfo GetPreCompInfo(ECPoint point, string name) { }

	// RVA: 0x25063E4 Offset: 0x25063E4 VA: 0x25063E4 Slot: 18
	public virtual void SetPreCompInfo(ECPoint point, string name, PreCompInfo preCompInfo) { }

	// RVA: 0x25065A0 Offset: 0x25065A0 VA: 0x25065A0 Slot: 19
	public virtual ECPoint ImportPoint(ECPoint p) { }

	// RVA: 0x25066C4 Offset: 0x25066C4 VA: 0x25066C4 Slot: 20
	public virtual void NormalizeAll(ECPoint[] points) { }

	// RVA: 0x2506710 Offset: 0x2506710 VA: 0x2506710 Slot: 21
	public virtual void NormalizeAll(ECPoint[] points, int off, int len, ECFieldElement iso) { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract ECPoint get_Infinity();

	// RVA: 0x2506AA8 Offset: 0x2506AA8 VA: 0x2506AA8 Slot: 23
	public virtual IFiniteField get_Field() { }

	// RVA: 0x2506AB0 Offset: 0x2506AB0 VA: 0x2506AB0 Slot: 24
	public virtual ECFieldElement get_A() { }

	// RVA: 0x2506AB8 Offset: 0x2506AB8 VA: 0x2506AB8 Slot: 25
	public virtual ECFieldElement get_B() { }

	// RVA: 0x2506AC0 Offset: 0x2506AC0 VA: 0x2506AC0 Slot: 26
	public virtual BigInteger get_Order() { }

	// RVA: 0x2506AC8 Offset: 0x2506AC8 VA: 0x2506AC8 Slot: 27
	public virtual BigInteger get_Cofactor() { }

	// RVA: 0x2506AD0 Offset: 0x2506AD0 VA: 0x2506AD0 Slot: 28
	public virtual int get_CoordinateSystem() { }

	// RVA: 0x2506AD8 Offset: 0x2506AD8 VA: 0x2506AD8 Slot: 29
	protected virtual void CheckPoint(ECPoint point) { }

	// RVA: 0x2506B90 Offset: 0x2506B90 VA: 0x2506B90 Slot: 30
	protected virtual void CheckPoints(ECPoint[] points) { }

	// RVA: 0x2506BD8 Offset: 0x2506BD8 VA: 0x2506BD8 Slot: 31
	protected virtual void CheckPoints(ECPoint[] points, int off, int len) { }

	// RVA: 0x2506D54 Offset: 0x2506D54 VA: 0x2506D54 Slot: 32
	public virtual bool Equals(ECCurve other) { }

	// RVA: 0x2506F08 Offset: 0x2506F08 VA: 0x2506F08 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2506FA4 Offset: 0x2506FA4 VA: 0x2506FA4 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 33
	protected abstract ECPoint DecompressPoint(int yTilde, BigInteger X1);

	// RVA: 0x25070B4 Offset: 0x25070B4 VA: 0x25070B4 Slot: 34
	public virtual ECEndomorphism GetEndomorphism() { }

	// RVA: 0x25070BC Offset: 0x25070BC VA: 0x25070BC Slot: 35
	public virtual ECMultiplier GetMultiplier() { }

	// RVA: 0x2507154 Offset: 0x2507154 VA: 0x2507154 Slot: 36
	public virtual ECPoint DecodePoint(byte[] encoded) { }
}

// Namespace: 
public class ECCurve.Config // TypeDefIndex: 5117
{
	// Fields
	protected ECCurve outer; // 0x10
	protected int coord; // 0x18
	protected ECEndomorphism endomorphism; // 0x20
	protected ECMultiplier multiplier; // 0x28

	// Methods

	// RVA: 0x2505EE8 Offset: 0x2505EE8 VA: 0x2505EE8
	internal void .ctor(ECCurve outer, int coord, ECEndomorphism endomorphism, ECMultiplier multiplier) { }

	// RVA: 0x2507684 Offset: 0x2507684 VA: 0x2507684
	public ECCurve.Config SetCoordinateSystem(int coord) { }

	// RVA: 0x250768C Offset: 0x250768C VA: 0x250768C
	public ECCurve.Config SetEndomorphism(ECEndomorphism endomorphism) { }

	// RVA: 0x2507694 Offset: 0x2507694 VA: 0x2507694
	public ECCurve.Config SetMultiplier(ECMultiplier multiplier) { }

	// RVA: 0x250769C Offset: 0x250769C VA: 0x250769C
	public ECCurve Create() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractFpCurve : ECCurve // TypeDefIndex: 5118
{
	// Methods

	// RVA: 0x2652914 Offset: 0x2652914 VA: 0x2652914
	protected void .ctor(BigInteger q) { }

	// RVA: 0x2652998 Offset: 0x2652998 VA: 0x2652998 Slot: 6
	public override bool IsValidFieldElement(BigInteger x) { }

	// RVA: 0x2652A9C Offset: 0x2652A9C VA: 0x2652A9C Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpCurve : AbstractFpCurve // TypeDefIndex: 5119
{
	// Fields
	private const int FP_DEFAULT_COORDS = 4;
	protected readonly BigInteger m_q; // 0x50
	protected readonly BigInteger m_r; // 0x58
	protected readonly FpPoint m_infinity; // 0x60

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x250E064 Offset: 0x250E064 VA: 0x250E064
	public void .ctor(BigInteger q, BigInteger a, BigInteger b) { }

	// RVA: 0x250E070 Offset: 0x250E070 VA: 0x250E070
	public void .ctor(BigInteger q, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x250E318 Offset: 0x250E318 VA: 0x250E318
	protected void .ctor(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b) { }

	// RVA: 0x250E324 Offset: 0x250E324 VA: 0x250E324
	protected void .ctor(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x250E3E4 Offset: 0x250E3E4 VA: 0x250E3E4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x250E480 Offset: 0x250E480 VA: 0x250E480 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x250E4A4 Offset: 0x250E4A4 VA: 0x250E4A4 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x250E4AC Offset: 0x250E4AC VA: 0x250E4AC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x250E4B4 Offset: 0x250E4B4 VA: 0x250E4B4 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x250E4E4 Offset: 0x250E4E4 VA: 0x250E4E4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x250E648 Offset: 0x250E648 VA: 0x250E648 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x250E7A8 Offset: 0x250E7A8 VA: 0x250E7A8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x250E848 Offset: 0x250E848 VA: 0x250E848 Slot: 19
	public override ECPoint ImportPoint(ECPoint p) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractF2mCurve : ECCurve // TypeDefIndex: 5120
{
	// Fields
	private BigInteger[] si; // 0x50

	// Properties
	public virtual bool IsKoblitz { get; }

	// Methods

	// RVA: 0x2650AA0 Offset: 0x2650AA0 VA: 0x2650AA0
	protected void .ctor(int m, int k1, int k2, int k3) { }

	// RVA: 0x2650D18 Offset: 0x2650D18 VA: 0x2650D18
	public static BigInteger Inverse(int m, int[] ks, BigInteger x) { }

	// RVA: 0x2650ADC Offset: 0x2650ADC VA: 0x2650ADC
	private static IFiniteField BuildField(int m, int k1, int k2, int k3) { }

	// RVA: 0x2650DBC Offset: 0x2650DBC VA: 0x2650DBC Slot: 6
	public override bool IsValidFieldElement(BigInteger x) { }

	// RVA: 0x2650E20 Offset: 0x2650E20 VA: 0x2650E20 Slot: 11
	public override ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: 0x2650FD8 Offset: 0x2650FD8 VA: 0x2650FD8 Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }

	// RVA: 0x2651260 Offset: 0x2651260 VA: 0x2651260
	private ECFieldElement SolveQuadradicEquation(ECFieldElement beta) { }

	// RVA: 0x26514BC Offset: 0x26514BC VA: 0x26514BC Slot: 37
	internal virtual BigInteger[] GetSi() { }

	// RVA: 0x2651594 Offset: 0x2651594 VA: 0x2651594 Slot: 38
	public virtual bool get_IsKoblitz() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mCurve : AbstractF2mCurve // TypeDefIndex: 5121
{
	// Fields
	private const int F2M_DEFAULT_COORDS = 6;
	private readonly int m; // 0x58
	private readonly int k1; // 0x5C
	private readonly int k2; // 0x60
	private readonly int k3; // 0x64
	protected readonly F2mPoint m_infinity; // 0x68

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public int M { get; }
	public int K1 { get; }
	public int K2 { get; }
	public int K3 { get; }
	[ObsoleteAttribute] // RVA: 0xD4BABC Offset: 0xD4BABC VA: 0xD4BABC
	public BigInteger N { get; }
	[ObsoleteAttribute] // RVA: 0xD4BAF4 Offset: 0xD4BAF4 VA: 0xD4BAF4
	public BigInteger H { get; }

	// Methods

	// RVA: 0x2509CF8 Offset: 0x2509CF8 VA: 0x2509CF8
	public void .ctor(int m, int k, BigInteger a, BigInteger b) { }

	// RVA: 0x2509EF4 Offset: 0x2509EF4 VA: 0x2509EF4
	public void .ctor(int m, int k, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x2509F34 Offset: 0x2509F34 VA: 0x2509F34
	public void .ctor(int m, int k1, int k2, int k3, BigInteger a, BigInteger b) { }

	// RVA: 0x2509D34 Offset: 0x2509D34 VA: 0x2509D34
	public void .ctor(int m, int k1, int k2, int k3, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x2509F60 Offset: 0x2509F60 VA: 0x2509F60
	protected void .ctor(int m, int k1, int k2, int k3, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x250A040 Offset: 0x250A040 VA: 0x250A040 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x250A0F4 Offset: 0x250A0F4 VA: 0x250A0F4 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x250A110 Offset: 0x250A110 VA: 0x250A110 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x250A198 Offset: 0x250A198 VA: 0x250A198 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x250A1A0 Offset: 0x250A1A0 VA: 0x250A1A0 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x250A480 Offset: 0x250A480 VA: 0x250A480 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x250A624 Offset: 0x250A624 VA: 0x250A624 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x250A6C4 Offset: 0x250A6C4 VA: 0x250A6C4 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x250A6CC Offset: 0x250A6CC VA: 0x250A6CC
	public int get_M() { }

	// RVA: 0x250A6D4 Offset: 0x250A6D4 VA: 0x250A6D4
	public bool IsTrinomial() { }

	// RVA: 0x250A6F4 Offset: 0x250A6F4 VA: 0x250A6F4
	public int get_K1() { }

	// RVA: 0x250A6FC Offset: 0x250A6FC VA: 0x250A6FC
	public int get_K2() { }

	// RVA: 0x250A704 Offset: 0x250A704 VA: 0x250A704
	public int get_K3() { }

	// RVA: 0x250A70C Offset: 0x250A70C VA: 0x250A70C
	public BigInteger get_N() { }

	// RVA: 0x250A714 Offset: 0x250A714 VA: 0x250A714
	public BigInteger get_H() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECFieldElement // TypeDefIndex: 5122
{
	// Properties
	public abstract string FieldName { get; }
	public abstract int FieldSize { get; }
	public virtual int BitLength { get; }
	public virtual bool IsOne { get; }
	public virtual bool IsZero { get; }

	// Methods

	// RVA: 0x24FE32C Offset: 0x24FE32C VA: 0x24FE32C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract BigInteger ToBigInteger();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_FieldName();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int get_FieldSize();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract ECFieldElement Add(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract ECFieldElement AddOne();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract ECFieldElement Subtract(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract ECFieldElement Multiply(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract ECFieldElement Divide(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ECFieldElement Negate();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract ECFieldElement Square();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract ECFieldElement Invert();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract ECFieldElement Sqrt();

	// RVA: 0x25077F8 Offset: 0x25077F8 VA: 0x25077F8 Slot: 16
	public virtual int get_BitLength() { }

	// RVA: 0x2507830 Offset: 0x2507830 VA: 0x2507830 Slot: 17
	public virtual bool get_IsOne() { }

	// RVA: 0x2507858 Offset: 0x2507858 VA: 0x2507858 Slot: 18
	public virtual bool get_IsZero() { }

	// RVA: 0x250789C Offset: 0x250789C VA: 0x250789C Slot: 19
	public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2507914 Offset: 0x2507914 VA: 0x2507914 Slot: 20
	public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250798C Offset: 0x250798C VA: 0x250798C Slot: 21
	public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2507A08 Offset: 0x2507A08 VA: 0x2507A08 Slot: 22
	public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2507A84 Offset: 0x2507A84 VA: 0x2507A84 Slot: 23
	public virtual ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2507AD8 Offset: 0x2507AD8 VA: 0x2507AD8 Slot: 24
	public virtual bool TestBitZero() { }

	// RVA: 0x2507B14 Offset: 0x2507B14 VA: 0x2507B14 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2507BB0 Offset: 0x2507BB0 VA: 0x2507BB0 Slot: 25
	public virtual bool Equals(ECFieldElement other) { }

	// RVA: 0x2507C30 Offset: 0x2507C30 VA: 0x2507C30 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2507C6C Offset: 0x2507C6C VA: 0x2507C6C Slot: 3
	public override string ToString() { }

	// RVA: 0x2507CA8 Offset: 0x2507CA8 VA: 0x2507CA8 Slot: 26
	public virtual byte[] GetEncoded() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpFieldElement : ECFieldElement // TypeDefIndex: 5123
{
	// Fields
	private readonly BigInteger q; // 0x10
	private readonly BigInteger r; // 0x18
	private readonly BigInteger x; // 0x20

	// Properties
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public BigInteger Q { get; }

	// Methods

	// RVA: 0x250EAA4 Offset: 0x250EAA4 VA: 0x250EAA4
	public void .ctor(BigInteger q, BigInteger x) { }

	// RVA: 0x250E560 Offset: 0x250E560 VA: 0x250E560
	internal void .ctor(BigInteger q, BigInteger r, BigInteger x) { }

	// RVA: 0x250E164 Offset: 0x250E164 VA: 0x250E164
	internal static BigInteger CalculateResidue(BigInteger p) { }

	// RVA: 0x250EAE8 Offset: 0x250EAE8 VA: 0x250EAE8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x250EAF0 Offset: 0x250EAF0 VA: 0x250EAF0 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x250EB38 Offset: 0x250EB38 VA: 0x250EB38 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x250EB68 Offset: 0x250EB68 VA: 0x250EB68
	public BigInteger get_Q() { }

	// RVA: 0x250EB70 Offset: 0x250EB70 VA: 0x250EB70 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x250EC34 Offset: 0x250EC34 VA: 0x250EC34 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x250ED40 Offset: 0x250ED40 VA: 0x250ED40 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x250EE04 Offset: 0x250EE04 VA: 0x250EE04 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x250EEC8 Offset: 0x250EEC8 VA: 0x250EEC8 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250F030 Offset: 0x250F030 VA: 0x250F030 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250F264 Offset: 0x250F264 VA: 0x250F264 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x250F340 Offset: 0x250F340 VA: 0x250F340 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x250F3FC Offset: 0x250F3FC VA: 0x250F3FC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x250F494 Offset: 0x250F494 VA: 0x250F494 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250F5D8 Offset: 0x250F5D8 VA: 0x250F5D8 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250F7E0 Offset: 0x250F7E0 VA: 0x250F7E0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x250F874 Offset: 0x250F874 VA: 0x250F874 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x251000C Offset: 0x251000C VA: 0x251000C
	private ECFieldElement CheckSqrt(ECFieldElement z) { }

	// RVA: 0x251007C Offset: 0x251007C VA: 0x251007C
	private BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k) { }

	// RVA: 0x2510708 Offset: 0x2510708 VA: 0x2510708 Slot: 27
	protected virtual BigInteger ModAdd(BigInteger x1, BigInteger x2) { }

	// RVA: 0x25107A4 Offset: 0x25107A4 VA: 0x25107A4 Slot: 28
	protected virtual BigInteger ModDouble(BigInteger x) { }

	// RVA: 0x251083C Offset: 0x251083C VA: 0x251083C Slot: 29
	protected virtual BigInteger ModHalf(BigInteger x) { }

	// RVA: 0x25108B8 Offset: 0x25108B8 VA: 0x25108B8 Slot: 30
	protected virtual BigInteger ModHalfAbs(BigInteger x) { }

	// RVA: 0x2510934 Offset: 0x2510934 VA: 0x2510934 Slot: 31
	protected virtual BigInteger ModInverse(BigInteger x) { }

	// RVA: 0x2510A14 Offset: 0x2510A14 VA: 0x2510A14 Slot: 32
	protected virtual BigInteger ModMult(BigInteger x1, BigInteger x2) { }

	// RVA: 0x2510A70 Offset: 0x2510A70 VA: 0x2510A70 Slot: 33
	protected virtual BigInteger ModReduce(BigInteger x) { }

	// RVA: 0x2510F10 Offset: 0x2510F10 VA: 0x2510F10 Slot: 34
	protected virtual BigInteger ModSubtract(BigInteger x1, BigInteger x2) { }

	// RVA: 0x2510FA4 Offset: 0x2510FA4 VA: 0x2510FA4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2511060 Offset: 0x2511060 VA: 0x2511060 Slot: 35
	public virtual bool Equals(FpFieldElement other) { }

	// RVA: 0x25110DC Offset: 0x25110DC VA: 0x25110DC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mFieldElement : ECFieldElement // TypeDefIndex: 5124
{
	// Fields
	public const int Gnb = 1;
	public const int Tpb = 2;
	public const int Ppb = 3;
	private int representation; // 0x10
	private int m; // 0x14
	private int[] ks; // 0x18
	private LongArray x; // 0x20

	// Properties
	public override int BitLength { get; }
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public int Representation { get; }
	public int M { get; }
	public int K1 { get; }
	public int K2 { get; }
	public int K3 { get; }

	// Methods

	// RVA: 0x250A230 Offset: 0x250A230 VA: 0x250A230
	public void .ctor(int m, int k1, int k2, int k3, BigInteger x) { }

	// RVA: 0x250A71C Offset: 0x250A71C VA: 0x250A71C
	public void .ctor(int m, int k, BigInteger x) { }

	// RVA: 0x250A730 Offset: 0x250A730 VA: 0x250A730
	private void .ctor(int m, int[] ks, LongArray x) { }

	// RVA: 0x250A790 Offset: 0x250A790 VA: 0x250A790 Slot: 16
	public override int get_BitLength() { }

	// RVA: 0x250A7C0 Offset: 0x250A7C0 VA: 0x250A7C0 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x250A7F0 Offset: 0x250A7F0 VA: 0x250A7F0 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x250A820 Offset: 0x250A820 VA: 0x250A820 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x250A850 Offset: 0x250A850 VA: 0x250A850 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x250A880 Offset: 0x250A880 VA: 0x250A880 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x250A8C8 Offset: 0x250A8C8 VA: 0x250A8C8 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x250A8D0 Offset: 0x250A8D0 VA: 0x250A8D0
	public static void CheckFieldElements(ECFieldElement a, ECFieldElement b) { }

	// RVA: 0x250AA28 Offset: 0x250AA28 VA: 0x250AA28 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x250AB6C Offset: 0x250AB6C VA: 0x250AB6C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x250AC04 Offset: 0x250AC04 VA: 0x250AC04 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x250AC10 Offset: 0x250AC10 VA: 0x250AC10 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x250ADBC Offset: 0x250ADBC VA: 0x250ADBC Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250ADCC Offset: 0x250ADCC VA: 0x250ADCC Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250B1FC Offset: 0x250B1FC VA: 0x250B1FC Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x250B24C Offset: 0x250B24C VA: 0x250B24C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x250B250 Offset: 0x250B250 VA: 0x250B250 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x250B2F0 Offset: 0x250B2F0 VA: 0x250B2F0 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250B300 Offset: 0x250B300 VA: 0x250B300 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250B648 Offset: 0x250B648 VA: 0x250B648 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x250B700 Offset: 0x250B700 VA: 0x250B700 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x250B7A0 Offset: 0x250B7A0 VA: 0x250B7A0 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x250B820 Offset: 0x250B820 VA: 0x250B820
	public int get_Representation() { }

	// RVA: 0x250B828 Offset: 0x250B828 VA: 0x250B828
	public int get_M() { }

	// RVA: 0x250B830 Offset: 0x250B830 VA: 0x250B830
	public int get_K1() { }

	// RVA: 0x250B874 Offset: 0x250B874 VA: 0x250B874
	public int get_K2() { }

	// RVA: 0x250B8E4 Offset: 0x250B8E4 VA: 0x250B8E4
	public int get_K3() { }

	// RVA: 0x250B954 Offset: 0x250B954 VA: 0x250B954 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x250BA10 Offset: 0x250BA10 VA: 0x250BA10 Slot: 27
	public virtual bool Equals(F2mFieldElement other) { }

	// RVA: 0x250BAB0 Offset: 0x250BAB0 VA: 0x250BAB0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECPoint // TypeDefIndex: 5125
{
	// Fields
	protected static ECFieldElement[] EMPTY_ZS; // 0x0
	protected internal readonly ECCurve m_curve; // 0x10
	protected internal readonly ECFieldElement m_x; // 0x18
	protected internal readonly ECFieldElement m_y; // 0x20
	protected internal readonly ECFieldElement[] m_zs; // 0x28
	protected internal readonly bool m_withCompression; // 0x30
	protected internal IDictionary m_preCompTable; // 0x38

	// Properties
	public virtual ECCurve Curve { get; }
	protected virtual int CurveCoordinateSystem { get; }
	[ObsoleteAttribute] // RVA: 0xD4BB2C Offset: 0xD4BB2C VA: 0xD4BB2C
	public virtual ECFieldElement X { get; }
	[ObsoleteAttribute] // RVA: 0xD4BB64 Offset: 0xD4BB64 VA: 0xD4BB64
	public virtual ECFieldElement Y { get; }
	public virtual ECFieldElement AffineXCoord { get; }
	public virtual ECFieldElement AffineYCoord { get; }
	public virtual ECFieldElement XCoord { get; }
	public virtual ECFieldElement YCoord { get; }
	protected internal ECFieldElement RawXCoord { get; }
	protected internal ECFieldElement RawYCoord { get; }
	protected internal ECFieldElement[] RawZCoords { get; }
	public bool IsInfinity { get; }
	public bool IsCompressed { get; }
	protected internal abstract bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2507D04 Offset: 0x2507D04 VA: 0x2507D04
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2508118 Offset: 0x2508118 VA: 0x2508118
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2507DAC Offset: 0x2507DAC VA: 0x2507DAC
	protected static ECFieldElement[] GetInitialZCoords(ECCurve curve) { }

	// RVA: 0x2507590 Offset: 0x2507590 VA: 0x2507590
	protected internal bool SatisfiesCofactor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract bool SatisfiesCurveEquation();

	// RVA: 0x2508170 Offset: 0x2508170 VA: 0x2508170
	public ECPoint GetDetachedPoint() { }

	// RVA: 0x25081B0 Offset: 0x25081B0 VA: 0x25081B0 Slot: 5
	public virtual ECCurve get_Curve() { }

