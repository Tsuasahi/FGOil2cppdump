	// RVA: 0x21FE230 Offset: 0x21FE230 VA: 0x21FE230 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x21FE23C Offset: 0x21FE23C VA: 0x21FE23C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x21FE284 Offset: 0x21FE284 VA: 0x21FE284 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x21FE290 Offset: 0x21FE290 VA: 0x21FE290 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x21FE2D8 Offset: 0x21FE2D8 VA: 0x21FE2D8 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x21FE2E0 Offset: 0x21FE2E0 VA: 0x21FE2E0 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x21FE484 Offset: 0x21FE484 VA: 0x21FE484 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x21FE528 Offset: 0x21FE528 VA: 0x21FE528 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x21FE534 Offset: 0x21FE534 VA: 0x21FE534 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x21FE6D8 Offset: 0x21FE6D8 VA: 0x21FE6D8 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FE6E8 Offset: 0x21FE6E8 VA: 0x21FE6E8 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FEA78 Offset: 0x21FEA78 VA: 0x21FEA78 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x21FEAC8 Offset: 0x21FEAC8 VA: 0x21FEAC8 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x21FEACC Offset: 0x21FEACC VA: 0x21FEACC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x21FEB70 Offset: 0x21FEB70 VA: 0x21FEB70 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FEB80 Offset: 0x21FEB80 VA: 0x21FEB80 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FEE28 Offset: 0x21FEE28 VA: 0x21FEE28 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x21FEEE4 Offset: 0x21FEEE4 VA: 0x21FEEE4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x21FEF88 Offset: 0x21FEF88 VA: 0x21FEF88 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x21FF02C Offset: 0x21FF02C VA: 0x21FF02C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x21FF034 Offset: 0x21FF034 VA: 0x21FF034 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x21FF03C Offset: 0x21FF03C VA: 0x21FF03C Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x21FF044 Offset: 0x21FF044 VA: 0x21FF044 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x21FF04C Offset: 0x21FF04C VA: 0x21FF04C Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x21FF054 Offset: 0x21FF054 VA: 0x21FF054 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x21FF0F0 Offset: 0x21FF0F0 VA: 0x21FF0F0 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x21FF18C Offset: 0x21FF18C VA: 0x21FF18C Slot: 32
	public virtual bool Equals(SecT571FieldElement other) { }

	// RVA: 0x21FF1B8 Offset: 0x21FF1B8 VA: 0x21FF1B8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571K1Curve : AbstractF2mCurve // TypeDefIndex: 5111
{
	// Fields
	private const int SecT571K1_DEFAULT_COORDS = 6;
	protected readonly SecT571K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x21FF1E8 Offset: 0x21FF1E8 VA: 0x21FF1E8
	public void .ctor() { }

	// RVA: 0x21FF354 Offset: 0x21FF354 VA: 0x21FF354 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x21FF3AC Offset: 0x21FF3AC VA: 0x21FF3AC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x21FF3B8 Offset: 0x21FF3B8 VA: 0x21FF3B8 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x21FF414 Offset: 0x21FF414 VA: 0x21FF414 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x21FF41C Offset: 0x21FF41C VA: 0x21FF41C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x21FF424 Offset: 0x21FF424 VA: 0x21FF424 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x21FF484 Offset: 0x21FF484 VA: 0x21FF484 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x21FF5E4 Offset: 0x21FF5E4 VA: 0x21FF5E4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x21FF684 Offset: 0x21FF684 VA: 0x21FF684 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x21FF68C Offset: 0x21FF68C VA: 0x21FF68C Slot: 39
	public virtual int get_M() { }

	// RVA: 0x21FF694 Offset: 0x21FF694 VA: 0x21FF694 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x21FF69C Offset: 0x21FF69C VA: 0x21FF69C Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x21FF6A4 Offset: 0x21FF6A4 VA: 0x21FF6A4 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x21FF6AC Offset: 0x21FF6AC VA: 0x21FF6AC Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571K1Point : AbstractF2mPoint // TypeDefIndex: 5112
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x21FF34C Offset: 0x21FF34C VA: 0x21FF34C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FF50C Offset: 0x21FF50C VA: 0x21FF50C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x21FF678 Offset: 0x21FF678 VA: 0x21FF678
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x21FF6B4 Offset: 0x21FF6B4 VA: 0x21FF6B4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x21FF754 Offset: 0x21FF754 VA: 0x21FF754 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x21FF874 Offset: 0x21FF874 VA: 0x21FF874 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x21FF904 Offset: 0x21FF904 VA: 0x21FF904 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x220019C Offset: 0x220019C VA: 0x220019C Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x22005C0 Offset: 0x22005C0 VA: 0x22005C0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2200B60 Offset: 0x2200B60 VA: 0x2200B60 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571R1Curve : AbstractF2mCurve // TypeDefIndex: 5113
{
	// Fields
	private const int SecT571R1_DEFAULT_COORDS = 6;
	protected readonly SecT571R1Point m_infinity; // 0x58
	internal static readonly SecT571FieldElement SecT571R1_B; // 0x0
	internal static readonly SecT571FieldElement SecT571R1_B_SQRT; // 0x8

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2200CE4 Offset: 0x2200CE4 VA: 0x2200CE4
	public void .ctor() { }

	// RVA: 0x2200E60 Offset: 0x2200E60 VA: 0x2200E60 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2200EB8 Offset: 0x2200EB8 VA: 0x2200EB8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2200EC4 Offset: 0x2200EC4 VA: 0x2200EC4 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2200ECC Offset: 0x2200ECC VA: 0x2200ECC Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2200ED4 Offset: 0x2200ED4 VA: 0x2200ED4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2200F34 Offset: 0x2200F34 VA: 0x2200F34 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2201094 Offset: 0x2201094 VA: 0x2201094 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2201134 Offset: 0x2201134 VA: 0x2201134 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x220113C Offset: 0x220113C VA: 0x220113C Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2201144 Offset: 0x2201144 VA: 0x2201144 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x220114C Offset: 0x220114C VA: 0x220114C Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2201154 Offset: 0x2201154 VA: 0x2201154 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x220115C Offset: 0x220115C VA: 0x220115C Slot: 43
	public virtual int get_K3() { }

	// RVA: 0x2201164 Offset: 0x2201164 VA: 0x2201164
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571R1Point : AbstractF2mPoint // TypeDefIndex: 5114
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2200E58 Offset: 0x2200E58 VA: 0x2200E58
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2200FBC Offset: 0x2200FBC VA: 0x2200FBC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2201128 Offset: 0x2201128 VA: 0x2201128
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x22012E8 Offset: 0x22012E8 VA: 0x22012E8 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2201388 Offset: 0x2201388 VA: 0x2201388 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x22014A8 Offset: 0x22014A8 VA: 0x22014A8 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2201538 Offset: 0x2201538 VA: 0x2201538 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2201DEC Offset: 0x2201DEC VA: 0x2201DEC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x22021A0 Offset: 0x22021A0 VA: 0x22021A0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2202778 Offset: 0x2202778 VA: 0x2202778 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class ECAlgorithms // TypeDefIndex: 5115
{
	// Methods

	// RVA: 0x22028FC Offset: 0x22028FC VA: 0x22028FC
	public void .ctor() { }

	// RVA: 0x2202904 Offset: 0x2202904 VA: 0x2202904
	public static bool IsF2mCurve(ECCurve c) { }

	// RVA: 0x220293C Offset: 0x220293C VA: 0x220293C
	public static bool IsF2mField(IFiniteField field) { }

	// RVA: 0x2202AEC Offset: 0x2202AEC VA: 0x2202AEC
	public static bool IsFpCurve(ECCurve c) { }

	// RVA: 0x2202B24 Offset: 0x2202B24 VA: 0x2202B24
	public static bool IsFpField(IFiniteField field) { }

	// RVA: 0x2202BE4 Offset: 0x2202BE4 VA: 0x2202BE4
	public static ECPoint SumOfMultiplies(ECPoint[] ps, BigInteger[] ks) { }

	// RVA: 0x2202E9C Offset: 0x2202E9C VA: 0x2202E9C
	public static ECPoint SumOfTwoMultiplies(ECPoint P, BigInteger a, ECPoint Q, BigInteger b) { }

	// RVA: 0x2203EE0 Offset: 0x2203EE0 VA: 0x2203EE0
	public static ECPoint ShamirsTrick(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x220318C Offset: 0x220318C VA: 0x220318C
	public static ECPoint ImportPoint(ECCurve c, ECPoint p) { }

	// RVA: 0x22046B0 Offset: 0x22046B0 VA: 0x22046B0
	public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len) { }

	// RVA: 0x22046B8 Offset: 0x22046B8 VA: 0x22046B8
	public static void MontgomeryTrick(ECFieldElement[] zs, int off, int len, ECFieldElement scale) { }

	// RVA: 0x2204AE4 Offset: 0x2204AE4 VA: 0x2204AE4
	public static ECPoint ReferenceMultiply(ECPoint p, BigInteger k) { }

	// RVA: 0x2203838 Offset: 0x2203838 VA: 0x2203838
	public static ECPoint ValidatePoint(ECPoint p) { }

	// RVA: 0x2203F44 Offset: 0x2203F44 VA: 0x2203F44
	internal static ECPoint ImplShamirsTrickJsf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x2203C14 Offset: 0x2203C14 VA: 0x2203C14
	internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPoint Q, BigInteger l) { }

	// RVA: 0x220502C Offset: 0x220502C VA: 0x220502C
	internal static ECPoint ImplShamirsTrickWNaf(ECPoint P, BigInteger k, ECPointMap pointMapQ, BigInteger l) { }

	// RVA: 0x2204D00 Offset: 0x2204D00 VA: 0x2204D00
	private static ECPoint ImplShamirsTrickWNaf(ECPoint[] preCompP, ECPoint[] preCompNegP, byte[] wnafP, ECPoint[] preCompQ, ECPoint[] preCompNegQ, byte[] wnafQ) { }

	// RVA: 0x22038E4 Offset: 0x22038E4 VA: 0x22038E4
	internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, BigInteger[] ks) { }

	// RVA: 0x2203278 Offset: 0x2203278 VA: 0x2203278
	internal static ECPoint ImplSumOfMultipliesGlv(ECPoint[] ps, BigInteger[] ks, GlvEndomorphism glvEndomorphism) { }

	// RVA: 0x2205748 Offset: 0x2205748 VA: 0x2205748
	internal static ECPoint ImplSumOfMultiplies(ECPoint[] ps, ECPointMap pointMap, BigInteger[] ks) { }

	// RVA: 0x22052E4 Offset: 0x22052E4 VA: 0x22052E4
	private static ECPoint ImplSumOfMultiplies(bool[] negs, WNafPreCompInfo[] infos, byte[][] wnafs) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECCurve // TypeDefIndex: 5116
{
	// Fields
	public const int COORD_AFFINE = 0;
	public const int COORD_HOMOGENEOUS = 1;
	public const int COORD_JACOBIAN = 2;
	public const int COORD_JACOBIAN_CHUDNOVSKY = 3;
	public const int COORD_JACOBIAN_MODIFIED = 4;
	public const int COORD_LAMBDA_AFFINE = 5;
	public const int COORD_LAMBDA_PROJECTIVE = 6;
	public const int COORD_SKEWED = 7;
	protected readonly IFiniteField m_field; // 0x10
	protected ECFieldElement m_a; // 0x18
	protected ECFieldElement m_b; // 0x20
	protected BigInteger m_order; // 0x28
	protected BigInteger m_cofactor; // 0x30
	protected int m_coord; // 0x38
	protected ECEndomorphism m_endomorphism; // 0x40
	protected ECMultiplier m_multiplier; // 0x48

	// Properties
	public abstract int FieldSize { get; }
	public abstract ECPoint Infinity { get; }
	public virtual IFiniteField Field { get; }
	public virtual ECFieldElement A { get; }
	public virtual ECFieldElement B { get; }
	public virtual BigInteger Order { get; }
	public virtual BigInteger Cofactor { get; }
	public virtual int CoordinateSystem { get; }

	// Methods

	// RVA: 0x2205C60 Offset: 0x2205C60 VA: 0x2205C60
	protected void .ctor(IFiniteField field) { }

	// RVA: 0x2205C8C Offset: 0x2205C8C VA: 0x2205C8C
	public static int[] GetAllCoordinateSystems() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_FieldSize();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract ECFieldElement FromBigInteger(BigInteger x);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool IsValidFieldElement(BigInteger x);

	// RVA: 0x2205CF8 Offset: 0x2205CF8 VA: 0x2205CF8 Slot: 7
	public virtual ECCurve.Config Configure() { }

	// RVA: 0x2205DCC Offset: 0x2205DCC VA: 0x2205DCC Slot: 8
	public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y) { }

	// RVA: 0x2205E94 Offset: 0x2205E94 VA: 0x2205E94 Slot: 9
	public virtual ECPoint ValidatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: 0x2205F6C Offset: 0x2205F6C VA: 0x2205F6C Slot: 10
	public virtual ECPoint CreatePoint(BigInteger x, BigInteger y) { }

	// RVA: 0x2205F7C Offset: 0x2205F7C VA: 0x2205F7C Slot: 11
	public virtual ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: -1 Offset: -1 Slot: 12
	protected abstract ECCurve CloneCurve();

	// RVA: -1 Offset: -1 Slot: 13
	protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression);

	// RVA: -1 Offset: -1 Slot: 14
	protected internal abstract ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression);

	// RVA: 0x2205FE4 Offset: 0x2205FE4 VA: 0x2205FE4 Slot: 15
	protected virtual ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2206090 Offset: 0x2206090 VA: 0x2206090 Slot: 16
	public virtual bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x220609C Offset: 0x220609C VA: 0x220609C Slot: 17
	public virtual PreCompInfo GetPreCompInfo(ECPoint point, string name) { }

	// RVA: 0x2206278 Offset: 0x2206278 VA: 0x2206278 Slot: 18
	public virtual void SetPreCompInfo(ECPoint point, string name, PreCompInfo preCompInfo) { }

	// RVA: 0x2206434 Offset: 0x2206434 VA: 0x2206434 Slot: 19
	public virtual ECPoint ImportPoint(ECPoint p) { }

	// RVA: 0x2206558 Offset: 0x2206558 VA: 0x2206558 Slot: 20
	public virtual void NormalizeAll(ECPoint[] points) { }

	// RVA: 0x22065A4 Offset: 0x22065A4 VA: 0x22065A4 Slot: 21
	public virtual void NormalizeAll(ECPoint[] points, int off, int len, ECFieldElement iso) { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract ECPoint get_Infinity();

	// RVA: 0x220693C Offset: 0x220693C VA: 0x220693C Slot: 23
	public virtual IFiniteField get_Field() { }

	// RVA: 0x2206944 Offset: 0x2206944 VA: 0x2206944 Slot: 24
	public virtual ECFieldElement get_A() { }

	// RVA: 0x220694C Offset: 0x220694C VA: 0x220694C Slot: 25
	public virtual ECFieldElement get_B() { }

	// RVA: 0x2206954 Offset: 0x2206954 VA: 0x2206954 Slot: 26
	public virtual BigInteger get_Order() { }

	// RVA: 0x220695C Offset: 0x220695C VA: 0x220695C Slot: 27
	public virtual BigInteger get_Cofactor() { }

	// RVA: 0x2206964 Offset: 0x2206964 VA: 0x2206964 Slot: 28
	public virtual int get_CoordinateSystem() { }

	// RVA: 0x220696C Offset: 0x220696C VA: 0x220696C Slot: 29
	protected virtual void CheckPoint(ECPoint point) { }

	// RVA: 0x2206A24 Offset: 0x2206A24 VA: 0x2206A24 Slot: 30
	protected virtual void CheckPoints(ECPoint[] points) { }

	// RVA: 0x2206A6C Offset: 0x2206A6C VA: 0x2206A6C Slot: 31
	protected virtual void CheckPoints(ECPoint[] points, int off, int len) { }

	// RVA: 0x2206BE8 Offset: 0x2206BE8 VA: 0x2206BE8 Slot: 32
	public virtual bool Equals(ECCurve other) { }

	// RVA: 0x2206D9C Offset: 0x2206D9C VA: 0x2206D9C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2206E38 Offset: 0x2206E38 VA: 0x2206E38 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 33
	protected abstract ECPoint DecompressPoint(int yTilde, BigInteger X1);

	// RVA: 0x2206F48 Offset: 0x2206F48 VA: 0x2206F48 Slot: 34
	public virtual ECEndomorphism GetEndomorphism() { }

	// RVA: 0x2206F50 Offset: 0x2206F50 VA: 0x2206F50 Slot: 35
	public virtual ECMultiplier GetMultiplier() { }

	// RVA: 0x2206FE8 Offset: 0x2206FE8 VA: 0x2206FE8 Slot: 36
	public virtual ECPoint DecodePoint(byte[] encoded) { }
}

// Namespace: 
public class ECCurve.Config // TypeDefIndex: 5117
{
	// Fields
	protected ECCurve outer; // 0x10
	protected int coord; // 0x18
	protected ECEndomorphism endomorphism; // 0x20
	protected ECMultiplier multiplier; // 0x28

	// Methods

	// RVA: 0x2205D7C Offset: 0x2205D7C VA: 0x2205D7C
	internal void .ctor(ECCurve outer, int coord, ECEndomorphism endomorphism, ECMultiplier multiplier) { }

	// RVA: 0x2207518 Offset: 0x2207518 VA: 0x2207518
	public ECCurve.Config SetCoordinateSystem(int coord) { }

	// RVA: 0x2207520 Offset: 0x2207520 VA: 0x2207520
	public ECCurve.Config SetEndomorphism(ECEndomorphism endomorphism) { }

	// RVA: 0x2207528 Offset: 0x2207528 VA: 0x2207528
	public ECCurve.Config SetMultiplier(ECMultiplier multiplier) { }

	// RVA: 0x2207530 Offset: 0x2207530 VA: 0x2207530
	public ECCurve Create() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractFpCurve : ECCurve // TypeDefIndex: 5118
{
	// Methods

	// RVA: 0x24EB764 Offset: 0x24EB764 VA: 0x24EB764
	protected void .ctor(BigInteger q) { }

	// RVA: 0x24EB7E8 Offset: 0x24EB7E8 VA: 0x24EB7E8 Slot: 6
	public override bool IsValidFieldElement(BigInteger x) { }

	// RVA: 0x24EB8EC Offset: 0x24EB8EC VA: 0x24EB8EC Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpCurve : AbstractFpCurve // TypeDefIndex: 5119
{
	// Fields
	private const int FP_DEFAULT_COORDS = 4;
	protected readonly BigInteger m_q; // 0x50
	protected readonly BigInteger m_r; // 0x58
	protected readonly FpPoint m_infinity; // 0x60

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x220DEF8 Offset: 0x220DEF8 VA: 0x220DEF8
	public void .ctor(BigInteger q, BigInteger a, BigInteger b) { }

	// RVA: 0x220DF04 Offset: 0x220DF04 VA: 0x220DF04
	public void .ctor(BigInteger q, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x220E1AC Offset: 0x220E1AC VA: 0x220E1AC
	protected void .ctor(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b) { }

	// RVA: 0x220E1B8 Offset: 0x220E1B8 VA: 0x220E1B8
	protected void .ctor(BigInteger q, BigInteger r, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x220E278 Offset: 0x220E278 VA: 0x220E278 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x220E314 Offset: 0x220E314 VA: 0x220E314 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x220E338 Offset: 0x220E338 VA: 0x220E338 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x220E340 Offset: 0x220E340 VA: 0x220E340 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x220E348 Offset: 0x220E348 VA: 0x220E348 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x220E378 Offset: 0x220E378 VA: 0x220E378 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x220E4DC Offset: 0x220E4DC VA: 0x220E4DC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x220E63C Offset: 0x220E63C VA: 0x220E63C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x220E6DC Offset: 0x220E6DC VA: 0x220E6DC Slot: 19
	public override ECPoint ImportPoint(ECPoint p) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractF2mCurve : ECCurve // TypeDefIndex: 5120
{
	// Fields
	private BigInteger[] si; // 0x50

	// Properties
	public virtual bool IsKoblitz { get; }

	// Methods

	// RVA: 0x24E98F0 Offset: 0x24E98F0 VA: 0x24E98F0
	protected void .ctor(int m, int k1, int k2, int k3) { }

	// RVA: 0x24E9B68 Offset: 0x24E9B68 VA: 0x24E9B68
	public static BigInteger Inverse(int m, int[] ks, BigInteger x) { }

	// RVA: 0x24E992C Offset: 0x24E992C VA: 0x24E992C
	private static IFiniteField BuildField(int m, int k1, int k2, int k3) { }

	// RVA: 0x24E9C0C Offset: 0x24E9C0C VA: 0x24E9C0C Slot: 6
	public override bool IsValidFieldElement(BigInteger x) { }

	// RVA: 0x24E9C70 Offset: 0x24E9C70 VA: 0x24E9C70 Slot: 11
	public override ECPoint CreatePoint(BigInteger x, BigInteger y, bool withCompression) { }

	// RVA: 0x24E9E28 Offset: 0x24E9E28 VA: 0x24E9E28 Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }

	// RVA: 0x24EA0B0 Offset: 0x24EA0B0 VA: 0x24EA0B0
	private ECFieldElement SolveQuadradicEquation(ECFieldElement beta) { }

	// RVA: 0x24EA30C Offset: 0x24EA30C VA: 0x24EA30C Slot: 37
	internal virtual BigInteger[] GetSi() { }

	// RVA: 0x24EA3E4 Offset: 0x24EA3E4 VA: 0x24EA3E4 Slot: 38
	public virtual bool get_IsKoblitz() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mCurve : AbstractF2mCurve // TypeDefIndex: 5121
{
	// Fields
	private const int F2M_DEFAULT_COORDS = 6;
	private readonly int m; // 0x58
	private readonly int k1; // 0x5C
	private readonly int k2; // 0x60
	private readonly int k3; // 0x64
	protected readonly F2mPoint m_infinity; // 0x68

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public int M { get; }
	public int K1 { get; }
	public int K2 { get; }
	public int K3 { get; }
	[ObsoleteAttribute] // RVA: 0xCDE868 Offset: 0xCDE868 VA: 0xCDE868
	public BigInteger N { get; }
	[ObsoleteAttribute] // RVA: 0xCDE8A0 Offset: 0xCDE8A0 VA: 0xCDE8A0
	public BigInteger H { get; }

	// Methods

	// RVA: 0x2209B8C Offset: 0x2209B8C VA: 0x2209B8C
	public void .ctor(int m, int k, BigInteger a, BigInteger b) { }

	// RVA: 0x2209D88 Offset: 0x2209D88 VA: 0x2209D88
	public void .ctor(int m, int k, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x2209DC8 Offset: 0x2209DC8 VA: 0x2209DC8
	public void .ctor(int m, int k1, int k2, int k3, BigInteger a, BigInteger b) { }

	// RVA: 0x2209BC8 Offset: 0x2209BC8 VA: 0x2209BC8
	public void .ctor(int m, int k1, int k2, int k3, BigInteger a, BigInteger b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x2209DF4 Offset: 0x2209DF4 VA: 0x2209DF4
	protected void .ctor(int m, int k1, int k2, int k3, ECFieldElement a, ECFieldElement b, BigInteger order, BigInteger cofactor) { }

	// RVA: 0x2209ED4 Offset: 0x2209ED4 VA: 0x2209ED4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2209F88 Offset: 0x2209F88 VA: 0x2209F88 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2209FA4 Offset: 0x2209FA4 VA: 0x2209FA4 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x220A02C Offset: 0x220A02C VA: 0x220A02C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x220A034 Offset: 0x220A034 VA: 0x220A034 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x220A314 Offset: 0x220A314 VA: 0x220A314 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x220A4B8 Offset: 0x220A4B8 VA: 0x220A4B8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x220A558 Offset: 0x220A558 VA: 0x220A558 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x220A560 Offset: 0x220A560 VA: 0x220A560
	public int get_M() { }

	// RVA: 0x220A568 Offset: 0x220A568 VA: 0x220A568
	public bool IsTrinomial() { }

	// RVA: 0x220A588 Offset: 0x220A588 VA: 0x220A588
	public int get_K1() { }

	// RVA: 0x220A590 Offset: 0x220A590 VA: 0x220A590
	public int get_K2() { }

	// RVA: 0x220A598 Offset: 0x220A598 VA: 0x220A598
	public int get_K3() { }

	// RVA: 0x220A5A0 Offset: 0x220A5A0 VA: 0x220A5A0
	public BigInteger get_N() { }

	// RVA: 0x220A5A8 Offset: 0x220A5A8 VA: 0x220A5A8
	public BigInteger get_H() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECFieldElement // TypeDefIndex: 5122
{
	// Properties
	public abstract string FieldName { get; }
	public abstract int FieldSize { get; }
	public virtual int BitLength { get; }
	public virtual bool IsOne { get; }
	public virtual bool IsZero { get; }

	// Methods

	// RVA: 0x21FE1C0 Offset: 0x21FE1C0 VA: 0x21FE1C0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract BigInteger ToBigInteger();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_FieldName();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int get_FieldSize();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract ECFieldElement Add(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract ECFieldElement AddOne();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract ECFieldElement Subtract(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract ECFieldElement Multiply(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract ECFieldElement Divide(ECFieldElement b);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ECFieldElement Negate();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract ECFieldElement Square();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract ECFieldElement Invert();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract ECFieldElement Sqrt();

	// RVA: 0x220768C Offset: 0x220768C VA: 0x220768C Slot: 16
	public virtual int get_BitLength() { }

	// RVA: 0x22076C4 Offset: 0x22076C4 VA: 0x22076C4 Slot: 17
	public virtual bool get_IsOne() { }

	// RVA: 0x22076EC Offset: 0x22076EC VA: 0x22076EC Slot: 18
	public virtual bool get_IsZero() { }

	// RVA: 0x2207730 Offset: 0x2207730 VA: 0x2207730 Slot: 19
	public virtual ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x22077A8 Offset: 0x22077A8 VA: 0x22077A8 Slot: 20
	public virtual ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2207820 Offset: 0x2207820 VA: 0x2207820 Slot: 21
	public virtual ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220789C Offset: 0x220789C VA: 0x220789C Slot: 22
	public virtual ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2207918 Offset: 0x2207918 VA: 0x2207918 Slot: 23
	public virtual ECFieldElement SquarePow(int pow) { }

	// RVA: 0x220796C Offset: 0x220796C VA: 0x220796C Slot: 24
	public virtual bool TestBitZero() { }

	// RVA: 0x22079A8 Offset: 0x22079A8 VA: 0x22079A8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2207A44 Offset: 0x2207A44 VA: 0x2207A44 Slot: 25
	public virtual bool Equals(ECFieldElement other) { }

	// RVA: 0x2207AC4 Offset: 0x2207AC4 VA: 0x2207AC4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2207B00 Offset: 0x2207B00 VA: 0x2207B00 Slot: 3
	public override string ToString() { }

	// RVA: 0x2207B3C Offset: 0x2207B3C VA: 0x2207B3C Slot: 26
	public virtual byte[] GetEncoded() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpFieldElement : ECFieldElement // TypeDefIndex: 5123
{
	// Fields
	private readonly BigInteger q; // 0x10
	private readonly BigInteger r; // 0x18
	private readonly BigInteger x; // 0x20

	// Properties
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public BigInteger Q { get; }

	// Methods

	// RVA: 0x220E938 Offset: 0x220E938 VA: 0x220E938
	public void .ctor(BigInteger q, BigInteger x) { }

	// RVA: 0x220E3F4 Offset: 0x220E3F4 VA: 0x220E3F4
	internal void .ctor(BigInteger q, BigInteger r, BigInteger x) { }

	// RVA: 0x220DFF8 Offset: 0x220DFF8 VA: 0x220DFF8
	internal static BigInteger CalculateResidue(BigInteger p) { }

	// RVA: 0x220E97C Offset: 0x220E97C VA: 0x220E97C Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x220E984 Offset: 0x220E984 VA: 0x220E984 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x220E9CC Offset: 0x220E9CC VA: 0x220E9CC Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x220E9FC Offset: 0x220E9FC VA: 0x220E9FC
	public BigInteger get_Q() { }

	// RVA: 0x220EA04 Offset: 0x220EA04 VA: 0x220EA04 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x220EAC8 Offset: 0x220EAC8 VA: 0x220EAC8 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x220EBD4 Offset: 0x220EBD4 VA: 0x220EBD4 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x220EC98 Offset: 0x220EC98 VA: 0x220EC98 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x220ED5C Offset: 0x220ED5C VA: 0x220ED5C Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220EEC4 Offset: 0x220EEC4 VA: 0x220EEC4 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220F0F8 Offset: 0x220F0F8 VA: 0x220F0F8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x220F1D4 Offset: 0x220F1D4 VA: 0x220F1D4 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x220F290 Offset: 0x220F290 VA: 0x220F290 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x220F328 Offset: 0x220F328 VA: 0x220F328 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220F46C Offset: 0x220F46C VA: 0x220F46C Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220F674 Offset: 0x220F674 VA: 0x220F674 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x220F708 Offset: 0x220F708 VA: 0x220F708 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x220FEA0 Offset: 0x220FEA0 VA: 0x220FEA0
	private ECFieldElement CheckSqrt(ECFieldElement z) { }

	// RVA: 0x220FF10 Offset: 0x220FF10 VA: 0x220FF10
	private BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k) { }

	// RVA: 0x221059C Offset: 0x221059C VA: 0x221059C Slot: 27
	protected virtual BigInteger ModAdd(BigInteger x1, BigInteger x2) { }

	// RVA: 0x2210638 Offset: 0x2210638 VA: 0x2210638 Slot: 28
	protected virtual BigInteger ModDouble(BigInteger x) { }

	// RVA: 0x22106D0 Offset: 0x22106D0 VA: 0x22106D0 Slot: 29
	protected virtual BigInteger ModHalf(BigInteger x) { }

	// RVA: 0x221074C Offset: 0x221074C VA: 0x221074C Slot: 30
	protected virtual BigInteger ModHalfAbs(BigInteger x) { }

	// RVA: 0x22107C8 Offset: 0x22107C8 VA: 0x22107C8 Slot: 31
	protected virtual BigInteger ModInverse(BigInteger x) { }

	// RVA: 0x22108A8 Offset: 0x22108A8 VA: 0x22108A8 Slot: 32
	protected virtual BigInteger ModMult(BigInteger x1, BigInteger x2) { }

	// RVA: 0x2210904 Offset: 0x2210904 VA: 0x2210904 Slot: 33
	protected virtual BigInteger ModReduce(BigInteger x) { }

	// RVA: 0x2210DA4 Offset: 0x2210DA4 VA: 0x2210DA4 Slot: 34
	protected virtual BigInteger ModSubtract(BigInteger x1, BigInteger x2) { }

	// RVA: 0x2210E38 Offset: 0x2210E38 VA: 0x2210E38 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2210EF4 Offset: 0x2210EF4 VA: 0x2210EF4 Slot: 35
	public virtual bool Equals(FpFieldElement other) { }

	// RVA: 0x2210F70 Offset: 0x2210F70 VA: 0x2210F70 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mFieldElement : ECFieldElement // TypeDefIndex: 5124
{
	// Fields
	public const int Gnb = 1;
	public const int Tpb = 2;
	public const int Ppb = 3;
	private int representation; // 0x10
	private int m; // 0x14
	private int[] ks; // 0x18
	private LongArray x; // 0x20

	// Properties
	public override int BitLength { get; }
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public int Representation { get; }
	public int M { get; }
	public int K1 { get; }
	public int K2 { get; }
	public int K3 { get; }

	// Methods

	// RVA: 0x220A0C4 Offset: 0x220A0C4 VA: 0x220A0C4
	public void .ctor(int m, int k1, int k2, int k3, BigInteger x) { }

	// RVA: 0x220A5B0 Offset: 0x220A5B0 VA: 0x220A5B0
	public void .ctor(int m, int k, BigInteger x) { }

	// RVA: 0x220A5C4 Offset: 0x220A5C4 VA: 0x220A5C4
	private void .ctor(int m, int[] ks, LongArray x) { }

	// RVA: 0x220A624 Offset: 0x220A624 VA: 0x220A624 Slot: 16
	public override int get_BitLength() { }

	// RVA: 0x220A654 Offset: 0x220A654 VA: 0x220A654 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x220A684 Offset: 0x220A684 VA: 0x220A684 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x220A6B4 Offset: 0x220A6B4 VA: 0x220A6B4 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x220A6E4 Offset: 0x220A6E4 VA: 0x220A6E4 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x220A714 Offset: 0x220A714 VA: 0x220A714 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x220A75C Offset: 0x220A75C VA: 0x220A75C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x220A764 Offset: 0x220A764 VA: 0x220A764
