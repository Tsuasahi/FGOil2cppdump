	private void UpdateTwistEmulation() { }

	// RVA: 0x1DEECC0 Offset: 0x1DEECC0 VA: 0x1DEECC0 Slot: 4
	public override int get_MaxSimultaneousFingers() { }

	// RVA: 0x1DEECC8 Offset: 0x1DEECC8 VA: 0x1DEECC8 Slot: 5
	public override void GetInputState(int fingerIndex, out bool down, out Vector2 position) { }
}

// Namespace: 
public class FGTouchInputProvider : FGInputProvider // TypeDefIndex: 4202
{
	// Fields
	public int maxTouches; // 0x18
	public bool fixAndroidTouchIdBug; // 0x1C
	private int touchIdOffset; // 0x20
	private Touch nullTouch; // 0x24
	private int[] finger2touchMap; // 0x68

	// Properties
	public override int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0x1DEEE04 Offset: 0x1DEEE04 VA: 0x1DEEE04
	public void .ctor() { }

	// RVA: 0x1DEEE48 Offset: 0x1DEEE48 VA: 0x1DEEE48
	private void Start() { }

	// RVA: 0x1DEEEA0 Offset: 0x1DEEEA0 VA: 0x1DEEEA0
	private void Update() { }

	// RVA: 0x1DEEEA4 Offset: 0x1DEEEA4 VA: 0x1DEEEA4
	private void UpdateFingerTouchMap() { }

	// RVA: 0x1DEF090 Offset: 0x1DEF090 VA: 0x1DEF090
	private bool HasValidTouch(int fingerIndex) { }

	// RVA: 0x1DEF0EC Offset: 0x1DEF0EC VA: 0x1DEF0EC
	private Touch GetTouch(int fingerIndex) { }

	// RVA: 0x1DEF1A4 Offset: 0x1DEF1A4 VA: 0x1DEF1A4 Slot: 4
	public override int get_MaxSimultaneousFingers() { }

	// RVA: 0x1DEF1AC Offset: 0x1DEF1AC VA: 0x1DEF1AC Slot: 5
	public override void GetInputState(int fingerIndex, out bool down, out Vector2 position) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F924 Offset: 0xC1F924 VA: 0xC1F924
[RequireComponent] // RVA: 0xC1F924 Offset: 0xC1F924 VA: 0xC1F924
public class TBDragView : MonoBehaviour // TypeDefIndex: 4203
{
	// Fields
	public bool allowUserInput; // 0x18
	public float sensitivity; // 0x1C
	public float dragAcceleration; // 0x20
	public float dragDeceleration; // 0x24
	public bool reverseControls; // 0x28
	public float minPitchAngle; // 0x2C
	public float maxPitchAngle; // 0x30
	public float idealRotationSmoothingSpeed; // 0x34
	private Transform cachedTransform; // 0x38
	private Vector2 angularVelocity; // 0x40
	private Quaternion idealRotation; // 0x48
	private bool useAngularVelocity; // 0x58
	private DragGesture dragGesture; // 0x60

	// Properties
	public bool Dragging { get; }
	public Quaternion IdealRotation { get; set; }

	// Methods

	// RVA: 0x28FD3BC Offset: 0x28FD3BC VA: 0x28FD3BC
	public void .ctor() { }

	// RVA: 0x28FD460 Offset: 0x28FD460 VA: 0x28FD460
	private void Awake() { }

	// RVA: 0x28FD488 Offset: 0x28FD488 VA: 0x28FD488
	private void Start() { }

	// RVA: 0x28FD564 Offset: 0x28FD564 VA: 0x28FD564
	public bool get_Dragging() { }

	// RVA: 0x28FD574 Offset: 0x28FD574 VA: 0x28FD574
	private void OnDrag(DragGesture gesture) { }

	// RVA: 0x28FD5B8 Offset: 0x28FD5B8 VA: 0x28FD5B8
	private void Update() { }

	// RVA: 0x28FD944 Offset: 0x28FD944 VA: 0x28FD944
	private static float NormalizePitch(float angle) { }

	// RVA: 0x28FD964 Offset: 0x28FD964 VA: 0x28FD964
	public Quaternion get_IdealRotation() { }

	// RVA: 0x28FD554 Offset: 0x28FD554 VA: 0x28FD554
	public void set_IdealRotation(Quaternion value) { }

	// RVA: 0x28FD970 Offset: 0x28FD970 VA: 0x28FD970
	public void LookAt(Vector3 pos) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F9AC Offset: 0xC1F9AC VA: 0xC1F9AC
[RequireComponent] // RVA: 0xC1F9AC Offset: 0xC1F9AC VA: 0xC1F9AC
public class TBLookAtTap : MonoBehaviour // TypeDefIndex: 4204
{
	// Fields
	private TBDragView dragView; // 0x18

	// Methods

	// RVA: 0x28FDD80 Offset: 0x28FDD80 VA: 0x28FDD80
	public void .ctor() { }

	// RVA: 0x28FDD88 Offset: 0x28FDD88 VA: 0x28FDD88
	private void Awake() { }

	// RVA: 0x28FDDE0 Offset: 0x28FDDE0 VA: 0x28FDDE0
	private void Start() { }

	// RVA: 0x28FDE84 Offset: 0x28FDE84 VA: 0x28FDE84
	private void OnTap(TapGesture gesture) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FA34 Offset: 0xC1FA34 VA: 0xC1FA34
public class TBOrbit : MonoBehaviour // TypeDefIndex: 4205
{
	// Fields
	public Transform target; // 0x18
	public float initialDistance; // 0x20
	public float minDistance; // 0x24
	public float maxDistance; // 0x28
	public float yawSensitivity; // 0x2C
	public float pitchSensitivity; // 0x30
	public bool clampYawAngle; // 0x34
	public float minYaw; // 0x38
	public float maxYaw; // 0x3C
	public bool clampPitchAngle; // 0x40
	public float minPitch; // 0x44
	public float maxPitch; // 0x48
	public bool allowPinchZoom; // 0x4C
	public float pinchZoomSensitivity; // 0x50
	public bool smoothMotion; // 0x54
	public float smoothZoomSpeed; // 0x58
	public float smoothOrbitSpeed; // 0x5C
	public bool allowPanning; // 0x60
	public bool invertPanningDirections; // 0x61
	public float panningSensitivity; // 0x64
	public Transform panningPlane; // 0x68
	public bool smoothPanning; // 0x70
	public float smoothPanningSpeed; // 0x74
	public LayerMask collisionLayerMask; // 0x78
	private float distance; // 0x7C
	private float yaw; // 0x80
	private float pitch; // 0x84
	private float idealDistance; // 0x88
	private float idealYaw; // 0x8C
	private float idealPitch; // 0x90
	private Vector3 idealPanOffset; // 0x94
	private Vector3 panOffset; // 0xA0
	private PinchRecognizer pinchRecognizer; // 0xB0
	private float nextDragTime; // 0xB8
	public bool OnlyRotateWhenDragStartsOnObject; // 0xBC
	[CompilerGeneratedAttribute] // RVA: 0xC227A0 Offset: 0xC227A0 VA: 0xC227A0
	private static Predicate<GestureRecognizer> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC227B0 Offset: 0xC227B0 VA: 0xC227B0
	private static Predicate<GestureRecognizer> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC227C0 Offset: 0xC227C0 VA: 0xC227C0
	private static Predicate<GestureRecognizer> <>f__am$cache2; // 0x10

	// Properties
	public float Distance { get; }
	public float IdealDistance { get; set; }
	public float Yaw { get; }
	public float IdealYaw { get; set; }
	public float Pitch { get; }
	public float IdealPitch { get; set; }
	public Vector3 IdealPanOffset { get; set; }
	public Vector3 PanOffset { get; }

	// Methods

	// RVA: 0x28FE06C Offset: 0x28FE06C VA: 0x28FE06C
	public void .ctor() { }

	// RVA: 0x28FE160 Offset: 0x28FE160 VA: 0x28FE160
	public float get_Distance() { }

	// RVA: 0x28FE168 Offset: 0x28FE168 VA: 0x28FE168
	public float get_IdealDistance() { }

	// RVA: 0x28FE170 Offset: 0x28FE170 VA: 0x28FE170
	public void set_IdealDistance(float value) { }

	// RVA: 0x28FE200 Offset: 0x28FE200 VA: 0x28FE200
	public float get_Yaw() { }

	// RVA: 0x28FE208 Offset: 0x28FE208 VA: 0x28FE208
	public float get_IdealYaw() { }

	// RVA: 0x28FE210 Offset: 0x28FE210 VA: 0x28FE210
	public void set_IdealYaw(float value) { }

	// RVA: 0x28FE2F0 Offset: 0x28FE2F0 VA: 0x28FE2F0
	public float get_Pitch() { }

	// RVA: 0x28FE2F8 Offset: 0x28FE2F8 VA: 0x28FE2F8
	public float get_IdealPitch() { }

	// RVA: 0x28FE300 Offset: 0x28FE300 VA: 0x28FE300
	public void set_IdealPitch(float value) { }

	// RVA: 0x28FE330 Offset: 0x28FE330 VA: 0x28FE330
	public Vector3 get_IdealPanOffset() { }

	// RVA: 0x28FE33C Offset: 0x28FE33C VA: 0x28FE33C
	public void set_IdealPanOffset(Vector3 value) { }

	// RVA: 0x28FE348 Offset: 0x28FE348 VA: 0x28FE348
	public Vector3 get_PanOffset() { }

	// RVA: 0x28FE354 Offset: 0x28FE354 VA: 0x28FE354
	private void InstallGestureRecognizers() { }

	// RVA: 0x28FE828 Offset: 0x28FE828 VA: 0x28FE828
	private void Start() { }

	// RVA: 0x28FEE94 Offset: 0x28FEE94 VA: 0x28FEE94
	private void OnDrag(DragGesture gesture) { }

	// RVA: 0x28FF174 Offset: 0x28FF174 VA: 0x28FF174
	private void OnPinch(PinchGesture gesture) { }

	// RVA: 0x28FF1F0 Offset: 0x28FF1F0 VA: 0x28FF1F0
	private void OnTwoFingerDrag(DragGesture gesture) { }

	// RVA: 0x28FE9BC Offset: 0x28FE9BC VA: 0x28FE9BC
	private void Apply() { }

	// RVA: 0x28FF444 Offset: 0x28FF444 VA: 0x28FF444
	private void LateUpdate() { }

	// RVA: 0x28FE240 Offset: 0x28FE240 VA: 0x28FE240
	private static float ClampAngle(float angle, float min, float max) { }

	// RVA: 0x28FF448 Offset: 0x28FF448 VA: 0x28FF448
	public void ResetPanning() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24450 Offset: 0xC24450 VA: 0xC24450
	// RVA: 0x28FF4B8 Offset: 0x28FF4B8 VA: 0x28FF4B8
	private static bool <InstallGestureRecognizers>m__0(GestureRecognizer r) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24460 Offset: 0xC24460 VA: 0xC24460
	// RVA: 0x28FF53C Offset: 0x28FF53C VA: 0x28FF53C
	private static bool <InstallGestureRecognizers>m__1(GestureRecognizer r) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24470 Offset: 0xC24470 VA: 0xC24470
	// RVA: 0x28FF5C0 Offset: 0x28FF5C0 VA: 0x28FF5C0
	private static bool <InstallGestureRecognizers>m__2(GestureRecognizer r) { }
}

// Namespace: 
public enum TBOrbit.PanMode // TypeDefIndex: 4206
{
	// Fields
	public int value__; // 0x0
	public const TBOrbit.PanMode Disabled = 0;
	public const TBOrbit.PanMode OneFinger = 1;
	public const TBOrbit.PanMode TwoFingers = 2;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FA6C Offset: 0xC1FA6C VA: 0xC1FA6C
[RequireComponent] // RVA: 0xC1FA6C Offset: 0xC1FA6C VA: 0xC1FA6C
public class TBPan : MonoBehaviour // TypeDefIndex: 4207
{
	// Fields
	private Transform cachedTransform; // 0x18
	public float sensitivity; // 0x20
	public float smoothSpeed; // 0x24
	public BoxCollider moveArea; // 0x28
	private Vector3 idealPos; // 0x30
	private DragGesture dragGesture; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC227D0 Offset: 0xC227D0 VA: 0xC227D0
	[DebuggerBrowsableAttribute] // RVA: 0xC227D0 Offset: 0xC227D0 VA: 0xC227D0
	private TBPan.PanEventHandler OnPan; // 0x48

	// Methods

	// RVA: 0x28FF644 Offset: 0x28FF644 VA: 0x28FF644
	public void .ctor() { }

	// RVA: 0x28FF658 Offset: 0x28FF658 VA: 0x28FF658
	public void add_OnPan(TBPan.PanEventHandler value) { }

	// RVA: 0x28FF744 Offset: 0x28FF744 VA: 0x28FF744
	public void remove_OnPan(TBPan.PanEventHandler value) { }

	// RVA: 0x28FF830 Offset: 0x28FF830 VA: 0x28FF830
	private void Awake() { }

	// RVA: 0x28FF858 Offset: 0x28FF858 VA: 0x28FF858
	private void Start() { }

	// RVA: 0x28FF920 Offset: 0x28FF920 VA: 0x28FF920
	private void OnDrag(DragGesture gesture) { }

	// RVA: 0x28FF970 Offset: 0x28FF970 VA: 0x28FF970
	private void Update() { }

	// RVA: 0x2900238 Offset: 0x2900238 VA: 0x2900238
	public Vector3 ConstrainToPanningPlane(Vector3 p) { }

	// RVA: 0x29002C4 Offset: 0x29002C4 VA: 0x29002C4
	public void TeleportTo(Vector3 worldPos) { }

	// RVA: 0x290032C Offset: 0x290032C VA: 0x290032C
	public void FlyTo(Vector3 worldPos) { }

	// RVA: 0x290007C Offset: 0x290007C VA: 0x290007C
	public Vector3 ConstrainToMoveArea(Vector3 p) { }
}

// Namespace: 
public sealed class TBPan.PanEventHandler : MulticastDelegate // TypeDefIndex: 4208
{
	// Methods

	// RVA: 0x2900354 Offset: 0x2900354 VA: 0x2900354
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x28FFC6C Offset: 0x28FFC6C VA: 0x28FFC6C Slot: 11
	public virtual void Invoke(TBPan source, Vector3 move) { }

	// RVA: 0x2900364 Offset: 0x2900364 VA: 0x2900364 Slot: 12
	public virtual IAsyncResult BeginInvoke(TBPan source, Vector3 move, AsyncCallback callback, object object) { }

	// RVA: 0x2900404 Offset: 0x2900404 VA: 0x2900404 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FAF4 Offset: 0xC1FAF4 VA: 0xC1FAF4
[RequireComponent] // RVA: 0xC1FAF4 Offset: 0xC1FAF4 VA: 0xC1FAF4
[RequireComponent] // RVA: 0xC1FAF4 Offset: 0xC1FAF4 VA: 0xC1FAF4
public class TBPinchZoom : MonoBehaviour // TypeDefIndex: 4209
{
	// Fields
	public TBPinchZoom.ZoomMethod zoomMethod; // 0x18
	public float zoomSpeed; // 0x1C
	public float minZoomAmount; // 0x20
	public float maxZoomAmount; // 0x24
	public float SmoothSpeed; // 0x28
	private Vector3 defaultPos; // 0x2C
	private float defaultFov; // 0x38
	private float defaultOrthoSize; // 0x3C
	private float idealZoomAmount; // 0x40
	private float zoomAmount; // 0x44

	// Properties
	public Vector3 DefaultPos { get; set; }
	public float DefaultFov { get; set; }
	public float DefaultOrthoSize { get; set; }
	public float IdealZoomAmount { get; set; }
	public float ZoomAmount { get; set; }
	private float CameraFov { get; set; }
	public float ZoomPercent { get; }

	// Methods

	// RVA: 0x29007DC Offset: 0x29007DC VA: 0x29007DC
	public void .ctor() { }

	// RVA: 0x2900868 Offset: 0x2900868 VA: 0x2900868
	public Vector3 get_DefaultPos() { }

	// RVA: 0x2900874 Offset: 0x2900874 VA: 0x2900874
	public void set_DefaultPos(Vector3 value) { }

	// RVA: 0x2900880 Offset: 0x2900880 VA: 0x2900880
	public float get_DefaultFov() { }

	// RVA: 0x2900888 Offset: 0x2900888 VA: 0x2900888
	public void set_DefaultFov(float value) { }

	// RVA: 0x2900890 Offset: 0x2900890 VA: 0x2900890
	public float get_DefaultOrthoSize() { }

	// RVA: 0x2900898 Offset: 0x2900898 VA: 0x2900898
	public void set_DefaultOrthoSize(float value) { }

	// RVA: 0x29008A0 Offset: 0x29008A0 VA: 0x29008A0
	public float get_IdealZoomAmount() { }

	// RVA: 0x29008A8 Offset: 0x29008A8 VA: 0x29008A8
	public void set_IdealZoomAmount(float value) { }

	// RVA: 0x2900938 Offset: 0x2900938 VA: 0x2900938
	public float get_ZoomAmount() { }

	// RVA: 0x2900940 Offset: 0x2900940 VA: 0x2900940
	public void set_ZoomAmount(float value) { }

	// RVA: 0x2900C6C Offset: 0x2900C6C VA: 0x2900C6C
	private float get_CameraFov() { }

	// RVA: 0x2900BF4 Offset: 0x2900BF4 VA: 0x2900BF4
	private void set_CameraFov(float value) { }

	// RVA: 0x2900CD4 Offset: 0x2900CD4 VA: 0x2900CD4
	public float get_ZoomPercent() { }

	// RVA: 0x2900CEC Offset: 0x2900CEC VA: 0x2900CEC
	private void Start() { }

	// RVA: 0x2900E34 Offset: 0x2900E34 VA: 0x2900E34
	private void Update() { }

	// RVA: 0x2900D8C Offset: 0x2900D8C VA: 0x2900D8C
	public void SetDefaults() { }

	// RVA: 0x2900ED0 Offset: 0x2900ED0 VA: 0x2900ED0
	private void OnPinch(PinchGesture gesture) { }
}

// Namespace: 
public enum TBPinchZoom.ZoomMethod // TypeDefIndex: 4210
{
	// Fields
	public int value__; // 0x0
	public const TBPinchZoom.ZoomMethod Position = 0;
	public const TBPinchZoom.ZoomMethod FOV = 1;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FBA4 Offset: 0xC1FBA4 VA: 0xC1FBA4
public class TBDragToMove : MonoBehaviour // TypeDefIndex: 4211
{
	// Fields
	public Collider DragPlaneCollider; // 0x18
	public float DragPlaneOffset; // 0x20
	public Camera RaycastCamera; // 0x28
	public bool DragFromObjectCenter; // 0x30
	private bool dragging; // 0x31
	private FingerGestures.Finger draggingFinger; // 0x38
	private GestureRecognizer gestureRecognizer; // 0x40
	private bool oldUseGravity; // 0x48
	private bool oldIsKinematic; // 0x49
	private Vector3 physxDragMove; // 0x4C

	// Properties
	public bool Dragging { get; set; }

	// Methods

	// RVA: 0x28FC6A8 Offset: 0x28FC6A8 VA: 0x28FC6A8
	public void .ctor() { }

	// RVA: 0x28FC720 Offset: 0x28FC720 VA: 0x28FC720
	public bool get_Dragging() { }

	// RVA: 0x28FC728 Offset: 0x28FC728 VA: 0x28FC728
	private void set_Dragging(bool value) { }

	// RVA: 0x28FC988 Offset: 0x28FC988 VA: 0x28FC988
	private void Start() { }

	// RVA: 0x28FCA08 Offset: 0x28FCA08 VA: 0x28FCA08
	public bool ProjectScreenPointOnDragPlane(Vector3 refPos, Vector2 screenPos, out Vector3 worldPos) { }

	// RVA: 0x28FCD8C Offset: 0x28FCD8C VA: 0x28FCD8C
	private void HandleDrag(DragGesture gesture) { }

	// RVA: 0x28FD228 Offset: 0x28FD228 VA: 0x28FD228
	private void FixedUpdate() { }

	// RVA: 0x28FD3A4 Offset: 0x28FD3A4 VA: 0x28FD3A4
	private void OnDrag(DragGesture gesture) { }

	// RVA: 0x28FD3A8 Offset: 0x28FD3A8 VA: 0x28FD3A8
	private void OnDisable() { }
}

// Namespace: 
public enum TBDragToMove.DragPlaneType // TypeDefIndex: 4212
{
	// Fields
	public int value__; // 0x0
	public const TBDragToMove.DragPlaneType Camera = 0;
	public const TBDragToMove.DragPlaneType UseCollider = 1;
}

// Namespace: 
public class TBHoverChangeMaterial : MonoBehaviour // TypeDefIndex: 4213
{
	// Fields
	public Material hoverMaterial; // 0x18
	private Material normalMaterial; // 0x20

	// Methods

	// RVA: 0x28FDA88 Offset: 0x28FDA88 VA: 0x28FDA88
	public void .ctor() { }

	// RVA: 0x28FDA90 Offset: 0x28FDA90 VA: 0x28FDA90
	private void Start() { }

	// RVA: 0x28FDB00 Offset: 0x28FDB00 VA: 0x28FDB00
	private void OnFingerHover(FingerHoverEvent e) { }
}

// Namespace: 
public class TBHoverChangeScale : MonoBehaviour // TypeDefIndex: 4214
{
	// Fields
	public float hoverScaleFactor; // 0x18
	private Vector3 originalScale; // 0x1C

	// Methods

	// RVA: 0x28FDBB0 Offset: 0x28FDBB0 VA: 0x28FDBB0
	public void .ctor() { }

	// RVA: 0x28FDC30 Offset: 0x28FDC30 VA: 0x28FDC30
	private void Start() { }

	// RVA: 0x28FDC74 Offset: 0x28FDC74 VA: 0x28FDC74
	private void OnFingerHover(FingerHoverEvent e) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FBDC Offset: 0xC1FBDC VA: 0xC1FBDC
public class TBPinchToScale : MonoBehaviour // TypeDefIndex: 4215
{
	// Fields
	public Vector3 scaleWeights; // 0x18
	public float minScaleAmount; // 0x24
	public float maxScaleAmount; // 0x28
	public float sensitivity; // 0x2C
	public float smoothingSpeed; // 0x30
	private float idealScaleAmount; // 0x34
	private float scaleAmount; // 0x38
	private Vector3 baseScale; // 0x3C

	// Properties
	public float ScaleAmount { get; set; }
	public float IdealScaleAmount { get; set; }

	// Methods

	// RVA: 0x2900410 Offset: 0x2900410 VA: 0x2900410
	public void .ctor() { }

	// RVA: 0x29004AC Offset: 0x29004AC VA: 0x29004AC
	public float get_ScaleAmount() { }

	// RVA: 0x29004B4 Offset: 0x29004B4 VA: 0x29004B4
	public void set_ScaleAmount(float value) { }

	// RVA: 0x29005E8 Offset: 0x29005E8 VA: 0x29005E8
	public float get_IdealScaleAmount() { }

	// RVA: 0x29005F0 Offset: 0x29005F0 VA: 0x29005F0
	public void set_IdealScaleAmount(float value) { }

	// RVA: 0x2900680 Offset: 0x2900680 VA: 0x2900680
	private void Start() { }

	// RVA: 0x29006D0 Offset: 0x29006D0 VA: 0x29006D0
	private void Update() { }

	// RVA: 0x2900780 Offset: 0x2900780 VA: 0x2900780
	private void OnPinch(PinchGesture gesture) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FC14 Offset: 0xC1FC14 VA: 0xC1FC14
public class TBQuickSetup : MonoBehaviour // TypeDefIndex: 4216
{
	// Fields
	public GameObject MessageTarget; // 0x18
	public int MaxSimultaneousGestures; // 0x20
	private ScreenRaycaster screenRaycaster; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC2280C Offset: 0xC2280C VA: 0xC2280C
	[DebuggerBrowsableAttribute] // RVA: 0xC2280C Offset: 0xC2280C VA: 0xC2280C
	private FingerDownDetector <FingerDown>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC22848 Offset: 0xC22848 VA: 0xC22848
	[DebuggerBrowsableAttribute] // RVA: 0xC22848 Offset: 0xC22848 VA: 0xC22848
	private FingerUpDetector <FingerUp>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC22884 Offset: 0xC22884 VA: 0xC22884
	[DebuggerBrowsableAttribute] // RVA: 0xC22884 Offset: 0xC22884 VA: 0xC22884
	private FingerHoverDetector <FingerHover>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC228C0 Offset: 0xC228C0 VA: 0xC228C0
	[DebuggerBrowsableAttribute] // RVA: 0xC228C0 Offset: 0xC228C0 VA: 0xC228C0
	private FingerMotionDetector <FingerMotion>k__BackingField; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC228FC Offset: 0xC228FC VA: 0xC228FC
	[DebuggerBrowsableAttribute] // RVA: 0xC228FC Offset: 0xC228FC VA: 0xC228FC
	private DragRecognizer <Drag>k__BackingField; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC22938 Offset: 0xC22938 VA: 0xC22938
	[DebuggerBrowsableAttribute] // RVA: 0xC22938 Offset: 0xC22938 VA: 0xC22938
	private LongPressRecognizer <LongPress>k__BackingField; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC22974 Offset: 0xC22974 VA: 0xC22974
	[DebuggerBrowsableAttribute] // RVA: 0xC22974 Offset: 0xC22974 VA: 0xC22974
	private SwipeRecognizer <Swipe>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC229B0 Offset: 0xC229B0 VA: 0xC229B0
	[DebuggerBrowsableAttribute] // RVA: 0xC229B0 Offset: 0xC229B0 VA: 0xC229B0
	private TapRecognizer <Tap>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC229EC Offset: 0xC229EC VA: 0xC229EC
	[DebuggerBrowsableAttribute] // RVA: 0xC229EC Offset: 0xC229EC VA: 0xC229EC
	private TapRecognizer <DoubleTap>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC22A28 Offset: 0xC22A28 VA: 0xC22A28
	[DebuggerBrowsableAttribute] // RVA: 0xC22A28 Offset: 0xC22A28 VA: 0xC22A28
	private PinchRecognizer <Pinch>k__BackingField; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC22A64 Offset: 0xC22A64 VA: 0xC22A64
	[DebuggerBrowsableAttribute] // RVA: 0xC22A64 Offset: 0xC22A64 VA: 0xC22A64
	private TwistRecognizer <Twist>k__BackingField; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC22AA0 Offset: 0xC22AA0 VA: 0xC22AA0
	[DebuggerBrowsableAttribute] // RVA: 0xC22AA0 Offset: 0xC22AA0 VA: 0xC22AA0
	private DragRecognizer <TwoFingerDrag>k__BackingField; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC22ADC Offset: 0xC22ADC VA: 0xC22ADC
	[DebuggerBrowsableAttribute] // RVA: 0xC22ADC Offset: 0xC22ADC VA: 0xC22ADC
	private TapRecognizer <TwoFingerTap>k__BackingField; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC22B18 Offset: 0xC22B18 VA: 0xC22B18
	[DebuggerBrowsableAttribute] // RVA: 0xC22B18 Offset: 0xC22B18 VA: 0xC22B18
	private SwipeRecognizer <TwoFingerSwipe>k__BackingField; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xC22B54 Offset: 0xC22B54 VA: 0xC22B54
	[DebuggerBrowsableAttribute] // RVA: 0xC22B54 Offset: 0xC22B54 VA: 0xC22B54
	private LongPressRecognizer <TwoFingerLongPress>k__BackingField; // 0xA0

	// Properties
	public FingerDownDetector FingerDown { get; set; }
	public FingerUpDetector FingerUp { get; set; }
	public FingerHoverDetector FingerHover { get; set; }
	public FingerMotionDetector FingerMotion { get; set; }
	public DragRecognizer Drag { get; set; }
	public LongPressRecognizer LongPress { get; set; }
	public SwipeRecognizer Swipe { get; set; }
	public TapRecognizer Tap { get; set; }
	public TapRecognizer DoubleTap { get; set; }
	public PinchRecognizer Pinch { get; set; }
	public TwistRecognizer Twist { get; set; }
	public DragRecognizer TwoFingerDrag { get; set; }
	public TapRecognizer TwoFingerTap { get; set; }
	public SwipeRecognizer TwoFingerSwipe { get; set; }
	public LongPressRecognizer TwoFingerLongPress { get; set; }

	// Methods

	// RVA: 0x2900F2C Offset: 0x2900F2C VA: 0x2900F2C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24480 Offset: 0xC24480 VA: 0xC24480
	// RVA: 0x2900F3C Offset: 0x2900F3C VA: 0x2900F3C
	public FingerDownDetector get_FingerDown() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24490 Offset: 0xC24490 VA: 0xC24490
	// RVA: 0x2900F44 Offset: 0x2900F44 VA: 0x2900F44
	public void set_FingerDown(FingerDownDetector value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC244A0 Offset: 0xC244A0 VA: 0xC244A0
	// RVA: 0x2900F4C Offset: 0x2900F4C VA: 0x2900F4C
	public FingerUpDetector get_FingerUp() { }

	[CompilerGeneratedAttribute] // RVA: 0xC244B0 Offset: 0xC244B0 VA: 0xC244B0
	// RVA: 0x2900F54 Offset: 0x2900F54 VA: 0x2900F54
	public void set_FingerUp(FingerUpDetector value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC244C0 Offset: 0xC244C0 VA: 0xC244C0
	// RVA: 0x2900F5C Offset: 0x2900F5C VA: 0x2900F5C
	public FingerHoverDetector get_FingerHover() { }

	[CompilerGeneratedAttribute] // RVA: 0xC244D0 Offset: 0xC244D0 VA: 0xC244D0
	// RVA: 0x2900F64 Offset: 0x2900F64 VA: 0x2900F64
	public void set_FingerHover(FingerHoverDetector value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC244E0 Offset: 0xC244E0 VA: 0xC244E0
	// RVA: 0x2900F6C Offset: 0x2900F6C VA: 0x2900F6C
	public FingerMotionDetector get_FingerMotion() { }

	[CompilerGeneratedAttribute] // RVA: 0xC244F0 Offset: 0xC244F0 VA: 0xC244F0
	// RVA: 0x2900F74 Offset: 0x2900F74 VA: 0x2900F74
	public void set_FingerMotion(FingerMotionDetector value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24500 Offset: 0xC24500 VA: 0xC24500
	// RVA: 0x2900F7C Offset: 0x2900F7C VA: 0x2900F7C
	public DragRecognizer get_Drag() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24510 Offset: 0xC24510 VA: 0xC24510
	// RVA: 0x2900F84 Offset: 0x2900F84 VA: 0x2900F84
	public void set_Drag(DragRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24520 Offset: 0xC24520 VA: 0xC24520
	// RVA: 0x2900F8C Offset: 0x2900F8C VA: 0x2900F8C
	public LongPressRecognizer get_LongPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24530 Offset: 0xC24530 VA: 0xC24530
	// RVA: 0x2900F94 Offset: 0x2900F94 VA: 0x2900F94
	public void set_LongPress(LongPressRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24540 Offset: 0xC24540 VA: 0xC24540
	// RVA: 0x2900F9C Offset: 0x2900F9C VA: 0x2900F9C
	public SwipeRecognizer get_Swipe() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24550 Offset: 0xC24550 VA: 0xC24550
	// RVA: 0x2900FA4 Offset: 0x2900FA4 VA: 0x2900FA4
	public void set_Swipe(SwipeRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24560 Offset: 0xC24560 VA: 0xC24560
	// RVA: 0x2900FAC Offset: 0x2900FAC VA: 0x2900FAC
	public TapRecognizer get_Tap() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24570 Offset: 0xC24570 VA: 0xC24570
	// RVA: 0x2900FB4 Offset: 0x2900FB4 VA: 0x2900FB4
	public void set_Tap(TapRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24580 Offset: 0xC24580 VA: 0xC24580
	// RVA: 0x2900FBC Offset: 0x2900FBC VA: 0x2900FBC
	public TapRecognizer get_DoubleTap() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24590 Offset: 0xC24590 VA: 0xC24590
	// RVA: 0x2900FC4 Offset: 0x2900FC4 VA: 0x2900FC4
	public void set_DoubleTap(TapRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC245A0 Offset: 0xC245A0 VA: 0xC245A0
	// RVA: 0x2900FCC Offset: 0x2900FCC VA: 0x2900FCC
	public PinchRecognizer get_Pinch() { }

	[CompilerGeneratedAttribute] // RVA: 0xC245B0 Offset: 0xC245B0 VA: 0xC245B0
	// RVA: 0x2900FD4 Offset: 0x2900FD4 VA: 0x2900FD4
	public void set_Pinch(PinchRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC245C0 Offset: 0xC245C0 VA: 0xC245C0
	// RVA: 0x2900FDC Offset: 0x2900FDC VA: 0x2900FDC
	public TwistRecognizer get_Twist() { }

	[CompilerGeneratedAttribute] // RVA: 0xC245D0 Offset: 0xC245D0 VA: 0xC245D0
	// RVA: 0x2900FE4 Offset: 0x2900FE4 VA: 0x2900FE4
	public void set_Twist(TwistRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC245E0 Offset: 0xC245E0 VA: 0xC245E0
	// RVA: 0x2900FEC Offset: 0x2900FEC VA: 0x2900FEC
	public DragRecognizer get_TwoFingerDrag() { }

	[CompilerGeneratedAttribute] // RVA: 0xC245F0 Offset: 0xC245F0 VA: 0xC245F0
	// RVA: 0x2900FF4 Offset: 0x2900FF4 VA: 0x2900FF4
	public void set_TwoFingerDrag(DragRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24600 Offset: 0xC24600 VA: 0xC24600
	// RVA: 0x2900FFC Offset: 0x2900FFC VA: 0x2900FFC
	public TapRecognizer get_TwoFingerTap() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24610 Offset: 0xC24610 VA: 0xC24610
	// RVA: 0x2901004 Offset: 0x2901004 VA: 0x2901004
	public void set_TwoFingerTap(TapRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24620 Offset: 0xC24620 VA: 0xC24620
	// RVA: 0x290100C Offset: 0x290100C VA: 0x290100C
	public SwipeRecognizer get_TwoFingerSwipe() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24630 Offset: 0xC24630 VA: 0xC24630
	// RVA: 0x2901014 Offset: 0x2901014 VA: 0x2901014
	public void set_TwoFingerSwipe(SwipeRecognizer value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24640 Offset: 0xC24640 VA: 0xC24640
	// RVA: 0x290101C Offset: 0x290101C VA: 0x290101C
	public LongPressRecognizer get_TwoFingerLongPress() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24650 Offset: 0xC24650 VA: 0xC24650
	// RVA: 0x2901024 Offset: 0x2901024 VA: 0x2901024
	public void set_TwoFingerLongPress(LongPressRecognizer value) { }

	// RVA: 0x290102C Offset: 0x290102C VA: 0x290102C
	private GameObject CreateChildNode(string name) { }

	// RVA: 0x29011AC Offset: 0x29011AC VA: 0x29011AC
	private void Start() { }

	// RVA: -1 Offset: -1
	private T AddFingerEventDetector<T>(GameObject node) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C2FE5C Offset: 0x1C2FE5C VA: 0x1C2FE5C
	|-TBQuickSetup.AddFingerEventDetector<FingerDownDetector>
	|-TBQuickSetup.AddFingerEventDetector<FingerHoverDetector>
	|-TBQuickSetup.AddFingerEventDetector<FingerMotionDetector>
	|-TBQuickSetup.AddFingerEventDetector<FingerUpDetector>
	|-TBQuickSetup.AddFingerEventDetector<object>
	*/

	// RVA: -1 Offset: -1
	private T AddGesture<T>(GameObject node) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C2FEE0 Offset: 0x1C2FEE0 VA: 0x1C2FEE0
	|-TBQuickSetup.AddGesture<object>
	*/

	// RVA: -1 Offset: -1
	private T AddSingleFingerGesture<T>(GameObject node) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C2FF90 Offset: 0x1C2FF90 VA: 0x1C2FF90
	|-TBQuickSetup.AddSingleFingerGesture<DragRecognizer>
	|-TBQuickSetup.AddSingleFingerGesture<LongPressRecognizer>
	|-TBQuickSetup.AddSingleFingerGesture<SwipeRecognizer>
	|-TBQuickSetup.AddSingleFingerGesture<object>
	|-TBQuickSetup.AddSingleFingerGesture<TapRecognizer>
	*/

	// RVA: -1 Offset: -1
	private T AddTwoFingerGesture<T>(GameObject node) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C30000 Offset: 0x1C30000 VA: 0x1C30000
	|-TBQuickSetup.AddTwoFingerGesture<PinchRecognizer>
	|-TBQuickSetup.AddTwoFingerGesture<object>
	|-TBQuickSetup.AddTwoFingerGesture<TwistRecognizer>
	*/

	// RVA: -1 Offset: -1
	private T AddTwoFingerGesture<T>(GameObject node, string eventName) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C30070 Offset: 0x1C30070 VA: 0x1C30070
	|-TBQuickSetup.AddTwoFingerGesture<DragRecognizer>
	|-TBQuickSetup.AddTwoFingerGesture<LongPressRecognizer>
	|-TBQuickSetup.AddTwoFingerGesture<SwipeRecognizer>
	|-TBQuickSetup.AddTwoFingerGesture<object>
	|-TBQuickSetup.AddTwoFingerGesture<TapRecognizer>
	*/
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1FC4C Offset: 0xC1FC4C VA: 0xC1FC4C
public class TBTwistToRotate : MonoBehaviour // TypeDefIndex: 4217
{
	// Fields
	public float Sensitivity; // 0x18
	public TBTwistToRotate.RotationAxis Axis; // 0x1C
	public Camera ReferenceCamera; // 0x20

	// Methods

	// RVA: 0x2901578 Offset: 0x2901578 VA: 0x2901578
	public void .ctor() { }

	// RVA: 0x290158C Offset: 0x290158C VA: 0x290158C
	private void Start() { }

	// RVA: 0x290160C Offset: 0x290160C VA: 0x290160C
	public Vector3 GetRotationAxis() { }

	// RVA: 0x29017A4 Offset: 0x29017A4 VA: 0x29017A4
	private void OnTwist(TwistGesture gesture) { }
}

// Namespace: 
public enum TBTwistToRotate.RotationAxis // TypeDefIndex: 4218
{
	// Fields
	public int value__; // 0x0
	public const TBTwistToRotate.RotationAxis WorldX = 0;
	public const TBTwistToRotate.RotationAxis WorldY = 1;
	public const TBTwistToRotate.RotationAxis WorldZ = 2;
	public const TBTwistToRotate.RotationAxis ObjectX = 3;
	public const TBTwistToRotate.RotationAxis ObjectY = 4;
	public const TBTwistToRotate.RotationAxis ObjectZ = 5;
	public const TBTwistToRotate.RotationAxis CameraX = 6;
	public const TBTwistToRotate.RotationAxis CameraY = 7;
	public const TBTwistToRotate.RotationAxis CameraZ = 8;
}

// Namespace: 
public class MetapsAnalyticsAndroidBridge : MetapsAnalyticsScript.IPlatformBridge // TypeDefIndex: 4219
{
	// Fields
	private static AndroidJavaClass analyticsAndroid; // 0x0

	// Properties
	private static AndroidJavaClass AnalyticsAndroid { get; }

	// Methods

	// RVA: 0x1DFB020 Offset: 0x1DFB020 VA: 0x1DFB020
	public void .ctor() { }

	// RVA: 0x1DFB030 Offset: 0x1DFB030 VA: 0x1DFB030
	private static AndroidJavaClass get_AnalyticsAndroid() { }

	// RVA: 0x1DFB0C4 Offset: 0x1DFB0C4 VA: 0x1DFB0C4 Slot: 4
	public override void SetCallbackHandlerImpl(string handlerName) { }

	// RVA: 0x1DFB1A8 Offset: 0x1DFB1A8 VA: 0x1DFB1A8 Slot: 5
	public override void InitializeImpl(string applicationId, int sessionTime) { }

	// RVA: 0x1DFB300 Offset: 0x1DFB300 VA: 0x1DFB300 Slot: 6
	public override bool IsInitializedImpl() { }

	// RVA: 0x1DFB38C Offset: 0x1DFB38C VA: 0x1DFB38C Slot: 7
	public override void StartSessionImpl() { }

	// RVA: 0x1DFB410 Offset: 0x1DFB410 VA: 0x1DFB410 Slot: 8
	public override void StopSessionImpl() { }

	// RVA: 0x1DFB494 Offset: 0x1DFB494 VA: 0x1DFB494 Slot: 9
	public override void TrackPurchaseImpl(string productId, double price, string currency) { }

	// RVA: 0x1DFB638 Offset: 0x1DFB638 VA: 0x1DFB638 Slot: 10
	public override void TrackEventImpl(string category, string name, int value) { }

	// RVA: 0x1DFB7DC Offset: 0x1DFB7DC VA: 0x1DFB7DC Slot: 11
	public override void TrackSpendImpl(string category, string name, int value) { }

	// RVA: 0x1DFB980 Offset: 0x1DFB980 VA: 0x1DFB980 Slot: 12
	public override void SetLogEnabledImpl(bool enabled) { }

	// RVA: 0x1DFBA88 Offset: 0x1DFBA88 VA: 0x1DFBA88 Slot: 13
	public override void SetLocationEnabledImpl(bool enabled) { }

	// RVA: 0x1DFBB90 Offset: 0x1DFBB90 VA: 0x1DFBB90 Slot: 14
	public override void SetCurrentPageImpl(string currentPage) { }

	// RVA: 0x1DFBC74 Offset: 0x1DFBC74 VA: 0x1DFBC74 Slot: 15
	public override void SetAttributeImpl(string key, string value) { }

	// RVA: 0x1DFBDA4 Offset: 0x1DFBDA4 VA: 0x1DFBDA4 Slot: 16
	public override void SetUserProfileImpl(string profileKey, string profileValue) { }

	// RVA: 0x1DFBED4 Offset: 0x1DFBED4 VA: 0x1DFBED4 Slot: 17
	public override void TrackActionImpl(string name) { }

	// RVA: 0x1DFBFB8 Offset: 0x1DFBFB8 VA: 0x1DFBFB8 Slot: 18
	public override void TrackActionImpl(string name, string value) { }

	// RVA: 0x1DFC0E8 Offset: 0x1DFC0E8 VA: 0x1DFC0E8 Slot: 19
	public override MetapsAnalyticsScript.Campaign GetMatchedCampaignImpl() { }

	// RVA: 0x1DFC244 Offset: 0x1DFC244 VA: 0x1DFC244 Slot: 20
	public override void SetDeviceTokenStringImpl(string deviceTokenString) { }

	// RVA: 0x1DFC248 Offset: 0x1DFC248 VA: 0x1DFC248 Slot: 21
	public override void ReceiveNotificationIdImpl(string notificationId, string customText) { }

	// RVA: 0x1DFC24C Offset: 0x1DFC24C VA: 0x1DFC24C Slot: 22
	public override string GetPushNotificationCustomTextImpl() { }

	// RVA: 0x1DFC2D8 Offset: 0x1DFC2D8 VA: 0x1DFC2D8 Slot: 23
	public override bool IsPushNotificationEnabledImpl() { }

	// RVA: 0x1DFC364 Offset: 0x1DFC364 VA: 0x1DFC364 Slot: 24
	public override bool SetPushNotificationEnabledImpl(bool enabled) { }

	// RVA: 0x1DFC478 Offset: 0x1DFC478 VA: 0x1DFC478 Slot: 25
	public override void StartAppSpotLoadingImpl(string androidSpotCode, string iosSpotCode, MetapsAnalyticsScript.AppSpotType appSpotType, MetapsAnalyticsScript.AppSpotConfig appSpotConfig) { }

	// RVA: 0x1DFC7D0 Offset: 0x1DFC7D0 VA: 0x1DFC7D0 Slot: 26
	public override bool IsAppSpotLoadedImpl(string spotCode) { }

	// RVA: 0x1DFC8BC Offset: 0x1DFC8BC VA: 0x1DFC8BC Slot: 27
	public override void ShowAppSpotImpl(string spotCode) { }

	// RVA: 0x1DFC9A0 Offset: 0x1DFC9A0 VA: 0x1DFC9A0 Slot: 28
	public override void DismissAppSpotImpl(string spotCode) { }

	// RVA: 0x1DFCA84 Offset: 0x1DFCA84 VA: 0x1DFCA84 Slot: 29
	public override bool isGdprCountryIncludedImpl() { }

	// RVA: 0x1DFCB10 Offset: 0x1DFCB10 VA: 0x1DFCB10 Slot: 30
	public override bool isGdprUserNeedConfirmImpl() { }

	// RVA: 0x1DFCB9C Offset: 0x1DFCB9C VA: 0x1DFCB9C Slot: 31
	public override bool isGdprUserAllowedImpl() { }

	// RVA: 0x1DFCC28 Offset: 0x1DFCC28 VA: 0x1DFCC28 Slot: 32
	public override bool setGdprUserAllowedImpl(bool allowed) { }

	// RVA: 0x1DFCD3C Offset: 0x1DFCD3C VA: 0x1DFCD3C Slot: 33
	public override string GetMetapsInstallIdImpl() { }

	// RVA: 0x1DFCDC8 Offset: 0x1DFCDC8 VA: 0x1DFCDC8 Slot: 34
	public override void SetATTEnabledImpl(bool enabled) { }

	// RVA: 0x1DFCDCC Offset: 0x1DFCDCC VA: 0x1DFCDCC Slot: 35
	public override void SetATTPopupAutoRequestImpl(bool enabled) { }

	// RVA: 0x1DFCDD0 Offset: 0x1DFCDD0 VA: 0x1DFCDD0 Slot: 36
	public override void SetATTKochavaWaitTimeIntervalImpl(int timeInterval) { }

	// RVA: 0x1DFCDD4 Offset: 0x1DFCDD4 VA: 0x1DFCDD4 Slot: 37
	public override bool updateCreateNotificationChannelImpl(string id, string name) { }

	// RVA: 0x1DFCF0C Offset: 0x1DFCF0C VA: 0x1DFCF0C Slot: 38
	public override bool deleteNotificationChannelImpl(string id) { }
}
