	internal Quaternion qua_to; // 0x18
	internal Quaternion qua_from; // 0x28
	internal EarthCore that; // 0x38
	internal Quaternion root_qua_to; // 0x40
	internal Quaternion root_qua_from; // 0x50
	internal Vector3 root_pos_to; // 0x60
	internal Vector3 root_pos_from; // 0x6C
	internal Vector3 root_scl_to; // 0x78
	internal Vector3 root_scl_from; // 0x84
	internal EarthCore.StateZoomOut $this; // 0x90

	// Methods

	// RVA: 0x16F196C Offset: 0x16F196C VA: 0x16F196C
	public void .ctor() { }

	// RVA: 0x16F1AD4 Offset: 0x16F1AD4 VA: 0x16F1AD4
	internal void <>m__0() { }

	// RVA: 0x16F1E14 Offset: 0x16F1E14 VA: 0x16F1E14
	internal void <>m__1() { }
}

// Namespace: 
public class EarthPoint : BaseEarthPoint // TypeDefIndex: 10921
{
	// Fields
	private const string EFFECT_NAME = "ef_difference11";
	private static readonly Vector3 FORWARD_VEC; // 0x0

	// Methods

	// RVA: 0x16F1FC4 Offset: 0x16F1FC4 VA: 0x16F1FC4
	public void .ctor() { }

	// RVA: 0x16F202C Offset: 0x16F202C VA: 0x16F202C Slot: 4
	protected override void LateUpdate() { }

	// RVA: 0x16F2484 Offset: 0x16F2484 VA: 0x16F2484 Slot: 5
	protected override string GetEffectName() { }

	// RVA: 0x16F24CC Offset: 0x16F24CC VA: 0x16F24CC
	private static void .cctor() { }
}

// Namespace: 
public class EventBannerWindow : BaseDialog // TypeDefIndex: 10922
{
	// Fields
	public static readonly int OPEN_POSSIBLE_COUNT; // 0x0
	public static readonly float SCROLL_ITEM_Y_INTERVAL; // 0x4
	[SerializeField] // RVA: 0xC7AB6C Offset: 0xC7AB6C VA: 0xC7AB6C
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xC7AB7C Offset: 0xC7AB7C VA: 0xC7AB7C
	protected UILabel titleDetailLabel; // 0x60
	[SerializeField] // RVA: 0xC7AB8C Offset: 0xC7AB8C VA: 0xC7AB8C
	protected GameObject scrollItemPrefab; // 0x68
	[SerializeField] // RVA: 0xC7AB9C Offset: 0xC7AB9C VA: 0xC7AB9C
	protected UIGrid grid; // 0x70
	[SerializeField] // RVA: 0xC7ABAC Offset: 0xC7ABAC VA: 0xC7ABAC
	protected UIButton closeBtn; // 0x78
	[SerializeField] // RVA: 0xC7ABBC Offset: 0xC7ABBC VA: 0xC7ABBC
	protected UIScrollView scrollView; // 0x80
	private List<EventBannerWindowScrollItem> mScrollItems; // 0x88
	private int mNowEventId; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC7ABCC Offset: 0xC7ABCC VA: 0xC7ABCC
	private static Action <>f__am$cache0; // 0x8

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1868414 Offset: 0x1868414 VA: 0x1868414
	public void .ctor() { }

	// RVA: 0x18684A4 Offset: 0x18684A4 VA: 0x18684A4
	public void Setup(List<TitleInfoControl.EventEndTimeInfo> ev_end_time_infs) { }

	// RVA: 0x1868D38 Offset: 0x1868D38 VA: 0x1868D38
	public void Open(Action end_act) { }

	// RVA: 0x1868D78 Offset: 0x1868D78 VA: 0x1868D78
	public int GetNowEventId() { }

	// RVA: 0x1868E2C Offset: 0x1868E2C VA: 0x1868E2C
	public void OnClickClose() { }

	// RVA: 0x1868F58 Offset: 0x1868F58 VA: 0x1868F58 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x1868FA0 Offset: 0x1868FA0 VA: 0x1868FA0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2348 Offset: 0xCD2348 VA: 0xCD2348
	// RVA: 0x1869004 Offset: 0x1869004 VA: 0x1869004
	private static void <OnClickClose>m__0() { }
}

// Namespace: 
public class EventBannerWindowScrollItem : MonoBehaviour // TypeDefIndex: 10923
{
	// Fields
	public static readonly string DEFAULT_SP_NAME; // 0x0
	[SerializeField] // RVA: 0xC7ABDC Offset: 0xC7ABDC VA: 0xC7ABDC
	private UISprite mBannerSp; // 0x18
	[SerializeField] // RVA: 0xC7ABEC Offset: 0xC7ABEC VA: 0xC7ABEC
	private UIAtlas mCommonAtlas; // 0x20
	[SerializeField] // RVA: 0xC7ABFC Offset: 0xC7ABFC VA: 0xC7ABFC
	private UILabel condMessageLabel; // 0x28
	[SerializeField] // RVA: 0xC7AC0C Offset: 0xC7AC0C VA: 0xC7AC0C
	private NoticeNumberComponent noticeNumberPrefab; // 0x30
	[SerializeField] // RVA: 0xC7AC1C Offset: 0xC7AC1C VA: 0xC7AC1C
	private GameObject noticeNumberRoot; // 0x38
	private NoticeNumberComponent mNoticeNumber; // 0x40
	private TitleInfoControl.EventEndTimeInfo mEventEndTimeInfo; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC7AC2C Offset: 0xC7AC2C VA: 0xC7AC2C
	private static Action <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x1869008 Offset: 0x1869008 VA: 0x1869008
	public void .ctor() { }

	// RVA: 0x1868920 Offset: 0x1868920 VA: 0x1868920
	public void Setup(TitleInfoControl.EventEndTimeInfo ev_end_time_inf) { }

	// RVA: 0x1869200 Offset: 0x1869200 VA: 0x1869200
	public void OnClickItem() { }

	// RVA: 0x1869010 Offset: 0x1869010 VA: 0x1869010
	private bool IsGrayOut() { }

	// RVA: 0x18697E8 Offset: 0x18697E8 VA: 0x18697E8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2358 Offset: 0xCD2358 VA: 0xCD2358
	// RVA: 0x1869844 Offset: 0x1869844 VA: 0x1869844
	private static void <OnClickItem>m__0() { }
}

// Namespace: 
public abstract class EventMapManagerBase : MonoBehaviour, EventMapManagerInterface // TypeDefIndex: 10924
{
	// Fields
	protected MapControl.MapInfo mapInfo; // 0x18
	protected MapControl.WarInfo warInfo; // 0x20
	protected ScrTerminalMap terminalMap; // 0x28
	protected MapCamera mapCamera; // 0x30
	protected GameObject rootRoadP; // 0x38
	protected GameObject rootSpotP; // 0x40
	protected GameObject rootPathP; // 0x48
	protected GameObject rootGimmickP; // 0x50
	protected GameObject rootEffectP; // 0x58
	private int touchBlockNum; // 0x60
	private int cameraWorkBlockNum; // 0x64

	// Methods

	// RVA: 0x1608FAC Offset: 0x1608FAC VA: 0x1608FAC
	protected void .ctor() { }

	// RVA: 0x1608FB4 Offset: 0x1608FB4 VA: 0x1608FB4 Slot: 16
	public virtual void SetTerminalMapInfo(ScrTerminalMap terminalMap, MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo, MapCamera mapCamera, GameObject rootEffectP, GameObject rootGimmickP, GameObject rootPathP, GameObject rootRoadP, GameObject rootSpotP) { }

	// RVA: 0x1608FD0 Offset: 0x1608FD0 VA: 0x1608FD0 Slot: 17
	public virtual void Initialize() { }

	// RVA: 0x1608FD4 Offset: 0x1608FD4 VA: 0x1608FD4 Slot: 18
	public virtual void LoadAssets(Action finishCallback) { }

	// RVA: 0x1608FE0 Offset: 0x1608FE0 VA: 0x1608FE0 Slot: 19
	public virtual void ExtractMapObjectFromAssetData(AssetData assetData) { }

	// RVA: 0x1608FE4 Offset: 0x1608FE4 VA: 0x1608FE4 Slot: 20
	public virtual void OnAfterSpotCreated(Action finishCallback) { }

	// RVA: 0x1608FF0 Offset: 0x1608FF0 VA: 0x1608FF0 Slot: 21
	public virtual bool IsShowQuestListWhenComingBackToMap() { }

	// RVA: 0x1608FF8 Offset: 0x1608FF8 VA: 0x1608FF8 Slot: 22
	public virtual void OnBeforeQuestAfterAction(Action finishCallback) { }

	// RVA: 0x1609004 Offset: 0x1609004 VA: 0x1609004 Slot: 23
	public virtual void OnAfterQuestAfterAction(Action finishCallback) { }

	// RVA: 0x1609010 Offset: 0x1609010 VA: 0x1609010 Slot: 24
	public virtual void OnEveryActionEnd() { }

	// RVA: 0x1609014 Offset: 0x1609014 VA: 0x1609014 Slot: 25
	public virtual void DestroyMapObjects() { }

	// RVA: 0x1609018 Offset: 0x1609018 VA: 0x1609018 Slot: 26
	public virtual void ReleaseAssets() { }

	// RVA: 0x160901C Offset: 0x160901C VA: 0x160901C Slot: 27
	public virtual void Finish() { }

	// RVA: 0x1609070 Offset: 0x1609070 VA: 0x1609070 Slot: 28
	protected virtual void SetAllTouchBlock(bool value) { }

	// RVA: 0x160915C Offset: 0x160915C VA: 0x160915C Slot: 29
	protected virtual void SetCameraWorkBlock(bool value) { }

	// RVA: 0x160926C Offset: 0x160926C VA: 0x160926C Slot: 30
	protected virtual void AllTouchBlockForceFalse() { }

	// RVA: 0x1609284 Offset: 0x1609284 VA: 0x1609284
	protected void LocateDialogToUiRoot(BaseDialog dialog) { }
}

// Namespace: 
public static class EventMapManagerFactory // TypeDefIndex: 10925
{
	// Methods

	// RVA: 0x1609340 Offset: 0x1609340 VA: 0x1609340
	public static EventMapManagerInterface AttachToTerminalMap(ScrTerminalMap termialMap, MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo) { }

	// RVA: 0x1609528 Offset: 0x1609528 VA: 0x1609528
	public static void DetachFromTerminalMap(ScrTerminalMap termialMap) { }
}

// Namespace: 
public class EventMapManagerIdle : EventMapManagerInterface // TypeDefIndex: 10926
{
	// Methods

	// RVA: 0x1609520 Offset: 0x1609520 VA: 0x1609520
	public void .ctor() { }

	// RVA: 0x160958C Offset: 0x160958C VA: 0x160958C Slot: 16
	public virtual void SetTerminalMapInfo(ScrTerminalMap terminalMap, MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo, MapCamera mapCamera, GameObject rootEffectP, GameObject rootGimmickP, GameObject rootPathP, GameObject rootRoadP, GameObject rootSpotP) { }

	// RVA: 0x1609590 Offset: 0x1609590 VA: 0x1609590 Slot: 5
	public void Initialize() { }

	// RVA: 0x1609594 Offset: 0x1609594 VA: 0x1609594 Slot: 6
	public void LoadAssets(Action finishCallback) { }

	// RVA: 0x16095A0 Offset: 0x16095A0 VA: 0x16095A0 Slot: 7
	public void ExtractMapObjectFromAssetData(AssetData assetData) { }

	// RVA: 0x16095A4 Offset: 0x16095A4 VA: 0x16095A4 Slot: 8
	public void OnAfterSpotCreated(Action finishCallback) { }

	// RVA: 0x16095B0 Offset: 0x16095B0 VA: 0x16095B0 Slot: 9
	public bool IsShowQuestListWhenComingBackToMap() { }

	// RVA: 0x16095B8 Offset: 0x16095B8 VA: 0x16095B8 Slot: 17
	public virtual bool HasSelfQuestAfterAction() { }

	// RVA: 0x16095C0 Offset: 0x16095C0 VA: 0x16095C0 Slot: 18
	public virtual void OnBeforeQuestAfterAction(Action finishCallback) { }

	// RVA: 0x16095CC Offset: 0x16095CC VA: 0x16095CC Slot: 19
	public virtual void OnAfterQuestAfterAction(Action finishCallback) { }

	// RVA: 0x16095D8 Offset: 0x16095D8 VA: 0x16095D8 Slot: 12
	public void OnEveryActionEnd() { }

	// RVA: 0x16095DC Offset: 0x16095DC VA: 0x16095DC Slot: 14
	public void DestroyMapObjects() { }

	// RVA: 0x16095E0 Offset: 0x16095E0 VA: 0x16095E0 Slot: 13
	public void ReleaseAssets() { }

	// RVA: 0x16095E4 Offset: 0x16095E4 VA: 0x16095E4 Slot: 15
	public void Finish() { }
}

// Namespace: 
public interface EventMapManagerInterface // TypeDefIndex: 10927
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void SetTerminalMapInfo(ScrTerminalMap terminalMap, MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo, MapCamera mapCamera, GameObject rootEffectP, GameObject rootGimmickP, GameObject rootPathP, GameObject rootRoadP, GameObject rootSpotP);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Initialize();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void LoadAssets(Action finishCallback);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void ExtractMapObjectFromAssetData(AssetData assetData);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnAfterSpotCreated(Action finishCallback);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool IsShowQuestListWhenComingBackToMap();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void OnBeforeQuestAfterAction(Action finishCallback);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void OnAfterQuestAfterAction(Action finishCallback);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void OnEveryActionEnd();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void ReleaseAssets();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void DestroyMapObjects();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void Finish();
}

// Namespace: 
public class Submarine2DUILocationInfo : Base2DUILocationInfo // TypeDefIndex: 10928
{
	// Methods

	// RVA: 0x17A7F24 Offset: 0x17A7F24 VA: 0x17A7F24
	public void .ctor() { }

	// RVA: 0x17A8170 Offset: 0x17A8170 VA: 0x17A8170 Slot: 8
	protected virtual Rect GetScanDialogRect() { }

	// RVA: 0x17A8194 Offset: 0x17A8194 VA: 0x17A8194 Slot: 9
	protected virtual Rect GetStorageRect() { }
}

// Namespace: 
public class SubmarineScanDialogUpsideLocationInfo : Submarine2DUILocationInfo // TypeDefIndex: 10929
{
	// Methods

	// RVA: 0x117CBEC Offset: 0x117CBEC VA: 0x117CBEC
	public void .ctor() { }

	// RVA: 0x117CBF4 Offset: 0x117CBF4 VA: 0x117CBF4 Slot: 8
	protected override Rect GetScanDialogRect() { }
}

// Namespace: 
public class SubmarinScanDialogUpSideWeakLocationInfo : SubmarineScanDialogUpsideLocationInfo // TypeDefIndex: 10930
{
	// Methods

	// RVA: 0x17A7EDC Offset: 0x17A7EDC VA: 0x17A7EDC
	public void .ctor() { }

	// RVA: 0x17A7EE4 Offset: 0x17A7EE4 VA: 0x17A7EE4 Slot: 7
	protected override Rect GetMasterIconSurroundsRect() { }

	// RVA: 0x17A7F04 Offset: 0x17A7F04 VA: 0x17A7F04 Slot: 6
	protected override Rect GetMapChangeButtonRect() { }
}

// Namespace: 
public static class ClosePanelTextureUtil // TypeDefIndex: 10931
{
	// Methods

	// RVA: 0x1961B5C Offset: 0x1961B5C VA: 0x1961B5C
	public static ObjectDomain[] CreateNeverOpenSurroundsDomains(SubmarinePanelPositionCalculator positionCalculator, Texture2D closedPanelTexture) { }

	// RVA: 0x1962288 Offset: 0x1962288 VA: 0x1962288
	public static ObjectDomain CreatePanelOccupiedTotalDomain(SubmarinePanelPositionCalculator positionCalculator, Texture2D closedPanelTexture) { }

	// RVA: 0x19623F8 Offset: 0x19623F8 VA: 0x19623F8
	public static ObjectDomain CreateClosedPanelDomain(Vector3 pos, SubmarinePanelPositionCalculator positionCalculator) { }

	// RVA: 0x196252C Offset: 0x196252C VA: 0x196252C
	public static Texture2D ExtractCutTextureFromObjectDomain(ObjectDomain objDomain, SubmarinePanelPositionCalculator positionCalculator, Texture2D closedPanelTexture) { }

	// RVA: 0x19627E0 Offset: 0x19627E0 VA: 0x19627E0
	public static Texture2D CreateDomainSubtractTexture(ObjectDomain objDomain, int[] excludePanelUniqueIds, SubmarinePanelPositionCalculator positionCalculator, Texture2D closedPanelTexture) { }

	// RVA: 0x1962C3C Offset: 0x1962C3C VA: 0x1962C3C
	public static Texture2D CreateResizedTexture2D(Texture2D baseTexture, int resizeWidth, int resizeHeight) { }

	// RVA: 0x1962DE0 Offset: 0x1962DE0 VA: 0x1962DE0
	public static Texture2D CreateDarkTexture2D(Texture2D baseTexture, float darkRate) { }
}

// Namespace: 
public class SubmarineEffectScannablePanelComponent : MonoBehaviour // TypeDefIndex: 10932
{
	// Methods

	// RVA: 0x17A9A3C Offset: 0x17A9A3C VA: 0x17A9A3C
	public void .ctor() { }
}

// Namespace: 
public class SubmarineEffectScanObstaclePanelComponent : MonoBehaviour // TypeDefIndex: 10933
{
	// Methods

	// RVA: 0x17A9A34 Offset: 0x17A9A34 VA: 0x17A9A34
	public void .ctor() { }
}

// Namespace: 
public class SubmarineEffectSelectedPanelComponent : MonoBehaviour // TypeDefIndex: 10934
{
	// Methods

	// RVA: 0x17A9A44 Offset: 0x17A9A44 VA: 0x17A9A44
	public void .ctor() { }
}

// Namespace: 
public class SubmarineMapPanelComponent : MonoBehaviour // TypeDefIndex: 10935
{
	// Fields
	[SerializeField] // RVA: 0xC7AC3C Offset: 0xC7AC3C VA: 0xC7AC3C
	private GameObject closedPanel; // 0x18
	[SerializeField] // RVA: 0xC7AC4C Offset: 0xC7AC4C VA: 0xC7AC4C
	private UIButton button; // 0x20
	private SimpleAnimation scannableAnim; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7AC5C Offset: 0xC7AC5C VA: 0xC7AC5C
	[DebuggerBrowsableAttribute] // RVA: 0xC7AC5C Offset: 0xC7AC5C VA: 0xC7AC5C
	private Action <OnClickPanel>k__BackingField; // 0x30

	// Properties
	public Action OnClickPanel { get; set; }

	// Methods

	// RVA: 0x1179898 Offset: 0x1179898 VA: 0x1179898
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2368 Offset: 0xCD2368 VA: 0xCD2368
	// RVA: 0x11798A0 Offset: 0x11798A0 VA: 0x11798A0
	public Action get_OnClickPanel() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2378 Offset: 0xCD2378 VA: 0xCD2378
	// RVA: 0x11798A8 Offset: 0x11798A8 VA: 0x11798A8
	public void set_OnClickPanel(Action value) { }

	// RVA: 0x11798B0 Offset: 0x11798B0 VA: 0x11798B0
	public void Initialize() { }

	// RVA: 0x11798B8 Offset: 0x11798B8 VA: 0x11798B8
	public void ClickPanel() { }

	// RVA: 0x11798CC Offset: 0x11798CC VA: 0x11798CC
	public void SetClosedPanelVisible(bool value) { }

	// RVA: 0x117997C Offset: 0x117997C VA: 0x117997C
	public void SetSize(ObjectDomain objDomain) { }

	// RVA: 0x11799F4 Offset: 0x11799F4 VA: 0x11799F4
	public void SetSize(float width, float height) { }

	// RVA: 0x1179AE8 Offset: 0x1179AE8 VA: 0x1179AE8
	public void SetClosedPanelTexture(ObjectDomain objDomain, Texture2D texture) { }

	// RVA: 0x1179D88 Offset: 0x1179D88 VA: 0x1179D88
	public void ShowOpenPanelAnim() { }

	// RVA: 0x1179EE4 Offset: 0x1179EE4 VA: 0x1179EE4
	private void OnPanelFadeOutFinished() { }
}

// Namespace: 
public class SubmarineScannerComponent : MonoBehaviour // TypeDefIndex: 10936
{
	// Fields
	private static readonly float DEFAULT_JUMP_DURATION; // 0x0
	private static readonly float DEFAULT_JUMP_START_TIME; // 0x4
	private static readonly float DEFAULT_SELECTED_PANEL_EFFECT_FINISH_TIME; // 0x8
	private static readonly int[] ANIM_CHANGE_DIST_BORDERS; // 0x10
	private SimpleAnimation mAnimation; // 0x18
	private SimpleAnimation.EditorState state; // 0x20

	// Properties
	public SimpleAnimation AnimationComponent { get; }
	public string AnimName { get; }
	public AnimationClip AnimClip { get; }

	// Methods

	// RVA: 0x117CFBC Offset: 0x117CFBC VA: 0x117CFBC
	public void .ctor() { }

	// RVA: 0x117CFC4 Offset: 0x117CFC4 VA: 0x117CFC4
	public SimpleAnimation get_AnimationComponent() { }

	// RVA: 0x117D05C Offset: 0x117D05C VA: 0x117D05C
	public string get_AnimName() { }

	// RVA: 0x117D0D8 Offset: 0x117D0D8 VA: 0x117D0D8
	public AnimationClip get_AnimClip() { }

	// RVA: 0x117D0F0 Offset: 0x117D0F0 VA: 0x117D0F0
	public void Initialize(float dist) { }

	// RVA: 0x117D3A8 Offset: 0x117D3A8 VA: 0x117D3A8
	public bool IsAnimationPrepared() { }

	// RVA: 0x117D0F4 Offset: 0x117D0F4 VA: 0x117D0F4
	private void PrepareAnimation(float dist) { }

	// RVA: 0x117D3B8 Offset: 0x117D3B8 VA: 0x117D3B8
	private int GetDistIndex(float dist) { }

	// RVA: 0x117D4D4 Offset: 0x117D4D4 VA: 0x117D4D4
	public float GetJumpDuration() { }

	// RVA: 0x117D720 Offset: 0x117D720 VA: 0x117D720
	public float GetJumpStartTime() { }

	// RVA: 0x117D79C Offset: 0x117D79C VA: 0x117D79C
	public float GetSelectedPanelEffecFinishTime() { }

	// RVA: 0x117D818 Offset: 0x117D818 VA: 0x117D818
	public float GetTimeToStartOpenPanel() { }

	// RVA: 0x117D588 Offset: 0x117D588 VA: 0x117D588
	private float GetEventTimeByFunctionName(string funcName, float defaultValue = 0) { }

	// RVA: 0x117D8E4 Offset: 0x117D8E4 VA: 0x117D8E4
	private void OnJumpStart() { }

	// RVA: 0x117D8E8 Offset: 0x117D8E8 VA: 0x117D8E8
	private void OnJumpEnd() { }

	// RVA: 0x117D8EC Offset: 0x117D8EC VA: 0x117D8EC
	private void OnStartScan() { }

	// RVA: 0x117D8F0 Offset: 0x117D8F0 VA: 0x117D8F0
	private void FinishEffectSelectedPanel() { }

	// RVA: 0x117D8F4 Offset: 0x117D8F4 VA: 0x117D8F4
	private void StartOpenPanel() { }

	// RVA: 0x117D8F8 Offset: 0x117D8F8 VA: 0x117D8F8
	private static void .cctor() { }
}

// Namespace: 
public class SubmarineScanRangeComponent : MonoBehaviour // TypeDefIndex: 10937
{
	// Methods

	// RVA: 0x117CDE0 Offset: 0x117CDE0 VA: 0x117CDE0
	public void .ctor() { }
}

// Namespace: 
public class SubmarineScanVoiceComponent : MonoBehaviour // TypeDefIndex: 10938
{
	// Fields
	[SerializeField] // RVA: 0xC7AC98 Offset: 0xC7AC98 VA: 0xC7AC98
	private float waitTime; // 0x18
	[SerializeField] // RVA: 0xC7ACA8 Offset: 0xC7ACA8 VA: 0xC7ACA8
	private int svtId; // 0x1C
	[SerializeField] // RVA: 0xC7ACB8 Offset: 0xC7ACB8 VA: 0xC7ACB8
	private string[] vcNameList; // 0x20
	private string vcName; // 0x28
	public string assetName; // 0x30
	private SePlayer sePlayer; // 0x38

	// Methods

	// RVA: 0x117CDE8 Offset: 0x117CDE8 VA: 0x117CDE8
	public void .ctor() { }

	// RVA: 0x117CDF0 Offset: 0x117CDF0 VA: 0x117CDF0
	private void Awake() { }

	// RVA: 0x1178E04 Offset: 0x1178E04 VA: 0x1178E04
	public void PlayScanVoice() { }

	// RVA: 0x117CF28 Offset: 0x117CF28 VA: 0x117CF28
	private void StopVoice() { }

	// RVA: 0x117CFB4 Offset: 0x117CFB4 VA: 0x117CFB4
	public float GetWaitTime() { }
}

// Namespace: 
public class SubmarineSilhouetteComponent : MonoBehaviour // TypeDefIndex: 10939
{
	// Fields
	private SimpleAnimation mAnimation; // 0x18

	// Properties
	public SimpleAnimation AnimationComponent { get; }

	// Methods

	// RVA: 0x117F904 Offset: 0x117F904 VA: 0x117F904
	public void .ctor() { }

	// RVA: 0x117F90C Offset: 0x117F90C VA: 0x117F90C
	public SimpleAnimation get_AnimationComponent() { }
}

// Namespace: 
public class ObjectDomain // TypeDefIndex: 10940
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC7ACC8 Offset: 0xC7ACC8 VA: 0xC7ACC8
	[DebuggerBrowsableAttribute] // RVA: 0xC7ACC8 Offset: 0xC7ACC8 VA: 0xC7ACC8
	private float <X>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AD04 Offset: 0xC7AD04 VA: 0xC7AD04
	[DebuggerBrowsableAttribute] // RVA: 0xC7AD04 Offset: 0xC7AD04 VA: 0xC7AD04
	private float <Y>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC7AD40 Offset: 0xC7AD40 VA: 0xC7AD40
	[DebuggerBrowsableAttribute] // RVA: 0xC7AD40 Offset: 0xC7AD40 VA: 0xC7AD40
	private float <Width>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC7AD7C Offset: 0xC7AD7C VA: 0xC7AD7C
	[DebuggerBrowsableAttribute] // RVA: 0xC7AD7C Offset: 0xC7AD7C VA: 0xC7AD7C
	private float <Height>k__BackingField; // 0x1C

	// Properties
	public float X { get; set; }
	public float Y { get; set; }
	public float Width { get; set; }
	public float Height { get; set; }
	public Vector3 center { get; }

	// Methods

	// RVA: 0x1A918A0 Offset: 0x1A918A0 VA: 0x1A918A0
	public void .ctor(float x, float y, float width, float height) { }

	// RVA: 0x1A9190C Offset: 0x1A9190C VA: 0x1A9190C
	public void .ctor(ObjectDomain domain) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2388 Offset: 0xCD2388 VA: 0xCD2388
	// RVA: 0x1A919A0 Offset: 0x1A919A0 VA: 0x1A919A0
	public float get_X() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2398 Offset: 0xCD2398 VA: 0xCD2398
	// RVA: 0x1A918EC Offset: 0x1A918EC VA: 0x1A918EC
	public void set_X(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23A8 Offset: 0xCD23A8 VA: 0xCD23A8
	// RVA: 0x1A919A8 Offset: 0x1A919A8 VA: 0x1A919A8
	public float get_Y() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23B8 Offset: 0xCD23B8 VA: 0xCD23B8
	// RVA: 0x1A918F4 Offset: 0x1A918F4 VA: 0x1A918F4
	public void set_Y(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23C8 Offset: 0xCD23C8 VA: 0xCD23C8
	// RVA: 0x1A919B0 Offset: 0x1A919B0 VA: 0x1A919B0
	public float get_Width() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23D8 Offset: 0xCD23D8 VA: 0xCD23D8
	// RVA: 0x1A918FC Offset: 0x1A918FC VA: 0x1A918FC
	public void set_Width(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23E8 Offset: 0xCD23E8 VA: 0xCD23E8
	// RVA: 0x1A919B8 Offset: 0x1A919B8 VA: 0x1A919B8
	public float get_Height() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD23F8 Offset: 0xCD23F8 VA: 0xCD23F8
	// RVA: 0x1A91904 Offset: 0x1A91904 VA: 0x1A91904
	public void set_Height(float value) { }

	// RVA: 0x1A919C0 Offset: 0x1A919C0 VA: 0x1A919C0
	public Vector3 get_center() { }
}

// Namespace: 
public static class PanelUniqueIDUtil // TypeDefIndex: 10941
{
	// Fields
	private static readonly int V_INDEX_SHIFT; // 0x0

	// Methods

	// RVA: 0x123DF98 Offset: 0x123DF98 VA: 0x123DF98
	public static int GetID(int hIndex, int vIndex) { }

	// RVA: 0x123E014 Offset: 0x123E014 VA: 0x123E014
	public static bool HasID(int hIndex, int vIndex, int[] uniqueIds) { }

	// RVA: 0x123E0B0 Offset: 0x123E0B0 VA: 0x123E0B0
	private static void .cctor() { }
}

// Namespace: 
public static class SubmarineDataHelperScan // TypeDefIndex: 10942
{
	// Properties
	private static EventPanelScanMaster eventPanelScanMaster { get; }
	private static CommonConsumeMaster commonConusmeMaster { get; }
	private static ItemMaster itemMaster { get; }
	private static UserItemMaster userItemMaster { get; }

	// Methods

	// RVA: 0x17A81B0 Offset: 0x17A81B0 VA: 0x17A81B0
	private static EventPanelScanMaster get_eventPanelScanMaster() { }

	// RVA: 0x17A821C Offset: 0x17A821C VA: 0x17A821C
	private static CommonConsumeMaster get_commonConusmeMaster() { }

	// RVA: 0x17A8288 Offset: 0x17A8288 VA: 0x17A8288
	private static ItemMaster get_itemMaster() { }

	// RVA: 0x17A82F4 Offset: 0x17A82F4 VA: 0x17A82F4
	private static UserItemMaster get_userItemMaster() { }

	// RVA: 0x17A8360 Offset: 0x17A8360 VA: 0x17A8360
	public static bool IsScannable(int hIndex, int vIndex, SubmarineMapDataManager submarineData) { }

	// RVA: 0x17A86AC Offset: 0x17A86AC VA: 0x17A86AC
	public static List<SubmarineScanEvent> CreateScanEvents(int scanId, SubmarineMapPanelData basePanel, SubmarineMapDataManager submarineData) { }

	// RVA: 0x17A8A78 Offset: 0x17A8A78 VA: 0x17A8A78
	public static CommonConsumeDetailInfo[] GetConsumeItemByScanId(int scanId) { }

	// RVA: 0x17A8B08 Offset: 0x17A8B08 VA: 0x17A8B08
	public static string GetConsumeTextForScan(int scanId) { }

	// RVA: 0x17A8B20 Offset: 0x17A8B20 VA: 0x17A8B20
	public static int[] GetUnreleasedScanIds(int eventId) { }

	// RVA: 0x17A8C78 Offset: 0x17A8C78 VA: 0x17A8C78
	public static int[] GetReleasedScanIds(int eventId) { }
}

// Namespace: 
public static class SubmarineDataHelperSpot // TypeDefIndex: 10943
{
	// Properties
	private static EventPanelSpotMaster eventPanelSpotMaster { get; }
	private static EventPanelMapMaster eventPanelMapMaster { get; }
	private static EventPanelMapDetailMaster eventPanelMapDetailMaster { get; }
	private static UserEventMapMaster userEventMapMaster { get; }
	private static UserEventSpotMaster userEventSpotMaster { get; }
	private static SpotMaster spotMaster { get; }

	// Methods

	// RVA: 0x17A8DD0 Offset: 0x17A8DD0 VA: 0x17A8DD0
	private static EventPanelSpotMaster get_eventPanelSpotMaster() { }

	// RVA: 0x17A8E3C Offset: 0x17A8E3C VA: 0x17A8E3C
	private static EventPanelMapMaster get_eventPanelMapMaster() { }

	// RVA: 0x17A8EA8 Offset: 0x17A8EA8 VA: 0x17A8EA8
	private static EventPanelMapDetailMaster get_eventPanelMapDetailMaster() { }

	// RVA: 0x17A8F14 Offset: 0x17A8F14 VA: 0x17A8F14
	private static UserEventMapMaster get_userEventMapMaster() { }

	// RVA: 0x17A8F80 Offset: 0x17A8F80 VA: 0x17A8F80
	private static UserEventSpotMaster get_userEventSpotMaster() { }

	// RVA: 0x17A8FEC Offset: 0x17A8FEC VA: 0x17A8FEC
	private static SpotMaster get_spotMaster() { }

	// RVA: 0x17A9058 Offset: 0x17A9058 VA: 0x17A9058
	public static List<SubmarineSpotInfo> GetSubmarineSpotInfoList(int eventId, int mapId) { }

	// RVA: 0x17A932C Offset: 0x17A932C VA: 0x17A932C
	public static SubmarineSpotInfo GetSubmarineSpotInfo(int spotId, int eventId, int mapId) { }

	// RVA: 0x17A921C Offset: 0x17A921C VA: 0x17A921C
	private static SubmarineSpotInfo CreateSubmarineSpotInfo(EventPanelSpotEntity eventPanelSpotEntity, SpotEntity spotEntity) { }

	// RVA: 0x17A941C Offset: 0x17A941C VA: 0x17A941C
	public static bool IsSpotBelowClosedPanel(SpotEntity spotEntity, bool checkBeforeClearQuest = False) { }

	// RVA: 0x17A96D8 Offset: 0x17A96D8 VA: 0x17A96D8
	public static EventPanelSpotEntity[] GetSpotsEnemyOccupied(int eventId, int mapId, int hIndex, int vIndex) { }
}

// Namespace: 
public class SubmarineMapDataManager // TypeDefIndex: 10944
{
	// Fields
	private MapControl.MapInfo MapInfo; // 0x10
	private MapControl.WarInfo WarInfo; // 0x18
	private bool hasReleasedScanMethod; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC7ADB8 Offset: 0xC7ADB8 VA: 0xC7ADB8
	[DebuggerBrowsableAttribute] // RVA: 0xC7ADB8 Offset: 0xC7ADB8 VA: 0xC7ADB8
	private List<SubmarineMapPanelData> <PanelDataList>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7ADF4 Offset: 0xC7ADF4 VA: 0xC7ADF4
	[DebuggerBrowsableAttribute] // RVA: 0xC7ADF4 Offset: 0xC7ADF4 VA: 0xC7ADF4
	private List<SubmarineSilhouetteData> <SilhouetteDataList>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC7AE30 Offset: 0xC7AE30 VA: 0xC7AE30
	[DebuggerBrowsableAttribute] // RVA: 0xC7AE30 Offset: 0xC7AE30 VA: 0xC7AE30
	private SubmarinePanelPositionCalculator <PositionCalculator>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC7AE6C Offset: 0xC7AE6C VA: 0xC7AE6C
	[DebuggerBrowsableAttribute] // RVA: 0xC7AE6C Offset: 0xC7AE6C VA: 0xC7AE6C
	private SubmarineQuestSaveInfo <BeforeQuestInfo>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC7AEA8 Offset: 0xC7AEA8 VA: 0xC7AEA8
	[DebuggerBrowsableAttribute] // RVA: 0xC7AEA8 Offset: 0xC7AEA8 VA: 0xC7AEA8
	private SubmarineSettingsManager <Settings>k__BackingField; // 0x48

	// Properties
	private static EventPanelMapMaster eventPanelMapMaster { get; }
	private static EventPanelMapDetailMaster eventMapDetailMaster { get; }
	private static UserEventMapMaster userEventMapMaster { get; }
	public int EventId { get; }
	public List<SubmarineMapPanelData> PanelDataList { get; set; }
	public List<SubmarineSilhouetteData> SilhouetteDataList { get; set; }
	public SubmarinePanelPositionCalculator PositionCalculator { get; set; }
	public SubmarineQuestSaveInfo BeforeQuestInfo { get; set; }
	public SubmarineSettingsManager Settings { get; set; }

	// Methods

	// RVA: 0x17AB208 Offset: 0x17AB208 VA: 0x17AB208
	public void .ctor(MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo) { }

	// RVA: 0x17AB394 Offset: 0x17AB394 VA: 0x17AB394
	private static EventPanelMapMaster get_eventPanelMapMaster() { }

	// RVA: 0x17AB400 Offset: 0x17AB400 VA: 0x17AB400
	private static EventPanelMapDetailMaster get_eventMapDetailMaster() { }

	// RVA: 0x17AB46C Offset: 0x17AB46C VA: 0x17AB46C
	private static UserEventMapMaster get_userEventMapMaster() { }

	// RVA: 0x17AB35C Offset: 0x17AB35C VA: 0x17AB35C
	public int get_EventId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2408 Offset: 0xCD2408 VA: 0xCD2408
	// RVA: 0x17AB4D8 Offset: 0x17AB4D8 VA: 0x17AB4D8
	public List<SubmarineMapPanelData> get_PanelDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2418 Offset: 0xCD2418 VA: 0xCD2418
	// RVA: 0x17AB344 Offset: 0x17AB344 VA: 0x17AB344
	private void set_PanelDataList(List<SubmarineMapPanelData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2428 Offset: 0xCD2428 VA: 0xCD2428
	// RVA: 0x17AB4E0 Offset: 0x17AB4E0 VA: 0x17AB4E0
	public List<SubmarineSilhouetteData> get_SilhouetteDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2438 Offset: 0xCD2438 VA: 0xCD2438
	// RVA: 0x17AB34C Offset: 0x17AB34C VA: 0x17AB34C
	private void set_SilhouetteDataList(List<SubmarineSilhouetteData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2448 Offset: 0xCD2448 VA: 0xCD2448
	// RVA: 0x17AB4E8 Offset: 0x17AB4E8 VA: 0x17AB4E8
	public SubmarinePanelPositionCalculator get_PositionCalculator() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2458 Offset: 0xCD2458 VA: 0xCD2458
	// RVA: 0x17AB33C Offset: 0x17AB33C VA: 0x17AB33C
	private void set_PositionCalculator(SubmarinePanelPositionCalculator value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2468 Offset: 0xCD2468 VA: 0xCD2468
	// RVA: 0x17AB4F0 Offset: 0x17AB4F0 VA: 0x17AB4F0
	public SubmarineQuestSaveInfo get_BeforeQuestInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2478 Offset: 0xCD2478 VA: 0xCD2478
	// RVA: 0x17AB354 Offset: 0x17AB354 VA: 0x17AB354
	private void set_BeforeQuestInfo(SubmarineQuestSaveInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2488 Offset: 0xCD2488 VA: 0xCD2488
	// RVA: 0x17AB4F8 Offset: 0x17AB4F8 VA: 0x17AB4F8
	public SubmarineSettingsManager get_Settings() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2498 Offset: 0xCD2498 VA: 0xCD2498
	// RVA: 0x17AB38C Offset: 0x17AB38C VA: 0x17AB38C
	private void set_Settings(SubmarineSettingsManager value) { }

	// RVA: 0x17AB500 Offset: 0x17AB500 VA: 0x17AB500
	public void LoadSettings(SubmarineSettings overwriteSettings) { }

	// RVA: 0x17AB5DC Offset: 0x17AB5DC VA: 0x17AB5DC
	public void DeleteBeforeQuestInfo() { }

	// RVA: 0x17AB60C Offset: 0x17AB60C VA: 0x17AB60C
	public void ConstructParams() { }

	// RVA: 0x17ABB0C Offset: 0x17ABB0C VA: 0x17ABB0C
	public void UpdateParams(int beforeClearQuestId = -1) { }

	// RVA: 0x17A8474 Offset: 0x17A8474 VA: 0x17A8474
	public SubmarineMapPanelData GetPanelByIndices(int hIndex, int vIndex) { }

	// RVA: 0x17ABA3C Offset: 0x17ABA3C VA: 0x17ABA3C
	public SubmarineMapPanelData GetPanelByPanelId(int panelId) { }

	// RVA: 0x17AC400 Offset: 0x17AC400 VA: 0x17AC400
	public SubmarineMapPanelData GetPanelBySpotId(int spotId) { }

	// RVA: 0x17AC1FC Offset: 0x17AC1FC VA: 0x17AC1FC
	public SubmarineMapPanelData[] GetSilhouetteOccupiedPanels(SubmarineSilhouetteData silhouetteData) { }

	// RVA: 0x17A8560 Offset: 0x17A8560 VA: 0x17A8560
	public SubmarineMapPanelData[] GetNeighborPanels(int hIndex, int vIndex, bool diagonal = False) { }

	// RVA: 0x17AC4D8 Offset: 0x17AC4D8 VA: 0x17AC4D8
	public SubmarineMapPanelData[] GetPanelsByScanEvents(List<SubmarineScanEvent> scanEvents) { }

	// RVA: 0x17AC6B8 Offset: 0x17AC6B8 VA: 0x17AC6B8
	public int GetNewReleasedScanId() { }

	// RVA: 0x17AC840 Offset: 0x17AC840 VA: 0x17AC840
	public int[] GetEmptyPanelUniqueIds() { }

	// RVA: 0x17A95E4 Offset: 0x17A95E4 VA: 0x17A95E4
	public static bool IsOpenPanel(UserEventMapEntity userEventMapEntity, EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x17AC9DC Offset: 0x17AC9DC VA: 0x17AC9DC
	private static bool IsEnemyOccupiedPanelAndDefeated(UserEventMapEntity userEventMapEntity, EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x17ACAC8 Offset: 0x17ACAC8 VA: 0x17ACAC8
	public static bool IsPanelSatisfyCommonReleaseCond(SubmarineMapPanelData panelData, int beforeClearQuestId = -1) { }

	// RVA: 0x17AC9A4 Offset: 0x17AC9A4 VA: 0x17AC9A4
	private static bool IsPanelSatisfyCommonReleaseCond(EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x17ACB08 Offset: 0x17ACB08 VA: 0x17ACB08
	private static bool IsPanelSatisfyCommonReleaseCond(int commonReleaseId, int beforeClearQuestId = -1) { }

	// RVA: 0x17AC114 Offset: 0x17AC114 VA: 0x17AC114
	public static bool IsClearEachQuests(int[] questIds, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x17ACB14 Offset: 0x17ACB14 VA: 0x17ACB14
	public static bool HasUserMapData(int eventId, int mapId) { }

	// RVA: 0x17ACB68 Offset: 0x17ACB68 VA: 0x17ACB68
	public static bool IsSubmarineMap(int mapId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45754 Offset: 0xC45754 VA: 0xC45754
private sealed class SubmarineMapDataManager.<GetPanelByIndices>c__AnonStorey0 // TypeDefIndex: 10945
{
	// Fields
	internal int hIndex; // 0x10
	internal int vIndex; // 0x14

	// Methods

	// RVA: 0x17AC3F0 Offset: 0x17AC3F0 VA: 0x17AC3F0
	public void .ctor() { }

	// RVA: 0x17ACC14 Offset: 0x17ACC14 VA: 0x17ACC14
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45764 Offset: 0xC45764 VA: 0xC45764
private sealed class SubmarineMapDataManager.<GetPanelByPanelId>c__AnonStorey1 // TypeDefIndex: 10946
{
	// Fields
	internal int panelId; // 0x10

	// Methods

	// RVA: 0x17AC3F8 Offset: 0x17AC3F8 VA: 0x17AC3F8
	public void .ctor() { }

	// RVA: 0x17ACC84 Offset: 0x17ACC84 VA: 0x17ACC84
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45774 Offset: 0xC45774 VA: 0xC45774
private sealed class SubmarineMapDataManager.<GetPanelBySpotId>c__AnonStorey2 // TypeDefIndex: 10947
{
	// Fields
	internal int spotId; // 0x10

	// Methods

	// RVA: 0x17AC4D0 Offset: 0x17AC4D0 VA: 0x17AC4D0
	public void .ctor() { }

	// RVA: 0x17ACCC8 Offset: 0x17ACCC8 VA: 0x17ACCC8
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
public class SubmarineMapPanelData // TypeDefIndex: 10948
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC7AEE4 Offset: 0xC7AEE4 VA: 0xC7AEE4
	[DebuggerBrowsableAttribute] // RVA: 0xC7AEE4 Offset: 0xC7AEE4 VA: 0xC7AEE4
	private int <HIndex>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AF20 Offset: 0xC7AF20 VA: 0xC7AF20
	[DebuggerBrowsableAttribute] // RVA: 0xC7AF20 Offset: 0xC7AF20 VA: 0xC7AF20
	private int <VIndex>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC7AF5C Offset: 0xC7AF5C VA: 0xC7AF5C
	[DebuggerBrowsableAttribute] // RVA: 0xC7AF5C Offset: 0xC7AF5C VA: 0xC7AF5C
	private int <PanelId>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC7AF98 Offset: 0xC7AF98 VA: 0xC7AF98
	[DebuggerBrowsableAttribute] // RVA: 0xC7AF98 Offset: 0xC7AF98 VA: 0xC7AF98
	private Vector3 <LocalPosition>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC7AFD4 Offset: 0xC7AFD4 VA: 0xC7AFD4
	[DebuggerBrowsableAttribute] // RVA: 0xC7AFD4 Offset: 0xC7AFD4 VA: 0xC7AFD4
	private int <SpotId>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7B010 Offset: 0xC7B010 VA: 0xC7B010
	[DebuggerBrowsableAttribute] // RVA: 0xC7B010 Offset: 0xC7B010 VA: 0xC7B010
	private int <CommonReleaseId>k__BackingField; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xC7B04C Offset: 0xC7B04C VA: 0xC7B04C
	[DebuggerBrowsableAttribute] // RVA: 0xC7B04C Offset: 0xC7B04C VA: 0xC7B04C
	private SubmarineMapPanelComponent <Component>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC7B088 Offset: 0xC7B088 VA: 0xC7B088
