	public virtual IAsyncResult BeginInvoke(int fingerIndex, Vector2 position, AsyncCallback callback, object object) { }

	// RVA: 0x1DF5F24 Offset: 0x1DF5F24 VA: 0x1DF5F24 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC1F70C Offset: 0xC1F70C VA: 0xC1F70C
public interface FingerGestures.IFingerList : IEnumerable<FingerGestures.Finger>, IEnumerable // TypeDefIndex: 4174
{
	// Properties
	public abstract FingerGestures.Finger Item { get; }
	public abstract int Count { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract FingerGestures.Finger get_Item(int index);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Count();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract Vector2 GetAverageStartPosition();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract Vector2 GetAveragePosition();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Vector2 GetAveragePreviousPosition();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float GetAverageDistanceFromStart();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract FingerGestures.Finger GetOldest();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool AllMoving();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool MovingInSameDirection(float tolerance);
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC1F744 Offset: 0xC1F744 VA: 0xC1F744
[Serializable]
public class FingerGestures.FingerList : FingerGestures.IFingerList, IEnumerable<FingerGestures.Finger>, IEnumerable // TypeDefIndex: 4175
{
	// Fields
	[SerializeField] // RVA: 0xC2265C Offset: 0xC2265C VA: 0xC2265C
	private List<FingerGestures.Finger> list; // 0x10
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerStartPosition; // 0x0
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerPosition; // 0x8
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerPreviousPosition; // 0x10
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<float> delGetFingerDistanceFromStart; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC2266C Offset: 0xC2266C VA: 0xC2266C
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache0; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC2267C Offset: 0xC2267C VA: 0xC2267C
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache1; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC2268C Offset: 0xC2268C VA: 0xC2268C
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache2; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC2269C Offset: 0xC2269C VA: 0xC2269C
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<float> <>f__mg$cache3; // 0x38

	// Properties
	public FingerGestures.Finger Item { get; }
	public int Count { get; }

	// Methods

	// RVA: 0x1DEF3AC Offset: 0x1DEF3AC VA: 0x1DEF3AC
	public void .ctor() { }

	// RVA: 0x1DF5230 Offset: 0x1DF5230 VA: 0x1DF5230
	public void .ctor(List<FingerGestures.Finger> list) { }

	// RVA: 0x1DEF9EC Offset: 0x1DEF9EC VA: 0x1DEF9EC Slot: 4
	public FingerGestures.Finger get_Item(int index) { }

	// RVA: 0x1DEFACC Offset: 0x1DEFACC VA: 0x1DEFACC Slot: 5
	public int get_Count() { }

	// RVA: 0x1DF525C Offset: 0x1DF525C VA: 0x1DF525C Slot: 13
	public IEnumerator<FingerGestures.Finger> GetEnumerator() { }

	// RVA: 0x1DF52F0 Offset: 0x1DF52F0 VA: 0x1DF52F0 Slot: 14
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1DEF8E0 Offset: 0x1DEF8E0 VA: 0x1DEF8E0
	public void Add(FingerGestures.Finger touch) { }

	// RVA: 0x1DEFA5C Offset: 0x1DEFA5C VA: 0x1DEFA5C
	public bool Remove(FingerGestures.Finger touch) { }

	// RVA: 0x1DF52F4 Offset: 0x1DF52F4 VA: 0x1DF52F4
	public bool Contains(FingerGestures.Finger touch) { }

	// RVA: 0x1DF5364 Offset: 0x1DF5364 VA: 0x1DF5364
	public void AddRange(IEnumerable<FingerGestures.Finger> touches) { }

	// RVA: 0x1DEF7B0 Offset: 0x1DEF7B0 VA: 0x1DEF7B0
	public void Clear() { }

	// RVA: 0x1DF53D4 Offset: 0x1DF53D4 VA: 0x1DF53D4
	public Vector2 AverageVector(FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> getProperty) { }

	// RVA: 0x1DF5594 Offset: 0x1DF5594 VA: 0x1DF5594
	public float AverageFloat(FingerGestures.FingerList.FingerPropertyGetterDelegate<float> getProperty) { }

	// RVA: 0x1DF56B0 Offset: 0x1DF56B0 VA: 0x1DF56B0
	private static Vector2 GetFingerStartPosition(FingerGestures.Finger finger) { }

	// RVA: 0x1DF56D8 Offset: 0x1DF56D8 VA: 0x1DF56D8
	private static Vector2 GetFingerPosition(FingerGestures.Finger finger) { }

	// RVA: 0x1DF5700 Offset: 0x1DF5700 VA: 0x1DF5700
	private static Vector2 GetFingerPreviousPosition(FingerGestures.Finger finger) { }

	// RVA: 0x1DF5728 Offset: 0x1DF5728 VA: 0x1DF5728
	private static float GetFingerDistanceFromStart(FingerGestures.Finger finger) { }

	// RVA: 0x1DF5750 Offset: 0x1DF5750 VA: 0x1DF5750 Slot: 6
	public Vector2 GetAverageStartPosition() { }

	// RVA: 0x1DF00A0 Offset: 0x1DF00A0 VA: 0x1DF00A0 Slot: 7
	public Vector2 GetAveragePosition() { }

	// RVA: 0x1DF57C0 Offset: 0x1DF57C0 VA: 0x1DF57C0 Slot: 8
	public Vector2 GetAveragePreviousPosition() { }

	// RVA: 0x1DF5830 Offset: 0x1DF5830 VA: 0x1DF5830 Slot: 9
	public float GetAverageDistanceFromStart() { }

	// RVA: 0x1DF58A0 Offset: 0x1DF58A0 VA: 0x1DF58A0 Slot: 10
	public FingerGestures.Finger GetOldest() { }

	// RVA: 0x1DF59DC Offset: 0x1DF59DC VA: 0x1DF59DC Slot: 12
	public bool MovingInSameDirection(float tolerance) { }

	// RVA: 0x1DF5BE0 Offset: 0x1DF5BE0 VA: 0x1DF5BE0 Slot: 11
	public bool AllMoving() { }

	// RVA: 0x1DF5CBC Offset: 0x1DF5CBC VA: 0x1DF5CBC
	private static void .cctor() { }
}

// Namespace: 
public sealed class FingerGestures.FingerList.FingerPropertyGetterDelegate<T> : MulticastDelegate // TypeDefIndex: 4176
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226B3FC Offset: 0x226B3FC VA: 0x226B3FC
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>..ctor
	|
	|-RVA: 0x226B7E0 Offset: 0x226B7E0 VA: 0x226B7E0
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>..ctor
	|
	|-RVA: 0x226BBF4 Offset: 0x226BBF4 VA: 0x226BBF4
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual T Invoke(FingerGestures.Finger finger) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226B40C Offset: 0x226B40C VA: 0x226B40C
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.Invoke
	|
	|-RVA: 0x226B7F0 Offset: 0x226B7F0 VA: 0x226B7F0
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.Invoke
	|
	|-RVA: 0x226BC04 Offset: 0x226BC04 VA: 0x226BC04
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(FingerGestures.Finger finger, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226B7B0 Offset: 0x226B7B0 VA: 0x226B7B0
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.BeginInvoke
	|
	|-RVA: 0x226BB94 Offset: 0x226BB94 VA: 0x226BB94
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.BeginInvoke
	|
	|-RVA: 0x226BFB0 Offset: 0x226BFB0 VA: 0x226BFB0
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual T EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226B7D4 Offset: 0x226B7D4 VA: 0x226B7D4
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.EndInvoke
	|
	|-RVA: 0x226BBB8 Offset: 0x226BBB8 VA: 0x226BBB8
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.EndInvoke
	|
	|-RVA: 0x226BFD4 Offset: 0x226BFD4 VA: 0x226BFD4
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.EndInvoke
	*/
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC1F77C Offset: 0xC1F77C VA: 0xC1F77C
public enum FingerGestures.SwipeDirection // TypeDefIndex: 4177
{
	// Fields
	public int value__; // 0x0
	public const FingerGestures.SwipeDirection Right = 1;
	public const FingerGestures.SwipeDirection Left = 2;
	public const FingerGestures.SwipeDirection Up = 4;
	public const FingerGestures.SwipeDirection Down = 8;
	public const FingerGestures.SwipeDirection UpperLeftDiagonal = 16;
	public const FingerGestures.SwipeDirection UpperRightDiagonal = 32;
	public const FingerGestures.SwipeDirection LowerRightDiagonal = 64;
	public const FingerGestures.SwipeDirection LowerLeftDiagonal = 128;
	public const FingerGestures.SwipeDirection None = 0;
	public const FingerGestures.SwipeDirection Vertical = 12;
	public const FingerGestures.SwipeDirection Horizontal = 3;
	public const FingerGestures.SwipeDirection Cross = 15;
	public const FingerGestures.SwipeDirection UpperDiagonals = 48;
	public const FingerGestures.SwipeDirection LowerDiagonals = 192;
	public const FingerGestures.SwipeDirection Diagonals = 240;
	public const FingerGestures.SwipeDirection All = 255;
}

// Namespace: 
public enum DistanceUnit // TypeDefIndex: 4178
{
	// Fields
	public int value__; // 0x0
	public const DistanceUnit Pixels = 0;
	public const DistanceUnit Inches = 1;
	public const DistanceUnit Centimeters = 2;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC1F78C Offset: 0xC1F78C VA: 0xC1F78C
public static class FingerGesturesExtensions // TypeDefIndex: 4179
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC24360 Offset: 0xC24360 VA: 0xC24360
	// RVA: 0x1DF5F60 Offset: 0x1DF5F60 VA: 0x1DF5F60
	public static string Abreviation(DistanceUnit unit) { }

	[ExtensionAttribute] // RVA: 0xC24370 Offset: 0xC24370 VA: 0xC24370
	// RVA: 0x1DF6044 Offset: 0x1DF6044 VA: 0x1DF6044
	public static float Convert(float value, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC24380 Offset: 0xC24380 VA: 0xC24380
	// RVA: 0x1DF60C8 Offset: 0x1DF60C8 VA: 0x1DF60C8
	public static float In(float valueInPixels, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC24390 Offset: 0xC24390 VA: 0xC24390
	// RVA: 0x1DF60D8 Offset: 0x1DF60D8 VA: 0x1DF60D8
	public static float Centimeters(float valueInPixels) { }

	[ExtensionAttribute] // RVA: 0xC243A0 Offset: 0xC243A0 VA: 0xC243A0
	// RVA: 0x1DF60E4 Offset: 0x1DF60E4 VA: 0x1DF60E4
	public static float Inches(float valueInPixels) { }

	[ExtensionAttribute] // RVA: 0xC243B0 Offset: 0xC243B0 VA: 0xC243B0
	// RVA: 0x1DF60F0 Offset: 0x1DF60F0 VA: 0x1DF60F0
	public static Vector2 Convert(Vector2 v, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC243C0 Offset: 0xC243C0 VA: 0xC243C0
	// RVA: 0x1DF617C Offset: 0x1DF617C VA: 0x1DF617C
	public static Vector2 In(Vector2 vecInPixels, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC243D0 Offset: 0xC243D0 VA: 0xC243D0
	// RVA: 0x1DF618C Offset: 0x1DF618C VA: 0x1DF618C
	public static Vector2 Centimeters(Vector2 vecInPixels) { }

	[ExtensionAttribute] // RVA: 0xC243E0 Offset: 0xC243E0 VA: 0xC243E0
	// RVA: 0x1DF6198 Offset: 0x1DF6198 VA: 0x1DF6198
	public static Vector2 Inches(Vector2 vecInPixels) { }
}

// Namespace: 
public class DragGesture : ContinuousGesture // TypeDefIndex: 4180
{
	// Fields
	private Vector2 deltaMove; // 0xB4
	internal Vector2 LastPos; // 0xBC
	internal Vector2 LastDelta; // 0xC4

	// Properties
	public Vector2 DeltaMove { get; set; }
	public Vector2 TotalMove { get; }

	// Methods

	// RVA: 0x1DEDA40 Offset: 0x1DEDA40 VA: 0x1DEDA40
	public void .ctor() { }

	// RVA: 0x1DEDACC Offset: 0x1DEDACC VA: 0x1DEDACC
	public Vector2 get_DeltaMove() { }

	// RVA: 0x1DEDAD4 Offset: 0x1DEDAD4 VA: 0x1DEDAD4
	internal void set_DeltaMove(Vector2 value) { }

	// RVA: 0x1DEDADC Offset: 0x1DEDADC VA: 0x1DEDADC
	public Vector2 get_TotalMove() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F79C Offset: 0xC1F79C VA: 0xC1F79C
public class DragRecognizer : ContinuousGestureRecognizer<DragGesture> // TypeDefIndex: 4181
{
	// Fields
	public float MoveTolerance; // 0x70
	public bool ApplySameDirectionConstraint; // 0x74

	// Methods

	// RVA: 0x1DEDB78 Offset: 0x1DEDB78 VA: 0x1DEDB78
	public void .ctor() { }

	// RVA: 0x1DEDBD0 Offset: 0x1DEDBD0 VA: 0x1DEDBD0 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x1DEDC18 Offset: 0x1DEDC18 VA: 0x1DEDC18 Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(DragGesture gesture) { }

	// RVA: 0x1DEDC4C Offset: 0x1DEDC4C VA: 0x1DEDC4C Slot: 14
	protected override bool CanBegin(DragGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1DEDE88 Offset: 0x1DEDE88 VA: 0x1DEDE88 Slot: 15
	protected override void OnBegin(DragGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1DEE0E0 Offset: 0x1DEE0E0 VA: 0x1DEE0E0 Slot: 16
	protected override GestureRecognitionState OnRecognize(DragGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
[Serializable]
public class LongPressGesture : DiscreteGesture // TypeDefIndex: 4182
{
	// Methods

	// RVA: 0x1DFACA0 Offset: 0x1DFACA0 VA: 0x1DFACA0
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F7D4 Offset: 0xC1F7D4 VA: 0xC1F7D4
public class LongPressRecognizer : DiscreteGestureRecognizer<LongPressGesture> // TypeDefIndex: 4183
{
	// Fields
	public float Duration; // 0x70
	public float MoveTolerance; // 0x74

	// Methods

	// RVA: 0x1DFACA4 Offset: 0x1DFACA4 VA: 0x1DFACA4
	public void .ctor() { }

	// RVA: 0x1DFAD00 Offset: 0x1DFAD00 VA: 0x1DFAD00 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x1DFAD48 Offset: 0x1DFAD48 VA: 0x1DFAD48 Slot: 15
	protected override void OnBegin(LongPressGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1DFAE5C Offset: 0x1DFAE5C VA: 0x1DFAE5C Slot: 16
	protected override GestureRecognitionState OnRecognize(LongPressGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
public class PinchGesture : ContinuousGesture // TypeDefIndex: 4184
{
	// Fields
	private float delta; // 0xB4
	private float gap; // 0xB8

	// Properties
	public float Delta { get; set; }
	public float Gap { get; set; }

	// Methods

	// RVA: 0x1E016B8 Offset: 0x1E016B8 VA: 0x1E016B8
	public void .ctor() { }

	// RVA: 0x1DF9F9C Offset: 0x1DF9F9C VA: 0x1DF9F9C
	public float get_Delta() { }

	// RVA: 0x1E016C0 Offset: 0x1E016C0 VA: 0x1E016C0
	internal void set_Delta(float value) { }

	// RVA: 0x1DF9FA4 Offset: 0x1DF9FA4 VA: 0x1DF9FA4
	public float get_Gap() { }

	// RVA: 0x1E016C8 Offset: 0x1E016C8 VA: 0x1E016C8
	internal void set_Gap(float value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F80C Offset: 0xC1F80C VA: 0xC1F80C
public class PinchRecognizer : ContinuousGestureRecognizer<PinchGesture> // TypeDefIndex: 4185
{
	// Fields
	public float MinDOT; // 0x70
	public float MinDistance; // 0x74

	// Properties
	public override int RequiredFingerCount { get; set; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x1E016D0 Offset: 0x1E016D0 VA: 0x1E016D0
	public void .ctor() { }

	// RVA: 0x1E01730 Offset: 0x1E01730 VA: 0x1E01730 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x1E01778 Offset: 0x1E01778 VA: 0x1E01778 Slot: 4
	public override int get_RequiredFingerCount() { }

	// RVA: 0x1E01780 Offset: 0x1E01780 VA: 0x1E01780 Slot: 5
	public override void set_RequiredFingerCount(int value) { }

	// RVA: 0x1E01788 Offset: 0x1E01788 VA: 0x1E01788 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0x1E01790 Offset: 0x1E01790 VA: 0x1E01790 Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(PinchGesture gesture) { }

	// RVA: 0x1E017BC Offset: 0x1E017BC VA: 0x1E017BC Slot: 7
	public override GestureResetMode GetDefaultResetMode() { }

	// RVA: 0x1E017C4 Offset: 0x1E017C4 VA: 0x1E017C4 Slot: 14
	protected override bool CanBegin(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1E01AD4 Offset: 0x1E01AD4 VA: 0x1E01AD4 Slot: 15
	protected override void OnBegin(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1E01D4C Offset: 0x1E01D4C VA: 0x1E01D4C Slot: 16
	protected override GestureRecognitionState OnRecognize(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1E01A4C Offset: 0x1E01A4C VA: 0x1E01A4C
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }
}

// Namespace: 
public class PointCloudGestureTemplate : ScriptableObject // TypeDefIndex: 4186
{
	// Fields
	[SerializeField] // RVA: 0xC226AC Offset: 0xC226AC VA: 0xC226AC
	private List<int> strokeIds; // 0x18
	[SerializeField] // RVA: 0xC226BC Offset: 0xC226BC VA: 0xC226BC
	private List<Vector2> positions; // 0x20
	[SerializeField] // RVA: 0xC226CC Offset: 0xC226CC VA: 0xC226CC
	private int strokeCount; // 0x28
	[SerializeField] // RVA: 0xC226DC Offset: 0xC226DC VA: 0xC226DC
	private Vector2 size; // 0x2C

	// Properties
	public Vector2 Size { get; }
	public float Width { get; }
	public float Height { get; }
	public int PointCount { get; }
	public int StrokeCount { get; }

	// Methods

	// RVA: 0x1E021D0 Offset: 0x1E021D0 VA: 0x1E021D0
	public void .ctor() { }

	// RVA: 0x1E02244 Offset: 0x1E02244 VA: 0x1E02244
	public Vector2 get_Size() { }

	// RVA: 0x1E0224C Offset: 0x1E0224C VA: 0x1E0224C
	public float get_Width() { }

	// RVA: 0x1E02254 Offset: 0x1E02254 VA: 0x1E02254
	public float get_Height() { }

	// RVA: 0x1E0225C Offset: 0x1E0225C VA: 0x1E0225C
	private void Awake() { }

	// RVA: 0x1E022FC Offset: 0x1E022FC VA: 0x1E022FC
	public void BeginPoints() { }

	// RVA: 0x1E023B4 Offset: 0x1E023B4 VA: 0x1E023B4
	public void AddPoint(int stroke, Vector2 p) { }

	// RVA: 0x1E02460 Offset: 0x1E02460 VA: 0x1E02460
	public void AddPoint(int stroke, float x, float y) { }

	// RVA: 0x1E024A8 Offset: 0x1E024A8 VA: 0x1E024A8
	public void EndPoints() { }

	// RVA: 0x1E028F4 Offset: 0x1E028F4 VA: 0x1E028F4
	public Vector2 GetPosition(int pointIndex) { }

	// RVA: 0x1E02964 Offset: 0x1E02964 VA: 0x1E02964
	public int GetStrokeId(int pointIndex) { }

	// RVA: 0x1E029D4 Offset: 0x1E029D4 VA: 0x1E029D4
	public int get_PointCount() { }

	// RVA: 0x1E02A34 Offset: 0x1E02A34 VA: 0x1E02A34
	public int get_StrokeCount() { }

	// RVA: 0x1E025F8 Offset: 0x1E025F8 VA: 0x1E025F8
	public void Normalize() { }

	// RVA: 0x1E028F0 Offset: 0x1E028F0 VA: 0x1E028F0
	private void MakeDirty() { }
}

// Namespace: 
public class PointCloudGesture : DiscreteGesture // TypeDefIndex: 4187
{
	// Fields
	public List<PointCloudRegognizer.Point> RawPoints; // 0xB8
	public List<PointCloudRegognizer.Point> NormalizedPoints; // 0xC0
	public PointCloudGestureTemplate RecognizedTemplate; // 0xC8
	public float MatchDistance; // 0xD0
	public float MatchScore; // 0xD4

	// Methods

	// RVA: 0x1E0213C Offset: 0x1E0213C VA: 0x1E0213C
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F844 Offset: 0xC1F844 VA: 0xC1F844
public class PointCloudRegognizer : DiscreteGestureRecognizer<PointCloudGesture> // TypeDefIndex: 4188
{
	// Fields
	public float MinDistanceBetweenSamples; // 0x70
	public float MaxMatchDistance; // 0x74
	public List<PointCloudGestureTemplate> Templates; // 0x78
	private const int NormalizedPointCount = 32;
	private PointCloudRegognizer.GestureNormalizer normalizer; // 0x80
	private List<PointCloudRegognizer.NormalizedTemplate> normalizedTemplates; // 0x88
	private static bool[] matched; // 0x0
	private PointCloudGesture debugLastGesture; // 0x90
	private PointCloudRegognizer.NormalizedTemplate debugLastMatchedTemplate; // 0x98
	private const float gizmoSphereRadius = 0.01;

	// Methods

	// RVA: 0x1E02A3C Offset: 0x1E02A3C VA: 0x1E02A3C
	public void .ctor() { }

	// RVA: 0x1E02A98 Offset: 0x1E02A98 VA: 0x1E02A98 Slot: 10
	protected override void Awake() { }

	// RVA: 0x1E02DD4 Offset: 0x1E02DD4 VA: 0x1E02DD4
	private PointCloudRegognizer.NormalizedTemplate FindNormalizedTemplate(PointCloudGestureTemplate template) { }

	// RVA: 0x1E02EA4 Offset: 0x1E02EA4 VA: 0x1E02EA4
	private List<PointCloudRegognizer.Point> Normalize(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x1E02C00 Offset: 0x1E02C00 VA: 0x1E02C00
	public bool AddTemplate(PointCloudGestureTemplate template) { }

	// RVA: 0x1E02F48 Offset: 0x1E02F48 VA: 0x1E02F48 Slot: 15
	protected override void OnBegin(PointCloudGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1E03154 Offset: 0x1E03154 VA: 0x1E03154
	private bool RecognizePointCloud(PointCloudGesture gesture) { }

	// RVA: 0x1E033E0 Offset: 0x1E033E0 VA: 0x1E033E0
	private float GreedyCloudMatch(List<PointCloudRegognizer.Point> points, List<PointCloudRegognizer.Point> refPoints) { }

	// RVA: 0x1E035E8 Offset: 0x1E035E8 VA: 0x1E035E8
	private static float CloudDistance(List<PointCloudRegognizer.Point> points1, List<PointCloudRegognizer.Point> points2, int startIndex) { }

	// RVA: 0x1E03950 Offset: 0x1E03950 VA: 0x1E03950
	private static void ResetMatched(int count) { }

	// RVA: 0x1E03A8C Offset: 0x1E03A8C VA: 0x1E03A8C Slot: 16
	protected override GestureRecognitionState OnRecognize(PointCloudGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x1E03E28 Offset: 0x1E03E28 VA: 0x1E03E28 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x1E03E70 Offset: 0x1E03E70 VA: 0x1E03E70
	public void OnDrawGizmosSelected() { }

	// RVA: 0x1E03EFC Offset: 0x1E03EFC VA: 0x1E03EFC
	private void DrawNormalizedPointCloud(List<PointCloudRegognizer.Point> points, float scale) { }

	// RVA: 0x1E04158 Offset: 0x1E04158 VA: 0x1E04158
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct PointCloudRegognizer.Point // TypeDefIndex: 4189
{
	// Fields
	public int StrokeId; // 0x0
	public Vector2 Position; // 0x4

	// Methods

	// RVA: 0xD735A0 Offset: 0xD735A0 VA: 0xD735A0
	public void .ctor(int strokeId, Vector2 pos) { }

	// RVA: 0xD735AC Offset: 0xD735AC VA: 0xD735AC
	public void .ctor(int strokeId, float x, float y) { }
}

// Namespace: 
private class PointCloudRegognizer.NormalizedTemplate // TypeDefIndex: 4190
{
	// Fields
	public PointCloudGestureTemplate Source; // 0x10
	public List<PointCloudRegognizer.Point> Points; // 0x18

	// Methods

	// RVA: 0x28F97E0 Offset: 0x28F97E0 VA: 0x28F97E0
	public void .ctor() { }
}

// Namespace: 
private class PointCloudRegognizer.GestureNormalizer // TypeDefIndex: 4191
{
	// Fields
	private List<PointCloudRegognizer.Point> normalizedPoints; // 0x10
	private List<PointCloudRegognizer.Point> pointBuffer; // 0x18

	// Methods

	// RVA: 0x28F8C64 Offset: 0x28F8C64 VA: 0x28F8C64
	public void .ctor() { }

	// RVA: 0x28F8CF8 Offset: 0x28F8CF8 VA: 0x28F8CF8
	public List<PointCloudRegognizer.Point> Apply(List<PointCloudRegognizer.Point> inputPoints, int normalizedPointsCount) { }

	// RVA: 0x28F8D2C Offset: 0x28F8D2C VA: 0x28F8D2C
	private List<PointCloudRegognizer.Point> Resample(List<PointCloudRegognizer.Point> points, int normalizedPointsCount) { }

	// RVA: 0x28F94D4 Offset: 0x28F94D4 VA: 0x28F94D4
	private static float PathLength(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x28F90E0 Offset: 0x28F90E0 VA: 0x28F90E0
	private static void Scale(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x28F9384 Offset: 0x28F9384 VA: 0x28F9384
	private static void TranslateToOrigin(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x28F9660 Offset: 0x28F9660 VA: 0x28F9660
	private static Vector2 Centroid(List<PointCloudRegognizer.Point> points) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC20538 Offset: 0xC20538 VA: 0xC20538
private sealed class PointCloudRegognizer.<FindNormalizedTemplate>c__AnonStorey0 // TypeDefIndex: 4192
{
	// Fields
	internal PointCloudGestureTemplate template; // 0x10

	// Methods

	// RVA: 0x28F8BD0 Offset: 0x28F8BD0 VA: 0x28F8BD0
	public void .ctor() { }

	// RVA: 0x28F8BD8 Offset: 0x28F8BD8 VA: 0x28F8BD8
	internal bool <>m__0(PointCloudRegognizer.NormalizedTemplate t) { }
}

// Namespace: 
[Serializable]
public class SwipeGesture : DiscreteGesture // TypeDefIndex: 4193
{
	// Fields
	private Vector2 move; // 0xB4
	private float velocity; // 0xBC
	private FingerGestures.SwipeDirection direction; // 0xC0
	internal int MoveCounter; // 0xC4
	internal float Deviation; // 0xC8

	// Properties
	public Vector2 Move { get; set; }
	public float Velocity { get; set; }
	public FingerGestures.SwipeDirection Direction { get; set; }

	// Methods

	// RVA: 0x28FBBD4 Offset: 0x28FBBD4 VA: 0x28FBBD4
	public void .ctor() { }

	// RVA: 0x28FBC48 Offset: 0x28FBC48 VA: 0x28FBC48
	public Vector2 get_Move() { }

	// RVA: 0x28FBC50 Offset: 0x28FBC50 VA: 0x28FBC50
	internal void set_Move(Vector2 value) { }

	// RVA: 0x28FBC58 Offset: 0x28FBC58 VA: 0x28FBC58
	public float get_Velocity() { }

	// RVA: 0x28FBC60 Offset: 0x28FBC60 VA: 0x28FBC60
	internal void set_Velocity(float value) { }

	// RVA: 0x28FBC68 Offset: 0x28FBC68 VA: 0x28FBC68
	public FingerGestures.SwipeDirection get_Direction() { }

	// RVA: 0x28FBC70 Offset: 0x28FBC70 VA: 0x28FBC70
	internal void set_Direction(FingerGestures.SwipeDirection value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F87C Offset: 0xC1F87C VA: 0xC1F87C
public class SwipeRecognizer : DiscreteGestureRecognizer<SwipeGesture> // TypeDefIndex: 4194
{
	// Fields
	private FingerGestures.SwipeDirection ValidDirections; // 0x70
	public float MinDistance; // 0x74
	public float MaxDistance; // 0x78
	public float MinVelocity; // 0x7C
	public float MaxDeviation; // 0x80

	// Methods

	// RVA: 0x28FBC78 Offset: 0x28FBC78 VA: 0x28FBC78
	public void .ctor() { }

	// RVA: 0x28FBCE0 Offset: 0x28FBCE0 VA: 0x28FBCE0 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x28FBD28 Offset: 0x28FBD28 VA: 0x28FBD28 Slot: 14
	protected override bool CanBegin(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x28FBF18 Offset: 0x28FBF18 VA: 0x28FBF18 Slot: 15
	protected override void OnBegin(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x28FC170 Offset: 0x28FC170 VA: 0x28FC170 Slot: 16
	protected override GestureRecognitionState OnRecognize(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x28FC68C Offset: 0x28FC68C VA: 0x28FC68C
	public bool IsValidDirection(FingerGestures.SwipeDirection dir) { }
}

// Namespace: 
[Serializable]
public class TapGesture : DiscreteGesture // TypeDefIndex: 4195
{
	// Fields
	private int taps; // 0xB4
	internal bool Down; // 0xB8
	internal bool WasDown; // 0xB9
	internal float LastDownTime; // 0xBC
	internal float LastTapTime; // 0xC0

	// Properties
	public int Taps { get; set; }

	// Methods

	// RVA: 0x2901910 Offset: 0x2901910 VA: 0x2901910
	public void .ctor() { }

	// RVA: 0x2901918 Offset: 0x2901918 VA: 0x2901918
	public int get_Taps() { }

	// RVA: 0x2901920 Offset: 0x2901920 VA: 0x2901920
	internal void set_Taps(int value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F8B4 Offset: 0xC1F8B4 VA: 0xC1F8B4
public class TapRecognizer : DiscreteGestureRecognizer<TapGesture> // TypeDefIndex: 4196
{
	// Fields
	public int RequiredTaps; // 0x70
	public float MoveTolerance; // 0x74
	public float MaxDuration; // 0x78
	public float MaxDelayBetweenTaps; // 0x7C

	// Properties
	private bool IsMultiTap { get; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x2901928 Offset: 0x2901928 VA: 0x2901928
	public void .ctor() { }

	// RVA: 0x290198C Offset: 0x290198C VA: 0x290198C
	private bool get_IsMultiTap() { }

	// RVA: 0x290199C Offset: 0x290199C VA: 0x290199C
	private bool HasTimedOut(TapGesture gesture) { }

	// RVA: 0x2901A44 Offset: 0x2901A44 VA: 0x2901A44 Slot: 23
	protected override void Reset(TapGesture gesture) { }

	// RVA: 0x2901AE0 Offset: 0x2901AE0 VA: 0x2901AE0 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0x2901AFC Offset: 0x2901AFC VA: 0x2901AFC
	private GestureRecognitionState RecognizeSingleTap(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x2901DD0 Offset: 0x2901DD0 VA: 0x2901DD0
	private GestureRecognitionState RecognizeMultiTap(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x29022FC Offset: 0x29022FC VA: 0x29022FC Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x2902344 Offset: 0x2902344 VA: 0x2902344 Slot: 15
	protected override void OnBegin(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x29024BC Offset: 0x29024BC VA: 0x29024BC Slot: 16
	protected override GestureRecognitionState OnRecognize(TapGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
public class TwistGesture : ContinuousGesture // TypeDefIndex: 4197
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC226EC Offset: 0xC226EC VA: 0xC226EC
	[DebuggerBrowsableAttribute] // RVA: 0xC226EC Offset: 0xC226EC VA: 0xC226EC
	private float <DeltaRotation>k__BackingField; // 0xB4
	[CompilerGeneratedAttribute] // RVA: 0xC22728 Offset: 0xC22728 VA: 0xC22728
	[DebuggerBrowsableAttribute] // RVA: 0xC22728 Offset: 0xC22728 VA: 0xC22728
	private float <TotalRotation>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC22764 Offset: 0xC22764 VA: 0xC22764
	[DebuggerBrowsableAttribute] // RVA: 0xC22764 Offset: 0xC22764 VA: 0xC22764
	private FingerGestures.Finger <Pivot>k__BackingField; // 0xC0

	// Properties
	public float DeltaRotation { get; set; }
	public float TotalRotation { get; set; }
	public FingerGestures.Finger Pivot { get; set; }

	// Methods

	// RVA: 0x2902598 Offset: 0x2902598 VA: 0x2902598
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC243F0 Offset: 0xC243F0 VA: 0xC243F0
	// RVA: 0x2901908 Offset: 0x2901908 VA: 0x2901908
	public float get_DeltaRotation() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24400 Offset: 0xC24400 VA: 0xC24400
	// RVA: 0x29025A0 Offset: 0x29025A0 VA: 0x29025A0
	internal void set_DeltaRotation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24410 Offset: 0xC24410 VA: 0xC24410
	// RVA: 0x29025A8 Offset: 0x29025A8 VA: 0x29025A8
	public float get_TotalRotation() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24420 Offset: 0xC24420 VA: 0xC24420
	// RVA: 0x29025B0 Offset: 0x29025B0 VA: 0x29025B0
	internal void set_TotalRotation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC24430 Offset: 0xC24430 VA: 0xC24430
	// RVA: 0x29025B8 Offset: 0x29025B8 VA: 0x29025B8
	public FingerGestures.Finger get_Pivot() { }

	[CompilerGeneratedAttribute] // RVA: 0xC24440 Offset: 0xC24440 VA: 0xC24440
	// RVA: 0x29025C0 Offset: 0x29025C0 VA: 0x29025C0
	internal void set_Pivot(FingerGestures.Finger value) { }
}

// Namespace: 
public enum TwistMethod // TypeDefIndex: 4198
{
	// Fields
	public int value__; // 0x0
	public const TwistMethod Standard = 0;
	public const TwistMethod Pivot = 1;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F8EC Offset: 0xC1F8EC VA: 0xC1F8EC
public class TwistRecognizer : ContinuousGestureRecognizer<TwistGesture> // TypeDefIndex: 4199
{
	// Fields
	public TwistMethod Method; // 0x70
	public float MinDOT; // 0x74
	public float MinRotation; // 0x78
	public float PivotMoveTolerance; // 0x7C

	// Properties
	public override int RequiredFingerCount { get; set; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x29025C8 Offset: 0x29025C8 VA: 0x29025C8
	public void .ctor() { }

	// RVA: 0x2902630 Offset: 0x2902630 VA: 0x2902630 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x2902678 Offset: 0x2902678 VA: 0x2902678 Slot: 4
	public override int get_RequiredFingerCount() { }

	// RVA: 0x2902680 Offset: 0x2902680 VA: 0x2902680 Slot: 5
	public override void set_RequiredFingerCount(int value) { }

	// RVA: 0x2902688 Offset: 0x2902688 VA: 0x2902688 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0x2902690 Offset: 0x2902690 VA: 0x2902690 Slot: 7
	public override GestureResetMode GetDefaultResetMode() { }

	// RVA: 0x2902698 Offset: 0x2902698 VA: 0x2902698 Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(TwistGesture gesture) { }

	// RVA: 0x29026C8 Offset: 0x29026C8 VA: 0x29026C8 Slot: 23
	protected override void Reset(TwistGesture gesture) { }

	// RVA: 0x290273C Offset: 0x290273C VA: 0x290273C
	private FingerGestures.Finger GetTwistPivot(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0x290280C Offset: 0x290280C VA: 0x290280C Slot: 14
	protected override bool CanBegin(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x2902C90 Offset: 0x2902C90 VA: 0x2902C90 Slot: 15
	protected override void OnBegin(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x2902F9C Offset: 0x2902F9C VA: 0x2902F9C Slot: 16
	protected override GestureRecognitionState OnRecognize(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x2902A74 Offset: 0x2902A74 VA: 0x2902A74
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0x2902B00 Offset: 0x2902B00 VA: 0x2902B00
	private static float SignedAngularGap(FingerGestures.Finger finger0, FingerGestures.Finger finger1, Vector2 refPos0, Vector2 refPos1) { }
}

// Namespace: 
public abstract class FGInputProvider : MonoBehaviour // TypeDefIndex: 4200
{
	// Properties
	public abstract int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0x1DEE538 Offset: 0x1DEE538 VA: 0x1DEE538
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_MaxSimultaneousFingers();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetInputState(int fingerIndex, out bool down, out Vector2 position);
}

// Namespace: 
public class FGMouseInputProvider : FGInputProvider // TypeDefIndex: 4201
{
	// Fields
	public int maxButtons; // 0x18
	public string pinchAxis; // 0x20
	public float pinchAxisScale; // 0x28
	public float pinchResetTimeDelay; // 0x2C
	public float initialPinchDistance; // 0x30
	public string twistAxis; // 0x38
	public float twistAxisScale; // 0x40
	public KeyCode twistKey; // 0x44
	public float twistResetTimeDelay; // 0x48
	public KeyCode pivotKey; // 0x4C
	private bool pivoting; // 0x50
	public KeyCode twistAndPinchKey; // 0x54
	private Vector2 pivot; // 0x58
	private Vector2[] pos; // 0x60
	private bool pinching; // 0x68
	private float pinchResetTime; // 0x6C
	private float pinchDistance; // 0x70
	private bool twisting; // 0x74
	private float twistAngle; // 0x78
	private float twistResetTime; // 0x7C

	// Properties
	public override int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0x1DEE540 Offset: 0x1DEE540 VA: 0x1DEE540
	public void .ctor() { }

	// RVA: 0x1DEE690 Offset: 0x1DEE690 VA: 0x1DEE690
	private void Start() { }

	// RVA: 0x1DEE69C Offset: 0x1DEE69C VA: 0x1DEE69C
	private void Update() { }

	// RVA: 0x1DEEAA4 Offset: 0x1DEEAA4 VA: 0x1DEEAA4
	private void UpdatePinchEmulation() { }

	// RVA: 0x1DEEBC8 Offset: 0x1DEEBC8 VA: 0x1DEEBC8
