	// RVA: 0xE8B34C Offset: 0xE8B34C VA: 0xE8B34C Slot: 6
	public Vector2 GetAverageStartPosition() { }

	// RVA: 0xE85C9C Offset: 0xE85C9C VA: 0xE85C9C Slot: 7
	public Vector2 GetAveragePosition() { }

	// RVA: 0xE8B3BC Offset: 0xE8B3BC VA: 0xE8B3BC Slot: 8
	public Vector2 GetAveragePreviousPosition() { }

	// RVA: 0xE8B42C Offset: 0xE8B42C VA: 0xE8B42C Slot: 9
	public float GetAverageDistanceFromStart() { }

	// RVA: 0xE8B49C Offset: 0xE8B49C VA: 0xE8B49C Slot: 10
	public FingerGestures.Finger GetOldest() { }

	// RVA: 0xE8B5D8 Offset: 0xE8B5D8 VA: 0xE8B5D8 Slot: 12
	public bool MovingInSameDirection(float tolerance) { }

	// RVA: 0xE8B7DC Offset: 0xE8B7DC VA: 0xE8B7DC Slot: 11
	public bool AllMoving() { }

	// RVA: 0xE8B8B8 Offset: 0xE8B8B8 VA: 0xE8B8B8
	private static void .cctor() { }
}

// Namespace: 
public sealed class FingerGestures.FingerList.FingerPropertyGetterDelegate<T> : MulticastDelegate // TypeDefIndex: 4176
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252B68C Offset: 0x252B68C VA: 0x252B68C
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>..ctor
	|
	|-RVA: 0x252BA70 Offset: 0x252BA70 VA: 0x252BA70
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>..ctor
	|
	|-RVA: 0x252BE84 Offset: 0x252BE84 VA: 0x252BE84
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual T Invoke(FingerGestures.Finger finger) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252B69C Offset: 0x252B69C VA: 0x252B69C
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.Invoke
	|
	|-RVA: 0x252BA80 Offset: 0x252BA80 VA: 0x252BA80
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.Invoke
	|
	|-RVA: 0x252BE94 Offset: 0x252BE94 VA: 0x252BE94
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(FingerGestures.Finger finger, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252BA40 Offset: 0x252BA40 VA: 0x252BA40
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.BeginInvoke
	|
	|-RVA: 0x252BE24 Offset: 0x252BE24 VA: 0x252BE24
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.BeginInvoke
	|
	|-RVA: 0x252C240 Offset: 0x252C240 VA: 0x252C240
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual T EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252BA64 Offset: 0x252BA64 VA: 0x252BA64
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<object>.EndInvoke
	|
	|-RVA: 0x252BE48 Offset: 0x252BE48 VA: 0x252BE48
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<float>.EndInvoke
	|
	|-RVA: 0x252C264 Offset: 0x252C264 VA: 0x252C264
	|-FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2>.EndInvoke
	*/
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC8B8A4 Offset: 0xC8B8A4 VA: 0xC8B8A4
public enum FingerGestures.SwipeDirection // TypeDefIndex: 4177
{
	// Fields
	public int value__; // 0x0
	public const FingerGestures.SwipeDirection Right = 1;
	public const FingerGestures.SwipeDirection Left = 2;
	public const FingerGestures.SwipeDirection Up = 4;
	public const FingerGestures.SwipeDirection Down = 8;
	public const FingerGestures.SwipeDirection UpperLeftDiagonal = 16;
	public const FingerGestures.SwipeDirection UpperRightDiagonal = 32;
	public const FingerGestures.SwipeDirection LowerRightDiagonal = 64;
	public const FingerGestures.SwipeDirection LowerLeftDiagonal = 128;
	public const FingerGestures.SwipeDirection None = 0;
	public const FingerGestures.SwipeDirection Vertical = 12;
	public const FingerGestures.SwipeDirection Horizontal = 3;
	public const FingerGestures.SwipeDirection Cross = 15;
	public const FingerGestures.SwipeDirection UpperDiagonals = 48;
	public const FingerGestures.SwipeDirection LowerDiagonals = 192;
	public const FingerGestures.SwipeDirection Diagonals = 240;
	public const FingerGestures.SwipeDirection All = 255;
}

// Namespace: 
public enum DistanceUnit // TypeDefIndex: 4178
{
	// Fields
	public int value__; // 0x0
	public const DistanceUnit Pixels = 0;
	public const DistanceUnit Inches = 1;
	public const DistanceUnit Centimeters = 2;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC8B8B4 Offset: 0xC8B8B4 VA: 0xC8B8B4
public static class FingerGesturesExtensions // TypeDefIndex: 4179
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC90488 Offset: 0xC90488 VA: 0xC90488
	// RVA: 0xE8BB5C Offset: 0xE8BB5C VA: 0xE8BB5C
	public static string Abreviation(DistanceUnit unit) { }

	[ExtensionAttribute] // RVA: 0xC90498 Offset: 0xC90498 VA: 0xC90498
	// RVA: 0xE8BC40 Offset: 0xE8BC40 VA: 0xE8BC40
	public static float Convert(float value, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC904A8 Offset: 0xC904A8 VA: 0xC904A8
	// RVA: 0xE8BCC4 Offset: 0xE8BCC4 VA: 0xE8BCC4
	public static float In(float valueInPixels, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC904B8 Offset: 0xC904B8 VA: 0xC904B8
	// RVA: 0xE8BCD4 Offset: 0xE8BCD4 VA: 0xE8BCD4
	public static float Centimeters(float valueInPixels) { }

	[ExtensionAttribute] // RVA: 0xC904C8 Offset: 0xC904C8 VA: 0xC904C8
	// RVA: 0xE8BCE0 Offset: 0xE8BCE0 VA: 0xE8BCE0
	public static float Inches(float valueInPixels) { }

	[ExtensionAttribute] // RVA: 0xC904D8 Offset: 0xC904D8 VA: 0xC904D8
	// RVA: 0xE8BCEC Offset: 0xE8BCEC VA: 0xE8BCEC
	public static Vector2 Convert(Vector2 v, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC904E8 Offset: 0xC904E8 VA: 0xC904E8
	// RVA: 0xE8BD78 Offset: 0xE8BD78 VA: 0xE8BD78
	public static Vector2 In(Vector2 vecInPixels, DistanceUnit toUnit) { }

	[ExtensionAttribute] // RVA: 0xC904F8 Offset: 0xC904F8 VA: 0xC904F8
	// RVA: 0xE8BD88 Offset: 0xE8BD88 VA: 0xE8BD88
	public static Vector2 Centimeters(Vector2 vecInPixels) { }

	[ExtensionAttribute] // RVA: 0xC90508 Offset: 0xC90508 VA: 0xC90508
	// RVA: 0xE8BD94 Offset: 0xE8BD94 VA: 0xE8BD94
	public static Vector2 Inches(Vector2 vecInPixels) { }
}

// Namespace: 
public class DragGesture : ContinuousGesture // TypeDefIndex: 4180
{
	// Fields
	private Vector2 deltaMove; // 0xB4
	internal Vector2 LastPos; // 0xBC
	internal Vector2 LastDelta; // 0xC4

	// Properties
	public Vector2 DeltaMove { get; set; }
	public Vector2 TotalMove { get; }

	// Methods

	// RVA: 0xE8363C Offset: 0xE8363C VA: 0xE8363C
	public void .ctor() { }

	// RVA: 0xE836C8 Offset: 0xE836C8 VA: 0xE836C8
	public Vector2 get_DeltaMove() { }

	// RVA: 0xE836D0 Offset: 0xE836D0 VA: 0xE836D0
	internal void set_DeltaMove(Vector2 value) { }

	// RVA: 0xE836D8 Offset: 0xE836D8 VA: 0xE836D8
	public Vector2 get_TotalMove() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B8C4 Offset: 0xC8B8C4 VA: 0xC8B8C4
public class DragRecognizer : ContinuousGestureRecognizer<DragGesture> // TypeDefIndex: 4181
{
	// Fields
	public float MoveTolerance; // 0x70
	public bool ApplySameDirectionConstraint; // 0x74

	// Methods

	// RVA: 0xE83774 Offset: 0xE83774 VA: 0xE83774
	public void .ctor() { }

	// RVA: 0xE837CC Offset: 0xE837CC VA: 0xE837CC Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0xE83814 Offset: 0xE83814 VA: 0xE83814 Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(DragGesture gesture) { }

	// RVA: 0xE83848 Offset: 0xE83848 VA: 0xE83848 Slot: 14
	protected override bool CanBegin(DragGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE83A84 Offset: 0xE83A84 VA: 0xE83A84 Slot: 15
	protected override void OnBegin(DragGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE83CDC Offset: 0xE83CDC VA: 0xE83CDC Slot: 16
	protected override GestureRecognitionState OnRecognize(DragGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
[Serializable]
public class LongPressGesture : DiscreteGesture // TypeDefIndex: 4182
{
	// Methods

	// RVA: 0xE9089C Offset: 0xE9089C VA: 0xE9089C
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B8FC Offset: 0xC8B8FC VA: 0xC8B8FC
public class LongPressRecognizer : DiscreteGestureRecognizer<LongPressGesture> // TypeDefIndex: 4183
{
	// Fields
	public float Duration; // 0x70
	public float MoveTolerance; // 0x74

	// Methods

	// RVA: 0xE908A0 Offset: 0xE908A0 VA: 0xE908A0
	public void .ctor() { }

	// RVA: 0xE908FC Offset: 0xE908FC VA: 0xE908FC Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0xE90944 Offset: 0xE90944 VA: 0xE90944 Slot: 15
	protected override void OnBegin(LongPressGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE90A58 Offset: 0xE90A58 VA: 0xE90A58 Slot: 16
	protected override GestureRecognitionState OnRecognize(LongPressGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
public class PinchGesture : ContinuousGesture // TypeDefIndex: 4184
{
	// Fields
	private float delta; // 0xB4
	private float gap; // 0xB8

	// Properties
	public float Delta { get; set; }
	public float Gap { get; set; }

	// Methods

	// RVA: 0xE972B4 Offset: 0xE972B4 VA: 0xE972B4
	public void .ctor() { }

	// RVA: 0xE8FB98 Offset: 0xE8FB98 VA: 0xE8FB98
	public float get_Delta() { }

	// RVA: 0xE972BC Offset: 0xE972BC VA: 0xE972BC
	internal void set_Delta(float value) { }

	// RVA: 0xE8FBA0 Offset: 0xE8FBA0 VA: 0xE8FBA0
	public float get_Gap() { }

	// RVA: 0xE972C4 Offset: 0xE972C4 VA: 0xE972C4
	internal void set_Gap(float value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B934 Offset: 0xC8B934 VA: 0xC8B934
public class PinchRecognizer : ContinuousGestureRecognizer<PinchGesture> // TypeDefIndex: 4185
{
	// Fields
	public float MinDOT; // 0x70
	public float MinDistance; // 0x74

	// Properties
	public override int RequiredFingerCount { get; set; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0xE972CC Offset: 0xE972CC VA: 0xE972CC
	public void .ctor() { }

	// RVA: 0xE9732C Offset: 0xE9732C VA: 0xE9732C Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0xE97374 Offset: 0xE97374 VA: 0xE97374 Slot: 4
	public override int get_RequiredFingerCount() { }

	// RVA: 0xE9737C Offset: 0xE9737C VA: 0xE9737C Slot: 5
	public override void set_RequiredFingerCount(int value) { }

	// RVA: 0xE97384 Offset: 0xE97384 VA: 0xE97384 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0xE9738C Offset: 0xE9738C VA: 0xE9738C Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(PinchGesture gesture) { }

	// RVA: 0xE973B8 Offset: 0xE973B8 VA: 0xE973B8 Slot: 7
	public override GestureResetMode GetDefaultResetMode() { }

	// RVA: 0xE973C0 Offset: 0xE973C0 VA: 0xE973C0 Slot: 14
	protected override bool CanBegin(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE976D0 Offset: 0xE976D0 VA: 0xE976D0 Slot: 15
	protected override void OnBegin(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE97948 Offset: 0xE97948 VA: 0xE97948 Slot: 16
	protected override GestureRecognitionState OnRecognize(PinchGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE97648 Offset: 0xE97648 VA: 0xE97648
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }
}

// Namespace: 
public class PointCloudGestureTemplate : ScriptableObject // TypeDefIndex: 4186
{
	// Fields
	[SerializeField] // RVA: 0xC8E7D4 Offset: 0xC8E7D4 VA: 0xC8E7D4
	private List<int> strokeIds; // 0x18
	[SerializeField] // RVA: 0xC8E7E4 Offset: 0xC8E7E4 VA: 0xC8E7E4
	private List<Vector2> positions; // 0x20
	[SerializeField] // RVA: 0xC8E7F4 Offset: 0xC8E7F4 VA: 0xC8E7F4
	private int strokeCount; // 0x28
	[SerializeField] // RVA: 0xC8E804 Offset: 0xC8E804 VA: 0xC8E804
	private Vector2 size; // 0x2C

	// Properties
	public Vector2 Size { get; }
	public float Width { get; }
	public float Height { get; }
	public int PointCount { get; }
	public int StrokeCount { get; }

	// Methods

	// RVA: 0xE97DCC Offset: 0xE97DCC VA: 0xE97DCC
	public void .ctor() { }

	// RVA: 0xE97E40 Offset: 0xE97E40 VA: 0xE97E40
	public Vector2 get_Size() { }

	// RVA: 0xE97E48 Offset: 0xE97E48 VA: 0xE97E48
	public float get_Width() { }

	// RVA: 0xE97E50 Offset: 0xE97E50 VA: 0xE97E50
	public float get_Height() { }

	// RVA: 0xE97E58 Offset: 0xE97E58 VA: 0xE97E58
	private void Awake() { }

	// RVA: 0xE97EF8 Offset: 0xE97EF8 VA: 0xE97EF8
	public void BeginPoints() { }

	// RVA: 0xE97FB0 Offset: 0xE97FB0 VA: 0xE97FB0
	public void AddPoint(int stroke, Vector2 p) { }

	// RVA: 0xE9805C Offset: 0xE9805C VA: 0xE9805C
	public void AddPoint(int stroke, float x, float y) { }

	// RVA: 0xE980A4 Offset: 0xE980A4 VA: 0xE980A4
	public void EndPoints() { }

	// RVA: 0xE984F0 Offset: 0xE984F0 VA: 0xE984F0
	public Vector2 GetPosition(int pointIndex) { }

	// RVA: 0xE98560 Offset: 0xE98560 VA: 0xE98560
	public int GetStrokeId(int pointIndex) { }

	// RVA: 0xE985D0 Offset: 0xE985D0 VA: 0xE985D0
	public int get_PointCount() { }

	// RVA: 0xE98630 Offset: 0xE98630 VA: 0xE98630
	public int get_StrokeCount() { }

	// RVA: 0xE981F4 Offset: 0xE981F4 VA: 0xE981F4
	public void Normalize() { }

	// RVA: 0xE984EC Offset: 0xE984EC VA: 0xE984EC
	private void MakeDirty() { }
}

// Namespace: 
public class PointCloudGesture : DiscreteGesture // TypeDefIndex: 4187
{
	// Fields
	public List<PointCloudRegognizer.Point> RawPoints; // 0xB8
	public List<PointCloudRegognizer.Point> NormalizedPoints; // 0xC0
	public PointCloudGestureTemplate RecognizedTemplate; // 0xC8
	public float MatchDistance; // 0xD0
	public float MatchScore; // 0xD4

	// Methods

	// RVA: 0xE97D38 Offset: 0xE97D38 VA: 0xE97D38
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B96C Offset: 0xC8B96C VA: 0xC8B96C
public class PointCloudRegognizer : DiscreteGestureRecognizer<PointCloudGesture> // TypeDefIndex: 4188
{
	// Fields
	public float MinDistanceBetweenSamples; // 0x70
	public float MaxMatchDistance; // 0x74
	public List<PointCloudGestureTemplate> Templates; // 0x78
	private const int NormalizedPointCount = 32;
	private PointCloudRegognizer.GestureNormalizer normalizer; // 0x80
	private List<PointCloudRegognizer.NormalizedTemplate> normalizedTemplates; // 0x88
	private static bool[] matched; // 0x0
	private PointCloudGesture debugLastGesture; // 0x90
	private PointCloudRegognizer.NormalizedTemplate debugLastMatchedTemplate; // 0x98
	private const float gizmoSphereRadius = 0.01;

	// Methods

	// RVA: 0xE98638 Offset: 0xE98638 VA: 0xE98638
	public void .ctor() { }

	// RVA: 0xE98694 Offset: 0xE98694 VA: 0xE98694 Slot: 10
	protected override void Awake() { }

	// RVA: 0xE989D0 Offset: 0xE989D0 VA: 0xE989D0
	private PointCloudRegognizer.NormalizedTemplate FindNormalizedTemplate(PointCloudGestureTemplate template) { }

	// RVA: 0xE98AA0 Offset: 0xE98AA0 VA: 0xE98AA0
	private List<PointCloudRegognizer.Point> Normalize(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0xE987FC Offset: 0xE987FC VA: 0xE987FC
	public bool AddTemplate(PointCloudGestureTemplate template) { }

	// RVA: 0xE98B44 Offset: 0xE98B44 VA: 0xE98B44 Slot: 15
	protected override void OnBegin(PointCloudGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE98D50 Offset: 0xE98D50 VA: 0xE98D50
	private bool RecognizePointCloud(PointCloudGesture gesture) { }

	// RVA: 0xE98FDC Offset: 0xE98FDC VA: 0xE98FDC
	private float GreedyCloudMatch(List<PointCloudRegognizer.Point> points, List<PointCloudRegognizer.Point> refPoints) { }

	// RVA: 0xE991E4 Offset: 0xE991E4 VA: 0xE991E4
	private static float CloudDistance(List<PointCloudRegognizer.Point> points1, List<PointCloudRegognizer.Point> points2, int startIndex) { }

	// RVA: 0xE9954C Offset: 0xE9954C VA: 0xE9954C
	private static void ResetMatched(int count) { }

	// RVA: 0xE99688 Offset: 0xE99688 VA: 0xE99688 Slot: 16
	protected override GestureRecognitionState OnRecognize(PointCloudGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0xE99A24 Offset: 0xE99A24 VA: 0xE99A24 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0xE99A6C Offset: 0xE99A6C VA: 0xE99A6C
	public void OnDrawGizmosSelected() { }

	// RVA: 0xE99AF8 Offset: 0xE99AF8 VA: 0xE99AF8
	private void DrawNormalizedPointCloud(List<PointCloudRegognizer.Point> points, float scale) { }

	// RVA: 0xE99D54 Offset: 0xE99D54 VA: 0xE99D54
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct PointCloudRegognizer.Point // TypeDefIndex: 4189
{
	// Fields
	public int StrokeId; // 0x0
	public Vector2 Position; // 0x4

	// Methods

	// RVA: 0xBC0534 Offset: 0xBC0534 VA: 0xBC0534
	public void .ctor(int strokeId, Vector2 pos) { }

	// RVA: 0xBC0540 Offset: 0xBC0540 VA: 0xBC0540
	public void .ctor(int strokeId, float x, float y) { }
}

// Namespace: 
private class PointCloudRegognizer.NormalizedTemplate // TypeDefIndex: 4190
{
	// Fields
	public PointCloudGestureTemplate Source; // 0x10
	public List<PointCloudRegognizer.Point> Points; // 0x18

	// Methods

	// RVA: 0x12D00E8 Offset: 0x12D00E8 VA: 0x12D00E8
	public void .ctor() { }
}

// Namespace: 
private class PointCloudRegognizer.GestureNormalizer // TypeDefIndex: 4191
{
	// Fields
	private List<PointCloudRegognizer.Point> normalizedPoints; // 0x10
	private List<PointCloudRegognizer.Point> pointBuffer; // 0x18

	// Methods

	// RVA: 0x12CF56C Offset: 0x12CF56C VA: 0x12CF56C
	public void .ctor() { }

	// RVA: 0x12CF600 Offset: 0x12CF600 VA: 0x12CF600
	public List<PointCloudRegognizer.Point> Apply(List<PointCloudRegognizer.Point> inputPoints, int normalizedPointsCount) { }

	// RVA: 0x12CF634 Offset: 0x12CF634 VA: 0x12CF634
	private List<PointCloudRegognizer.Point> Resample(List<PointCloudRegognizer.Point> points, int normalizedPointsCount) { }

	// RVA: 0x12CFDDC Offset: 0x12CFDDC VA: 0x12CFDDC
	private static float PathLength(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x12CF9E8 Offset: 0x12CF9E8 VA: 0x12CF9E8
	private static void Scale(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x12CFC8C Offset: 0x12CFC8C VA: 0x12CFC8C
	private static void TranslateToOrigin(List<PointCloudRegognizer.Point> points) { }

	// RVA: 0x12CFF68 Offset: 0x12CFF68 VA: 0x12CFF68
	private static Vector2 Centroid(List<PointCloudRegognizer.Point> points) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC8C660 Offset: 0xC8C660 VA: 0xC8C660
private sealed class PointCloudRegognizer.<FindNormalizedTemplate>c__AnonStorey0 // TypeDefIndex: 4192
{
	// Fields
	internal PointCloudGestureTemplate template; // 0x10

	// Methods

	// RVA: 0x12CF4D8 Offset: 0x12CF4D8 VA: 0x12CF4D8
	public void .ctor() { }

	// RVA: 0x12CF4E0 Offset: 0x12CF4E0 VA: 0x12CF4E0
	internal bool <>m__0(PointCloudRegognizer.NormalizedTemplate t) { }
}

// Namespace: 
[Serializable]
public class SwipeGesture : DiscreteGesture // TypeDefIndex: 4193
{
	// Fields
	private Vector2 move; // 0xB4
	private float velocity; // 0xBC
	private FingerGestures.SwipeDirection direction; // 0xC0
	internal int MoveCounter; // 0xC4
	internal float Deviation; // 0xC8

	// Properties
	public Vector2 Move { get; set; }
	public float Velocity { get; set; }
	public FingerGestures.SwipeDirection Direction { get; set; }

	// Methods

	// RVA: 0x12D24DC Offset: 0x12D24DC VA: 0x12D24DC
	public void .ctor() { }

	// RVA: 0x12D2550 Offset: 0x12D2550 VA: 0x12D2550
	public Vector2 get_Move() { }

	// RVA: 0x12D2558 Offset: 0x12D2558 VA: 0x12D2558
	internal void set_Move(Vector2 value) { }

	// RVA: 0x12D2560 Offset: 0x12D2560 VA: 0x12D2560
	public float get_Velocity() { }

	// RVA: 0x12D2568 Offset: 0x12D2568 VA: 0x12D2568
	internal void set_Velocity(float value) { }

	// RVA: 0x12D2570 Offset: 0x12D2570 VA: 0x12D2570
	public FingerGestures.SwipeDirection get_Direction() { }

	// RVA: 0x12D2578 Offset: 0x12D2578 VA: 0x12D2578
	internal void set_Direction(FingerGestures.SwipeDirection value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B9A4 Offset: 0xC8B9A4 VA: 0xC8B9A4
public class SwipeRecognizer : DiscreteGestureRecognizer<SwipeGesture> // TypeDefIndex: 4194
{
	// Fields
	private FingerGestures.SwipeDirection ValidDirections; // 0x70
	public float MinDistance; // 0x74
	public float MaxDistance; // 0x78
	public float MinVelocity; // 0x7C
	public float MaxDeviation; // 0x80

	// Methods

	// RVA: 0x12D2580 Offset: 0x12D2580 VA: 0x12D2580
	public void .ctor() { }

	// RVA: 0x12D25E8 Offset: 0x12D25E8 VA: 0x12D25E8 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x12D2630 Offset: 0x12D2630 VA: 0x12D2630 Slot: 14
	protected override bool CanBegin(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D2820 Offset: 0x12D2820 VA: 0x12D2820 Slot: 15
	protected override void OnBegin(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D2A78 Offset: 0x12D2A78 VA: 0x12D2A78 Slot: 16
	protected override GestureRecognitionState OnRecognize(SwipeGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D2F94 Offset: 0x12D2F94 VA: 0x12D2F94
	public bool IsValidDirection(FingerGestures.SwipeDirection dir) { }
}

// Namespace: 
[Serializable]
public class TapGesture : DiscreteGesture // TypeDefIndex: 4195
{
	// Fields
	private int taps; // 0xB4
	internal bool Down; // 0xB8
	internal bool WasDown; // 0xB9
	internal float LastDownTime; // 0xBC
	internal float LastTapTime; // 0xC0

	// Properties
	public int Taps { get; set; }

	// Methods

	// RVA: 0x12D8218 Offset: 0x12D8218 VA: 0x12D8218
	public void .ctor() { }

	// RVA: 0x12D8220 Offset: 0x12D8220 VA: 0x12D8220
	public int get_Taps() { }

	// RVA: 0x12D8228 Offset: 0x12D8228 VA: 0x12D8228
	internal void set_Taps(int value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B9DC Offset: 0xC8B9DC VA: 0xC8B9DC
public class TapRecognizer : DiscreteGestureRecognizer<TapGesture> // TypeDefIndex: 4196
{
	// Fields
	public int RequiredTaps; // 0x70
	public float MoveTolerance; // 0x74
	public float MaxDuration; // 0x78
	public float MaxDelayBetweenTaps; // 0x7C

	// Properties
	private bool IsMultiTap { get; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x12D8230 Offset: 0x12D8230 VA: 0x12D8230
	public void .ctor() { }

	// RVA: 0x12D8294 Offset: 0x12D8294 VA: 0x12D8294
	private bool get_IsMultiTap() { }

	// RVA: 0x12D82A4 Offset: 0x12D82A4 VA: 0x12D82A4
	private bool HasTimedOut(TapGesture gesture) { }

	// RVA: 0x12D834C Offset: 0x12D834C VA: 0x12D834C Slot: 23
	protected override void Reset(TapGesture gesture) { }

	// RVA: 0x12D83E8 Offset: 0x12D83E8 VA: 0x12D83E8 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0x12D8404 Offset: 0x12D8404 VA: 0x12D8404
	private GestureRecognitionState RecognizeSingleTap(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D86D8 Offset: 0x12D86D8 VA: 0x12D86D8
	private GestureRecognitionState RecognizeMultiTap(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D8C04 Offset: 0x12D8C04 VA: 0x12D8C04 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x12D8C4C Offset: 0x12D8C4C VA: 0x12D8C4C Slot: 15
	protected override void OnBegin(TapGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D8DC4 Offset: 0x12D8DC4 VA: 0x12D8DC4 Slot: 16
	protected override GestureRecognitionState OnRecognize(TapGesture gesture, FingerGestures.IFingerList touches) { }
}

// Namespace: 
public class TwistGesture : ContinuousGesture // TypeDefIndex: 4197
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8E814 Offset: 0xC8E814 VA: 0xC8E814
	[DebuggerBrowsableAttribute] // RVA: 0xC8E814 Offset: 0xC8E814 VA: 0xC8E814
	private float <DeltaRotation>k__BackingField; // 0xB4
	[CompilerGeneratedAttribute] // RVA: 0xC8E850 Offset: 0xC8E850 VA: 0xC8E850
	[DebuggerBrowsableAttribute] // RVA: 0xC8E850 Offset: 0xC8E850 VA: 0xC8E850
	private float <TotalRotation>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC8E88C Offset: 0xC8E88C VA: 0xC8E88C
	[DebuggerBrowsableAttribute] // RVA: 0xC8E88C Offset: 0xC8E88C VA: 0xC8E88C
	private FingerGestures.Finger <Pivot>k__BackingField; // 0xC0

	// Properties
	public float DeltaRotation { get; set; }
	public float TotalRotation { get; set; }
	public FingerGestures.Finger Pivot { get; set; }

	// Methods

	// RVA: 0x12D8EA0 Offset: 0x12D8EA0 VA: 0x12D8EA0
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90518 Offset: 0xC90518 VA: 0xC90518
	// RVA: 0x12D8210 Offset: 0x12D8210 VA: 0x12D8210
	public float get_DeltaRotation() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90528 Offset: 0xC90528 VA: 0xC90528
	// RVA: 0x12D8EA8 Offset: 0x12D8EA8 VA: 0x12D8EA8
	internal void set_DeltaRotation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC90538 Offset: 0xC90538 VA: 0xC90538
	// RVA: 0x12D8EB0 Offset: 0x12D8EB0 VA: 0x12D8EB0
	public float get_TotalRotation() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90548 Offset: 0xC90548 VA: 0xC90548
	// RVA: 0x12D8EB8 Offset: 0x12D8EB8 VA: 0x12D8EB8
	internal void set_TotalRotation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC90558 Offset: 0xC90558 VA: 0xC90558
	// RVA: 0x12D8EC0 Offset: 0x12D8EC0 VA: 0x12D8EC0
	public FingerGestures.Finger get_Pivot() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90568 Offset: 0xC90568 VA: 0xC90568
	// RVA: 0x12D8EC8 Offset: 0x12D8EC8 VA: 0x12D8EC8
	internal void set_Pivot(FingerGestures.Finger value) { }
}

// Namespace: 
public enum TwistMethod // TypeDefIndex: 4198
{
	// Fields
	public int value__; // 0x0
	public const TwistMethod Standard = 0;
	public const TwistMethod Pivot = 1;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8BA14 Offset: 0xC8BA14 VA: 0xC8BA14
public class TwistRecognizer : ContinuousGestureRecognizer<TwistGesture> // TypeDefIndex: 4199
{
	// Fields
	public TwistMethod Method; // 0x70
	public float MinDOT; // 0x74
	public float MinRotation; // 0x78
	public float PivotMoveTolerance; // 0x7C

	// Properties
	public override int RequiredFingerCount { get; set; }
	public override bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x12D8ED0 Offset: 0x12D8ED0 VA: 0x12D8ED0
	public void .ctor() { }

	// RVA: 0x12D8F38 Offset: 0x12D8F38 VA: 0x12D8F38 Slot: 8
	public override string GetDefaultEventMessageName() { }

	// RVA: 0x12D8F80 Offset: 0x12D8F80 VA: 0x12D8F80 Slot: 4
	public override int get_RequiredFingerCount() { }

	// RVA: 0x12D8F88 Offset: 0x12D8F88 VA: 0x12D8F88 Slot: 5
	public override void set_RequiredFingerCount(int value) { }

	// RVA: 0x12D8F90 Offset: 0x12D8F90 VA: 0x12D8F90 Slot: 6
	public override bool get_SupportFingerClustering() { }

	// RVA: 0x12D8F98 Offset: 0x12D8F98 VA: 0x12D8F98 Slot: 7
	public override GestureResetMode GetDefaultResetMode() { }

	// RVA: 0x12D8FA0 Offset: 0x12D8FA0 VA: 0x12D8FA0 Slot: 17
	protected override GameObject GetDefaultSelectionForSendMessage(TwistGesture gesture) { }

	// RVA: 0x12D8FD0 Offset: 0x12D8FD0 VA: 0x12D8FD0 Slot: 23
	protected override void Reset(TwistGesture gesture) { }

	// RVA: 0x12D9044 Offset: 0x12D9044 VA: 0x12D9044
	private FingerGestures.Finger GetTwistPivot(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0x12D9114 Offset: 0x12D9114 VA: 0x12D9114 Slot: 14
	protected override bool CanBegin(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D9598 Offset: 0x12D9598 VA: 0x12D9598 Slot: 15
	protected override void OnBegin(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D98A4 Offset: 0x12D98A4 VA: 0x12D98A4 Slot: 16
	protected override GestureRecognitionState OnRecognize(TwistGesture gesture, FingerGestures.IFingerList touches) { }

	// RVA: 0x12D937C Offset: 0x12D937C VA: 0x12D937C
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0x12D9408 Offset: 0x12D9408 VA: 0x12D9408
	private static float SignedAngularGap(FingerGestures.Finger finger0, FingerGestures.Finger finger1, Vector2 refPos0, Vector2 refPos1) { }
}

// Namespace: 
public abstract class FGInputProvider : MonoBehaviour // TypeDefIndex: 4200
{
	// Properties
	public abstract int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0xE84134 Offset: 0xE84134 VA: 0xE84134
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_MaxSimultaneousFingers();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetInputState(int fingerIndex, out bool down, out Vector2 position);
}

// Namespace: 
public class FGMouseInputProvider : FGInputProvider // TypeDefIndex: 4201
{
	// Fields
	public int maxButtons; // 0x18
	public string pinchAxis; // 0x20
	public float pinchAxisScale; // 0x28
	public float pinchResetTimeDelay; // 0x2C
	public float initialPinchDistance; // 0x30
	public string twistAxis; // 0x38
	public float twistAxisScale; // 0x40
	public KeyCode twistKey; // 0x44
	public float twistResetTimeDelay; // 0x48
	public KeyCode pivotKey; // 0x4C
	private bool pivoting; // 0x50
	public KeyCode twistAndPinchKey; // 0x54
	private Vector2 pivot; // 0x58
	private Vector2[] pos; // 0x60
	private bool pinching; // 0x68
	private float pinchResetTime; // 0x6C
	private float pinchDistance; // 0x70
	private bool twisting; // 0x74
	private float twistAngle; // 0x78
	private float twistResetTime; // 0x7C

	// Properties
	public override int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0xE8413C Offset: 0xE8413C VA: 0xE8413C
	public void .ctor() { }

	// RVA: 0xE8428C Offset: 0xE8428C VA: 0xE8428C
	private void Start() { }

	// RVA: 0xE84298 Offset: 0xE84298 VA: 0xE84298
	private void Update() { }

	// RVA: 0xE846A0 Offset: 0xE846A0 VA: 0xE846A0
	private void UpdatePinchEmulation() { }

	// RVA: 0xE847C4 Offset: 0xE847C4 VA: 0xE847C4
	private void UpdateTwistEmulation() { }

	// RVA: 0xE848BC Offset: 0xE848BC VA: 0xE848BC Slot: 4
	public override int get_MaxSimultaneousFingers() { }

	// RVA: 0xE848C4 Offset: 0xE848C4 VA: 0xE848C4 Slot: 5
	public override void GetInputState(int fingerIndex, out bool down, out Vector2 position) { }
}

// Namespace: 
public class FGTouchInputProvider : FGInputProvider // TypeDefIndex: 4202
{
	// Fields
	public int maxTouches; // 0x18
	public bool fixAndroidTouchIdBug; // 0x1C
	private int touchIdOffset; // 0x20
	private Touch nullTouch; // 0x24
	private int[] finger2touchMap; // 0x68

	// Properties
	public override int MaxSimultaneousFingers { get; }

	// Methods

	// RVA: 0xE84A00 Offset: 0xE84A00 VA: 0xE84A00
	public void .ctor() { }

	// RVA: 0xE84A44 Offset: 0xE84A44 VA: 0xE84A44
	private void Start() { }

	// RVA: 0xE84A9C Offset: 0xE84A9C VA: 0xE84A9C
	private void Update() { }

	// RVA: 0xE84AA0 Offset: 0xE84AA0 VA: 0xE84AA0
	private void UpdateFingerTouchMap() { }

	// RVA: 0xE84C8C Offset: 0xE84C8C VA: 0xE84C8C
	private bool HasValidTouch(int fingerIndex) { }

	// RVA: 0xE84CE8 Offset: 0xE84CE8 VA: 0xE84CE8
	private Touch GetTouch(int fingerIndex) { }

	// RVA: 0xE84DA0 Offset: 0xE84DA0 VA: 0xE84DA0 Slot: 4
	public override int get_MaxSimultaneousFingers() { }

	// RVA: 0xE84DA8 Offset: 0xE84DA8 VA: 0xE84DA8 Slot: 5
	public override void GetInputState(int fingerIndex, out bool down, out Vector2 position) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8BA4C Offset: 0xC8BA4C VA: 0xC8BA4C
[RequireComponent] // RVA: 0xC8BA4C Offset: 0xC8BA4C VA: 0xC8BA4C
public class TBDragView : MonoBehaviour // TypeDefIndex: 4203
{
	// Fields
	public bool allowUserInput; // 0x18
	public float sensitivity; // 0x1C
	public float dragAcceleration; // 0x20
	public float dragDeceleration; // 0x24
	public bool reverseControls; // 0x28
	public float minPitchAngle; // 0x2C
	public float maxPitchAngle; // 0x30
	public float idealRotationSmoothingSpeed; // 0x34
	private Transform cachedTransform; // 0x38
	private Vector2 angularVelocity; // 0x40
	private Quaternion idealRotation; // 0x48
	private bool useAngularVelocity; // 0x58
	private DragGesture dragGesture; // 0x60

	// Properties
	public bool Dragging { get; }
	public Quaternion IdealRotation { get; set; }

	// Methods

	// RVA: 0x12D3CC4 Offset: 0x12D3CC4 VA: 0x12D3CC4
	public void .ctor() { }

	// RVA: 0x12D3D68 Offset: 0x12D3D68 VA: 0x12D3D68
	private void Awake() { }

	// RVA: 0x12D3D90 Offset: 0x12D3D90 VA: 0x12D3D90
	private void Start() { }

	// RVA: 0x12D3E6C Offset: 0x12D3E6C VA: 0x12D3E6C
	public bool get_Dragging() { }

	// RVA: 0x12D3E7C Offset: 0x12D3E7C VA: 0x12D3E7C
	private void OnDrag(DragGesture gesture) { }

	// RVA: 0x12D3EC0 Offset: 0x12D3EC0 VA: 0x12D3EC0
	private void Update() { }

	// RVA: 0x12D424C Offset: 0x12D424C VA: 0x12D424C
	private static float NormalizePitch(float angle) { }

	// RVA: 0x12D426C Offset: 0x12D426C VA: 0x12D426C
	public Quaternion get_IdealRotation() { }

	// RVA: 0x12D3E5C Offset: 0x12D3E5C VA: 0x12D3E5C
	public void set_IdealRotation(Quaternion value) { }

	// RVA: 0x12D4278 Offset: 0x12D4278 VA: 0x12D4278
	public void LookAt(Vector3 pos) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8BAD4 Offset: 0xC8BAD4 VA: 0xC8BAD4
[RequireComponent] // RVA: 0xC8BAD4 Offset: 0xC8BAD4 VA: 0xC8BAD4
public class TBLookAtTap : MonoBehaviour // TypeDefIndex: 4204
{
	// Fields
	private TBDragView dragView; // 0x18

	// Methods

	// RVA: 0x12D4688 Offset: 0x12D4688 VA: 0x12D4688
	public void .ctor() { }

	// RVA: 0x12D4690 Offset: 0x12D4690 VA: 0x12D4690
	private void Awake() { }

