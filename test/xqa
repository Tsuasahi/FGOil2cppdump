
	// RVA: 0x14B709C Offset: 0x14B709C VA: 0x14B709C
	public bool SetTalkName(string text) { }

	// RVA: 0x14B7178 Offset: 0x14B7178 VA: 0x14B7178
	private int GetDefaultFontSize() { }

	// RVA: 0x14B4A14 Offset: 0x14B4A14 VA: 0x14B4A14
	private int GetDefaultScaledFontSize() { }

	// RVA: 0x14B71F0 Offset: 0x14B71F0 VA: 0x14B71F0
	private static void .cctor() { }
}

// Namespace: 
public enum ScriptLogMessage.HorizontalAlign // TypeDefIndex: 8443
{
	// Fields
	public int value__; // 0x0
	public const ScriptLogMessage.HorizontalAlign Left = 0;
	public const ScriptLogMessage.HorizontalAlign Center = 1;
	public const ScriptLogMessage.HorizontalAlign Right = 2;
}

// Namespace: 
private sealed class ScriptLogMessage.ProcAddLabel : MulticastDelegate // TypeDefIndex: 8444
{
	// Methods

	// RVA: 0x14B610C Offset: 0x14B610C VA: 0x14B610C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x14B612C Offset: 0x14B612C VA: 0x14B612C Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x14B73F0 Offset: 0x14B73F0 VA: 0x14B73F0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x14B7424 Offset: 0x14B7424 VA: 0x14B7424 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class ScriptLogMessage.ProcAddLabel2 : MulticastDelegate // TypeDefIndex: 8445
{
	// Methods

	// RVA: 0x14B611C Offset: 0x14B611C VA: 0x14B611C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x14B632C Offset: 0x14B632C VA: 0x14B632C Slot: 11
	public virtual void Invoke(string txt) { }

	// RVA: 0x14B7430 Offset: 0x14B7430 VA: 0x14B7430 Slot: 12
	public virtual IAsyncResult BeginInvoke(string txt, AsyncCallback callback, object object) { }

	// RVA: 0x14B7454 Offset: 0x14B7454 VA: 0x14B7454 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF3C0 Offset: 0xCAF3C0 VA: 0xCAF3C0
private sealed class ScriptLogMessage.<UpdateLabels>c__AnonStorey0 // TypeDefIndex: 8446
{
	// Fields
	internal StringBuilder tmpTxt; // 0x10
	internal bool isFoward; // 0x18
	internal string tmpColorTag; // 0x20
	internal ScriptLogMessage $this; // 0x28

	// Methods

	// RVA: 0x14B6104 Offset: 0x14B6104 VA: 0x14B6104
	public void .ctor() { }

	// RVA: 0x14B7254 Offset: 0x14B7254 VA: 0x14B7254
	internal void <>m__0() { }

	// RVA: 0x14B7340 Offset: 0x14B7340 VA: 0x14B7340
	internal void <>m__1(string text) { }
}

// Namespace: 
public class ScriptLoop // TypeDefIndex: 8447
{
	// Fields
	private bool isForceStopAdd; // 0x10
	private int count; // 0x14
	private int lastIndex; // 0x18
	private int lastSelectedIndex; // 0x1C
	private string lastMessage; // 0x20
	private int index; // 0x28
	private string message; // 0x30

	// Methods

	// RVA: 0x14B7460 Offset: 0x14B7460 VA: 0x14B7460
	public void .ctor() { }

	// RVA: 0x14B7468 Offset: 0x14B7468 VA: 0x14B7468
	public void ExecuteLoop(int index) { }

	// RVA: 0x14B7488 Offset: 0x14B7488 VA: 0x14B7488
	public void SetSwitchCase(int index, string message) { }

	// RVA: 0x14B7494 Offset: 0x14B7494 VA: 0x14B7494
	public bool ShouldAddLogMessage(int index) { }

	// RVA: 0x14B74C8 Offset: 0x14B74C8 VA: 0x14B74C8
	public bool ShouldAddLogSwitchCase(int index, string message) { }
}

// Namespace: 
public class ScriptManager : SingletonMonoBehaviour<ScriptManager> // TypeDefIndex: 8448
{
	// Fields
	public static readonly float DEFAULT_FADE_TIME; // 0x0
	public static readonly int CHARA_MAX; // 0x4
	public static readonly int FACE_MAX; // 0x8
	private static readonly int DELAY_INDEX_MAX; // 0xC
	private static readonly float PICTURE_FRAME_Z_POS_NORMAL; // 0x10
	private static readonly float PICTURE_FRAME_Z_POS_TOP; // 0x14
	public const string SCRIPT_NAME_BATTLE_BASE = "{0:D8}{1:D1}";
	public const string SCRIPT_NAME_BATTLE_START = "{0:D8}{1:D1}0";
	public const string SCRIPT_NAME_BATTLE_START2 = "{0:D8}{1:D1}2";
	public const string SCRIPT_NAME_BATTLE_END = "{0:D8}{1:D1}1";
	public const string SCRIPT_NAME_BATTLE_END2 = "{0:D8}{1:D1}3";
	public const string SCRIPT_NAME_BATTLE_OTHERWIN_END = "{0:D8}{1:D1}4";
	public const string SCRIPT_NAME_BATTLE_OTHERWIN_END2 = "{0:D8}{1:D1}6";
	public const string SCRIPT_NAME_BATTLE_LOSEWIN_END = "{0:D8}{1:D1}5";
	public const string SCRIPT_NAME_BATTLE_LOSEWIN_END2 = "{0:D8}{1:D1}7";
	public const string SCRIPT_NAME_NOTMEETS_COND = "{0:D8}{1:D1}8";
	public const string SCRIPT_AUTO_MESSAGE_SAVE_KEY = "ScriptManagerAutoMessage";
	public const string SCRIPT_SELECT_BRANCH_SAVE_KEY = "ScriptManagerSelectBranch";
	public const string SCRIPT_NAME_WAR_EPILOGUE = "WarEpilogue";
	public const string FLAG_NAME_INPUT_SELECT_BRANCH = "INPUT_SELECT_BRANCH";
	private const int DEPTH_BUFFER_BITS = 24;
	private const string QUEST_MESSAGE_ADD = "QuestMessageAdd";
	private const string QUEST_MESSAGE_OVERWRITE = "QUEST_MESSAGE_OVERWRITE_";
	public static readonly int PICTURE_FRAME_SPRITE_WIDTH_16_9; // 0x18
	public static readonly int PICTURE_FRAME_SPRITE_WIDTH_21_9; // 0x1C
	private const float FS_OFFSET_X_MARGIN = 80;
	public static bool defaultForceObi_16_9; // 0x20
	public static string textPath; // 0x28
	private static readonly string TalkResumeKey; // 0x30
	private static readonly string TalkResumeKeyV2; // 0x38
	private static readonly string KEY_SWITCH_INFO; // 0x40
	private static readonly string KEY_SWITCH_INFO_ROUTE_TYPE; // 0x48
	private static readonly string KEY_LINE_INFO; // 0x50
	private static readonly string DUMMY_TEXT; // 0x58
	private const int RENDER_TEXTURE_CMAERA_DEPTH_DEFAULT = 1;
	[SerializeField] // RVA: 0xCCB5CC Offset: 0xCCB5CC VA: 0xCCB5CC
	protected ScriptMessageManager messageManager; // 0x18
	[SerializeField] // RVA: 0xCCB5DC Offset: 0xCCB5DC VA: 0xCCB5DC
	protected ScriptSelectDialog selectDialog; // 0x20
	[SerializeField] // RVA: 0xCCB5EC Offset: 0xCCB5EC VA: 0xCCB5EC
	protected UIPanel systemPanel; // 0x28
	[SerializeField] // RVA: 0xCCB5FC Offset: 0xCCB5FC VA: 0xCCB5FC
	protected UIPanel blockPanel; // 0x30
	[SerializeField] // RVA: 0xCCB60C Offset: 0xCCB60C VA: 0xCCB60C
	protected UIPanel actionPanel; // 0x38
	[SerializeField] // RVA: 0xCCB61C Offset: 0xCCB61C VA: 0xCCB61C
	protected UIPanel renderPanel; // 0x40
	[SerializeField] // RVA: 0xCCB62C Offset: 0xCCB62C VA: 0xCCB62C
	protected ExUISpriteRenderer pictureFrameSprite; // 0x48
	[SerializeField] // RVA: 0xCCB63C Offset: 0xCCB63C VA: 0xCCB63C
	protected ExUISpriteRenderer backSprite1; // 0x50
	[SerializeField] // RVA: 0xCCB64C Offset: 0xCCB64C VA: 0xCCB64C
	protected ExUISpriteRenderer backSprite2; // 0x58
	[SerializeField] // RVA: 0xCCB65C Offset: 0xCCB65C VA: 0xCCB65C
	protected ItemSeed figureSeed; // 0x60
	[SerializeField] // RVA: 0xCCB66C Offset: 0xCCB66C VA: 0xCCB66C
	protected ItemSeed equipSeed; // 0x68
	[SerializeField] // RVA: 0xCCB67C Offset: 0xCCB67C VA: 0xCCB67C
	protected ItemSeed imageSeed; // 0x70
	[SerializeField] // RVA: 0xCCB68C Offset: 0xCCB68C VA: 0xCCB68C
	protected ItemSeed verticalImageSeed; // 0x78
	[SerializeField] // RVA: 0xCCB69C Offset: 0xCCB69C VA: 0xCCB69C
	protected ItemSeed horizontalImageSeed; // 0x80
	[SerializeField] // RVA: 0xCCB6AC Offset: 0xCCB6AC VA: 0xCCB6AC
	protected Transform shakeRoot; // 0x88
	[SerializeField] // RVA: 0xCCB6BC Offset: 0xCCB6BC VA: 0xCCB6BC
	protected UIWidget stretchBase; // 0x90
	[SerializeField] // RVA: 0xCCB6CC Offset: 0xCCB6CC VA: 0xCCB6CC
	protected UITweenRenderer meshFlashBase; // 0x98
	[SerializeField] // RVA: 0xCCB6DC Offset: 0xCCB6DC VA: 0xCCB6DC
	protected ExUIMeshRenderer meshWipeBase; // 0xA0
	[SerializeField] // RVA: 0xCCB6EC Offset: 0xCCB6EC VA: 0xCCB6EC
	protected ExUIUserMeshRenderer meshExWipeBase; // 0xA8
	[SerializeField] // RVA: 0xCCB6FC Offset: 0xCCB6FC VA: 0xCCB6FC
	protected UITweenRenderer meshFadeBase; // 0xB0
	[SerializeField] // RVA: 0xCCB70C Offset: 0xCCB70C VA: 0xCCB70C
	protected UITweenRenderer charaMeshFlashBase; // 0xB8
	[SerializeField] // RVA: 0xCCB71C Offset: 0xCCB71C VA: 0xCCB71C
	protected GameObject cameraScale; // 0xC0
	[SerializeField] // RVA: 0xCCB72C Offset: 0xCCB72C VA: 0xCCB72C
	protected GameObject cameraPosition; // 0xC8
	[SerializeField] // RVA: 0xCCB73C Offset: 0xCCB73C VA: 0xCCB73C
	protected GameObject cameraRoll1; // 0xD0
	[SerializeField] // RVA: 0xCCB74C Offset: 0xCCB74C VA: 0xCCB74C
	protected GameObject cameraRoll2; // 0xD8
	[SerializeField] // RVA: 0xCCB75C Offset: 0xCCB75C VA: 0xCCB75C
	protected UIRootReScale scriptReScale; // 0xE0
	[SerializeField] // RVA: 0xCCB76C Offset: 0xCCB76C VA: 0xCCB76C
	protected ExUIMeshRenderer meshCaptureBase; // 0xE8
	[SerializeField] // RVA: 0xCCB77C Offset: 0xCCB77C VA: 0xCCB77C
	protected ExUIMeshRenderer meshRenderBase; // 0xF0
	[SerializeField] // RVA: 0xCCB78C Offset: 0xCCB78C VA: 0xCCB78C
	protected Camera renderTextureCamera; // 0xF8
	[SerializeField] // RVA: 0xCCB79C Offset: 0xCCB79C VA: 0xCCB79C
	protected Camera margeCamera; // 0x100
	[SerializeField] // RVA: 0xCCB7AC Offset: 0xCCB7AC VA: 0xCCB7AC
	protected Camera mapCamera; // 0x108
	[SerializeField] // RVA: 0xCCB7BC Offset: 0xCCB7BC VA: 0xCCB7BC
	protected Camera ui2dCamera; // 0x110
	[SerializeField] // RVA: 0xCCB7CC Offset: 0xCCB7CC VA: 0xCCB7CC
	protected GameObject communicationCharaEffectBase; // 0x118
	[SerializeField] // RVA: 0xCCB7DC Offset: 0xCCB7DC VA: 0xCCB7DC
	protected GameObject specialEffectBase; // 0x120
	[SerializeField] // RVA: 0xCCB7EC Offset: 0xCCB7EC VA: 0xCCB7EC
	protected GameObject fowardEffectBase; // 0x128
	[SerializeField] // RVA: 0xCCB7FC Offset: 0xCCB7FC VA: 0xCCB7FC
	protected GameObject effectBase; // 0x130
	[SerializeField] // RVA: 0xCCB80C Offset: 0xCCB80C VA: 0xCCB80C
	protected GameObject backEffectBase; // 0x138
	[SerializeField] // RVA: 0xCCB81C Offset: 0xCCB81C VA: 0xCCB81C
	protected GameObject normalOperationBase; // 0x140
	[SerializeField] // RVA: 0xCCB82C Offset: 0xCCB82C VA: 0xCCB82C
	protected GameObject backViewOperationBase; // 0x148
	[SerializeField] // RVA: 0xCCB83C Offset: 0xCCB83C VA: 0xCCB83C
	protected GameObject figureViewOperationBase; // 0x150
	[SerializeField] // RVA: 0xCCB84C Offset: 0xCCB84C VA: 0xCCB84C
	protected UILabel viewBackLabel; // 0x158
	[SerializeField] // RVA: 0xCCB85C Offset: 0xCCB85C VA: 0xCCB85C
	protected UILabel viewFigureLabel; // 0x160
	[SerializeField] // RVA: 0xCCB86C Offset: 0xCCB86C VA: 0xCCB86C
	protected UILabel viewFaceLabel; // 0x168
	[SerializeField] // RVA: 0xCCB87C Offset: 0xCCB87C VA: 0xCCB87C
	protected UICommonButton skipButton; // 0x170
	[SerializeField] // RVA: 0xCCB88C Offset: 0xCCB88C VA: 0xCCB88C
	protected UICommonButton backLogButton; // 0x178
	[SerializeField] // RVA: 0xCCB89C Offset: 0xCCB89C VA: 0xCCB89C
	protected UICommonButton autoMessageButton; // 0x180
	[SerializeField] // RVA: 0xCCB8AC Offset: 0xCCB8AC VA: 0xCCB8AC
	protected UISprite autoMessageSprite; // 0x188
	[SerializeField] // RVA: 0xCCB8BC Offset: 0xCCB8BC VA: 0xCCB8BC
	protected GameObject touchFullScreen; // 0x190
	[SerializeField] // RVA: 0xCCB8CC Offset: 0xCCB8CC VA: 0xCCB8CC
	protected GameObject fastPlayMark; // 0x198
	[SerializeField] // RVA: 0xCCB8DC Offset: 0xCCB8DC VA: 0xCCB8DC
	protected ScriptSkipDialog skipConfirmDialog; // 0x1A0
	[SerializeField] // RVA: 0xCCB8EC Offset: 0xCCB8EC VA: 0xCCB8EC
	protected ScriptBackLog backLogDialog; // 0x1A8
	[SerializeField] // RVA: 0xCCB8FC Offset: 0xCCB8FC VA: 0xCCB8FC
	protected ScriptLogMessage logMessage; // 0x1B0
	[SerializeField] // RVA: 0xCCB90C Offset: 0xCCB90C VA: 0xCCB90C
	protected ScriptNotificationDialog notificationDialog; // 0x1B8
	[SerializeField] // RVA: 0xCCB91C Offset: 0xCCB91C VA: 0xCCB91C
	protected float defaultKeyDelayTime; // 0x1C0
	[SerializeField] // RVA: 0xCCB92C Offset: 0xCCB92C VA: 0xCCB92C
	private SpriteMask spriteMask; // 0x1C8
	[SerializeField] // RVA: 0xCCB93C Offset: 0xCCB93C VA: 0xCCB93C
	protected ScriptStoryOpenDialog storyOpenDialog; // 0x1D0
	[SerializeField] // RVA: 0xCCB94C Offset: 0xCCB94C VA: 0xCCB94C
	private TweenAlpha chapterSubTitleBase; // 0x1D8
	[SerializeField] // RVA: 0xCCB95C Offset: 0xCCB95C VA: 0xCCB95C
	private UILabel chapterSubTitleLabel; // 0x1E0
	[SerializeField] // RVA: 0xCCB96C Offset: 0xCCB96C VA: 0xCCB96C
	protected GameObject scriptPlayBase; // 0x1E8
	[SerializeField] // RVA: 0xCCB97C Offset: 0xCCB97C VA: 0xCCB97C
	protected UILabel scriptPlayLabel; // 0x1F0
	[SerializeField] // RVA: 0xCCB98C Offset: 0xCCB98C VA: 0xCCB98C
	protected UILabel scriptDataLabel; // 0x1F8
	[SerializeField] // RVA: 0xCCB99C Offset: 0xCCB99C VA: 0xCCB99C
	protected UISprite scriptPlaySprite; // 0x200
	[SerializeField] // RVA: 0xCCB9AC Offset: 0xCCB9AC VA: 0xCCB9AC
	protected ScriptActionAdvPrefabController scriptActionAdvPrefabController; // 0x208
	[SerializeField] // RVA: 0xCCB9BC Offset: 0xCCB9BC VA: 0xCCB9BC
	protected ExUIMeshRenderer meshAdvPrefabRenderBase; // 0x210
	public UISprite backMaskImage; // 0x218
	protected RenderTexture captureTexture; // 0x220
	protected static bool isReadScriptSetting; // 0x60
	protected static bool isEnforceDebugSetting; // 0x61
	protected static string scriptServerSettingAddress; // 0x68
	protected static string scriptObjectSettingAddress; // 0x70
	protected static string scriptPlayerPathSettingAddress; // 0x78
	protected static string scriptPlayerObjectSettingAddress; // 0x80
	protected static int scriptGenderSettingIndex; // 0x88
	protected static string scriptStartModeSettingName; // 0x90
	protected static bool isHiddenTruthSetting; // 0x98
	protected static bool debugIsForceCheckOn; // 0x99
	protected static string playScriptDataName; // 0xA0
	protected static QuestEntity.enType questType; // 0xA8
	protected static int warId; // 0xAC
	protected static int eventId; // 0xB0
	protected static int questId; // 0xB4
	protected static int scriptQuestId; // 0xB8
	private static int questPhase; // 0xBC
	private static int preQuestPhase; // 0xC0
	private static int questPhaseMax; // 0xC4
	private static string chapterSubTitle; // 0xC8
	protected static string questTitle; // 0xD0
	protected static string questMessage; // 0xD8
	protected static string questMessageRuby; // 0xE0
	private static int questMessageLabelMaxLine; // 0xE8
	protected static Action templateCallbackFunc; // 0xF0
	protected static int templateSvtId; // 0xF8
	protected static int templateSvtVoiceId; // 0xFC
	protected static int templateImageLimitCount; // 0x100
	protected static bool templateIsFaceFirst; // 0x104
	protected static ServantVoiceData[] templateVoiceList; // 0x108
	private static bool isMyRoomMaterial; // 0x110
	private static bool isPictureFrameForceChangeSize; // 0x111
	protected static ScriptManager.NotificationInfoManager notificationInfoManager; // 0x118
	private const string FORM_ID = "form";
	protected bool isInitBusy; // 0x228
	protected ScriptManager.PlayMode playMode; // 0x22C
	protected ScriptManager.StartMode startMode; // 0x230
	protected bool isStartModeEnd; // 0x234
	protected ScriptManager.State state; // 0x238
	protected ScriptManager.PlaySpeed playSpeed; // 0x23C
	protected ScriptManager.PlaySpeed requestPlaySpeed; // 0x240
	protected ScriptManager.InputTopMode inputTopMode; // 0x244
	protected List<string> downloadAssetList; // 0x248
	protected List<string> fontAssetList; // 0x250
	protected List<string> audioAssetList; // 0x258
	protected bool isExecuteLoadAsset; // 0x260
	protected int audioLoadIndex; // 0x264
	protected bool isSkipAudioStop; // 0x268
	protected string assetName; // 0x270
	protected string scriptLabel; // 0x278
	protected ScriptManager.CallbackFunc callbackFunc; // 0x280
	protected Action recoverBgmFunc; // 0x288
	public bool isSkipExit; // 0x290
	protected string[] scriptFileList; // 0x298
	protected ScriptEncryptSettings scriptEncryptSettings; // 0x2A0
	protected AssetData commonAssetData; // 0x2A8
	protected AssetData assetData; // 0x2B0
	protected AssetData gameDemoAssetData; // 0x2B8
	protected int executeIndex; // 0x2C0
	protected int executeIndexMax; // 0x2C4
	protected int executeIndexMovie; // 0x2C8
	protected int executeWaitIndex; // 0x2CC
	protected string[] executeTagList; // 0x2D0
	protected string[] executeDataList; // 0x2D8
	protected int[] executeLineList; // 0x2E0
	protected int[] executeOrgLineList; // 0x2E8
	protected bool[] executeMessageFlagList; // 0x2F0
	protected int[] executeMessageMaxSizeList; // 0x2F8
	protected int[] executeSwitchList; // 0x300
	protected string[] orgScriptList; // 0x308
	protected bool isSwitchCase; // 0x310
	protected bool isCollection; // 0x311
	protected bool isSkippedInCollection; // 0x312
	public bool isSkippedInCollectionFinish; // 0x313
	private bool isRevival; // 0x314
	protected bool isCancelInput; // 0x315
	protected bool isStartSkip; // 0x316
	protected bool isSkip; // 0x317
	protected string skipFade; // 0x318
	protected string tapSkipLabel; // 0x320
	protected string tapSkipFade; // 0x328
	protected bool isBackLog; // 0x330
	protected bool isButtonDisable; // 0x331
	protected long[] parameterList; // 0x338
	protected bool isAutoMessage; // 0x340
	protected bool isRequestSkip; // 0x341
	protected bool isExecuteSkip; // 0x342
	protected List<int> inputCommandIndex; // 0x348
	protected bool isMessageOffTalkMode; // 0x350
	protected bool isTalkMask; // 0x351
	protected bool isTalkDepth; // 0x352
	protected string talkMaskName; // 0x358
	protected bool isRequestEffect; // 0x360
	private string isRequestEffectCommand; // 0x368
	protected bool isSelectBranch; // 0x370
	protected string waitType; // 0x378
	protected int waitIndex; // 0x380
	protected float waitCount; // 0x384
	protected string waitName; // 0x388
	private string waitTitle; // 0x390
	protected string waitMessage; // 0x398
	protected float waitTime; // 0x3A0
	private bool isQuestOpen; // 0x3A4
	protected bool isRequestVoiceCancel; // 0x3A5
	protected int playScriptJumpLine; // 0x3A8
	protected bool maskOnWhileJumping; // 0x3AC
	private string startEffectSkipName; // 0x3B0
	protected SePlayer sePlayer; // 0x3B8
	protected SePlayer loopSePlayer; // 0x3C0
	protected SePlayer voicePlayer; // 0x3C8
	private bool isTVoice; // 0x3D0
	private bool isPlayTVoice; // 0x3D1
	private float tVoiceWaitCount; // 0x3D4
	protected List<ScriptFlagData> flagDataList; // 0x3D8
	protected ScriptCharaData[] charaList; // 0x3E0
	protected bool isLoadCommunicationChara; // 0x3E8
	protected string[] menuMessageList; // 0x3F0
	protected string[] menuLabelList; // 0x3F8
	protected int menuRouteSelectEndIndex; // 0x400
	protected ScriptManager.MenuRouteInfo[] menuRouteList; // 0x408
	protected List<int> selectedRouteTypeList; // 0x410
	private static readonly string SAVE_ROUTE_SELECT_IN_COLLECTION; // 0x120
	protected bool isBusyPictureFrame; // 0x418
	protected bool isBusyPictureFrameLoad; // 0x419
	protected int sceneMainIndex; // 0x41C
	protected bool isBusyScene; // 0x420
	protected bool isBusySceneLoad; // 0x421
	protected float sceneCrossFadeTime; // 0x424
	protected float shakeTime; // 0x428
	protected float shakeCycle; // 0x42C
	protected float shakeX; // 0x430
	protected float shakeY; // 0x434
	protected bool isExecuteCamera; // 0x438
	protected bool isExecuteCameraRoll; // 0x439
	protected string stretchName; // 0x440
	protected bool isExecuteStretch; // 0x448
	protected Vector2 stretchBaseRange; // 0x44C
	protected string flashName; // 0x458
	protected bool isExecuteFlash; // 0x460
	protected bool isEndRequestFlash; // 0x461
	protected int flashCount; // 0x464
	protected float flashTime1; // 0x468
	protected float flashTime2; // 0x46C
	protected float flashTime3; // 0x470
	protected Color flashColor1; // 0x474
	protected Color flashColor2; // 0x484
	protected string flashDepName; // 0x498
	protected bool isExecuteFlashDep; // 0x4A0
	protected bool isEndRequestFlashDep; // 0x4A1
	protected int flashDepCount; // 0x4A4
	protected float flashDepTime1; // 0x4A8
	protected float flashDepTime2; // 0x4AC
	protected float flashDepTime3; // 0x4B0
	protected Color flashDepColor1; // 0x4B4
	protected Color flashDepColor2; // 0x4C4
	private int flashDepNum; // 0x4D4
	protected string wipeName; // 0x4D8
	protected AssetData wipeAssetData; // 0x4E0
	protected bool isExecuteWipe; // 0x4E8
	protected bool isLoadWipe; // 0x4E9
	protected bool isWipeFilter; // 0x4EA
	protected bool isWipeIn; // 0x4EB
	protected float wipeDuration; // 0x4EC
	protected float wipeLevel; // 0x4F0
	private float wipeParam1; // 0x4F4
	private float wipeParam2; // 0x4F8
	private float wipeParam3; // 0x4FC
	private float wipeParam4; // 0x500
	private bool isEffectMessageStopping; // 0x504
	private CRIMoviePlayer cRIMoviePlayer; // 0x508
	private bool isDetectionDebugCheckOn; // 0x510
	private bool isEnableCheckDebugCheckOn; // 0x511
	private ScriptManager.ExWipeType exWipeType; // 0x514
	private int[] wipeExCutVarTriangles; // 0x518
	private ScriptActionRenderEffectController scriptActionRenderEffectController; // 0x520
	protected string fadeName; // 0x528
	protected Color fadeColor; // 0x530
	protected bool isExecuteFade; // 0x540
	protected string backName; // 0x548
	protected string figureName; // 0x550
	protected string[] backNameList; // 0x558
	protected string[] figureNameList; // 0x560
	protected int figureFaceNum; // 0x568
	protected string codeCommentString; // 0x570
	protected string codeLabelString; // 0x578
	protected string codeSceneString; // 0x580
	protected string codeTalkString; // 0x588
	protected string codeSwitchCaseString; // 0x590
	protected string codeSwitchCaseSplitString; // 0x598
	protected string codeSwitchEndString; // 0x5A0
	protected string codeInsertString; // 0x5A8
	protected string codeVoiceString; // 0x5B0
	protected string codeReturnString; // 0x5B8
	protected string backLogTalkStartString; // 0x5C0
	protected string backLogTalkEndString; // 0x5C8
	protected string backLogTalkSelectMessageString; // 0x5D0
	protected string backLogTalkSelectMessage2String; // 0x5D8
	protected string backLogTalkSelectColorString; // 0x5E0
	private bool isScriptExecuteMoviePlay; // 0x5E8
	private bool isNeedSkipStateAfterMovie; // 0x5E9
	private ScriptCommandDelayParam[] executeDelayParam; // 0x5F0
	protected float scenarioSpeed; // 0x5F8
	private float scenarioTextWaitTimeSecond; // 0x5FC
	private static int cachedSelectBranchQuestId; // 0x128
	private static int cachedOverWriteQuestId; // 0x12C
	private bool isAligned; // 0x600
	private bool isMaskEnabled; // 0x601
	private bool isSpriteMaskLoading; // 0x602
	private Action<bool> onEndRewardSwitchScript; // 0x608
	private bool isGetReward; // 0x610
	private bool isPlayScenarioWithMap; // 0x611
	private int lineMaxFontSize; // 0x614
	private ScriptLoop scriptLoop; // 0x618
	protected static List<ScriptManager.ScriptRouteSelectParam> scriptRouteSelectParams; // 0x130
	private Dictionary<string, object> switchSelections; // 0x620
	[CompilerGeneratedAttribute] // RVA: 0xCCB9CC Offset: 0xCCB9CC VA: 0xCCB9CC
	private static Dictionary<string, int> <>f__switch$mapB; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCCB9DC Offset: 0xCCB9DC VA: 0xCCB9DC
	private static ScriptManager.CallbackFunc <>f__mg$cache0; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xCCB9EC Offset: 0xCCB9EC VA: 0xCCB9EC
	private static Action <>f__mg$cache1; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xCCB9FC Offset: 0xCCB9FC VA: 0xCCB9FC
	private static AssetLoader.LoadEndDataHandler <>f__mg$cache2; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xCCBA0C Offset: 0xCCBA0C VA: 0xCCBA0C
	private static ScriptManager.CallbackFunc <>f__mg$cache3; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xCCBA1C Offset: 0xCCBA1C VA: 0xCCBA1C
	private static Dictionary<string, int> <>f__switch$mapC; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xCCBA2C Offset: 0xCCBA2C VA: 0xCCBA2C
	private static Dictionary<string, int> <>f__switch$mapD; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xCCBA3C Offset: 0xCCBA3C VA: 0xCCBA3C
	private static Dictionary<string, int> <>f__switch$mapE; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xCCBA4C Offset: 0xCCBA4C VA: 0xCCBA4C
	private static Dictionary<string, int> <>f__switch$mapF; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xCCBA5C Offset: 0xCCBA5C VA: 0xCCBA5C
	private static Dictionary<string, int> <>f__switch$map10; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xCCBA6C Offset: 0xCCBA6C VA: 0xCCBA6C
	private static Dictionary<string, int> <>f__switch$map11; // 0x188
	[CompilerGeneratedAttribute] // RVA: 0xCCBA7C Offset: 0xCCBA7C VA: 0xCCBA7C
	private static Dictionary<string, int> <>f__switch$map12; // 0x190
	[CompilerGeneratedAttribute] // RVA: 0xCCBA8C Offset: 0xCCBA8C VA: 0xCCBA8C
	private static Dictionary<string, int> <>f__switch$map13; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xCCBA9C Offset: 0xCCBA9C VA: 0xCCBA9C
	private static Func<string, bool> <>f__am$cache0; // 0x1A0

	// Properties
	public bool IsLoading { get; }

	// Methods

	// RVA: 0x14B75CC Offset: 0x14B75CC VA: 0x14B75CC
	public void .ctor() { }

	// RVA: 0x14B76A0 Offset: 0x14B76A0 VA: 0x14B76A0
	public bool get_IsLoading() { }

	// RVA: 0x14B76C0 Offset: 0x14B76C0 VA: 0x14B76C0
	public static void AddNotificationInfo(bool openQuest, string title, string message) { }

	// RVA: 0x14B77A0 Offset: 0x14B77A0 VA: 0x14B77A0
	public static void InitNotificationInfo() { }

	// RVA: 0x14B781C Offset: 0x14B781C VA: 0x14B781C
	public static int GetQuestId() { }

	// RVA: 0x14B7884 Offset: 0x14B7884 VA: 0x14B7884
	public static string GetScriptLabel() { }

	// RVA: 0x14B78E0 Offset: 0x14B78E0 VA: 0x14B78E0
	public static string GetStartModeForAssetStorage(string path, string label) { }

	// RVA: 0x14B7D7C Offset: 0x14B7D7C VA: 0x14B7D7C
	protected static ScriptManager.StartMode GetStartMode(string startModeName) { }

	// RVA: 0x14B80B0 Offset: 0x14B80B0 VA: 0x14B80B0
	public static int GetSelectBranchIndex() { }

	// RVA: 0x14B8100 Offset: 0x14B8100 VA: 0x14B8100
	public static void SetSelectBranchIndex(int branchIndex) { }

	// RVA: 0x14B8194 Offset: 0x14B8194 VA: 0x14B8194
	public static void ClearSelectRouteArray() { }

	// RVA: 0x14B81FC Offset: 0x14B81FC VA: 0x14B81FC
	public static int[] GetSelectRouteArray() { }

	// RVA: 0x14B843C Offset: 0x14B843C VA: 0x14B843C
	private static void SetScriptRouteSelectParam(int line, int route, bool isCollection) { }

	// RVA: 0x14B8B90 Offset: 0x14B8B90 VA: 0x14B8B90
	public static bool GetSelectRouteArrayInCollection(out int questId, out int phase, out int[] routes) { }

	// RVA: 0x14B8DFC Offset: 0x14B8DFC VA: 0x14B8DFC
	public static void ClearSelectRouteArrayInCollection() { }

	// RVA: 0x14B8E68 Offset: 0x14B8E68 VA: 0x14B8E68
	public static int GetCachedSelectedBranchQuestId(int originalQuestId, int phase) { }

	// RVA: 0x14B9070 Offset: 0x14B9070 VA: 0x14B9070
	public static void PlayScenario(string label, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14B9800 Offset: 0x14B9800 VA: 0x14B9800
	public static void PlayScenario(string label, bool isSkip, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14B993C Offset: 0x14B993C VA: 0x14B993C
	public static void PlayMessage(string message, Action callbackFunc, bool isPlayScript = False, Camera mapCamera, int jumpLine = -1) { }

	// RVA: 0x14B9B4C Offset: 0x14B9B4C VA: 0x14B9B4C
	private void SetupMapCamera(Camera mapCamera) { }

	// RVA: 0x14BA144 Offset: 0x14BA144 VA: 0x14BA144
	protected static void EndPlayMessagePlayLocal(bool isExit) { }

	// RVA: 0x14BA1C4 Offset: 0x14BA1C4 VA: 0x14BA1C4
	public static void PlayShop(string label, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14BA2FC Offset: 0x14BA2FC VA: 0x14BA2FC
	public static void PlayShopRewardSwitch(string label, Action<bool> onEndRewardSwitchScript, bool isCollection = False) { }

	// RVA: 0x14BA454 Offset: 0x14BA454 VA: 0x14BA454
	public static void PlayGacha(int svtId, int limitCount, bool isFaceFirst, Action callbackFunc, int svtVoiceId = 0, int scriptIdx = -1) { }

	// RVA: 0x14BA7D0 Offset: 0x14BA7D0 VA: 0x14BA7D0
	public void PlayGacha(UserServantEntity userSvtEntity, int svtId, int limitCount, bool isEventSvtGet, bool checkQuestOpens, Action endAction, bool isEventJoinSkip = False, int presentDialogMessageId = 0, string summonScriptId) { }

	// RVA: 0x14BA910 Offset: 0x14BA910 VA: 0x14BA910
	private void QuestOpenNotify(int svtId, bool checkQuestOpen) { }

	// RVA: 0x14BAAC4 Offset: 0x14BAAC4 VA: 0x14BAAC4
	private void SvtJoinNotify(UserServantEntity userSvtEntity, bool isEventSvtGet, bool isEventJoinSkip) { }

	// RVA: 0x14BAC08 Offset: 0x14BAC08 VA: 0x14BAC08
	private void PresentMessageNotify(int presentDialogMessageId, int servantId) { }

	// RVA: 0x14BAE0C Offset: 0x14BAE0C VA: 0x14BAE0C
	public static void PlayNewSvtTalk(int svtId, int limitCount, string summonSctiptId, Action callbackFunc) { }

	// RVA: 0x14BA4FC Offset: 0x14BA4FC VA: 0x14BA4FC
	public static void PlayGacha(UserServantEntity userSvtEntity, int svtId, int limitCount, bool isFaceFirst, Action callbackFunc, int voiceId = 0, int scriptIdx = -1) { }

	// RVA: 0x14BB120 Offset: 0x14BB120 VA: 0x14BB120
	private static void _playGacha(int svtId, int svtVoiceId, int imageLimitCount, bool isFaceFirst, ServantVoiceData[] voiceList, Action callbackFunc) { }

	// RVA: 0x14BB4B8 Offset: 0x14BB4B8 VA: 0x14BB4B8
	protected static void EndLoadPlayGachaVoice() { }

	// RVA: 0x14BB620 Offset: 0x14BB620 VA: 0x14BB620
	protected static void EndLoadPlatGachaTemplate(AssetData data) { }

	// RVA: 0x14BB8E0 Offset: 0x14BB8E0 VA: 0x14BB8E0
	protected static string CreateSummonMultiTemplate(AssetData data, List<SvtMultiPortraitEntity> entities) { }

	// RVA: 0x14BCA50 Offset: 0x14BCA50 VA: 0x14BCA50
	protected static string CreateSummonSingleTemplate(AssetData data) { }

	// RVA: 0x14BD4A4 Offset: 0x14BD4A4 VA: 0x14BD4A4
	protected static void EndPlayGachaPlayLocal(bool isExit) { }

	// RVA: 0x14BD5C0 Offset: 0x14BD5C0 VA: 0x14BD5C0
	public static void PlayChapterStart(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0x14BDA50 Offset: 0x14BDA50 VA: 0x14BDA50
	public static void PlayChapterStartQuest(int warId, int qstId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0x14BDF70 Offset: 0x14BDF70 VA: 0x14BDF70
	public static void PlayChapterStartNotCollection(int warId, Action callbackFunc, int jumpLine = -1) { }

	// RVA: 0x14BE1D0 Offset: 0x14BE1D0 VA: 0x14BE1D0
	public static void PlayChapterStartQuestNotCollection(int warId, int qstId, Action callbackFunc, int jumpLine = -1) { }

	// RVA: 0x14BD8A4 Offset: 0x14BD8A4 VA: 0x14BD8A4
	public static void PlayChapterStartEffect(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection) { }

	// RVA: 0x14BE2FC Offset: 0x14BE2FC VA: 0x14BE2FC
	public static void PlayChapterEpilogue(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14BE4FC Offset: 0x14BE4FC VA: 0x14BE4FC
	public static void PlayChapterClear(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14BE680 Offset: 0x14BE680 VA: 0x14BE680
	protected static void SetQuestStartData(int warId, int questId, int questPhase, string questMessage, bool isMyRoomMaterial = False) { }

	// RVA: 0x14BE9E0 Offset: 0x14BE9E0 VA: 0x14BE9E0
	public static bool isPlayQuestStart(int warId, int questId) { }

	// RVA: 0x14BEA88 Offset: 0x14BEA88 VA: 0x14BEA88
	public static void PlayQuestStart(int warId, int questId, int questPhaseMax, bool isCollection, Action callbackFunc, string questMessage, bool isMyRoomMaterial = False) { }

	// RVA: 0x14BED50 Offset: 0x14BED50 VA: 0x14BED50
	public static string GetScriptName_BattleStart(int questId, int questPhase) { }

	// RVA: 0x14BEE0C Offset: 0x14BEE0C VA: 0x14BEE0C
	public static string GetScriptName_BattleStart2(int questId, int questPhase) { }

	// RVA: 0x14BEEC8 Offset: 0x14BEEC8 VA: 0x14BEEC8
	public static string GetScriptName_NotMeetsCond(int questId, int questPhase) { }

	// RVA: 0x14BEF84 Offset: 0x14BEF84 VA: 0x14BEF84
	public static string GetScriptName_BattleEnd_Direct(int questId, int questPhase, BattleData.WinResult winResult) { }

	// RVA: 0x14BF11C Offset: 0x14BF11C VA: 0x14BF11C
	public static string GetScriptName_BattleEnd2_Direct(int questId, int questPhase, BattleData.WinResult winResult) { }

	// RVA: 0x14BF2B4 Offset: 0x14BF2B4 VA: 0x14BF2B4
	public static string GetScriptName_BattleEnd(int scriptQuestId, int questPhase, BattleData.WinResult winResult = 1) { }

	// RVA: 0x14BF5F0 Offset: 0x14BF5F0 VA: 0x14BF5F0
	public static string GetScriptName_BattleEnd2(int scriptQuestId, int questPhase, BattleData.WinResult winResult = 1) { }

	// RVA: 0x14BF830 Offset: 0x14BF830 VA: 0x14BF830
	public static string GetScriptAssetName(int questId) { }

	// RVA: 0x14BF990 Offset: 0x14BF990 VA: 0x14BF990
	public static string GetScriptAssetName(long scriptId) { }

	// RVA: 0x14B91A8 Offset: 0x14B91A8 VA: 0x14B91A8
	public static string GetScriptAssetName(string label) { }

	// RVA: 0x14BFB00 Offset: 0x14BFB00 VA: 0x14BFB00
	public static void PlayBattleStart(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1, bool isNotMeets = False, bool isMyRoomMaterial = False) { }

	// RVA: 0x14BDBDC Offset: 0x14BDBDC VA: 0x14BDBDC
	public static void PlayBattleStartWhite(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1, bool isMyRoomMaterial = False) { }

	// RVA: 0x14BFECC Offset: 0x14BFECC VA: 0x14BFECC
	public static void PlayBattleStart(int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, bool isMyRoomMaterial = False) { }

	// RVA: 0x14C0258 Offset: 0x14C0258 VA: 0x14C0258
	public static void PlayBattleStart2(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1) { }

	// RVA: 0x14C05C4 Offset: 0x14C05C4 VA: 0x14C05C4
	public static void PlayBattleStart2(int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14C0930 Offset: 0x14C0930 VA: 0x14C0930
	private static void SetQuestMessage(int questId) { }

	// RVA: 0x14C0A78 Offset: 0x14C0A78 VA: 0x14C0A78
	public static void PlayBattleEnd(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0x14C0B30 Offset: 0x14C0B30 VA: 0x14C0B30
	public static void PlayBattleEnd(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.StartMode startMode, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1, bool isPlayWithMap = False) { }

	// RVA: 0x14C0EEC Offset: 0x14C0EEC VA: 0x14C0EEC
	public static void PlayBattleEndWhite(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0x14C1284 Offset: 0x14C1284 VA: 0x14C1284
	public static void PlayBattleEnd2(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0x14C133C Offset: 0x14C133C VA: 0x14C133C
	public static void PlayBattleEnd2(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.StartMode startMode, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1, bool isPlayWithMap = False) { }

	// RVA: 0x14C16F8 Offset: 0x14C16F8 VA: 0x14C16F8
	public static void LoadBattleStartGameDemo(int questId, int questPhase, bool isBefore, Action<string> callbackFunc, bool isCollection = False) { }

	// RVA: 0x14C1B44 Offset: 0x14C1B44 VA: 0x14C1B44
	protected void LoadBattleStartGameDemoLocal(string demoInfo, Action<string> callbackFunc) { }

	// RVA: 0x14C1D14 Offset: 0x14C1D14 VA: 0x14C1D14
	public static void LoadBattleEndGameDemo(int questId, int questPhase, bool isBefore, Action<string> callbackFunc, bool isCollection = False) { }

	// RVA: 0x14C2174 Offset: 0x14C2174 VA: 0x14C2174
	protected void LoadBattleEndGameDemoLocal(string demoInfo, Action<string> callbackFunc) { }

	// RVA: 0x14C22E8 Offset: 0x14C22E8 VA: 0x14C22E8
	public static void ReleaseBattleDemo() { }

	// RVA: 0x14C2394 Offset: 0x14C2394 VA: 0x14C2394
	protected void ReleaseBattleDemoLoacal() { }

	// RVA: 0x14C2418 Offset: 0x14C2418 VA: 0x14C2418
	public static void PlayRaceResult(long scriptId, int eventId, int termId, int groupId, int rank, long time, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0x14C2918 Offset: 0x14C2918 VA: 0x14C2918
	public static void Play(string name, string label, bool isCollection, bool isSkip, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0x14C2A60 Offset: 0x14C2A60 VA: 0x14C2A60
	public static void DebugPlay(string startModeName, string name, string label, int jumpLine, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0x14C2A64 Offset: 0x14C2A64 VA: 0x14C2A64
	public static void DebugPlay(string startModeName, string data, string orgData, int genderIndex, int jumpLine, ScriptManager.CallbackFunc callbackFunc, DebugTestRootComponent.ScriptReloadCallback reloadCallback) { }

	// RVA: 0x14C2A68 Offset: 0x14C2A68 VA: 0x14C2A68
	public static void DebugScriptLoad(string name, string label, ScriptManager.CallbackBranchList callbackFunc) { }

	// RVA: 0x14C2A80 Offset: 0x14C2A80 VA: 0x14C2A80
	public static List<List<string>> DebugScriptAnalys(string label, string data, string orgData) { }

	// RVA: 0x14C2A88 Offset: 0x14C2A88 VA: 0x14C2A88
	public static void BackViewClear() { }

	// RVA: 0x14C2AE4 Offset: 0x14C2AE4 VA: 0x14C2AE4
	public static void BackViewPlay(string backName, string[] backNameList, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0x14C2AE8 Offset: 0x14C2AE8 VA: 0x14C2AE8
	public static void FigureViewClear() { }

	// RVA: 0x14C2B44 Offset: 0x14C2B44 VA: 0x14C2B44
	public static void FigureViewPlay(string figureName, string[] figureNameList, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0x14C2B48 Offset: 0x14C2B48 VA: 0x14C2B48
	public static string GetScriptServerSetting() { }

	// RVA: 0x14C2BB0 Offset: 0x14C2BB0 VA: 0x14C2BB0
	public static string GetScriptObjectSetting() { }

	// RVA: 0x14C2C18 Offset: 0x14C2C18 VA: 0x14C2C18
	public static string GetScriptPlayerPathSetting() { }

	// RVA: 0x14C2C80 Offset: 0x14C2C80 VA: 0x14C2C80
	public static string GetScriptPlayerObjectSetting() { }

	// RVA: 0x14C2CE8 Offset: 0x14C2CE8 VA: 0x14C2CE8
	public static int GetScriptGenderSetting() { }

	// RVA: 0x14C2D50 Offset: 0x14C2D50 VA: 0x14C2D50
	public static string GetScriptStartModeSetting() { }

	// RVA: 0x14C2DB8 Offset: 0x14C2DB8 VA: 0x14C2DB8
	public static bool GetScriptHiddenTruthSetting() { }

	// RVA: 0x14C2E20 Offset: 0x14C2E20 VA: 0x14C2E20
	public static bool GetScriptForceCheckOnSetting() { }

	// RVA: 0x14C2E88 Offset: 0x14C2E88 VA: 0x14C2E88
	public static void SetScriptForceCheckOnSetting(bool isForceCheckOn) { }

	// RVA: 0x14C2EF8 Offset: 0x14C2EF8 VA: 0x14C2EF8
	public static bool Fade(string name, bool isIn, float duration) { }

	// RVA: 0x14C37D8 Offset: 0x14C37D8 VA: 0x14C37D8
	public static bool IsBusyFade() { }

	// RVA: 0x14C3834 Offset: 0x14C3834 VA: 0x14C3834
	public static bool SetScriptServerSetting(string scriptServer, string scriptObject, int genderIndex, string startModeName, bool isHiddenTruthSetting) { }

	// RVA: 0x14C3AE4 Offset: 0x14C3AE4 VA: 0x14C3AE4
	public static bool SetScriptPlayerSetting(string scriptPath, string scriptObject, int genderIndex, string startModeName, bool isHiddenTruthSetting) { }

	// RVA: 0x14C3D94 Offset: 0x14C3D94 VA: 0x14C3D94
	public static void SetIsCollection(bool isCollection) { }

	// RVA: 0x14C3D98 Offset: 0x14C3D98 VA: 0x14C3D98
	public static bool GetIsCollection() { }

	// RVA: 0x14C3DA0 Offset: 0x14C3DA0 VA: 0x14C3DA0
	public static void SetIsRevival(bool isRevival) { }

	// RVA: 0x14C3DA4 Offset: 0x14C3DA4 VA: 0x14C3DA4
	public static bool GetIsRevival() { }

	// RVA: 0x14BD3F0 Offset: 0x14BD3F0 VA: 0x14BD3F0
	protected string GetKey(string scriptName) { }

	// RVA: 0x14C3DAC Offset: 0x14C3DAC VA: 0x14C3DAC
	public ScriptEncryptEntity GetEncryptEntity(string scriptName) { }

	// RVA: 0x14C3E60 Offset: 0x14C3E60 VA: 0x14C3E60
	public bool ReadSetting() { }

	// RVA: 0x14C3F38 Offset: 0x14C3F38 VA: 0x14C3F38
	public void WriteSetting() { }

	// RVA: 0x14C3F3C Offset: 0x14C3F3C VA: 0x14C3F3C
	private RenderTexture CreateRenderTexture(bool enableMask = False) { }

	// RVA: 0x14C3FB8 Offset: 0x14C3FB8 VA: 0x14C3FB8
	protected void RenderCameraInit() { }

	// RVA: 0x14C4848 Offset: 0x14C4848 VA: 0x14C4848
	protected void RenderCameraQuit() { }

	// RVA: 0x14C4A20 Offset: 0x14C4A20 VA: 0x14C4A20
	protected RenderTexture RenderCameraSwap(RenderTexture swapTexture) { }

	// RVA: 0x14C4C88 Offset: 0x14C4C88 VA: 0x14C4C88
	public RenderTexture GetRenderTargetTexture() { }

	// RVA: 0x14C4CB8 Offset: 0x14C4CB8 VA: 0x14C4CB8
	public RenderTexture GetCaptureRenderTexture() { }

	// RVA: 0x14C454C Offset: 0x14C454C VA: 0x14C454C
	public void SetCameraFilter(string filterName) { }

	// RVA: 0x14C4CC0 Offset: 0x14C4CC0 VA: 0x14C4CC0
	public void reboot(bool isRemoveScriptFileList = True) { }

	// RVA: 0x14C5490 Offset: 0x14C5490 VA: 0x14C5490
	public void Initialize() { }

	// RVA: 0x14C66E8 Offset: 0x14C66E8 VA: 0x14C66E8
	private void EndLoadScriptFileListAssetData(AssetData assetData) { }

	// RVA: 0x14C6850 Offset: 0x14C6850 VA: 0x14C6850
	public bool IsBusyInitialize() { }

	// RVA: 0x14C6858 Offset: 0x14C6858 VA: 0x14C6858
	public string[] GetScriptFileList() { }

	// RVA: 0x14BF4F4 Offset: 0x14BF4F4 VA: 0x14BF4F4
	public bool IsExistScriptFile(string scriptName) { }

	// RVA: 0x14C6860 Offset: 0x14C6860 VA: 0x14C6860
	protected void InitSetting() { }

	// RVA: 0x14B92A0 Offset: 0x14B92A0 VA: 0x14B92A0
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string name, string label, bool isCollection, bool isSkip, bool isBackLog, long[] parameterList, ScriptManager.CallbackFunc callbackFunc, Action recoverBgmFunc, int jumpLine = -1, bool forceSkipDisable = False) { }

	// RVA: 0x14C7728 Offset: 0x14C7728 VA: 0x14C7728
	public static void SetIsSkippedInCollectionFalse() { }

	// RVA: 0x14C787C Offset: 0x14C787C VA: 0x14C787C
	private void ShowChapterSubTitle() { }

	// RVA: 0x14BA44C Offset: 0x14BA44C VA: 0x14BA44C
	private void SetOnEndRewardSwitchScript(Action<bool> onEndRewardSwitchScript) { }

	// RVA: 0x14C7B44 Offset: 0x14C7B44 VA: 0x14C7B44
	protected void EndFirstLoadAsset(AssetData loadData) { }

	// RVA: 0x14C7418 Offset: 0x14C7418 VA: 0x14C7418
	protected void FirstExecuteScriptLoadCommonData() { }

	// RVA: 0x14C8060 Offset: 0x14C8060 VA: 0x14C8060
	protected void EndLoadCommonScriptData(AssetData loadData) { }

	// RVA: 0x14C7D04 Offset: 0x14C7D04 VA: 0x14C7D04
	private string GetScriptData() { }

	// RVA: 0x14C7548 Offset: 0x14C7548 VA: 0x14C7548
	protected void FirstExecuteScript() { }

	// RVA: 0x14C835C Offset: 0x14C835C VA: 0x14C835C
	protected void LoadExecuteScript(string name, string label) { }

	// RVA: 0x14C8580 Offset: 0x14C8580 VA: 0x14C8580
	protected void EndLoadAsset(AssetData loadData) { }

	// RVA: 0x14C861C Offset: 0x14C861C VA: 0x14C861C
	protected void LoadScript(string name, string label, ScriptManager.CallbackBranchList callbackFunc) { }

	// RVA: 0x14C8964 Offset: 0x14C8964 VA: 0x14C8964
	private List<List<string>> LoadScriptAnalys(string name, string label) { }

	// RVA: 0x14C8998 Offset: 0x14C8998 VA: 0x14C8998
	private List<List<string>> ScriptAnalys(string label, string scriptData, string oriScriptData) { }

	// RVA: 0x14CAF38 Offset: 0x14CAF38 VA: 0x14CAF38
	protected string GetCommonScriptText(string label) { }

	// RVA: 0x14C806C Offset: 0x14C806C VA: 0x14C806C
	protected string GetExecuteScriptText(string label) { }

	// RVA: 0x14CB308 Offset: 0x14CB308 VA: 0x14CB308
	private string GetOverwriteText(string label, int key) { }

	// RVA: 0x14C8160 Offset: 0x14C8160 VA: 0x14C8160
	protected void ExecuteScript(string label, string scriptData, string orgScriptData) { }

	// RVA: 0x14CBBD4 Offset: 0x14CBBD4 VA: 0x14CBBD4
	protected void EndDownloadAssetData() { }

	// RVA: 0x14CBCE4 Offset: 0x14CBCE4 VA: 0x14CBCE4
	protected void EndFontAssetData() { }

	// RVA: 0x14CBCDC Offset: 0x14CBCDC VA: 0x14CBCDC
	protected void StartLoadAudioAssetData() { }

	// RVA: 0x14CBCEC Offset: 0x14CBCEC VA: 0x14CBCEC
	protected void LoadAudioAssetData() { }

	// RVA: 0x14B9CC8 Offset: 0x14B9CC8 VA: 0x14B9CC8
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string data, bool isCollection, bool isSkip, bool isBackLog, bool isButtonDisable, long[] parameterList, ScriptManager.CallbackFunc callbackFunc, int jumpLine = -1) { }

	// RVA: 0x14CBE04 Offset: 0x14CBE04 VA: 0x14CBE04
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string data, string orgData, string[] list, int genderIndex, ScriptManager.CallbackFunc callbackFunc, int jumpLine = -1, DebugTestRootComponent.ScriptReloadCallback reloadCallback) { }

	// RVA: 0x14CC0F0 Offset: 0x14CC0F0 VA: 0x14CC0F0
	protected ScriptFlagData SearchFlag(string name) { }

	// RVA: 0x14C92CC Offset: 0x14C92CC VA: 0x14C92CC
	protected void AnalysScript(string scriptData, string orgScriptData) { }

	// RVA: 0x14CC22C Offset: 0x14CC22C VA: 0x14CC22C
	protected void AnalysText(ref List<string> tagDataList, ref List<string> scriptDataList, ref List<int> lineDataList, ref List<int> orgLineDataList, ref int lastMessageIndex, ref string talkName, ref bool messageLine, ref int fontSize, string analysData, int line, int orgLine) { }

	// RVA: 0x14CA960 Offset: 0x14CA960 VA: 0x14CA960
	protected string[] AnalysParam(string data) { }

	// RVA: 0x14D38DC Offset: 0x14D38DC VA: 0x14D38DC
	protected string GetAfterParam(string data, int index) { }

	// RVA: 0x14D3F20 Offset: 0x14D3F20 VA: 0x14D3F20
	protected bool TDelayJumpScript(int index) { }

	// RVA: 0x14D3F5C Offset: 0x14D3F5C VA: 0x14D3F5C
	protected bool JumpScript(int index) { }

	// RVA: 0x14CB97C Offset: 0x14CB97C VA: 0x14CB97C
	protected bool JumpScript(string label) { }

	// RVA: 0x14D42C0 Offset: 0x14D42C0 VA: 0x14D42C0
	private bool SearchBranchLabel(string label, int beforeExecuteIndex, bool isAfterSearch) { }

	// RVA: 0x14D439C Offset: 0x14D439C VA: 0x14D439C
	private bool SetJumpIndexByLabel(string label, int index, ref bool isResetSwitchCase) { }

	// RVA: 0x14D45D0 Offset: 0x14D45D0 VA: 0x14D45D0
	protected bool JumpScriptCommand(string command) { }

	// RVA: 0x14D4758 Offset: 0x14D4758 VA: 0x14D4758
	protected bool JumpScriptSwitchCase(int index) { }

	// RVA: 0x14D4940 Offset: 0x14D4940 VA: 0x14D4940
	protected string GetStringParameter(string[] pd, int s, string name) { }

	// RVA: 0x14D4B58 Offset: 0x14D4B58 VA: 0x14D4B58
	protected int[] GetPositionParameter(string[] pd, int s, string name) { }

	// RVA: 0x14D4E54 Offset: 0x14D4E54 VA: 0x14D4E54
	protected int GetIntegerParameter(string[] pd, int s, string name) { }
