	// RVA: 0x1F2D628 Offset: 0x1F2D628 VA: 0x1F2D628
	public void set_CommentUri(Uri value) { }

	// RVA: 0x1F2D630 Offset: 0x1F2D630 VA: 0x1F2D630
	public bool get_Discard() { }

	// RVA: 0x1F2D638 Offset: 0x1F2D638 VA: 0x1F2D638
	public void set_Discard(bool value) { }

	// RVA: 0x1F2D644 Offset: 0x1F2D644 VA: 0x1F2D644
	public string get_Domain() { }

	// RVA: 0x1F2D3A0 Offset: 0x1F2D3A0 VA: 0x1F2D3A0
	public void set_Domain(string value) { }

	// RVA: 0x1F2D684 Offset: 0x1F2D684 VA: 0x1F2D684
	internal bool get_ExactDomain() { }

	// RVA: 0x1F2D678 Offset: 0x1F2D678 VA: 0x1F2D678
	internal void set_ExactDomain(bool value) { }

	// RVA: 0x1F2D68C Offset: 0x1F2D68C VA: 0x1F2D68C
	public bool get_Expired() { }

	// RVA: 0x1F2D764 Offset: 0x1F2D764 VA: 0x1F2D764
	public void set_Expired(bool value) { }

	// RVA: 0x1F2D7E0 Offset: 0x1F2D7E0 VA: 0x1F2D7E0
	public DateTime get_Expires() { }

	// RVA: 0x1F2D7EC Offset: 0x1F2D7EC VA: 0x1F2D7EC
	public void set_Expires(DateTime value) { }

	// RVA: 0x1F2D7F4 Offset: 0x1F2D7F4 VA: 0x1F2D7F4
	public bool get_HttpOnly() { }

	// RVA: 0x1F2D7FC Offset: 0x1F2D7FC VA: 0x1F2D7FC
	public void set_HttpOnly(bool value) { }

	// RVA: 0x1F2D808 Offset: 0x1F2D808 VA: 0x1F2D808
	public string get_Name() { }

	// RVA: 0x1F2D0B0 Offset: 0x1F2D0B0 VA: 0x1F2D0B0
	public void set_Name(string value) { }

	// RVA: 0x1F2D818 Offset: 0x1F2D818 VA: 0x1F2D818
	public string get_Path() { }

	// RVA: 0x1F2D2C4 Offset: 0x1F2D2C4 VA: 0x1F2D2C4
	public void set_Path(string value) { }

	// RVA: 0x1F2D88C Offset: 0x1F2D88C VA: 0x1F2D88C
	public string get_Port() { }

	// RVA: 0x1F2D894 Offset: 0x1F2D894 VA: 0x1F2D894
	public void set_Port(string value) { }

	// RVA: 0x1F2DCC8 Offset: 0x1F2DCC8 VA: 0x1F2DCC8
	internal int[] get_Ports() { }

	// RVA: 0x1F2DCD0 Offset: 0x1F2DCD0 VA: 0x1F2DCD0
	public bool get_Secure() { }

	// RVA: 0x1F2DCD8 Offset: 0x1F2DCD8 VA: 0x1F2DCD8
	public void set_Secure(bool value) { }

	// RVA: 0x1F2DCE4 Offset: 0x1F2DCE4 VA: 0x1F2DCE4
	public DateTime get_TimeStamp() { }

	// RVA: 0x1F2DCF0 Offset: 0x1F2DCF0 VA: 0x1F2DCF0
	public string get_Value() { }

	// RVA: 0x1F2D218 Offset: 0x1F2D218 VA: 0x1F2D218
	public void set_Value(string value) { }

	// RVA: 0x1F2DCF8 Offset: 0x1F2DCF8 VA: 0x1F2DCF8
	public int get_Version() { }

	// RVA: 0x1F2DCB8 Offset: 0x1F2DCB8 VA: 0x1F2DCB8
	public void set_Version(int value) { }

	// RVA: 0x1F2DD00 Offset: 0x1F2DD00 VA: 0x1F2DD00 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F2DF54 Offset: 0x1F2DF54 VA: 0x1F2DF54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F2E0B8 Offset: 0x1F2E0B8 VA: 0x1F2E0B8
	private static int hash(int i, int j, int k, int l, int m) { }

	// RVA: 0x1F2E0EC Offset: 0x1F2E0EC VA: 0x1F2E0EC Slot: 3
	public override string ToString() { }

	// RVA: 0x1F2E0F4 Offset: 0x1F2E0F4 VA: 0x1F2E0F4
	internal string ToString(Uri uri) { }

	// RVA: 0x1F2E4EC Offset: 0x1F2E4EC VA: 0x1F2E4EC
	internal string ToClientString() { }

	// RVA: 0x1F2E7C4 Offset: 0x1F2E7C4 VA: 0x1F2E7C4
	private string QuotedString(string value) { }

	// RVA: 0x1F2E8A0 Offset: 0x1F2E8A0 VA: 0x1F2E8A0
	private bool IsToken(string value) { }

	// RVA: 0x1F2D64C Offset: 0x1F2D64C VA: 0x1F2D64C
	private static bool IsNullOrEmpty(string s) { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xBD07EC Offset: 0xBD07EC VA: 0xBD07EC
[Serializable]
public sealed class CookieCollection : ICollection, IEnumerable // TypeDefIndex: 1517
{
	// Fields
	private List<Cookie> list; // 0x10
	private static CookieCollection.CookieCollectionComparer Comparer; // 0x0

	// Properties
	internal IList<Cookie> List { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public bool IsReadOnly { get; }
	public Cookie Item { get; }
	public Cookie Item { get; }

	// Methods

	// RVA: 0x1F2E9B0 Offset: 0x1F2E9B0 VA: 0x1F2E9B0
	public void .ctor() { }

	// RVA: 0x1F2EA20 Offset: 0x1F2EA20 VA: 0x1F2EA20
	private static void .cctor() { }

	// RVA: 0x1F2EA94 Offset: 0x1F2EA94 VA: 0x1F2EA94
	internal IList<Cookie> get_List() { }

	// RVA: 0x1F2EA9C Offset: 0x1F2EA9C VA: 0x1F2EA9C Slot: 4
	public int get_Count() { }

	// RVA: 0x1F2EAFC Offset: 0x1F2EAFC VA: 0x1F2EAFC Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x1F2EB04 Offset: 0x1F2EB04 VA: 0x1F2EB04 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x1F2EB08 Offset: 0x1F2EB08 VA: 0x1F2EB08 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x1F2EBD8 Offset: 0x1F2EBD8 VA: 0x1F2EBD8
	public void CopyTo(Cookie[] array, int index) { }

	// RVA: 0x1F2EC50 Offset: 0x1F2EC50 VA: 0x1F2EC50 Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0x1F2ECE4 Offset: 0x1F2ECE4 VA: 0x1F2ECE4
	public bool get_IsReadOnly() { }

	// RVA: 0x1F2ECEC Offset: 0x1F2ECEC VA: 0x1F2ECEC
	public void Add(Cookie cookie) { }

	// RVA: 0x1F2F064 Offset: 0x1F2F064 VA: 0x1F2F064
	internal void Sort() { }

	// RVA: 0x1F2EDE4 Offset: 0x1F2EDE4 VA: 0x1F2EDE4
	private int SearchCookie(Cookie cookie) { }

	// RVA: 0x1F2F12C Offset: 0x1F2F12C VA: 0x1F2F12C
	public void Add(CookieCollection cookies) { }

	// RVA: 0x1F2F40C Offset: 0x1F2F40C VA: 0x1F2F40C
	public Cookie get_Item(int index) { }

	// RVA: 0x1F2F4F0 Offset: 0x1F2F4F0 VA: 0x1F2F4F0
	public Cookie get_Item(string name) { }
}

// Namespace: 
private sealed class CookieCollection.CookieCollectionComparer : IComparer<Cookie> // TypeDefIndex: 1518
{
	// Methods

	// RVA: 0x1F2EA8C Offset: 0x1F2EA8C VA: 0x1F2EA8C
	public void .ctor() { }

	// RVA: 0x1F2F710 Offset: 0x1F2F710 VA: 0x1F2F710 Slot: 4
	public int Compare(Cookie x, Cookie y) { }
}

// Namespace: System.Net
[Serializable]
public sealed class CookieContainer // TypeDefIndex: 1519
{
	// Fields
	public const int DefaultCookieLengthLimit = 4096;
	public const int DefaultCookieLimit = 300;
	public const int DefaultPerDomainCookieLimit = 20;
	private int capacity; // 0x10
	private int perDomainCapacity; // 0x14
	private int maxCookieSize; // 0x18
	private CookieCollection cookies; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBD0F4C Offset: 0xBD0F4C VA: 0xBD0F4C
	private static Dictionary<string, int> <>f__switch$map4; // 0x0

	// Properties
	public int Count { get; }
	public int Capacity { get; set; }
	public int MaxCookieSize { get; set; }
	public int PerDomainCapacity { get; set; }

	// Methods

	// RVA: 0x1F2F7CC Offset: 0x1F2F7CC VA: 0x1F2F7CC
	public void .ctor() { }

	// RVA: 0x1F2F7E8 Offset: 0x1F2F7E8 VA: 0x1F2F7E8
	public void .ctor(int capacity) { }

	// RVA: 0x1F2F8B0 Offset: 0x1F2F8B0 VA: 0x1F2F8B0
	public void .ctor(int capacity, int perDomainCapacity, int maxCookieSize) { }

	// RVA: 0x1F2FA44 Offset: 0x1F2FA44 VA: 0x1F2FA44
	public int get_Count() { }

	// RVA: 0x1F2FA54 Offset: 0x1F2FA54 VA: 0x1F2FA54
	public int get_Capacity() { }

	// RVA: 0x1F2FA5C Offset: 0x1F2FA5C VA: 0x1F2FA5C
	public void set_Capacity(int value) { }

	// RVA: 0x1F2FB8C Offset: 0x1F2FB8C VA: 0x1F2FB8C
	public int get_MaxCookieSize() { }

	// RVA: 0x1F2FB94 Offset: 0x1F2FB94 VA: 0x1F2FB94
	public void set_MaxCookieSize(int value) { }

	// RVA: 0x1F2FC30 Offset: 0x1F2FC30 VA: 0x1F2FC30
	public int get_PerDomainCapacity() { }

	// RVA: 0x1F2FC38 Offset: 0x1F2FC38 VA: 0x1F2FC38
	public void set_PerDomainCapacity(int value) { }

	// RVA: 0x1F2FCEC Offset: 0x1F2FCEC VA: 0x1F2FCEC
	public void Add(Cookie cookie) { }

	// RVA: 0x1F2FF24 Offset: 0x1F2FF24 VA: 0x1F2FF24
	private void AddCookie(Cookie cookie) { }

	// RVA: 0x1F30404 Offset: 0x1F30404 VA: 0x1F30404
	private int CountDomain(string domain) { }

	// RVA: 0x1F30220 Offset: 0x1F30220 VA: 0x1F30220
	private void RemoveOldest(string domain) { }

	// RVA: 0x1F306C8 Offset: 0x1F306C8 VA: 0x1F306C8
	private void CheckExpiration() { }

	// RVA: 0x1F309D0 Offset: 0x1F309D0 VA: 0x1F309D0
	public void Add(CookieCollection cookies) { }

	// RVA: 0x1F30CB0 Offset: 0x1F30CB0 VA: 0x1F30CB0
	private void Cook(Uri uri, Cookie cookie) { }

	// RVA: 0x1F30F94 Offset: 0x1F30F94 VA: 0x1F30F94
	public void Add(Uri uri, Cookie cookie) { }

	// RVA: 0x1F310AC Offset: 0x1F310AC VA: 0x1F310AC
	public void Add(Uri uri, CookieCollection cookies) { }

	// RVA: 0x1F31410 Offset: 0x1F31410 VA: 0x1F31410
	public string GetCookieHeader(Uri uri) { }

	// RVA: 0x1F307F0 Offset: 0x1F307F0 VA: 0x1F307F0
	private static bool CheckDomain(string domain, string host, bool exact) { }

	// RVA: 0x1F31870 Offset: 0x1F31870 VA: 0x1F31870
	public CookieCollection GetCookies(Uri uri) { }

	// RVA: 0x1F31F14 Offset: 0x1F31F14 VA: 0x1F31F14
	public void SetCookies(Uri uri, string cookieHeader) { }

	// RVA: 0x1F32518 Offset: 0x1F32518 VA: 0x1F32518
	private static Cookie Parse(string s) { }

	// RVA: 0x1F30F68 Offset: 0x1F30F68 VA: 0x1F30F68
	private static bool IsNullOrEmpty(string s) { }
}

// Namespace: System.Net
[Serializable]
public class CookieException : FormatException, ISerializable // TypeDefIndex: 1520
{
	// Methods

	// RVA: 0x1F32C08 Offset: 0x1F32C08 VA: 0x1F32C08
	public void .ctor() { }

	// RVA: 0x1F2D810 Offset: 0x1F2D810 VA: 0x1F2D810
	internal void .ctor(string msg) { }

	// RVA: 0x1F2DCB0 Offset: 0x1F2DCB0 VA: 0x1F2DCB0
	internal void .ctor(string msg, Exception e) { }

	// RVA: 0x1F32C10 Offset: 0x1F32C10 VA: 0x1F32C10
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1F32C18 Offset: 0x1F32C18 VA: 0x1F32C18 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1F32C20 Offset: 0x1F32C20 VA: 0x1F32C20 Slot: 10
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
public class CredentialCache : IEnumerable, ICredentials, ICredentialsByHost // TypeDefIndex: 1521
{
	// Fields
	private static NetworkCredential empty; // 0x0
	private Hashtable cache; // 0x10
	private Hashtable cacheForHost; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0xBD366C Offset: 0xBD366C VA: 0xBD366C
	public static ICredentials DefaultCredentials { get; }
	public static NetworkCredential DefaultNetworkCredentials { get; }

	// Methods

	// RVA: 0x1F33150 Offset: 0x1F33150 VA: 0x1F33150
	public void .ctor() { }

	// RVA: 0x1F331DC Offset: 0x1F331DC VA: 0x1F331DC
	private static void .cctor() { }

	// RVA: 0x1F33280 Offset: 0x1F33280 VA: 0x1F33280
	public static ICredentials get_DefaultCredentials() { }

	// RVA: 0x1F332E8 Offset: 0x1F332E8 VA: 0x1F332E8
	public static NetworkCredential get_DefaultNetworkCredentials() { }

	// RVA: 0x1F33350 Offset: 0x1F33350 VA: 0x1F33350 Slot: 5
	public NetworkCredential GetCredential(Uri uriPrefix, string authType) { }

	// RVA: 0x1F338C0 Offset: 0x1F338C0 VA: 0x1F338C0 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x1F33994 Offset: 0x1F33994 VA: 0x1F33994
	public void Add(Uri uriPrefix, string authType, NetworkCredential cred) { }

	// RVA: 0x1F33BF8 Offset: 0x1F33BF8 VA: 0x1F33BF8
	public void Remove(Uri uriPrefix, string authType) { }

	// RVA: 0x1F33D24 Offset: 0x1F33D24 VA: 0x1F33D24 Slot: 6
	public NetworkCredential GetCredential(string host, int port, string authenticationType) { }

	// RVA: 0x1F3409C Offset: 0x1F3409C VA: 0x1F3409C
	public void Add(string host, int port, string authenticationType, NetworkCredential credential) { }

	// RVA: 0x1F34280 Offset: 0x1F34280 VA: 0x1F34280
	public void Remove(string host, int port, string authenticationType) { }
}

// Namespace: 
private class CredentialCache.CredentialCacheKey // TypeDefIndex: 1522
{
	// Fields
	private Uri uriPrefix; // 0x10
	private string authType; // 0x18
	private string absPath; // 0x20
	private int len; // 0x28
	private int hash; // 0x2C

	// Properties
	public int Length { get; }
	public string AbsPath { get; }
	public Uri UriPrefix { get; }
	public string AuthType { get; }

	// Methods

	// RVA: 0x1F33AD0 Offset: 0x1F33AD0 VA: 0x1F33AD0
	internal void .ctor(Uri uriPrefix, string authType) { }

	// RVA: 0x1F338A0 Offset: 0x1F338A0 VA: 0x1F338A0
	public int get_Length() { }

	// RVA: 0x1F338B8 Offset: 0x1F338B8 VA: 0x1F338B8
	public string get_AbsPath() { }

	// RVA: 0x1F338B0 Offset: 0x1F338B0 VA: 0x1F338B0
	public Uri get_UriPrefix() { }

	// RVA: 0x1F338A8 Offset: 0x1F338A8 VA: 0x1F338A8
	public string get_AuthType() { }

	// RVA: 0x1F34464 Offset: 0x1F34464 VA: 0x1F34464 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F3446C Offset: 0x1F3446C VA: 0x1F3446C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F34508 Offset: 0x1F34508 VA: 0x1F34508 Slot: 3
	public override string ToString() { }
}

// Namespace: 
private class CredentialCache.CredentialCacheForHostKey // TypeDefIndex: 1523
{
	// Fields
	private string host; // 0x10
	private int port; // 0x18
	private string authType; // 0x20
	private int hash; // 0x28

	// Properties
	public string Host { get; }
	public int Port { get; }
	public string AuthType { get; }

	// Methods

	// RVA: 0x1F341E0 Offset: 0x1F341E0 VA: 0x1F341E0
	internal void .ctor(string host, int port, string authType) { }

	// RVA: 0x1F3408C Offset: 0x1F3408C VA: 0x1F3408C
	public string get_Host() { }

	// RVA: 0x1F34094 Offset: 0x1F34094 VA: 0x1F34094
	public int get_Port() { }

	// RVA: 0x1F34084 Offset: 0x1F34084 VA: 0x1F34084
	public string get_AuthType() { }

	// RVA: 0x1F34340 Offset: 0x1F34340 VA: 0x1F34340 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F34348 Offset: 0x1F34348 VA: 0x1F34348 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F343E4 Offset: 0x1F343E4 VA: 0x1F343E4 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0xBD0824 Offset: 0xBD0824 VA: 0xBD0824
public enum DecompressionMethods // TypeDefIndex: 1524
{
	// Fields
	public int value__; // 0x0
	public const DecompressionMethods None = 0;
	public const DecompressionMethods GZip = 1;
	public const DecompressionMethods Deflate = 2;
}

// Namespace: System.Net
internal class DefaultCertificatePolicy : ICertificatePolicy // TypeDefIndex: 1525
{
	// Methods

	// RVA: 0x1F34748 Offset: 0x1F34748 VA: 0x1F34748
	public void .ctor() { }

	// RVA: 0x1F34750 Offset: 0x1F34750 VA: 0x1F34750 Slot: 4
	public bool CheckValidationResult(ServicePoint point, X509Certificate certificate, WebRequest request, int certificateProblem) { }
}

// Namespace: System.Net
internal class DigestHeaderParser // TypeDefIndex: 1526
{
	// Fields
	private string header; // 0x10
	private int length; // 0x18
	private int pos; // 0x1C
	private static string[] keywords; // 0x0
	private string[] values; // 0x20

	// Properties
	public string Realm { get; }
	public string Opaque { get; }
	public string Nonce { get; }
	public string Algorithm { get; }
	public string QOP { get; }

	// Methods

	// RVA: 0x1F35EC0 Offset: 0x1F35EC0 VA: 0x1F35EC0
	public void .ctor(string header) { }

	// RVA: 0x1F35F84 Offset: 0x1F35F84 VA: 0x1F35F84
	private static void .cctor() { }

	// RVA: 0x1F36194 Offset: 0x1F36194 VA: 0x1F36194
	public string get_Realm() { }

	// RVA: 0x1F361D8 Offset: 0x1F361D8 VA: 0x1F361D8
	public string get_Opaque() { }

	// RVA: 0x1F36220 Offset: 0x1F36220 VA: 0x1F36220
	public string get_Nonce() { }

	// RVA: 0x1F36268 Offset: 0x1F36268 VA: 0x1F36268
	public string get_Algorithm() { }

	// RVA: 0x1F362B0 Offset: 0x1F362B0 VA: 0x1F362B0
	public string get_QOP() { }

	// RVA: 0x1F362F8 Offset: 0x1F362F8 VA: 0x1F362F8
	public bool Parse() { }

	// RVA: 0x1F36734 Offset: 0x1F36734 VA: 0x1F36734
	private void SkipWhitespace() { }

	// RVA: 0x1F367D0 Offset: 0x1F367D0 VA: 0x1F367D0
	private string GetKey() { }

	// RVA: 0x1F36558 Offset: 0x1F36558 VA: 0x1F36558
	private bool GetKeywordAndValue(out string key, out string value) { }
}

// Namespace: System.Net
internal class DigestSession // TypeDefIndex: 1527
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0
	private DateTime lastUse; // 0x10
	private int _nc; // 0x20
	private HashAlgorithm hash; // 0x28
	private DigestHeaderParser parser; // 0x30
	private string _cnonce; // 0x38

	// Properties
	public string Algorithm { get; }
	public string Realm { get; }
	public string Nonce { get; }
	public string Opaque { get; }
	public string QOP { get; }
	public string CNonce { get; }
	public DateTime LastUse { get; }

	// Methods

	// RVA: 0x1F35518 Offset: 0x1F35518 VA: 0x1F35518
	public void .ctor() { }

	// RVA: 0x1F368A0 Offset: 0x1F368A0 VA: 0x1F368A0
	private static void .cctor() { }

	// RVA: 0x1F368F8 Offset: 0x1F368F8 VA: 0x1F368F8
	public string get_Algorithm() { }

	// RVA: 0x1F36924 Offset: 0x1F36924 VA: 0x1F36924
	public string get_Realm() { }

	// RVA: 0x1F36950 Offset: 0x1F36950 VA: 0x1F36950
	public string get_Nonce() { }

	// RVA: 0x1F3697C Offset: 0x1F3697C VA: 0x1F3697C
	public string get_Opaque() { }

	// RVA: 0x1F369A8 Offset: 0x1F369A8 VA: 0x1F369A8
	public string get_QOP() { }

	// RVA: 0x1F369D4 Offset: 0x1F369D4 VA: 0x1F369D4
	public string get_CNonce() { }

	// RVA: 0x1F35598 Offset: 0x1F35598 VA: 0x1F35598
	public bool Parse(string challenge) { }

	// RVA: 0x1F36AE0 Offset: 0x1F36AE0 VA: 0x1F36AE0
	private string HashToHexString(string toBeHashed) { }

	// RVA: 0x1F36C7C Offset: 0x1F36C7C VA: 0x1F36C7C
	private string HA1(string username, string password) { }

	// RVA: 0x1F36DF8 Offset: 0x1F36DF8 VA: 0x1F36DF8
	private string HA2(HttpWebRequest webRequest) { }

	// RVA: 0x1F36F0C Offset: 0x1F36F0C VA: 0x1F36F0C
	private string Response(string username, string password, HttpWebRequest webRequest) { }

	// RVA: 0x1F356B4 Offset: 0x1F356B4 VA: 0x1F356B4
	public Authorization Authenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F35208 Offset: 0x1F35208 VA: 0x1F35208
	public DateTime get_LastUse() { }
}

// Namespace: System.Net
internal class DigestClient : IAuthenticationModule // TypeDefIndex: 1528
{
	// Fields
	private static readonly Hashtable cache; // 0x0

	// Properties
	private static Hashtable Cache { get; }
	public string AuthenticationType { get; }
	public bool CanPreAuthenticate { get; }

	// Methods

	// RVA: 0x1F28A3C Offset: 0x1F28A3C VA: 0x1F28A3C
	public void .ctor() { }

	// RVA: 0x1F347DC Offset: 0x1F347DC VA: 0x1F347DC
	private static void .cctor() { }

	// RVA: 0x1F3486C Offset: 0x1F3486C VA: 0x1F3486C
	private static Hashtable get_Cache() { }

	// RVA: 0x1F349C4 Offset: 0x1F349C4 VA: 0x1F349C4
	private static void CheckExpired(int count) { }

	// RVA: 0x1F35214 Offset: 0x1F35214 VA: 0x1F35214 Slot: 4
	public Authorization Authenticate(string challenge, WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F35C8C Offset: 0x1F35C8C VA: 0x1F35C8C Slot: 5
	public Authorization PreAuthenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F35E70 Offset: 0x1F35E70 VA: 0x1F35E70 Slot: 6
	public string get_AuthenticationType() { }

	// RVA: 0x1F35EB8 Offset: 0x1F35EB8 VA: 0x1F35EB8 Slot: 7
	public bool get_CanPreAuthenticate() { }
}

// Namespace: System.Net
public static class Dns // TypeDefIndex: 1529
{
	// Methods

	// RVA: 0x1F370A8 Offset: 0x1F370A8 VA: 0x1F370A8
	private static void .cctor() { }

	[ObsoleteAttribute] // RVA: 0xBD1D08 Offset: 0xBD1D08 VA: 0xBD1D08
	// RVA: 0x1F37108 Offset: 0x1F37108 VA: 0x1F37108
	public static IAsyncResult BeginGetHostByName(string hostName, AsyncCallback requestCallback, object stateObject) { }

	[ObsoleteAttribute] // RVA: 0xBD1D40 Offset: 0xBD1D40 VA: 0xBD1D40
	// RVA: 0x1F37228 Offset: 0x1F37228 VA: 0x1F37228
	public static IAsyncResult BeginResolve(string hostName, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0x1F37348 Offset: 0x1F37348 VA: 0x1F37348
	public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0x1F37510 Offset: 0x1F37510 VA: 0x1F37510
	public static IAsyncResult BeginGetHostEntry(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0x1F376D8 Offset: 0x1F376D8 VA: 0x1F376D8
	public static IAsyncResult BeginGetHostEntry(IPAddress address, AsyncCallback requestCallback, object stateObject) { }

	[ObsoleteAttribute] // RVA: 0xBD1D78 Offset: 0xBD1D78 VA: 0xBD1D78
	// RVA: 0x1F377F8 Offset: 0x1F377F8 VA: 0x1F377F8
	public static IPHostEntry EndGetHostByName(IAsyncResult asyncResult) { }

	[ObsoleteAttribute] // RVA: 0xBD1DB0 Offset: 0xBD1DB0 VA: 0xBD1DB0
	// RVA: 0x1F37998 Offset: 0x1F37998 VA: 0x1F37998
	public static IPHostEntry EndResolve(IAsyncResult asyncResult) { }

	// RVA: 0x1F37B38 Offset: 0x1F37B38 VA: 0x1F37B38
	public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult) { }

	// RVA: 0x1F37CD8 Offset: 0x1F37CD8 VA: 0x1F37CD8
	public static IPHostEntry EndGetHostEntry(IAsyncResult asyncResult) { }

	// RVA: 0x1F37F98 Offset: 0x1F37F98 VA: 0x1F37F98
	private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list) { }

	// RVA: 0x1F37F9C Offset: 0x1F37F9C VA: 0x1F37F9C
	private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list) { }

	// RVA: 0x1F37FA0 Offset: 0x1F37FA0 VA: 0x1F37FA0
	private static bool GetHostName_internal(out string h_name) { }

	// RVA: 0x1F37FA4 Offset: 0x1F37FA4 VA: 0x1F37FA4
	private static IPHostEntry hostent_to_IPHostEntry(string h_name, string[] h_aliases, string[] h_addrlist) { }

	[ObsoleteAttribute] // RVA: 0xBD1DE8 Offset: 0xBD1DE8 VA: 0xBD1DE8
	// RVA: 0x1F38328 Offset: 0x1F38328 VA: 0x1F38328
	public static IPHostEntry GetHostByAddress(IPAddress address) { }

	[ObsoleteAttribute] // RVA: 0xBD1E20 Offset: 0xBD1E20 VA: 0xBD1E20
	// RVA: 0x1F3855C Offset: 0x1F3855C VA: 0x1F3855C
	public static IPHostEntry GetHostByAddress(string address) { }

	// RVA: 0x1F383F0 Offset: 0x1F383F0 VA: 0x1F383F0
	private static IPHostEntry GetHostByAddressFromString(string address, bool parse) { }

	// RVA: 0x1F3860C Offset: 0x1F3860C VA: 0x1F3860C
	public static IPHostEntry GetHostEntry(string hostNameOrAddress) { }

	// RVA: 0x1F387E8 Offset: 0x1F387E8 VA: 0x1F387E8
	public static IPHostEntry GetHostEntry(IPAddress address) { }

	// RVA: 0x1F389DC Offset: 0x1F389DC VA: 0x1F389DC
	public static IPAddress[] GetHostAddresses(string hostNameOrAddress) { }

	[ObsoleteAttribute] // RVA: 0xBD1E58 Offset: 0xBD1E58 VA: 0xBD1E58
	// RVA: 0x1F388B0 Offset: 0x1F388B0 VA: 0x1F388B0
	public static IPHostEntry GetHostByName(string hostName) { }

	// RVA: 0x1F38C14 Offset: 0x1F38C14 VA: 0x1F38C14
	public static string GetHostName() { }

	[ObsoleteAttribute] // RVA: 0xBD1E90 Offset: 0xBD1E90 VA: 0xBD1E90
	// RVA: 0x1F38CC0 Offset: 0x1F38CC0 VA: 0x1F38CC0
	public static IPHostEntry Resolve(string hostName) { }
}

// Namespace: 
private sealed class Dns.GetHostByNameCallback : MulticastDelegate // TypeDefIndex: 1530
{
	// Methods

	// RVA: 0x1F371F4 Offset: 0x1F371F4 VA: 0x1F371F4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F391B4 Offset: 0x1F391B4 VA: 0x1F391B4 Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0x1F37204 Offset: 0x1F37204 VA: 0x1F37204 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0x1F3798C Offset: 0x1F3798C VA: 0x1F3798C Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.ResolveCallback : MulticastDelegate // TypeDefIndex: 1531
{
	// Methods

	// RVA: 0x1F37314 Offset: 0x1F37314 VA: 0x1F37314
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F39CA0 Offset: 0x1F39CA0 VA: 0x1F39CA0 Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0x1F37324 Offset: 0x1F37324 VA: 0x1F37324 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0x1F37B2C Offset: 0x1F37B2C VA: 0x1F37B2C Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostEntryNameCallback : MulticastDelegate // TypeDefIndex: 1532
{
	// Methods

	// RVA: 0x1F376A4 Offset: 0x1F376A4 VA: 0x1F376A4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F398FC Offset: 0x1F398FC VA: 0x1F398FC Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0x1F376B4 Offset: 0x1F376B4 VA: 0x1F376B4 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0x1F37F8C Offset: 0x1F37F8C VA: 0x1F37F8C Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostEntryIPCallback : MulticastDelegate // TypeDefIndex: 1533
{
	// Methods

	// RVA: 0x1F377C4 Offset: 0x1F377C4 VA: 0x1F377C4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F39558 Offset: 0x1F39558 VA: 0x1F39558 Slot: 11
	public virtual IPHostEntry Invoke(IPAddress hostAddress) { }

	// RVA: 0x1F377D4 Offset: 0x1F377D4 VA: 0x1F377D4 Slot: 12
	public virtual IAsyncResult BeginInvoke(IPAddress hostAddress, AsyncCallback callback, object object) { }

	// RVA: 0x1F37F80 Offset: 0x1F37F80 VA: 0x1F37F80 Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostAddressesCallback : MulticastDelegate // TypeDefIndex: 1534
{
	// Methods

	// RVA: 0x1F374DC Offset: 0x1F374DC VA: 0x1F374DC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F38E10 Offset: 0x1F38E10 VA: 0x1F38E10 Slot: 11
	public virtual IPAddress[] Invoke(string hostName) { }

	// RVA: 0x1F374EC Offset: 0x1F374EC VA: 0x1F374EC Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0x1F37CCC Offset: 0x1F37CCC VA: 0x1F37CCC Slot: 13
	public virtual IPAddress[] EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
public class DownloadDataCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1535
{
	// Fields
	private byte[] result; // 0x28

	// Properties
	public byte[] Result { get; }

	// Methods

	// RVA: 0x1F3A044 Offset: 0x1F3A044 VA: 0x1F3A044
	internal void .ctor(byte[] result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x1F3A080 Offset: 0x1F3A080 VA: 0x1F3A080
	public byte[] get_Result() { }
}

// Namespace: System.Net
public class DownloadProgressChangedEventArgs : ProgressChangedEventArgs // TypeDefIndex: 1536
{
	// Fields
	private long received; // 0x20
	private long total; // 0x28

	// Properties
	public long BytesReceived { get; }
	public long TotalBytesToReceive { get; }

	// Methods

	// RVA: 0x1F3A494 Offset: 0x1F3A494 VA: 0x1F3A494
	internal void .ctor(long bytesReceived, long totalBytesToReceive, object userState) { }

	// RVA: 0x1F3A510 Offset: 0x1F3A510 VA: 0x1F3A510
	public long get_BytesReceived() { }

	// RVA: 0x1F3A518 Offset: 0x1F3A518 VA: 0x1F3A518
	public long get_TotalBytesToReceive() { }
}

// Namespace: System.Net
public class DownloadStringCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1537
{
	// Fields
	private string result; // 0x28

	// Properties
	public string Result { get; }

	// Methods

	// RVA: 0x1F3A92C Offset: 0x1F3A92C VA: 0x1F3A92C
	internal void .ctor(string result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x1F3A968 Offset: 0x1F3A968 VA: 0x1F3A968
	public string get_Result() { }
}

// Namespace: System.Net
[Serializable]
public abstract class EndPoint // TypeDefIndex: 1538
{
	// Properties
	public virtual AddressFamily AddressFamily { get; }

	// Methods

	// RVA: 0x1F3AD9C Offset: 0x1F3AD9C VA: 0x1F3AD9C
	protected void .ctor() { }

	// RVA: 0x1F3ADA4 Offset: 0x1F3ADA4 VA: 0x1F3ADA4 Slot: 4
	public virtual AddressFamily get_AddressFamily() { }

	// RVA: 0x1F3AE4C Offset: 0x1F3AE4C VA: 0x1F3AE4C Slot: 5
	public virtual EndPoint Create(SocketAddress address) { }

	// RVA: 0x1F3AE98 Offset: 0x1F3AE98 VA: 0x1F3AE98 Slot: 6
	public virtual SocketAddress Serialize() { }

	// RVA: 0x1F3ADF0 Offset: 0x1F3ADF0 VA: 0x1F3ADF0
	private static Exception NotImplemented() { }
}

// Namespace: System.Net
internal sealed class EndPointListener // TypeDefIndex: 1539
{
	// Fields
	private IPEndPoint endpoint; // 0x10
	private Socket sock; // 0x18
	private Hashtable prefixes; // 0x20
	private ArrayList unhandled; // 0x28
	private ArrayList all; // 0x30
	private X509Certificate2 cert; // 0x38
	private AsymmetricAlgorithm key; // 0x40
	private bool secure; // 0x48

	// Methods

	// RVA: 0x1F3AEE4 Offset: 0x1F3AEE4 VA: 0x1F3AEE4
	public void .ctor(IPAddress addr, int port, bool secure) { }

	// RVA: 0x1F3B088 Offset: 0x1F3B088 VA: 0x1F3B088
	private void LoadCertificateAndKey(IPAddress addr, int port) { }

	// RVA: 0x1F3B2D4 Offset: 0x1F3B2D4 VA: 0x1F3B2D4
	private static void OnAccept(IAsyncResult ares) { }

	// RVA: 0x1F3B754 Offset: 0x1F3B754 VA: 0x1F3B754
	public bool BindContext(HttpListenerContext context) { }

	// RVA: 0x1F3C068 Offset: 0x1F3C068 VA: 0x1F3C068
	public void UnbindContext(HttpListenerContext context) { }

	// RVA: 0x1F3B864 Offset: 0x1F3B864 VA: 0x1F3B864
	private HttpListener SearchListener(string host, Uri uri, out ListenerPrefix prefix) { }

	// RVA: 0x1F3C124 Offset: 0x1F3C124 VA: 0x1F3C124
	private HttpListener MatchFromList(string host, string path, ArrayList list, out ListenerPrefix prefix) { }

	// RVA: 0x1F3C494 Offset: 0x1F3C494 VA: 0x1F3C494
	private void AddSpecial(ArrayList coll, ListenerPrefix prefix) { }

	// RVA: 0x1F3C810 Offset: 0x1F3C810 VA: 0x1F3C810
	private void RemoveSpecial(ArrayList coll, ListenerPrefix prefix) { }

	// RVA: 0x1F3C9B4 Offset: 0x1F3C9B4 VA: 0x1F3C9B4
	private void CheckIfRemove() { }

	// RVA: 0x1F3CD7C Offset: 0x1F3CD7C VA: 0x1F3CD7C
	public void Close() { }

	// RVA: 0x1F3CDAC Offset: 0x1F3CDAC VA: 0x1F3CDAC
	public void AddPrefix(ListenerPrefix prefix, HttpListener listener) { }

	// RVA: 0x1F3D164 Offset: 0x1F3D164 VA: 0x1F3D164
	public void RemovePrefix(ListenerPrefix prefix, HttpListener listener) { }
}

// Namespace: System.Net
internal sealed class EndPointManager // TypeDefIndex: 1540
{
	// Fields
	private static Hashtable ip_to_endpoints; // 0x0

	// Methods

	// RVA: 0x1F3D374 Offset: 0x1F3D374 VA: 0x1F3D374
	private void .ctor() { }

	// RVA: 0x1F3D37C Offset: 0x1F3D37C VA: 0x1F3D37C
	private static void .cctor() { }

	// RVA: 0x1F3D3E8 Offset: 0x1F3D3E8 VA: 0x1F3D3E8
	public static void AddListener(HttpListener listener) { }

	// RVA: 0x1F3DDD4 Offset: 0x1F3DDD4 VA: 0x1F3DDD4
	public static void AddPrefix(string prefix, HttpListener listener) { }

	// RVA: 0x1F3DADC Offset: 0x1F3DADC VA: 0x1F3DADC
	private static void AddPrefixInternal(string p, HttpListener listener) { }

	// RVA: 0x1F3DED8 Offset: 0x1F3DED8 VA: 0x1F3DED8
	private static EndPointListener GetEPListener(IPAddress addr, int port, HttpListener listener, bool secure) { }

	// RVA: 0x1F3CA98 Offset: 0x1F3CA98 VA: 0x1F3CA98
	public static void RemoveEndPoint(EndPointListener epl, IPEndPoint ep) { }

	// RVA: 0x1F3E1EC Offset: 0x1F3E1EC VA: 0x1F3E1EC
	public static void RemoveListener(HttpListener listener) { }

	// RVA: 0x1F3DCD8 Offset: 0x1F3DCD8 VA: 0x1F3DCD8
	public static void RemovePrefix(string prefix, HttpListener listener) { }

	// RVA: 0x1F3E540 Offset: 0x1F3E540 VA: 0x1F3E540
	private static void RemovePrefixInternal(string prefix, HttpListener listener) { }
}

// Namespace: System.Net
[Serializable]
public class FileWebRequest : WebRequest, ISerializable // TypeDefIndex: 1541
{
	// Fields
	private Uri uri; // 0x20
	private WebHeaderCollection webHeaders; // 0x28
	private ICredentials credentials; // 0x30
	private string connectionGroup; // 0x38
	private long contentLength; // 0x40
	private FileAccess fileAccess; // 0x48
	private string method; // 0x50
	private IWebProxy proxy; // 0x58
	private bool preAuthenticate; // 0x60
	private int timeout; // 0x64
	private Stream requestStream; // 0x68
	private FileWebResponse webResponse; // 0x70
	private AutoResetEvent requestEndEvent; // 0x78
	private bool requesting; // 0x80
	private bool asyncResponding; // 0x81

	// Properties
	public override string ConnectionGroupName { get; set; }
