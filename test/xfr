	// RVA: 0xEC9168 Offset: 0xEC9168 VA: 0xEC9168
	public bool get_HttpOnly() { }

	// RVA: 0xEC9170 Offset: 0xEC9170 VA: 0xEC9170
	public void set_HttpOnly(bool value) { }

	// RVA: 0xEC917C Offset: 0xEC917C VA: 0xEC917C
	public string get_Name() { }

	// RVA: 0xEC8A24 Offset: 0xEC8A24 VA: 0xEC8A24
	public void set_Name(string value) { }

	// RVA: 0xEC918C Offset: 0xEC918C VA: 0xEC918C
	public string get_Path() { }

	// RVA: 0xEC8C38 Offset: 0xEC8C38 VA: 0xEC8C38
	public void set_Path(string value) { }

	// RVA: 0xEC9200 Offset: 0xEC9200 VA: 0xEC9200
	public string get_Port() { }

	// RVA: 0xEC9208 Offset: 0xEC9208 VA: 0xEC9208
	public void set_Port(string value) { }

	// RVA: 0xEC963C Offset: 0xEC963C VA: 0xEC963C
	internal int[] get_Ports() { }

	// RVA: 0xEC9644 Offset: 0xEC9644 VA: 0xEC9644
	public bool get_Secure() { }

	// RVA: 0xEC964C Offset: 0xEC964C VA: 0xEC964C
	public void set_Secure(bool value) { }

	// RVA: 0xEC9658 Offset: 0xEC9658 VA: 0xEC9658
	public DateTime get_TimeStamp() { }

	// RVA: 0xEC9664 Offset: 0xEC9664 VA: 0xEC9664
	public string get_Value() { }

	// RVA: 0xEC8B8C Offset: 0xEC8B8C VA: 0xEC8B8C
	public void set_Value(string value) { }

	// RVA: 0xEC966C Offset: 0xEC966C VA: 0xEC966C
	public int get_Version() { }

	// RVA: 0xEC962C Offset: 0xEC962C VA: 0xEC962C
	public void set_Version(int value) { }

	// RVA: 0xEC9674 Offset: 0xEC9674 VA: 0xEC9674 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEC98C8 Offset: 0xEC98C8 VA: 0xEC98C8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEC9A2C Offset: 0xEC9A2C VA: 0xEC9A2C
	private static int hash(int i, int j, int k, int l, int m) { }

	// RVA: 0xEC9A60 Offset: 0xEC9A60 VA: 0xEC9A60 Slot: 3
	public override string ToString() { }

	// RVA: 0xEC9A68 Offset: 0xEC9A68 VA: 0xEC9A68
	internal string ToString(Uri uri) { }

	// RVA: 0xEC9E60 Offset: 0xEC9E60 VA: 0xEC9E60
	internal string ToClientString() { }

	// RVA: 0xECA138 Offset: 0xECA138 VA: 0xECA138
	private string QuotedString(string value) { }

	// RVA: 0xECA214 Offset: 0xECA214 VA: 0xECA214
	private bool IsToken(string value) { }

	// RVA: 0xEC8FC0 Offset: 0xEC8FC0 VA: 0xEC8FC0
	private static bool IsNullOrEmpty(string s) { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xC3C914 Offset: 0xC3C914 VA: 0xC3C914
[Serializable]
public sealed class CookieCollection : ICollection, IEnumerable // TypeDefIndex: 1517
{
	// Fields
	private List<Cookie> list; // 0x10
	private static CookieCollection.CookieCollectionComparer Comparer; // 0x0

	// Properties
	internal IList<Cookie> List { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public bool IsReadOnly { get; }
	public Cookie Item { get; }
	public Cookie Item { get; }

	// Methods

	// RVA: 0xECA324 Offset: 0xECA324 VA: 0xECA324
	public void .ctor() { }

	// RVA: 0xECA394 Offset: 0xECA394 VA: 0xECA394
	private static void .cctor() { }

	// RVA: 0xECA408 Offset: 0xECA408 VA: 0xECA408
	internal IList<Cookie> get_List() { }

	// RVA: 0xECA410 Offset: 0xECA410 VA: 0xECA410 Slot: 4
	public int get_Count() { }

	// RVA: 0xECA470 Offset: 0xECA470 VA: 0xECA470 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0xECA478 Offset: 0xECA478 VA: 0xECA478 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0xECA47C Offset: 0xECA47C VA: 0xECA47C Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0xECA54C Offset: 0xECA54C VA: 0xECA54C
	public void CopyTo(Cookie[] array, int index) { }

	// RVA: 0xECA5C4 Offset: 0xECA5C4 VA: 0xECA5C4 Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0xECA658 Offset: 0xECA658 VA: 0xECA658
	public bool get_IsReadOnly() { }

	// RVA: 0xECA660 Offset: 0xECA660 VA: 0xECA660
	public void Add(Cookie cookie) { }

	// RVA: 0xECA9D8 Offset: 0xECA9D8 VA: 0xECA9D8
	internal void Sort() { }

	// RVA: 0xECA758 Offset: 0xECA758 VA: 0xECA758
	private int SearchCookie(Cookie cookie) { }

	// RVA: 0xECAAA0 Offset: 0xECAAA0 VA: 0xECAAA0
	public void Add(CookieCollection cookies) { }

	// RVA: 0xECAD80 Offset: 0xECAD80 VA: 0xECAD80
	public Cookie get_Item(int index) { }

	// RVA: 0xECAE64 Offset: 0xECAE64 VA: 0xECAE64
	public Cookie get_Item(string name) { }
}

// Namespace: 
private sealed class CookieCollection.CookieCollectionComparer : IComparer<Cookie> // TypeDefIndex: 1518
{
	// Methods

	// RVA: 0xECA400 Offset: 0xECA400 VA: 0xECA400
	public void .ctor() { }

	// RVA: 0xECB084 Offset: 0xECB084 VA: 0xECB084 Slot: 4
	public int Compare(Cookie x, Cookie y) { }
}

// Namespace: System.Net
[Serializable]
public sealed class CookieContainer // TypeDefIndex: 1519
{
	// Fields
	public const int DefaultCookieLengthLimit = 4096;
	public const int DefaultCookieLimit = 300;
	public const int DefaultPerDomainCookieLimit = 20;
	private int capacity; // 0x10
	private int perDomainCapacity; // 0x14
	private int maxCookieSize; // 0x18
	private CookieCollection cookies; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC3D074 Offset: 0xC3D074 VA: 0xC3D074
	private static Dictionary<string, int> <>f__switch$map4; // 0x0

	// Properties
	public int Count { get; }
	public int Capacity { get; set; }
	public int MaxCookieSize { get; set; }
	public int PerDomainCapacity { get; set; }

	// Methods

	// RVA: 0xECB140 Offset: 0xECB140 VA: 0xECB140
	public void .ctor() { }

	// RVA: 0xECB15C Offset: 0xECB15C VA: 0xECB15C
	public void .ctor(int capacity) { }

	// RVA: 0xECB224 Offset: 0xECB224 VA: 0xECB224
	public void .ctor(int capacity, int perDomainCapacity, int maxCookieSize) { }

	// RVA: 0xECB3B8 Offset: 0xECB3B8 VA: 0xECB3B8
	public int get_Count() { }

	// RVA: 0xECB3C8 Offset: 0xECB3C8 VA: 0xECB3C8
	public int get_Capacity() { }

	// RVA: 0xECB3D0 Offset: 0xECB3D0 VA: 0xECB3D0
	public void set_Capacity(int value) { }

	// RVA: 0xECB500 Offset: 0xECB500 VA: 0xECB500
	public int get_MaxCookieSize() { }

	// RVA: 0xECB508 Offset: 0xECB508 VA: 0xECB508
	public void set_MaxCookieSize(int value) { }

	// RVA: 0xECB5A4 Offset: 0xECB5A4 VA: 0xECB5A4
	public int get_PerDomainCapacity() { }

	// RVA: 0xECB5AC Offset: 0xECB5AC VA: 0xECB5AC
	public void set_PerDomainCapacity(int value) { }

	// RVA: 0xECB660 Offset: 0xECB660 VA: 0xECB660
	public void Add(Cookie cookie) { }

	// RVA: 0xECB898 Offset: 0xECB898 VA: 0xECB898
	private void AddCookie(Cookie cookie) { }

	// RVA: 0xECBD78 Offset: 0xECBD78 VA: 0xECBD78
	private int CountDomain(string domain) { }

	// RVA: 0xECBB94 Offset: 0xECBB94 VA: 0xECBB94
	private void RemoveOldest(string domain) { }

	// RVA: 0xECC03C Offset: 0xECC03C VA: 0xECC03C
	private void CheckExpiration() { }

	// RVA: 0xECC344 Offset: 0xECC344 VA: 0xECC344
	public void Add(CookieCollection cookies) { }

	// RVA: 0xECC624 Offset: 0xECC624 VA: 0xECC624
	private void Cook(Uri uri, Cookie cookie) { }

	// RVA: 0xECC908 Offset: 0xECC908 VA: 0xECC908
	public void Add(Uri uri, Cookie cookie) { }

	// RVA: 0xECCA20 Offset: 0xECCA20 VA: 0xECCA20
	public void Add(Uri uri, CookieCollection cookies) { }

	// RVA: 0xECCD84 Offset: 0xECCD84 VA: 0xECCD84
	public string GetCookieHeader(Uri uri) { }

	// RVA: 0xECC164 Offset: 0xECC164 VA: 0xECC164
	private static bool CheckDomain(string domain, string host, bool exact) { }

	// RVA: 0xECD1E4 Offset: 0xECD1E4 VA: 0xECD1E4
	public CookieCollection GetCookies(Uri uri) { }

	// RVA: 0xECD888 Offset: 0xECD888 VA: 0xECD888
	public void SetCookies(Uri uri, string cookieHeader) { }

	// RVA: 0xECDE8C Offset: 0xECDE8C VA: 0xECDE8C
	private static Cookie Parse(string s) { }

	// RVA: 0xECC8DC Offset: 0xECC8DC VA: 0xECC8DC
	private static bool IsNullOrEmpty(string s) { }
}

// Namespace: System.Net
[Serializable]
public class CookieException : FormatException, ISerializable // TypeDefIndex: 1520
{
	// Methods

	// RVA: 0xECE57C Offset: 0xECE57C VA: 0xECE57C
	public void .ctor() { }

	// RVA: 0xEC9184 Offset: 0xEC9184 VA: 0xEC9184
	internal void .ctor(string msg) { }

	// RVA: 0xEC9624 Offset: 0xEC9624 VA: 0xEC9624
	internal void .ctor(string msg, Exception e) { }

	// RVA: 0xECE584 Offset: 0xECE584 VA: 0xECE584
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xECE58C Offset: 0xECE58C VA: 0xECE58C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xECE594 Offset: 0xECE594 VA: 0xECE594 Slot: 10
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
public class CredentialCache : IEnumerable, ICredentials, ICredentialsByHost // TypeDefIndex: 1521
{
	// Fields
	private static NetworkCredential empty; // 0x0
	private Hashtable cache; // 0x10
	private Hashtable cacheForHost; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0xC3F794 Offset: 0xC3F794 VA: 0xC3F794
	public static ICredentials DefaultCredentials { get; }
	public static NetworkCredential DefaultNetworkCredentials { get; }

	// Methods

	// RVA: 0xECEAC4 Offset: 0xECEAC4 VA: 0xECEAC4
	public void .ctor() { }

	// RVA: 0xECEB50 Offset: 0xECEB50 VA: 0xECEB50
	private static void .cctor() { }

	// RVA: 0xECEBF4 Offset: 0xECEBF4 VA: 0xECEBF4
	public static ICredentials get_DefaultCredentials() { }

	// RVA: 0xECEC5C Offset: 0xECEC5C VA: 0xECEC5C
	public static NetworkCredential get_DefaultNetworkCredentials() { }

	// RVA: 0xECECC4 Offset: 0xECECC4 VA: 0xECECC4 Slot: 5
	public NetworkCredential GetCredential(Uri uriPrefix, string authType) { }

	// RVA: 0xECF234 Offset: 0xECF234 VA: 0xECF234 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0xECF308 Offset: 0xECF308 VA: 0xECF308
	public void Add(Uri uriPrefix, string authType, NetworkCredential cred) { }

	// RVA: 0xECF56C Offset: 0xECF56C VA: 0xECF56C
	public void Remove(Uri uriPrefix, string authType) { }

	// RVA: 0xECF698 Offset: 0xECF698 VA: 0xECF698 Slot: 6
	public NetworkCredential GetCredential(string host, int port, string authenticationType) { }

	// RVA: 0xECFA10 Offset: 0xECFA10 VA: 0xECFA10
	public void Add(string host, int port, string authenticationType, NetworkCredential credential) { }

	// RVA: 0xECFBF4 Offset: 0xECFBF4 VA: 0xECFBF4
	public void Remove(string host, int port, string authenticationType) { }
}

// Namespace: 
private class CredentialCache.CredentialCacheKey // TypeDefIndex: 1522
{
	// Fields
	private Uri uriPrefix; // 0x10
	private string authType; // 0x18
	private string absPath; // 0x20
	private int len; // 0x28
	private int hash; // 0x2C

	// Properties
	public int Length { get; }
	public string AbsPath { get; }
	public Uri UriPrefix { get; }
	public string AuthType { get; }

	// Methods

	// RVA: 0xECF444 Offset: 0xECF444 VA: 0xECF444
	internal void .ctor(Uri uriPrefix, string authType) { }

	// RVA: 0xECF214 Offset: 0xECF214 VA: 0xECF214
	public int get_Length() { }

	// RVA: 0xECF22C Offset: 0xECF22C VA: 0xECF22C
	public string get_AbsPath() { }

	// RVA: 0xECF224 Offset: 0xECF224 VA: 0xECF224
	public Uri get_UriPrefix() { }

	// RVA: 0xECF21C Offset: 0xECF21C VA: 0xECF21C
	public string get_AuthType() { }

	// RVA: 0xECFDD8 Offset: 0xECFDD8 VA: 0xECFDD8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xECFDE0 Offset: 0xECFDE0 VA: 0xECFDE0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xECFE7C Offset: 0xECFE7C VA: 0xECFE7C Slot: 3
	public override string ToString() { }
}

// Namespace: 
private class CredentialCache.CredentialCacheForHostKey // TypeDefIndex: 1523
{
	// Fields
	private string host; // 0x10
	private int port; // 0x18
	private string authType; // 0x20
	private int hash; // 0x28

	// Properties
	public string Host { get; }
	public int Port { get; }
	public string AuthType { get; }

	// Methods

	// RVA: 0xECFB54 Offset: 0xECFB54 VA: 0xECFB54
	internal void .ctor(string host, int port, string authType) { }

	// RVA: 0xECFA00 Offset: 0xECFA00 VA: 0xECFA00
	public string get_Host() { }

	// RVA: 0xECFA08 Offset: 0xECFA08 VA: 0xECFA08
	public int get_Port() { }

	// RVA: 0xECF9F8 Offset: 0xECF9F8 VA: 0xECF9F8
	public string get_AuthType() { }

	// RVA: 0xECFCB4 Offset: 0xECFCB4 VA: 0xECFCB4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xECFCBC Offset: 0xECFCBC VA: 0xECFCBC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xECFD58 Offset: 0xECFD58 VA: 0xECFD58 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0xC3C94C Offset: 0xC3C94C VA: 0xC3C94C
public enum DecompressionMethods // TypeDefIndex: 1524
{
	// Fields
	public int value__; // 0x0
	public const DecompressionMethods None = 0;
	public const DecompressionMethods GZip = 1;
	public const DecompressionMethods Deflate = 2;
}

// Namespace: System.Net
internal class DefaultCertificatePolicy : ICertificatePolicy // TypeDefIndex: 1525
{
	// Methods

	// RVA: 0xED00BC Offset: 0xED00BC VA: 0xED00BC
	public void .ctor() { }

	// RVA: 0xED00C4 Offset: 0xED00C4 VA: 0xED00C4 Slot: 4
	public bool CheckValidationResult(ServicePoint point, X509Certificate certificate, WebRequest request, int certificateProblem) { }
}

// Namespace: System.Net
internal class DigestHeaderParser // TypeDefIndex: 1526
{
	// Fields
	private string header; // 0x10
	private int length; // 0x18
	private int pos; // 0x1C
	private static string[] keywords; // 0x0
	private string[] values; // 0x20

	// Properties
	public string Realm { get; }
	public string Opaque { get; }
	public string Nonce { get; }
	public string Algorithm { get; }
	public string QOP { get; }

	// Methods

	// RVA: 0xED1834 Offset: 0xED1834 VA: 0xED1834
	public void .ctor(string header) { }

	// RVA: 0xED18F8 Offset: 0xED18F8 VA: 0xED18F8
	private static void .cctor() { }

	// RVA: 0xED1B08 Offset: 0xED1B08 VA: 0xED1B08
	public string get_Realm() { }

	// RVA: 0xED1B4C Offset: 0xED1B4C VA: 0xED1B4C
	public string get_Opaque() { }

	// RVA: 0xED1B94 Offset: 0xED1B94 VA: 0xED1B94
	public string get_Nonce() { }

	// RVA: 0xED1BDC Offset: 0xED1BDC VA: 0xED1BDC
	public string get_Algorithm() { }

	// RVA: 0xED1C24 Offset: 0xED1C24 VA: 0xED1C24
	public string get_QOP() { }

	// RVA: 0xED1C6C Offset: 0xED1C6C VA: 0xED1C6C
	public bool Parse() { }

	// RVA: 0xED20A8 Offset: 0xED20A8 VA: 0xED20A8
	private void SkipWhitespace() { }

	// RVA: 0xED2144 Offset: 0xED2144 VA: 0xED2144
	private string GetKey() { }

	// RVA: 0xED1ECC Offset: 0xED1ECC VA: 0xED1ECC
	private bool GetKeywordAndValue(out string key, out string value) { }
}

// Namespace: System.Net
internal class DigestSession // TypeDefIndex: 1527
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0
	private DateTime lastUse; // 0x10
	private int _nc; // 0x20
	private HashAlgorithm hash; // 0x28
	private DigestHeaderParser parser; // 0x30
	private string _cnonce; // 0x38

	// Properties
	public string Algorithm { get; }
	public string Realm { get; }
	public string Nonce { get; }
	public string Opaque { get; }
	public string QOP { get; }
	public string CNonce { get; }
	public DateTime LastUse { get; }

	// Methods

	// RVA: 0xED0E8C Offset: 0xED0E8C VA: 0xED0E8C
	public void .ctor() { }

	// RVA: 0xED2214 Offset: 0xED2214 VA: 0xED2214
	private static void .cctor() { }

	// RVA: 0xED226C Offset: 0xED226C VA: 0xED226C
	public string get_Algorithm() { }

	// RVA: 0xED2298 Offset: 0xED2298 VA: 0xED2298
	public string get_Realm() { }

	// RVA: 0xED22C4 Offset: 0xED22C4 VA: 0xED22C4
	public string get_Nonce() { }

	// RVA: 0xED22F0 Offset: 0xED22F0 VA: 0xED22F0
	public string get_Opaque() { }

	// RVA: 0xED231C Offset: 0xED231C VA: 0xED231C
	public string get_QOP() { }

	// RVA: 0xED2348 Offset: 0xED2348 VA: 0xED2348
	public string get_CNonce() { }

	// RVA: 0xED0F0C Offset: 0xED0F0C VA: 0xED0F0C
	public bool Parse(string challenge) { }

	// RVA: 0xED2454 Offset: 0xED2454 VA: 0xED2454
	private string HashToHexString(string toBeHashed) { }

	// RVA: 0xED25F0 Offset: 0xED25F0 VA: 0xED25F0
	private string HA1(string username, string password) { }

	// RVA: 0xED276C Offset: 0xED276C VA: 0xED276C
	private string HA2(HttpWebRequest webRequest) { }

	// RVA: 0xED2880 Offset: 0xED2880 VA: 0xED2880
	private string Response(string username, string password, HttpWebRequest webRequest) { }

	// RVA: 0xED1028 Offset: 0xED1028 VA: 0xED1028
	public Authorization Authenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0xED0B7C Offset: 0xED0B7C VA: 0xED0B7C
	public DateTime get_LastUse() { }
}

// Namespace: System.Net
internal class DigestClient : IAuthenticationModule // TypeDefIndex: 1528
{
	// Fields
	private static readonly Hashtable cache; // 0x0

	// Properties
	private static Hashtable Cache { get; }
	public string AuthenticationType { get; }
	public bool CanPreAuthenticate { get; }

	// Methods

	// RVA: 0xEC43B0 Offset: 0xEC43B0 VA: 0xEC43B0
	public void .ctor() { }

	// RVA: 0xED0150 Offset: 0xED0150 VA: 0xED0150
	private static void .cctor() { }

	// RVA: 0xED01E0 Offset: 0xED01E0 VA: 0xED01E0
	private static Hashtable get_Cache() { }

	// RVA: 0xED0338 Offset: 0xED0338 VA: 0xED0338
	private static void CheckExpired(int count) { }

	// RVA: 0xED0B88 Offset: 0xED0B88 VA: 0xED0B88 Slot: 4
	public Authorization Authenticate(string challenge, WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0xED1600 Offset: 0xED1600 VA: 0xED1600 Slot: 5
	public Authorization PreAuthenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0xED17E4 Offset: 0xED17E4 VA: 0xED17E4 Slot: 6
	public string get_AuthenticationType() { }

	// RVA: 0xED182C Offset: 0xED182C VA: 0xED182C Slot: 7
	public bool get_CanPreAuthenticate() { }
}

// Namespace: System.Net
public static class Dns // TypeDefIndex: 1529
{
	// Methods

	// RVA: 0xED2A1C Offset: 0xED2A1C VA: 0xED2A1C
	private static void .cctor() { }

	[ObsoleteAttribute] // RVA: 0xC3DE30 Offset: 0xC3DE30 VA: 0xC3DE30
	// RVA: 0xED2A7C Offset: 0xED2A7C VA: 0xED2A7C
	public static IAsyncResult BeginGetHostByName(string hostName, AsyncCallback requestCallback, object stateObject) { }

	[ObsoleteAttribute] // RVA: 0xC3DE68 Offset: 0xC3DE68 VA: 0xC3DE68
	// RVA: 0xED2B9C Offset: 0xED2B9C VA: 0xED2B9C
	public static IAsyncResult BeginResolve(string hostName, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0xED2CBC Offset: 0xED2CBC VA: 0xED2CBC
	public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0xED2E84 Offset: 0xED2E84 VA: 0xED2E84
	public static IAsyncResult BeginGetHostEntry(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject) { }

	// RVA: 0xED304C Offset: 0xED304C VA: 0xED304C
	public static IAsyncResult BeginGetHostEntry(IPAddress address, AsyncCallback requestCallback, object stateObject) { }

	[ObsoleteAttribute] // RVA: 0xC3DEA0 Offset: 0xC3DEA0 VA: 0xC3DEA0
	// RVA: 0xED316C Offset: 0xED316C VA: 0xED316C
	public static IPHostEntry EndGetHostByName(IAsyncResult asyncResult) { }

	[ObsoleteAttribute] // RVA: 0xC3DED8 Offset: 0xC3DED8 VA: 0xC3DED8
	// RVA: 0xED330C Offset: 0xED330C VA: 0xED330C
	public static IPHostEntry EndResolve(IAsyncResult asyncResult) { }

	// RVA: 0xED34AC Offset: 0xED34AC VA: 0xED34AC
	public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult) { }

	// RVA: 0xED364C Offset: 0xED364C VA: 0xED364C
	public static IPHostEntry EndGetHostEntry(IAsyncResult asyncResult) { }

	// RVA: 0xED390C Offset: 0xED390C VA: 0xED390C
	private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list) { }

	// RVA: 0xED3910 Offset: 0xED3910 VA: 0xED3910
	private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list) { }

	// RVA: 0xED3914 Offset: 0xED3914 VA: 0xED3914
	private static bool GetHostName_internal(out string h_name) { }

	// RVA: 0xED3918 Offset: 0xED3918 VA: 0xED3918
	private static IPHostEntry hostent_to_IPHostEntry(string h_name, string[] h_aliases, string[] h_addrlist) { }

	[ObsoleteAttribute] // RVA: 0xC3DF10 Offset: 0xC3DF10 VA: 0xC3DF10
	// RVA: 0xED3C9C Offset: 0xED3C9C VA: 0xED3C9C
	public static IPHostEntry GetHostByAddress(IPAddress address) { }

	[ObsoleteAttribute] // RVA: 0xC3DF48 Offset: 0xC3DF48 VA: 0xC3DF48
	// RVA: 0xED3ED0 Offset: 0xED3ED0 VA: 0xED3ED0
	public static IPHostEntry GetHostByAddress(string address) { }

	// RVA: 0xED3D64 Offset: 0xED3D64 VA: 0xED3D64
	private static IPHostEntry GetHostByAddressFromString(string address, bool parse) { }

	// RVA: 0xED3F80 Offset: 0xED3F80 VA: 0xED3F80
	public static IPHostEntry GetHostEntry(string hostNameOrAddress) { }

	// RVA: 0xED415C Offset: 0xED415C VA: 0xED415C
	public static IPHostEntry GetHostEntry(IPAddress address) { }

	// RVA: 0xED4350 Offset: 0xED4350 VA: 0xED4350
	public static IPAddress[] GetHostAddresses(string hostNameOrAddress) { }

	[ObsoleteAttribute] // RVA: 0xC3DF80 Offset: 0xC3DF80 VA: 0xC3DF80
	// RVA: 0xED4224 Offset: 0xED4224 VA: 0xED4224
	public static IPHostEntry GetHostByName(string hostName) { }

	// RVA: 0xED4588 Offset: 0xED4588 VA: 0xED4588
	public static string GetHostName() { }

	[ObsoleteAttribute] // RVA: 0xC3DFB8 Offset: 0xC3DFB8 VA: 0xC3DFB8
	// RVA: 0xED4634 Offset: 0xED4634 VA: 0xED4634
	public static IPHostEntry Resolve(string hostName) { }
}

// Namespace: 
private sealed class Dns.GetHostByNameCallback : MulticastDelegate // TypeDefIndex: 1530
{
	// Methods

	// RVA: 0xED2B68 Offset: 0xED2B68 VA: 0xED2B68
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED4B28 Offset: 0xED4B28 VA: 0xED4B28 Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0xED2B78 Offset: 0xED2B78 VA: 0xED2B78 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0xED3300 Offset: 0xED3300 VA: 0xED3300 Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.ResolveCallback : MulticastDelegate // TypeDefIndex: 1531
{
	// Methods

	// RVA: 0xED2C88 Offset: 0xED2C88 VA: 0xED2C88
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED5614 Offset: 0xED5614 VA: 0xED5614 Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0xED2C98 Offset: 0xED2C98 VA: 0xED2C98 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0xED34A0 Offset: 0xED34A0 VA: 0xED34A0 Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostEntryNameCallback : MulticastDelegate // TypeDefIndex: 1532
{
	// Methods

	// RVA: 0xED3018 Offset: 0xED3018 VA: 0xED3018
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED5270 Offset: 0xED5270 VA: 0xED5270 Slot: 11
	public virtual IPHostEntry Invoke(string hostName) { }

	// RVA: 0xED3028 Offset: 0xED3028 VA: 0xED3028 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0xED3900 Offset: 0xED3900 VA: 0xED3900 Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostEntryIPCallback : MulticastDelegate // TypeDefIndex: 1533
{
	// Methods

	// RVA: 0xED3138 Offset: 0xED3138 VA: 0xED3138
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED4ECC Offset: 0xED4ECC VA: 0xED4ECC Slot: 11
	public virtual IPHostEntry Invoke(IPAddress hostAddress) { }

	// RVA: 0xED3148 Offset: 0xED3148 VA: 0xED3148 Slot: 12
	public virtual IAsyncResult BeginInvoke(IPAddress hostAddress, AsyncCallback callback, object object) { }

	// RVA: 0xED38F4 Offset: 0xED38F4 VA: 0xED38F4 Slot: 13
	public virtual IPHostEntry EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Dns.GetHostAddressesCallback : MulticastDelegate // TypeDefIndex: 1534
{
	// Methods

	// RVA: 0xED2E50 Offset: 0xED2E50 VA: 0xED2E50
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED4784 Offset: 0xED4784 VA: 0xED4784 Slot: 11
	public virtual IPAddress[] Invoke(string hostName) { }

	// RVA: 0xED2E60 Offset: 0xED2E60 VA: 0xED2E60 Slot: 12
	public virtual IAsyncResult BeginInvoke(string hostName, AsyncCallback callback, object object) { }

	// RVA: 0xED3640 Offset: 0xED3640 VA: 0xED3640 Slot: 13
	public virtual IPAddress[] EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
public class DownloadDataCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1535
{
	// Fields
	private byte[] result; // 0x28

	// Properties
	public byte[] Result { get; }

	// Methods

	// RVA: 0xED59B8 Offset: 0xED59B8 VA: 0xED59B8
	internal void .ctor(byte[] result, Exception error, bool cancelled, object userState) { }

	// RVA: 0xED59F4 Offset: 0xED59F4 VA: 0xED59F4
	public byte[] get_Result() { }
}

// Namespace: System.Net
public class DownloadProgressChangedEventArgs : ProgressChangedEventArgs // TypeDefIndex: 1536
{
	// Fields
	private long received; // 0x20
	private long total; // 0x28

	// Properties
	public long BytesReceived { get; }
	public long TotalBytesToReceive { get; }

	// Methods

	// RVA: 0xED5E08 Offset: 0xED5E08 VA: 0xED5E08
	internal void .ctor(long bytesReceived, long totalBytesToReceive, object userState) { }

	// RVA: 0xED5E84 Offset: 0xED5E84 VA: 0xED5E84
	public long get_BytesReceived() { }

	// RVA: 0xED5E8C Offset: 0xED5E8C VA: 0xED5E8C
	public long get_TotalBytesToReceive() { }
}

// Namespace: System.Net
public class DownloadStringCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1537
{
	// Fields
	private string result; // 0x28

	// Properties
	public string Result { get; }

	// Methods

	// RVA: 0xED62A0 Offset: 0xED62A0 VA: 0xED62A0
	internal void .ctor(string result, Exception error, bool cancelled, object userState) { }

	// RVA: 0xED62DC Offset: 0xED62DC VA: 0xED62DC
	public string get_Result() { }
}

// Namespace: System.Net
[Serializable]
public abstract class EndPoint // TypeDefIndex: 1538
{
	// Properties
	public virtual AddressFamily AddressFamily { get; }

	// Methods

	// RVA: 0xED6710 Offset: 0xED6710 VA: 0xED6710
	protected void .ctor() { }

	// RVA: 0xED6718 Offset: 0xED6718 VA: 0xED6718 Slot: 4
	public virtual AddressFamily get_AddressFamily() { }

	// RVA: 0xED67C0 Offset: 0xED67C0 VA: 0xED67C0 Slot: 5
	public virtual EndPoint Create(SocketAddress address) { }

	// RVA: 0xED680C Offset: 0xED680C VA: 0xED680C Slot: 6
	public virtual SocketAddress Serialize() { }

	// RVA: 0xED6764 Offset: 0xED6764 VA: 0xED6764
	private static Exception NotImplemented() { }
}

// Namespace: System.Net
internal sealed class EndPointListener // TypeDefIndex: 1539
{
	// Fields
	private IPEndPoint endpoint; // 0x10
	private Socket sock; // 0x18
	private Hashtable prefixes; // 0x20
	private ArrayList unhandled; // 0x28
	private ArrayList all; // 0x30
	private X509Certificate2 cert; // 0x38
	private AsymmetricAlgorithm key; // 0x40
	private bool secure; // 0x48

	// Methods

	// RVA: 0xED6858 Offset: 0xED6858 VA: 0xED6858
	public void .ctor(IPAddress addr, int port, bool secure) { }

	// RVA: 0xED69FC Offset: 0xED69FC VA: 0xED69FC
	private void LoadCertificateAndKey(IPAddress addr, int port) { }

	// RVA: 0xED6C48 Offset: 0xED6C48 VA: 0xED6C48
	private static void OnAccept(IAsyncResult ares) { }

	// RVA: 0xED70C8 Offset: 0xED70C8 VA: 0xED70C8
	public bool BindContext(HttpListenerContext context) { }

	// RVA: 0xED79DC Offset: 0xED79DC VA: 0xED79DC
	public void UnbindContext(HttpListenerContext context) { }

	// RVA: 0xED71D8 Offset: 0xED71D8 VA: 0xED71D8
	private HttpListener SearchListener(string host, Uri uri, out ListenerPrefix prefix) { }

	// RVA: 0xED7A98 Offset: 0xED7A98 VA: 0xED7A98
	private HttpListener MatchFromList(string host, string path, ArrayList list, out ListenerPrefix prefix) { }

	// RVA: 0xED7E08 Offset: 0xED7E08 VA: 0xED7E08
	private void AddSpecial(ArrayList coll, ListenerPrefix prefix) { }

	// RVA: 0xED8184 Offset: 0xED8184 VA: 0xED8184
	private void RemoveSpecial(ArrayList coll, ListenerPrefix prefix) { }

	// RVA: 0xED8328 Offset: 0xED8328 VA: 0xED8328
	private void CheckIfRemove() { }

	// RVA: 0xED86F0 Offset: 0xED86F0 VA: 0xED86F0
	public void Close() { }

	// RVA: 0xED8720 Offset: 0xED8720 VA: 0xED8720
	public void AddPrefix(ListenerPrefix prefix, HttpListener listener) { }

	// RVA: 0xED8AD8 Offset: 0xED8AD8 VA: 0xED8AD8
	public void RemovePrefix(ListenerPrefix prefix, HttpListener listener) { }
}

// Namespace: System.Net
internal sealed class EndPointManager // TypeDefIndex: 1540
{
	// Fields
	private static Hashtable ip_to_endpoints; // 0x0

	// Methods

	// RVA: 0xED8CE8 Offset: 0xED8CE8 VA: 0xED8CE8
	private void .ctor() { }

	// RVA: 0xED8CF0 Offset: 0xED8CF0 VA: 0xED8CF0
	private static void .cctor() { }

	// RVA: 0xED8D5C Offset: 0xED8D5C VA: 0xED8D5C
	public static void AddListener(HttpListener listener) { }

	// RVA: 0xED9748 Offset: 0xED9748 VA: 0xED9748
	public static void AddPrefix(string prefix, HttpListener listener) { }

	// RVA: 0xED9450 Offset: 0xED9450 VA: 0xED9450
	private static void AddPrefixInternal(string p, HttpListener listener) { }

	// RVA: 0xED984C Offset: 0xED984C VA: 0xED984C
	private static EndPointListener GetEPListener(IPAddress addr, int port, HttpListener listener, bool secure) { }

	// RVA: 0xED840C Offset: 0xED840C VA: 0xED840C
	public static void RemoveEndPoint(EndPointListener epl, IPEndPoint ep) { }

	// RVA: 0xED9B60 Offset: 0xED9B60 VA: 0xED9B60
	public static void RemoveListener(HttpListener listener) { }

	// RVA: 0xED964C Offset: 0xED964C VA: 0xED964C
	public static void RemovePrefix(string prefix, HttpListener listener) { }

	// RVA: 0xED9EB4 Offset: 0xED9EB4 VA: 0xED9EB4
	private static void RemovePrefixInternal(string prefix, HttpListener listener) { }
}

// Namespace: System.Net
[Serializable]
public class FileWebRequest : WebRequest, ISerializable // TypeDefIndex: 1541
{
	// Fields
	private Uri uri; // 0x20
	private WebHeaderCollection webHeaders; // 0x28
	private ICredentials credentials; // 0x30
	private string connectionGroup; // 0x38
	private long contentLength; // 0x40
	private FileAccess fileAccess; // 0x48
	private string method; // 0x50
	private IWebProxy proxy; // 0x58
	private bool preAuthenticate; // 0x60
	private int timeout; // 0x64
	private Stream requestStream; // 0x68
	private FileWebResponse webResponse; // 0x70
	private AutoResetEvent requestEndEvent; // 0x78
	private bool requesting; // 0x80
	private bool asyncResponding; // 0x81

	// Properties
	public override string ConnectionGroupName { get; set; }
	public override long ContentLength { get; set; }
	public override string ContentType { get; set; }
	public override ICredentials Credentials { get; set; }
	public override WebHeaderCollection Headers { get; }
	public override string Method { get; set; }
	public override bool PreAuthenticate { get; set; }
	public override IWebProxy Proxy { get; set; }
	public override Uri RequestUri { get; }
	public override int Timeout { get; set; }
	public override bool UseDefaultCredentials { get; set; }

	// Methods

	// RVA: 0xEDA068 Offset: 0xEDA068 VA: 0xEDA068
	internal void .ctor(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0xC3DFF0 Offset: 0xC3DFF0 VA: 0xC3DFF0
	// RVA: 0xEDA128 Offset: 0xEDA128 VA: 0xEDA128
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDA5B4 Offset: 0xEDA5B4 VA: 0xEDA5B4 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDA5C4 Offset: 0xEDA5C4 VA: 0xEDA5C4 Slot: 9
	public override string get_ConnectionGroupName() { }

	// RVA: 0xEDA5CC Offset: 0xEDA5CC VA: 0xEDA5CC Slot: 10
	public override void set_ConnectionGroupName(string value) { }

	// RVA: 0xEDA5D4 Offset: 0xEDA5D4 VA: 0xEDA5D4 Slot: 11
	public override long get_ContentLength() { }

	// RVA: 0xEDA5DC Offset: 0xEDA5DC VA: 0xEDA5DC Slot: 12
