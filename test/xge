	private byte[] _encrypted; // 0x28

	// Properties
	public PKCS7.ContentInfo EncryptionAlgorithm { get; }
	public byte[] EncryptedContent { get; }

	// Methods

	// RVA: 0x25F5440 Offset: 0x25F5440 VA: 0x25F5440
	public void .ctor() { }

	// RVA: 0x25F5468 Offset: 0x25F5468 VA: 0x25F5468
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x25F5760 Offset: 0x25F5760 VA: 0x25F5760
	public PKCS7.ContentInfo get_EncryptionAlgorithm() { }

	// RVA: 0x25F5768 Offset: 0x25F5768 VA: 0x25F5768
	public byte[] get_EncryptedContent() { }
}

// Namespace: Mono.Security.Authenticode
public class PrivateKey // TypeDefIndex: 1815
{
	// Fields
	private bool encrypted; // 0x10
	private RSA rsa; // 0x18
	private bool weak; // 0x20
	private int keyType; // 0x24

	// Properties
	public RSA RSA { get; }

	// Methods

	// RVA: 0x25EA648 Offset: 0x25EA648 VA: 0x25EA648
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x25EAC10 Offset: 0x25EAC10 VA: 0x25EAC10
	public RSA get_RSA() { }

	// RVA: 0x25EAC18 Offset: 0x25EAC18 VA: 0x25EAC18
	private byte[] DeriveKey(byte[] salt, string password) { }

	// RVA: 0x25EA73C Offset: 0x25EA73C VA: 0x25EA73C
	private bool Decode(byte[] pvk, string password) { }

	// RVA: 0x25EAE98 Offset: 0x25EAE98 VA: 0x25EAE98
	public static PrivateKey CreateFromFile(string filename) { }

	// RVA: 0x25EAEA0 Offset: 0x25EAEA0 VA: 0x25EAEA0
	public static PrivateKey CreateFromFile(string filename, string password) { }
}

// Namespace: Mono.Security.Cryptography
public class ARC4Managed : RC4, IDisposable, ICryptoTransform // TypeDefIndex: 1816
{
	// Fields
	private byte[] key; // 0x50
	private byte[] state; // 0x58
	private byte x; // 0x60
	private byte y; // 0x61
	private bool m_disposed; // 0x62

	// Properties
	public override byte[] Key { get; set; }
	public bool CanReuseTransform { get; }
	public bool CanTransformMultipleBlocks { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x25EB444 Offset: 0x25EB444 VA: 0x25EB444
	public void .ctor() { }

	// RVA: 0x25EB564 Offset: 0x25EB564 VA: 0x25EB564 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25EB5E4 Offset: 0x25EB5E4 VA: 0x25EB5E4 Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0x25EB664 Offset: 0x25EB664 VA: 0x25EB664 Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x25EB73C Offset: 0x25EB73C VA: 0x25EB73C Slot: 13
	public override void set_Key(byte[] value) { }

	// RVA: 0x25EBA08 Offset: 0x25EBA08 VA: 0x25EBA08 Slot: 28
	public bool get_CanReuseTransform() { }

	// RVA: 0x25EBA10 Offset: 0x25EBA10 VA: 0x25EBA10 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x25EBA3C Offset: 0x25EBA3C VA: 0x25EBA3C Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x25EBA74 Offset: 0x25EBA74 VA: 0x25EBA74 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x25EBAD8 Offset: 0x25EBAD8 VA: 0x25EBAD8 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0x25EBB90 Offset: 0x25EBB90 VA: 0x25EBB90 Slot: 29
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x25EBB98 Offset: 0x25EBB98 VA: 0x25EBB98 Slot: 30
	public int get_InputBlockSize() { }

	// RVA: 0x25EBBA0 Offset: 0x25EBBA0 VA: 0x25EBBA0 Slot: 31
	public int get_OutputBlockSize() { }

	// RVA: 0x25EB824 Offset: 0x25EB824 VA: 0x25EB824
	private void KeySetup(byte[] key) { }

	// RVA: 0x25EBBA8 Offset: 0x25EBBA8 VA: 0x25EBBA8
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x25EBCF4 Offset: 0x25EBCF4 VA: 0x25EBCF4 Slot: 32
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x25EBE64 Offset: 0x25EBE64 VA: 0x25EBE64
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x25EC11C Offset: 0x25EC11C VA: 0x25EC11C Slot: 33
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert // TypeDefIndex: 1817
{
	// Methods

	// RVA: 0x25EC1C0 Offset: 0x25EC1C0 VA: 0x25EC1C0
	private static int ToInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x25EC2B4 Offset: 0x25EC2B4 VA: 0x25EC2B4
	private static uint ToUInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x25EC3A8 Offset: 0x25EC3A8 VA: 0x25EC3A8
	private static byte[] Trim(byte[] array) { }

	// RVA: 0x25EAE90 Offset: 0x25EAE90 VA: 0x25EAE90
	public static RSA FromCapiPrivateKeyBlob(byte[] blob) { }

	// RVA: 0x25EC488 Offset: 0x25EC488 VA: 0x25EC488
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x25ECBDC Offset: 0x25ECBDC VA: 0x25ECBDC
	public static string ToHex(byte[] input) { }

	// RVA: 0x25ECD2C Offset: 0x25ECD2C VA: 0x25ECD2C
	private static byte FromHexChar(char c) { }

	// RVA: 0x25ECDFC Offset: 0x25ECDFC VA: 0x25ECDFC
	public static byte[] FromHex(string hex) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 1818
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x25ED87C Offset: 0x25ED87C VA: 0x25ED87C
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x25EBB10 Offset: 0x25EBB10 VA: 0x25EBB10
	public static byte[] Key(int size) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD2 : HashAlgorithm // TypeDefIndex: 1819
{
	// Methods

	// RVA: 0x25ED8EC Offset: 0x25ED8EC VA: 0x25ED8EC
	protected void .ctor() { }

	// RVA: 0x25ED918 Offset: 0x25ED918 VA: 0x25ED918
	public static MD2 Create() { }

	// RVA: 0x25ED960 Offset: 0x25ED960 VA: 0x25ED960
	public static MD2 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD2Managed : MD2 // TypeDefIndex: 1820
{
	// Fields
	private byte[] state; // 0x28
	private byte[] checksum; // 0x30
	private byte[] buffer; // 0x38
	private int count; // 0x40
	private byte[] x; // 0x48
	private static readonly byte[] PI_SUBST; // 0x0

	// Methods

	// RVA: 0x25EDA78 Offset: 0x25EDA78 VA: 0x25EDA78
	public void .ctor() { }

	// RVA: 0x25EDB24 Offset: 0x25EDB24 VA: 0x25EDB24
	private static void .cctor() { }

	// RVA: 0x25EDBA0 Offset: 0x25EDBA0 VA: 0x25EDBA0
	private byte[] Padding(int nLength) { }

	// RVA: 0x25EDC5C Offset: 0x25EDC5C VA: 0x25EDC5C Slot: 17
	public override void Initialize() { }

	// RVA: 0x25EDCC8 Offset: 0x25EDCC8 VA: 0x25EDCC8 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x25EE118 Offset: 0x25EE118 VA: 0x25EE118 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x25EDDB4 Offset: 0x25EDDB4 VA: 0x25EDDB4
	private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD4 : HashAlgorithm // TypeDefIndex: 1821
{
	// Methods

	// RVA: 0x25EE270 Offset: 0x25EE270 VA: 0x25EE270
	protected void .ctor() { }

	// RVA: 0x25EE29C Offset: 0x25EE29C VA: 0x25EE29C
	public static MD4 Create() { }

	// RVA: 0x25EE2E4 Offset: 0x25EE2E4 VA: 0x25EE2E4
	public static MD4 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD4Managed : MD4 // TypeDefIndex: 1822
{
	// Fields
	private uint[] state; // 0x28
	private byte[] buffer; // 0x30
	private uint[] count; // 0x38
	private uint[] x; // 0x40
	private byte[] digest; // 0x48

	// Methods

	// RVA: 0x25EE3FC Offset: 0x25EE3FC VA: 0x25EE3FC
	public void .ctor() { }

	// RVA: 0x25EE4C8 Offset: 0x25EE4C8 VA: 0x25EE4C8 Slot: 17
	public override void Initialize() { }

	// RVA: 0x25EE640 Offset: 0x25EE640 VA: 0x25EE640 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x25EF7A8 Offset: 0x25EF7A8 VA: 0x25EF7A8 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x25EFA80 Offset: 0x25EFA80 VA: 0x25EFA80
	private byte[] Padding(int nLength) { }

	// RVA: 0x25EFB14 Offset: 0x25EFB14 VA: 0x25EFB14
	private uint F(uint x, uint y, uint z) { }

	// RVA: 0x25EFB24 Offset: 0x25EFB24 VA: 0x25EFB24
	private uint G(uint x, uint y, uint z) { }

	// RVA: 0x25EFB38 Offset: 0x25EFB38 VA: 0x25EFB38
	private uint H(uint x, uint y, uint z) { }

	// RVA: 0x25EFB44 Offset: 0x25EFB44 VA: 0x25EFB44
	private uint ROL(uint x, byte n) { }

	// RVA: 0x25EFB54 Offset: 0x25EFB54 VA: 0x25EFB54
	private void FF(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x25EFB80 Offset: 0x25EFB80 VA: 0x25EFB80
	private void GG(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x25EFBBC Offset: 0x25EFBBC VA: 0x25EFBBC
	private void HH(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x25EF8C4 Offset: 0x25EF8C4 VA: 0x25EF8C4
	private void Encode(byte[] output, uint[] input) { }

	// RVA: 0x25EFBF0 Offset: 0x25EFBF0 VA: 0x25EFBF0
	private void Decode(uint[] output, byte[] input, int index) { }

	// RVA: 0x25EE82C Offset: 0x25EE82C VA: 0x25EE82C
	private void MD4Transform(uint[] state, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS1 // TypeDefIndex: 1823
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x8
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x18

	// Methods

	// RVA: 0x25F0290 Offset: 0x25F0290 VA: 0x25F0290
	private static void .cctor() { }

	// RVA: 0x25F03A4 Offset: 0x25F03A4 VA: 0x25F03A4
	private static bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x25F0470 Offset: 0x25F0470 VA: 0x25F0470
	public static byte[] I2OSP(byte[] x, int size) { }

	// RVA: 0x25F051C Offset: 0x25F051C VA: 0x25F051C
	public static byte[] OS2IP(byte[] x) { }

	// RVA: 0x25F0604 Offset: 0x25F0604 VA: 0x25F0604
	public static byte[] RSASP1(RSA rsa, byte[] m) { }

	// RVA: 0x25F0640 Offset: 0x25F0640 VA: 0x25F0640
	public static byte[] RSAVP1(RSA rsa, byte[] s) { }

	// RVA: 0x25F0678 Offset: 0x25F0678 VA: 0x25F0678
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue) { }

	// RVA: 0x25F0B18 Offset: 0x25F0B18 VA: 0x25F0B18
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature) { }

	// RVA: 0x25F0BA8 Offset: 0x25F0BA8 VA: 0x25F0BA8
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding) { }

	// RVA: 0x25F073C Offset: 0x25F073C VA: 0x25F073C
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS8 // TypeDefIndex: 1824
{}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 1825
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public string Algorithm { set; }
	public byte[] PrivateKey { get; set; }

	// Methods

	// RVA: 0x25F16A8 Offset: 0x25F16A8 VA: 0x25F16A8
	public void .ctor() { }

	// RVA: 0x25F1718 Offset: 0x25F1718 VA: 0x25F1718
	public void .ctor(byte[] data) { }

	// RVA: 0x25F19D4 Offset: 0x25F19D4 VA: 0x25F19D4
	public void set_Algorithm(string value) { }

	// RVA: 0x25F19DC Offset: 0x25F19DC VA: 0x25F19DC
	public byte[] get_PrivateKey() { }

	// RVA: 0x25F1AA8 Offset: 0x25F1AA8 VA: 0x25F1AA8
	public void set_PrivateKey(byte[] value) { }

	// RVA: 0x25F1744 Offset: 0x25F1744 VA: 0x25F1744
	private void Decode(byte[] data) { }

	// RVA: 0x25F1BC0 Offset: 0x25F1BC0 VA: 0x25F1BC0
	public byte[] GetBytes() { }

	// RVA: 0x25F2094 Offset: 0x25F2094 VA: 0x25F2094
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x25F2168 Offset: 0x25F2168 VA: 0x25F2168
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x25F2220 Offset: 0x25F2220 VA: 0x25F2220
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x25F2628 Offset: 0x25F2628 VA: 0x25F2628
	public static byte[] Encode(RSA rsa) { }

	// RVA: 0x25F2890 Offset: 0x25F2890 VA: 0x25F2890
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }

	// RVA: 0x25F29D0 Offset: 0x25F29D0 VA: 0x25F29D0
	public static byte[] Encode(DSA dsa) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 1826
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public byte[] EncryptedData { get; set; }
	public byte[] Salt { get; }
	public int IterationCount { get; set; }

	// Methods

	// RVA: 0x25F0DF4 Offset: 0x25F0DF4 VA: 0x25F0DF4
	public void .ctor() { }

	// RVA: 0x25F0DFC Offset: 0x25F0DFC VA: 0x25F0DFC
	public void .ctor(byte[] data) { }

	// RVA: 0x25F10C0 Offset: 0x25F10C0 VA: 0x25F10C0
	public string get_Algorithm() { }

	// RVA: 0x25F10C8 Offset: 0x25F10C8 VA: 0x25F10C8
	public void set_Algorithm(string value) { }

	// RVA: 0x25F10D0 Offset: 0x25F10D0 VA: 0x25F10D0
	public byte[] get_EncryptedData() { }

	// RVA: 0x25F119C Offset: 0x25F119C VA: 0x25F119C
	public void set_EncryptedData(byte[] value) { }

	// RVA: 0x25F1288 Offset: 0x25F1288 VA: 0x25F1288
	public byte[] get_Salt() { }

	// RVA: 0x25F13B4 Offset: 0x25F13B4 VA: 0x25F13B4
	public int get_IterationCount() { }

	// RVA: 0x25F13BC Offset: 0x25F13BC VA: 0x25F13BC
	public void set_IterationCount(int value) { }

	// RVA: 0x25F0E2C Offset: 0x25F0E2C VA: 0x25F0E2C
	private void Decode(byte[] data) { }

	// RVA: 0x25F1460 Offset: 0x25F1460 VA: 0x25F1460
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.Cryptography
public abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 1827
{
	// Fields
	private static KeySizes[] s_legalBlockSizes; // 0x0
	private static KeySizes[] s_legalKeySizes; // 0x8

	// Properties
	public override byte[] IV { get; set; }

	// Methods

	// RVA: 0x25EB4C8 Offset: 0x25EB4C8 VA: 0x25EB4C8
	public void .ctor() { }

	// RVA: 0x25F2A3C Offset: 0x25F2A3C VA: 0x25F2A3C
	private static void .cctor() { }

	// RVA: 0x25F2BD0 Offset: 0x25F2BD0 VA: 0x25F2BD0 Slot: 10
	public override byte[] get_IV() { }

	// RVA: 0x25F2C1C Offset: 0x25F2C1C VA: 0x25F2C1C Slot: 11
	public override void set_IV(byte[] value) { }

	// RVA: 0x25EAE28 Offset: 0x25EAE28 VA: 0x25EAE28
	public static RC4 Create() { }

	// RVA: 0x25F2C20 Offset: 0x25F2C20 VA: 0x25F2C20
	public static RC4 Create(string algName) { }
}

// Namespace: Mono.Security.Cryptography
public class RSAManaged : RSA // TypeDefIndex: 1828
{
	// Fields
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override int KeySize { get; }
	public override string KeyExchangeAlgorithm { get; }
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }

	// Methods

	// RVA: 0x25F2D38 Offset: 0x25F2D38 VA: 0x25F2D38
	public void .ctor() { }

	// RVA: 0x25F2D40 Offset: 0x25F2D40 VA: 0x25F2D40
	public void .ctor(int keySize) { }

	// RVA: 0x25F2E48 Offset: 0x25F2E48 VA: 0x25F2E48 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25F2EC8 Offset: 0x25F2EC8 VA: 0x25F2EC8
	private void GenerateKeyPair() { }

	// RVA: 0x25F3554 Offset: 0x25F3554 VA: 0x25F3554 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x25F35A4 Offset: 0x25F35A4 VA: 0x25F35A4 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x25F35EC Offset: 0x25F35EC VA: 0x25F35EC
	public bool get_PublicOnly() { }

	// RVA: 0x25F36B0 Offset: 0x25F36B0 VA: 0x25F36B0 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x25F36F8 Offset: 0x25F36F8 VA: 0x25F36F8 Slot: 14
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x25F3B68 Offset: 0x25F3B68 VA: 0x25F3B68 Slot: 13
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x25F3C9C Offset: 0x25F3C9C VA: 0x25F3C9C Slot: 15
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x25F403C Offset: 0x25F403C VA: 0x25F403C Slot: 16
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x25F44C0 Offset: 0x25F44C0 VA: 0x25F44C0 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x25F4768 Offset: 0x25F4768 VA: 0x25F4768 Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x25F3AA0 Offset: 0x25F3AA0 VA: 0x25F3AA0
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 1829
{
	// Methods

	// RVA: 0x25F4E9C Offset: 0x25F4E9C VA: 0x25F4E9C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x25F3194 Offset: 0x25F3194 VA: 0x25F3194 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x25F4EAC Offset: 0x25F4EAC VA: 0x25F4EAC Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x25F4EDC Offset: 0x25F4EDC VA: 0x25F4EDC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.X509
public class PKCS5 // TypeDefIndex: 1830
{
	// Fields
	public const string pbeWithMD2AndDESCBC = "1.2.840.113549.1.5.1";
	public const string pbeWithMD5AndDESCBC = "1.2.840.113549.1.5.3";
	public const string pbeWithMD2AndRC2CBC = "1.2.840.113549.1.5.4";
	public const string pbeWithMD5AndRC2CBC = "1.2.840.113549.1.5.6";
	public const string pbeWithSHA1AndDESCBC = "1.2.840.113549.1.5.10";
	public const string pbeWithSHA1AndRC2CBC = "1.2.840.113549.1.5.11";

	// Methods

	// RVA: 0x27A9614 Offset: 0x27A9614 VA: 0x27A9614
	public void .ctor() { }
}

// Namespace: Mono.Security.X509
public class PKCS9 // TypeDefIndex: 1831
{
	// Fields
	public const string friendlyName = "1.2.840.113549.1.9.20";
	public const string localKeyId = "1.2.840.113549.1.9.21";

	// Methods

	// RVA: 0x27A961C Offset: 0x27A961C VA: 0x27A961C
	public void .ctor() { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 1832
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x279D1F0 Offset: 0x279D1F0 VA: 0x279D1F0
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x279B0E8 Offset: 0x279B0E8 VA: 0x279B0E8
	public string get_BagOID() { }

	// RVA: 0x279B0F0 Offset: 0x279B0F0 VA: 0x279B0F0
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
public class PKCS12 : ICloneable // TypeDefIndex: 1833
{
	// Fields
	public const string pbeWithSHAAnd128BitRC4 = "1.2.840.113549.1.12.1.1";
	public const string pbeWithSHAAnd40BitRC4 = "1.2.840.113549.1.12.1.2";
	public const string pbeWithSHAAnd3KeyTripleDESCBC = "1.2.840.113549.1.12.1.3";
	public const string pbeWithSHAAnd2KeyTripleDESCBC = "1.2.840.113549.1.12.1.4";
	public const string pbeWithSHAAnd128BitRC2CBC = "1.2.840.113549.1.12.1.5";
	public const string pbeWithSHAAnd40BitRC2CBC = "1.2.840.113549.1.12.1.6";
	public const string keyBag = "1.2.840.113549.1.12.10.1.1";
	public const string pkcs8ShroudedKeyBag = "1.2.840.113549.1.12.10.1.2";
	public const string certBag = "1.2.840.113549.1.12.10.1.3";
	public const string crlBag = "1.2.840.113549.1.12.10.1.4";
	public const string secretBag = "1.2.840.113549.1.12.10.1.5";
	public const string safeContentsBag = "1.2.840.113549.1.12.10.1.6";
	public const string x509Certificate = "1.2.840.113549.1.9.22.1";
	public const string sdsiCertificate = "1.2.840.113549.1.9.22.2";
	public const string x509Crl = "1.2.840.113549.1.9.23.1";
	public const int CryptoApiPasswordLimit = 32;
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xBD3E3C Offset: 0xBD3E3C VA: 0xBD3E3C
	private static Dictionary<string, int> <>f__switch$map5; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBD3E4C Offset: 0xBD3E4C VA: 0xBD3E4C
	private static Dictionary<string, int> <>f__switch$map6; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD3E5C Offset: 0xBD3E5C VA: 0xBD3E5C
	private static Dictionary<string, int> <>f__switch$map7; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD3E6C Offset: 0xBD3E6C VA: 0xBD3E6C
	private static Dictionary<string, int> <>f__switch$map8; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBD3E7C Offset: 0xBD3E7C VA: 0xBD3E7C
	private static Dictionary<string, int> <>f__switch$map9; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xBD3E8C Offset: 0xBD3E8C VA: 0xBD3E8C
	private static Dictionary<string, int> <>f__switch$mapA; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xBD3E9C Offset: 0xBD3E9C VA: 0xBD3E9C
	private static Dictionary<string, int> <>f__switch$mapB; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xBD3EAC Offset: 0xBD3EAC VA: 0xBD3EAC
	private static Dictionary<string, int> <>f__switch$mapC; // 0x40

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public ArrayList Keys { get; }
	public ArrayList Secrets { get; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; set; }

	// Methods

	// RVA: 0x2798BC0 Offset: 0x2798BC0 VA: 0x2798BC0
	public void .ctor() { }

	// RVA: 0x2798CC4 Offset: 0x2798CC4 VA: 0x2798CC4
	public void .ctor(byte[] data) { }

	// RVA: 0x2799868 Offset: 0x2799868 VA: 0x2799868
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x27998AC Offset: 0x27998AC VA: 0x27998AC
	public void .ctor(byte[] data, byte[] password) { }

	// RVA: 0x27998E8 Offset: 0x27998E8 VA: 0x27998E8
	private static void .cctor() { }

	// RVA: 0x2798EA8 Offset: 0x2798EA8 VA: 0x2798EA8
	private void Decode(byte[] data) { }

	// RVA: 0x279A834 Offset: 0x279A834 VA: 0x279A834 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2798D20 Offset: 0x2798D20 VA: 0x2798D20
	public void set_Password(string value) { }

	// RVA: 0x279A928 Offset: 0x279A928 VA: 0x279A928
	public int get_IterationCount() { }

	// RVA: 0x279A930 Offset: 0x279A930 VA: 0x279A930
	public void set_IterationCount(int value) { }

	// RVA: 0x279A938 Offset: 0x279A938 VA: 0x279A938
	public ArrayList get_Keys() { }

	// RVA: 0x279B298 Offset: 0x279B298 VA: 0x279B298
	public ArrayList get_Secrets() { }

	// RVA: 0x279B66C Offset: 0x279B66C VA: 0x279B66C
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x279BD18 Offset: 0x279BD18 VA: 0x279BD18
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x2799B28 Offset: 0x2799B28 VA: 0x2799B28
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x279BD44 Offset: 0x279BD44 VA: 0x279BD44
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x279B0F8 Offset: 0x279B0F8 VA: 0x279B0F8
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x279A6E4 Offset: 0x279A6E4 VA: 0x279A6E4
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x279C680 Offset: 0x279C680 VA: 0x279C680
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x279C870 Offset: 0x279C870 VA: 0x279C870
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x279D04C Offset: 0x279D04C VA: 0x279D04C
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x2799BF8 Offset: 0x2799BF8 VA: 0x2799BF8
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x279D228 Offset: 0x279D228 VA: 0x279D228
	private ASN1 Pkcs8ShroudedKeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x279E3EC Offset: 0x279E3EC VA: 0x279E3EC
	private ASN1 KeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x279F4CC Offset: 0x279F4CC VA: 0x279F4CC
	private ASN1 SecretBagSafeBag(byte[] secret, IDictionary attributes) { }

	// RVA: 0x27A0314 Offset: 0x27A0314 VA: 0x27A0314
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x279994C Offset: 0x279994C VA: 0x279994C
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x27A12EC Offset: 0x27A12EC VA: 0x27A12EC
	public byte[] GetBytes() { }

	// RVA: 0x27A36BC Offset: 0x27A36BC VA: 0x27A36BC
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x27A36B4 Offset: 0x27A36B4 VA: 0x27A36B4
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x27A3A70 Offset: 0x27A3A70 VA: 0x27A3A70
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x27A36AC Offset: 0x27A36AC VA: 0x27A36AC
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x27A3D70 Offset: 0x27A3D70 VA: 0x27A3D70
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x27A4414 Offset: 0x27A4414 VA: 0x27A4414
	private bool CompareAsymmetricAlgorithm(AsymmetricAlgorithm a1, AsymmetricAlgorithm a2) { }

	// RVA: 0x27A4518 Offset: 0x27A4518 VA: 0x27A4518
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x27A4520 Offset: 0x27A4520 VA: 0x27A4520
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x27A498C Offset: 0x27A498C VA: 0x27A498C
	public void RemovePkcs8ShroudedKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x27A4DF0 Offset: 0x27A4DF0 VA: 0x27A4DF0
	public void AddKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x27A4DF8 Offset: 0x27A4DF8 VA: 0x27A4DF8
	public void AddKeyBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x27A5144 Offset: 0x27A5144 VA: 0x27A5144
	public void RemoveKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x27A548C Offset: 0x27A548C VA: 0x27A548C
	public void AddSecretBag(byte[] secret) { }

	// RVA: 0x27A5494 Offset: 0x27A5494 VA: 0x27A5494
	public void AddSecretBag(byte[] secret, IDictionary attributes) { }

	// RVA: 0x27A56B8 Offset: 0x27A56B8 VA: 0x27A56B8
	public void RemoveSecretBag(byte[] secret) { }

	// RVA: 0x27A58D0 Offset: 0x27A58D0 VA: 0x27A58D0
	public AsymmetricAlgorithm GetAsymmetricAlgorithm(IDictionary attrs) { }

	// RVA: 0x27A6460 Offset: 0x27A6460 VA: 0x27A6460
	public byte[] GetSecret(IDictionary attrs) { }

	// RVA: 0x27A6C08 Offset: 0x27A6C08 VA: 0x27A6C08
	public X509Certificate GetCertificate(IDictionary attrs) { }

	// RVA: 0x27A7468 Offset: 0x27A7468 VA: 0x27A7468
	public IDictionary GetAttributes(AsymmetricAlgorithm aa) { }

	// RVA: 0x27A7DE8 Offset: 0x27A7DE8 VA: 0x27A7DE8
	public IDictionary GetAttributes(X509Certificate cert) { }

	// RVA: 0x27A84D8 Offset: 0x27A84D8 VA: 0x27A84D8
	public void SaveToFile(string filename) { }

	// RVA: 0x27A8680 Offset: 0x27A8680 VA: 0x27A8680 Slot: 4
	public object Clone() { }

	// RVA: 0x279A8C0 Offset: 0x279A8C0 VA: 0x279A8C0
	public static int get_MaximumPasswordLength() { }

	// RVA: 0x27A878C Offset: 0x27A878C VA: 0x27A878C
	public static void set_MaximumPasswordLength(int value) { }

	// RVA: 0x27A88C4 Offset: 0x27A88C4 VA: 0x27A88C4
	private static byte[] LoadFile(string filename) { }

	// RVA: 0x27A8A50 Offset: 0x27A8A50 VA: 0x27A8A50
	public static PKCS12 LoadFromFile(string filename) { }

	// RVA: 0x27A8B20 Offset: 0x27A8B20 VA: 0x27A8B20
	public static PKCS12 LoadFromFile(string filename, string password) { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 1834
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Properties
	public string HashName { get; set; }
	public int IterationCount { get; set; }
	public byte[] Password { get; set; }
	public byte[] Salt { get; set; }

	// Methods

	// RVA: 0x279C3A8 Offset: 0x279C3A8 VA: 0x279C3A8
	public void .ctor() { }

	// RVA: 0x27A8C00 Offset: 0x27A8C00 VA: 0x27A8C00
	private static void .cctor() { }

	// RVA: 0x27A8CE4 Offset: 0x27A8CE4 VA: 0x27A8CE4
	public string get_HashName() { }

	// RVA: 0x279C578 Offset: 0x279C578 VA: 0x279C578
	public void set_HashName(string value) { }

	// RVA: 0x27A8CEC Offset: 0x27A8CEC VA: 0x27A8CEC
	public int get_IterationCount() { }

	// RVA: 0x279C570 Offset: 0x279C570 VA: 0x279C570
	public void set_IterationCount(int value) { }

	// RVA: 0x27A8CF4 Offset: 0x27A8CF4 VA: 0x27A8CF4
	public byte[] get_Password() { }

	// RVA: 0x279C3B0 Offset: 0x279C3B0 VA: 0x279C3B0
	public void set_Password(byte[] value) { }

	// RVA: 0x27A8DCC Offset: 0x27A8DCC VA: 0x27A8DCC
	public byte[] get_Salt() { }

	// RVA: 0x279C49C Offset: 0x279C49C VA: 0x279C49C
	public void set_Salt(byte[] value) { }

	// RVA: 0x27A8EA4 Offset: 0x27A8EA4 VA: 0x27A8EA4
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x27A9050 Offset: 0x27A9050 VA: 0x27A9050
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x279C580 Offset: 0x279C580 VA: 0x279C580
	public byte[] DeriveKey(int size) { }

	// RVA: 0x279C600 Offset: 0x279C600 VA: 0x279C600
	public byte[] DeriveIV(int size) { }

	// RVA: 0x27A126C Offset: 0x27A126C VA: 0x27A126C
	public byte[] DeriveMAC(int size) { }
}

// Namespace: 
public enum PKCS12.DeriveBytes.Purpose // TypeDefIndex: 1835
{
	// Fields
	public int value__; // 0x0
	public const PKCS12.DeriveBytes.Purpose Key = 0;
	public const PKCS12.DeriveBytes.Purpose IV = 1;
	public const PKCS12.DeriveBytes.Purpose MAC = 2;
}

// Namespace: Mono.Security.X509
public sealed class X501 // TypeDefIndex: 1836
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xBD3EBC Offset: 0xBD3EBC VA: 0xBD3EBC
	private static Dictionary<string, int> <>f__switch$mapD; // 0x78

	// Methods

	// RVA: 0x27A9624 Offset: 0x27A9624 VA: 0x27A9624
	private void .ctor() { }

	// RVA: 0x27A962C Offset: 0x27A962C VA: 0x27A962C
	private static void .cctor() { }

	// RVA: 0x27A9D9C Offset: 0x27A9D9C VA: 0x27A9D9C
	public static string ToString(ASN1 seq) { }

	// RVA: 0x27AA7CC Offset: 0x27AA7CC VA: 0x27AA7CC
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x27A9EE4 Offset: 0x27A9EE4 VA: 0x27A9EE4
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }

	// RVA: 0x27AA9C4 Offset: 0x27AA9C4 VA: 0x27AA9C4
	private static X520.AttributeTypeAndValue GetAttributeFromOid(string attributeType) { }

	// RVA: 0x27AB10C Offset: 0x27AB10C VA: 0x27AB10C
	private static bool IsOid(string oid) { }

	// RVA: 0x27AB1F8 Offset: 0x27AB1F8 VA: 0x27AB1F8
	private static X520.AttributeTypeAndValue ReadAttribute(string value, ref int pos) { }

	// RVA: 0x27AB3DC Offset: 0x27AB3DC VA: 0x27AB3DC
	private static bool IsHex(char c) { }

	// RVA: 0x27AB4BC Offset: 0x27AB4BC VA: 0x27AB4BC
	private static string ReadHex(string value, ref int pos) { }

	// RVA: 0x27AB750 Offset: 0x27AB750 VA: 0x27AB750
	private static int ReadEscaped(StringBuilder sb, string value, int pos) { }

	// RVA: 0x27AB964 Offset: 0x27AB964 VA: 0x27AB964
	private static int ReadQuoted(StringBuilder sb, string value, int pos) { }

	// RVA: 0x27ABB4C Offset: 0x27ABB4C VA: 0x27ABB4C
	private static string ReadValue(string value, ref int pos) { }

	// RVA: 0x27ABE74 Offset: 0x27ABE74 VA: 0x27ABE74
	public static ASN1 FromString(string rdn) { }
}

// Namespace: Mono.Security.X509
public abstract class X509Builder // TypeDefIndex: 1837
{
	// Fields
	private const string defaultHash = "SHA1";
	private string hashName; // 0x10
