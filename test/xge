	// Methods

	// RVA: 0x12652B4 Offset: 0x12652B4 VA: 0x12652B4
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x126587C Offset: 0x126587C VA: 0x126587C
	public RSA get_RSA() { }

	// RVA: 0x1265884 Offset: 0x1265884 VA: 0x1265884
	private byte[] DeriveKey(byte[] salt, string password) { }

	// RVA: 0x12653A8 Offset: 0x12653A8 VA: 0x12653A8
	private bool Decode(byte[] pvk, string password) { }

	// RVA: 0x1265B04 Offset: 0x1265B04 VA: 0x1265B04
	public static PrivateKey CreateFromFile(string filename) { }

	// RVA: 0x1265B0C Offset: 0x1265B0C VA: 0x1265B0C
	public static PrivateKey CreateFromFile(string filename, string password) { }
}

// Namespace: Mono.Security.Cryptography
public class ARC4Managed : RC4, IDisposable, ICryptoTransform // TypeDefIndex: 1816
{
	// Fields
	private byte[] key; // 0x50
	private byte[] state; // 0x58
	private byte x; // 0x60
	private byte y; // 0x61
	private bool m_disposed; // 0x62

	// Properties
	public override byte[] Key { get; set; }
	public bool CanReuseTransform { get; }
	public bool CanTransformMultipleBlocks { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x12660B0 Offset: 0x12660B0 VA: 0x12660B0
	public void .ctor() { }

	// RVA: 0x12661D0 Offset: 0x12661D0 VA: 0x12661D0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1266250 Offset: 0x1266250 VA: 0x1266250 Slot: 5
	protected override void Dispose(bool disposing) { }

	// RVA: 0x12662D0 Offset: 0x12662D0 VA: 0x12662D0 Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x12663A8 Offset: 0x12663A8 VA: 0x12663A8 Slot: 13
	public override void set_Key(byte[] value) { }

	// RVA: 0x1266674 Offset: 0x1266674 VA: 0x1266674 Slot: 28
	public bool get_CanReuseTransform() { }

	// RVA: 0x126667C Offset: 0x126667C VA: 0x126667C Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x12666A8 Offset: 0x12666A8 VA: 0x12666A8 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV) { }

	// RVA: 0x12666E0 Offset: 0x12666E0 VA: 0x12666E0 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x1266744 Offset: 0x1266744 VA: 0x1266744 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0x12667FC Offset: 0x12667FC VA: 0x12667FC Slot: 29
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x1266804 Offset: 0x1266804 VA: 0x1266804 Slot: 30
	public int get_InputBlockSize() { }

	// RVA: 0x126680C Offset: 0x126680C VA: 0x126680C Slot: 31
	public int get_OutputBlockSize() { }

	// RVA: 0x1266490 Offset: 0x1266490 VA: 0x1266490
	private void KeySetup(byte[] key) { }

	// RVA: 0x1266814 Offset: 0x1266814 VA: 0x1266814
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x1266960 Offset: 0x1266960 VA: 0x1266960 Slot: 32
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x1266AD0 Offset: 0x1266AD0 VA: 0x1266AD0
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x1266D88 Offset: 0x1266D88 VA: 0x1266D88 Slot: 33
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert // TypeDefIndex: 1817
{
	// Methods

	// RVA: 0x1266E2C Offset: 0x1266E2C VA: 0x1266E2C
	private static int ToInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x1266F20 Offset: 0x1266F20 VA: 0x1266F20
	private static uint ToUInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x1267014 Offset: 0x1267014 VA: 0x1267014
	private static byte[] Trim(byte[] array) { }

	// RVA: 0x1265AFC Offset: 0x1265AFC VA: 0x1265AFC
	public static RSA FromCapiPrivateKeyBlob(byte[] blob) { }

	// RVA: 0x12670F4 Offset: 0x12670F4 VA: 0x12670F4
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x1267848 Offset: 0x1267848 VA: 0x1267848
	public static string ToHex(byte[] input) { }

	// RVA: 0x1267998 Offset: 0x1267998 VA: 0x1267998
	private static byte FromHexChar(char c) { }

	// RVA: 0x1267A68 Offset: 0x1267A68 VA: 0x1267A68
	public static byte[] FromHex(string hex) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder // TypeDefIndex: 1818
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x12684E8 Offset: 0x12684E8 VA: 0x12684E8
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x126677C Offset: 0x126677C VA: 0x126677C
	public static byte[] Key(int size) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD2 : HashAlgorithm // TypeDefIndex: 1819
{
	// Methods

	// RVA: 0x1268558 Offset: 0x1268558 VA: 0x1268558
	protected void .ctor() { }

	// RVA: 0x1268584 Offset: 0x1268584 VA: 0x1268584
	public static MD2 Create() { }

	// RVA: 0x12685CC Offset: 0x12685CC VA: 0x12685CC
	public static MD2 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD2Managed : MD2 // TypeDefIndex: 1820
{
	// Fields
	private byte[] state; // 0x28
	private byte[] checksum; // 0x30
	private byte[] buffer; // 0x38
	private int count; // 0x40
	private byte[] x; // 0x48
	private static readonly byte[] PI_SUBST; // 0x0

	// Methods

	// RVA: 0x12686E4 Offset: 0x12686E4 VA: 0x12686E4
	public void .ctor() { }

	// RVA: 0x1268790 Offset: 0x1268790 VA: 0x1268790
	private static void .cctor() { }

	// RVA: 0x126880C Offset: 0x126880C VA: 0x126880C
	private byte[] Padding(int nLength) { }

	// RVA: 0x12688C8 Offset: 0x12688C8 VA: 0x12688C8 Slot: 17
	public override void Initialize() { }

	// RVA: 0x1268934 Offset: 0x1268934 VA: 0x1268934 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x1268D84 Offset: 0x1268D84 VA: 0x1268D84 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x1268A20 Offset: 0x1268A20 VA: 0x1268A20
	private void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public abstract class MD4 : HashAlgorithm // TypeDefIndex: 1821
{
	// Methods

	// RVA: 0x1268EDC Offset: 0x1268EDC VA: 0x1268EDC
	protected void .ctor() { }

	// RVA: 0x1268F08 Offset: 0x1268F08 VA: 0x1268F08
	public static MD4 Create() { }

	// RVA: 0x1268F50 Offset: 0x1268F50 VA: 0x1268F50
	public static MD4 Create(string hashName) { }
}

// Namespace: Mono.Security.Cryptography
public class MD4Managed : MD4 // TypeDefIndex: 1822
{
	// Fields
	private uint[] state; // 0x28
	private byte[] buffer; // 0x30
	private uint[] count; // 0x38
	private uint[] x; // 0x40
	private byte[] digest; // 0x48

	// Methods

	// RVA: 0x1269068 Offset: 0x1269068 VA: 0x1269068
	public void .ctor() { }

	// RVA: 0x1269134 Offset: 0x1269134 VA: 0x1269134 Slot: 17
	public override void Initialize() { }

	// RVA: 0x12692AC Offset: 0x12692AC VA: 0x12692AC Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x126A414 Offset: 0x126A414 VA: 0x126A414 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x126A6EC Offset: 0x126A6EC VA: 0x126A6EC
	private byte[] Padding(int nLength) { }

	// RVA: 0x126A780 Offset: 0x126A780 VA: 0x126A780
	private uint F(uint x, uint y, uint z) { }

	// RVA: 0x126A790 Offset: 0x126A790 VA: 0x126A790
	private uint G(uint x, uint y, uint z) { }

	// RVA: 0x126A7A4 Offset: 0x126A7A4 VA: 0x126A7A4
	private uint H(uint x, uint y, uint z) { }

	// RVA: 0x126A7B0 Offset: 0x126A7B0 VA: 0x126A7B0
	private uint ROL(uint x, byte n) { }

	// RVA: 0x126A7C0 Offset: 0x126A7C0 VA: 0x126A7C0
	private void FF(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x126A7EC Offset: 0x126A7EC VA: 0x126A7EC
	private void GG(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x126A828 Offset: 0x126A828 VA: 0x126A828
	private void HH(ref uint a, uint b, uint c, uint d, uint x, byte s) { }

	// RVA: 0x126A530 Offset: 0x126A530 VA: 0x126A530
	private void Encode(byte[] output, uint[] input) { }

	// RVA: 0x126A85C Offset: 0x126A85C VA: 0x126A85C
	private void Decode(uint[] output, byte[] input, int index) { }

	// RVA: 0x1269498 Offset: 0x1269498 VA: 0x1269498
	private void MD4Transform(uint[] state, byte[] block, int index) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS1 // TypeDefIndex: 1823
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x8
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x18

	// Methods

	// RVA: 0x126AEFC Offset: 0x126AEFC VA: 0x126AEFC
	private static void .cctor() { }

	// RVA: 0x126B010 Offset: 0x126B010 VA: 0x126B010
	private static bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x126B0DC Offset: 0x126B0DC VA: 0x126B0DC
	public static byte[] I2OSP(byte[] x, int size) { }

	// RVA: 0x126B188 Offset: 0x126B188 VA: 0x126B188
	public static byte[] OS2IP(byte[] x) { }

	// RVA: 0x126B270 Offset: 0x126B270 VA: 0x126B270
	public static byte[] RSASP1(RSA rsa, byte[] m) { }

	// RVA: 0x126B2AC Offset: 0x126B2AC VA: 0x126B2AC
	public static byte[] RSAVP1(RSA rsa, byte[] s) { }

	// RVA: 0x126B2E4 Offset: 0x126B2E4 VA: 0x126B2E4
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue) { }

	// RVA: 0x126B784 Offset: 0x126B784 VA: 0x126B784
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature) { }

	// RVA: 0x126B814 Offset: 0x126B814 VA: 0x126B814
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding) { }

	// RVA: 0x126B3A8 Offset: 0x126B3A8 VA: 0x126B3A8
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength) { }
}

// Namespace: Mono.Security.Cryptography
public sealed class PKCS8 // TypeDefIndex: 1824
{}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 1825
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public string Algorithm { set; }
	public byte[] PrivateKey { get; set; }

	// Methods

	// RVA: 0x126C314 Offset: 0x126C314 VA: 0x126C314
	public void .ctor() { }

	// RVA: 0x126C384 Offset: 0x126C384 VA: 0x126C384
	public void .ctor(byte[] data) { }

	// RVA: 0x126C640 Offset: 0x126C640 VA: 0x126C640
	public void set_Algorithm(string value) { }

	// RVA: 0x126C648 Offset: 0x126C648 VA: 0x126C648
	public byte[] get_PrivateKey() { }

	// RVA: 0x126C714 Offset: 0x126C714 VA: 0x126C714
	public void set_PrivateKey(byte[] value) { }

	// RVA: 0x126C3B0 Offset: 0x126C3B0 VA: 0x126C3B0
	private void Decode(byte[] data) { }

	// RVA: 0x126C82C Offset: 0x126C82C VA: 0x126C82C
	public byte[] GetBytes() { }

	// RVA: 0x126CD00 Offset: 0x126CD00 VA: 0x126CD00
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x126CDD4 Offset: 0x126CDD4 VA: 0x126CDD4
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x126CE8C Offset: 0x126CE8C VA: 0x126CE8C
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x126D294 Offset: 0x126D294 VA: 0x126D294
	public static byte[] Encode(RSA rsa) { }

	// RVA: 0x126D4FC Offset: 0x126D4FC VA: 0x126D4FC
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }

	// RVA: 0x126D63C Offset: 0x126D63C VA: 0x126D63C
	public static byte[] Encode(DSA dsa) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 1826
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public byte[] EncryptedData { get; set; }
	public byte[] Salt { get; }
	public int IterationCount { get; set; }

	// Methods

	// RVA: 0x126BA60 Offset: 0x126BA60 VA: 0x126BA60
	public void .ctor() { }

	// RVA: 0x126BA68 Offset: 0x126BA68 VA: 0x126BA68
	public void .ctor(byte[] data) { }

	// RVA: 0x126BD2C Offset: 0x126BD2C VA: 0x126BD2C
	public string get_Algorithm() { }

	// RVA: 0x126BD34 Offset: 0x126BD34 VA: 0x126BD34
	public void set_Algorithm(string value) { }

	// RVA: 0x126BD3C Offset: 0x126BD3C VA: 0x126BD3C
	public byte[] get_EncryptedData() { }

	// RVA: 0x126BE08 Offset: 0x126BE08 VA: 0x126BE08
	public void set_EncryptedData(byte[] value) { }

	// RVA: 0x126BEF4 Offset: 0x126BEF4 VA: 0x126BEF4
	public byte[] get_Salt() { }

	// RVA: 0x126C020 Offset: 0x126C020 VA: 0x126C020
	public int get_IterationCount() { }

	// RVA: 0x126C028 Offset: 0x126C028 VA: 0x126C028
	public void set_IterationCount(int value) { }

	// RVA: 0x126BA98 Offset: 0x126BA98 VA: 0x126BA98
	private void Decode(byte[] data) { }

	// RVA: 0x126C0CC Offset: 0x126C0CC VA: 0x126C0CC
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.Cryptography
public abstract class RC4 : SymmetricAlgorithm // TypeDefIndex: 1827
{
	// Fields
	private static KeySizes[] s_legalBlockSizes; // 0x0
	private static KeySizes[] s_legalKeySizes; // 0x8

	// Properties
	public override byte[] IV { get; set; }

	// Methods

	// RVA: 0x1266134 Offset: 0x1266134 VA: 0x1266134
	public void .ctor() { }

	// RVA: 0x126D6A8 Offset: 0x126D6A8 VA: 0x126D6A8
	private static void .cctor() { }

	// RVA: 0x126D83C Offset: 0x126D83C VA: 0x126D83C Slot: 10
	public override byte[] get_IV() { }

	// RVA: 0x126D888 Offset: 0x126D888 VA: 0x126D888 Slot: 11
	public override void set_IV(byte[] value) { }

	// RVA: 0x1265A94 Offset: 0x1265A94 VA: 0x1265A94
	public static RC4 Create() { }

	// RVA: 0x126D88C Offset: 0x126D88C VA: 0x126D88C
	public static RC4 Create(string algName) { }
}

// Namespace: Mono.Security.Cryptography
public class RSAManaged : RSA // TypeDefIndex: 1828
{
	// Fields
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override int KeySize { get; }
	public override string KeyExchangeAlgorithm { get; }
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }

	// Methods

	// RVA: 0x126D9A4 Offset: 0x126D9A4 VA: 0x126D9A4
	public void .ctor() { }

	// RVA: 0x126D9AC Offset: 0x126D9AC VA: 0x126D9AC
	public void .ctor(int keySize) { }

	// RVA: 0x126DAB4 Offset: 0x126DAB4 VA: 0x126DAB4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x126DB34 Offset: 0x126DB34 VA: 0x126DB34
	private void GenerateKeyPair() { }

	// RVA: 0x126E1C0 Offset: 0x126E1C0 VA: 0x126E1C0 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x126E210 Offset: 0x126E210 VA: 0x126E210 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x126E258 Offset: 0x126E258 VA: 0x126E258
	public bool get_PublicOnly() { }

	// RVA: 0x126E31C Offset: 0x126E31C VA: 0x126E31C Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x126E364 Offset: 0x126E364 VA: 0x126E364 Slot: 14
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x126E7D4 Offset: 0x126E7D4 VA: 0x126E7D4 Slot: 13
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x126E908 Offset: 0x126E908 VA: 0x126E908 Slot: 15
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x126ECA8 Offset: 0x126ECA8 VA: 0x126ECA8 Slot: 16
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x126F12C Offset: 0x126F12C VA: 0x126F12C Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x126F3D4 Offset: 0x126F3D4 VA: 0x126F3D4 Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x126E70C Offset: 0x126E70C VA: 0x126E70C
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 1829
{
	// Methods

	// RVA: 0x126FB08 Offset: 0x126FB08 VA: 0x126FB08
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x126DE00 Offset: 0x126DE00 VA: 0x126DE00 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x126FB18 Offset: 0x126FB18 VA: 0x126FB18 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x126FB48 Offset: 0x126FB48 VA: 0x126FB48 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.X509
public class PKCS5 // TypeDefIndex: 1830
{
	// Fields
	public const string pbeWithMD2AndDESCBC = "1.2.840.113549.1.5.1";
	public const string pbeWithMD5AndDESCBC = "1.2.840.113549.1.5.3";
	public const string pbeWithMD2AndRC2CBC = "1.2.840.113549.1.5.4";
	public const string pbeWithMD5AndRC2CBC = "1.2.840.113549.1.5.6";
	public const string pbeWithSHA1AndDESCBC = "1.2.840.113549.1.5.10";
	public const string pbeWithSHA1AndRC2CBC = "1.2.840.113549.1.5.11";

	// Methods

	// RVA: 0x12A7714 Offset: 0x12A7714 VA: 0x12A7714
	public void .ctor() { }
}

// Namespace: Mono.Security.X509
public class PKCS9 // TypeDefIndex: 1831
{
	// Fields
	public const string friendlyName = "1.2.840.113549.1.9.20";
	public const string localKeyId = "1.2.840.113549.1.9.21";

	// Methods

	// RVA: 0x12A771C Offset: 0x12A771C VA: 0x12A771C
	public void .ctor() { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 1832
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x129B2F0 Offset: 0x129B2F0 VA: 0x129B2F0
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x12991E8 Offset: 0x12991E8 VA: 0x12991E8
	public string get_BagOID() { }

	// RVA: 0x12991F0 Offset: 0x12991F0 VA: 0x12991F0
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
public class PKCS12 : ICloneable // TypeDefIndex: 1833
{
	// Fields
	public const string pbeWithSHAAnd128BitRC4 = "1.2.840.113549.1.12.1.1";
	public const string pbeWithSHAAnd40BitRC4 = "1.2.840.113549.1.12.1.2";
	public const string pbeWithSHAAnd3KeyTripleDESCBC = "1.2.840.113549.1.12.1.3";
	public const string pbeWithSHAAnd2KeyTripleDESCBC = "1.2.840.113549.1.12.1.4";
	public const string pbeWithSHAAnd128BitRC2CBC = "1.2.840.113549.1.12.1.5";
	public const string pbeWithSHAAnd40BitRC2CBC = "1.2.840.113549.1.12.1.6";
	public const string keyBag = "1.2.840.113549.1.12.10.1.1";
	public const string pkcs8ShroudedKeyBag = "1.2.840.113549.1.12.10.1.2";
	public const string certBag = "1.2.840.113549.1.12.10.1.3";
	public const string crlBag = "1.2.840.113549.1.12.10.1.4";
	public const string secretBag = "1.2.840.113549.1.12.10.1.5";
	public const string safeContentsBag = "1.2.840.113549.1.12.10.1.6";
	public const string x509Certificate = "1.2.840.113549.1.9.22.1";
	public const string sdsiCertificate = "1.2.840.113549.1.9.22.2";
	public const string x509Crl = "1.2.840.113549.1.9.23.1";
	public const int CryptoApiPasswordLimit = 32;
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC3FF64 Offset: 0xC3FF64 VA: 0xC3FF64
	private static Dictionary<string, int> <>f__switch$map5; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC3FF74 Offset: 0xC3FF74 VA: 0xC3FF74
	private static Dictionary<string, int> <>f__switch$map6; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3FF84 Offset: 0xC3FF84 VA: 0xC3FF84
	private static Dictionary<string, int> <>f__switch$map7; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC3FF94 Offset: 0xC3FF94 VA: 0xC3FF94
	private static Dictionary<string, int> <>f__switch$map8; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC3FFA4 Offset: 0xC3FFA4 VA: 0xC3FFA4
	private static Dictionary<string, int> <>f__switch$map9; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC3FFB4 Offset: 0xC3FFB4 VA: 0xC3FFB4
	private static Dictionary<string, int> <>f__switch$mapA; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC3FFC4 Offset: 0xC3FFC4 VA: 0xC3FFC4
	private static Dictionary<string, int> <>f__switch$mapB; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC3FFD4 Offset: 0xC3FFD4 VA: 0xC3FFD4
	private static Dictionary<string, int> <>f__switch$mapC; // 0x40

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public ArrayList Keys { get; }
	public ArrayList Secrets { get; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; set; }

	// Methods

	// RVA: 0x1296CC0 Offset: 0x1296CC0 VA: 0x1296CC0
	public void .ctor() { }

	// RVA: 0x1296DC4 Offset: 0x1296DC4 VA: 0x1296DC4
	public void .ctor(byte[] data) { }

	// RVA: 0x1297968 Offset: 0x1297968 VA: 0x1297968
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x12979AC Offset: 0x12979AC VA: 0x12979AC
	public void .ctor(byte[] data, byte[] password) { }

	// RVA: 0x12979E8 Offset: 0x12979E8 VA: 0x12979E8
	private static void .cctor() { }

	// RVA: 0x1296FA8 Offset: 0x1296FA8 VA: 0x1296FA8
	private void Decode(byte[] data) { }

	// RVA: 0x1298934 Offset: 0x1298934 VA: 0x1298934 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1296E20 Offset: 0x1296E20 VA: 0x1296E20
	public void set_Password(string value) { }

	// RVA: 0x1298A28 Offset: 0x1298A28 VA: 0x1298A28
	public int get_IterationCount() { }

	// RVA: 0x1298A30 Offset: 0x1298A30 VA: 0x1298A30
	public void set_IterationCount(int value) { }

	// RVA: 0x1298A38 Offset: 0x1298A38 VA: 0x1298A38
	public ArrayList get_Keys() { }

	// RVA: 0x1299398 Offset: 0x1299398 VA: 0x1299398
	public ArrayList get_Secrets() { }

	// RVA: 0x129976C Offset: 0x129976C VA: 0x129976C
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x1299E18 Offset: 0x1299E18 VA: 0x1299E18
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x1297C28 Offset: 0x1297C28 VA: 0x1297C28
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x1299E44 Offset: 0x1299E44 VA: 0x1299E44
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x12991F8 Offset: 0x12991F8 VA: 0x12991F8
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x12987E4 Offset: 0x12987E4 VA: 0x12987E4
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x129A780 Offset: 0x129A780 VA: 0x129A780
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x129A970 Offset: 0x129A970 VA: 0x129A970
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x129B14C Offset: 0x129B14C VA: 0x129B14C
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x1297CF8 Offset: 0x1297CF8 VA: 0x1297CF8
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x129B328 Offset: 0x129B328 VA: 0x129B328
	private ASN1 Pkcs8ShroudedKeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x129C4EC Offset: 0x129C4EC VA: 0x129C4EC
	private ASN1 KeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x129D5CC Offset: 0x129D5CC VA: 0x129D5CC
	private ASN1 SecretBagSafeBag(byte[] secret, IDictionary attributes) { }

	// RVA: 0x129E414 Offset: 0x129E414 VA: 0x129E414
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x1297A4C Offset: 0x1297A4C VA: 0x1297A4C
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x129F3EC Offset: 0x129F3EC VA: 0x129F3EC
	public byte[] GetBytes() { }

	// RVA: 0x12A17BC Offset: 0x12A17BC VA: 0x12A17BC
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x12A17B4 Offset: 0x12A17B4 VA: 0x12A17B4
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x12A1B70 Offset: 0x12A1B70 VA: 0x12A1B70
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x12A17AC Offset: 0x12A17AC VA: 0x12A17AC
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x12A1E70 Offset: 0x12A1E70 VA: 0x12A1E70
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x12A2514 Offset: 0x12A2514 VA: 0x12A2514
	private bool CompareAsymmetricAlgorithm(AsymmetricAlgorithm a1, AsymmetricAlgorithm a2) { }

	// RVA: 0x12A2618 Offset: 0x12A2618 VA: 0x12A2618
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x12A2620 Offset: 0x12A2620 VA: 0x12A2620
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x12A2A8C Offset: 0x12A2A8C VA: 0x12A2A8C
	public void RemovePkcs8ShroudedKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x12A2EF0 Offset: 0x12A2EF0 VA: 0x12A2EF0
	public void AddKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x12A2EF8 Offset: 0x12A2EF8 VA: 0x12A2EF8
	public void AddKeyBag(AsymmetricAlgorithm aa, IDictionary attributes) { }

	// RVA: 0x12A3244 Offset: 0x12A3244 VA: 0x12A3244
	public void RemoveKeyBag(AsymmetricAlgorithm aa) { }

	// RVA: 0x12A358C Offset: 0x12A358C VA: 0x12A358C
	public void AddSecretBag(byte[] secret) { }

	// RVA: 0x12A3594 Offset: 0x12A3594 VA: 0x12A3594
	public void AddSecretBag(byte[] secret, IDictionary attributes) { }

	// RVA: 0x12A37B8 Offset: 0x12A37B8 VA: 0x12A37B8
	public void RemoveSecretBag(byte[] secret) { }

	// RVA: 0x12A39D0 Offset: 0x12A39D0 VA: 0x12A39D0
	public AsymmetricAlgorithm GetAsymmetricAlgorithm(IDictionary attrs) { }

	// RVA: 0x12A4560 Offset: 0x12A4560 VA: 0x12A4560
	public byte[] GetSecret(IDictionary attrs) { }

	// RVA: 0x12A4D08 Offset: 0x12A4D08 VA: 0x12A4D08
	public X509Certificate GetCertificate(IDictionary attrs) { }

	// RVA: 0x12A5568 Offset: 0x12A5568 VA: 0x12A5568
	public IDictionary GetAttributes(AsymmetricAlgorithm aa) { }

	// RVA: 0x12A5EE8 Offset: 0x12A5EE8 VA: 0x12A5EE8
	public IDictionary GetAttributes(X509Certificate cert) { }

	// RVA: 0x12A65D8 Offset: 0x12A65D8 VA: 0x12A65D8
	public void SaveToFile(string filename) { }

	// RVA: 0x12A6780 Offset: 0x12A6780 VA: 0x12A6780 Slot: 4
	public object Clone() { }

	// RVA: 0x12989C0 Offset: 0x12989C0 VA: 0x12989C0
	public static int get_MaximumPasswordLength() { }

	// RVA: 0x12A688C Offset: 0x12A688C VA: 0x12A688C
	public static void set_MaximumPasswordLength(int value) { }

	// RVA: 0x12A69C4 Offset: 0x12A69C4 VA: 0x12A69C4
	private static byte[] LoadFile(string filename) { }

	// RVA: 0x12A6B50 Offset: 0x12A6B50 VA: 0x12A6B50
	public static PKCS12 LoadFromFile(string filename) { }

	// RVA: 0x12A6C20 Offset: 0x12A6C20 VA: 0x12A6C20
	public static PKCS12 LoadFromFile(string filename, string password) { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 1834
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Properties
	public string HashName { get; set; }
	public int IterationCount { get; set; }
	public byte[] Password { get; set; }
	public byte[] Salt { get; set; }

	// Methods

	// RVA: 0x129A4A8 Offset: 0x129A4A8 VA: 0x129A4A8
	public void .ctor() { }

	// RVA: 0x12A6D00 Offset: 0x12A6D00 VA: 0x12A6D00
	private static void .cctor() { }

	// RVA: 0x12A6DE4 Offset: 0x12A6DE4 VA: 0x12A6DE4
	public string get_HashName() { }

	// RVA: 0x129A678 Offset: 0x129A678 VA: 0x129A678
	public void set_HashName(string value) { }

	// RVA: 0x12A6DEC Offset: 0x12A6DEC VA: 0x12A6DEC
	public int get_IterationCount() { }

	// RVA: 0x129A670 Offset: 0x129A670 VA: 0x129A670
	public void set_IterationCount(int value) { }

	// RVA: 0x12A6DF4 Offset: 0x12A6DF4 VA: 0x12A6DF4
	public byte[] get_Password() { }

	// RVA: 0x129A4B0 Offset: 0x129A4B0 VA: 0x129A4B0
	public void set_Password(byte[] value) { }

	// RVA: 0x12A6ECC Offset: 0x12A6ECC VA: 0x12A6ECC
	public byte[] get_Salt() { }

	// RVA: 0x129A59C Offset: 0x129A59C VA: 0x129A59C
	public void set_Salt(byte[] value) { }

	// RVA: 0x12A6FA4 Offset: 0x12A6FA4 VA: 0x12A6FA4
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x12A7150 Offset: 0x12A7150 VA: 0x12A7150
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x129A680 Offset: 0x129A680 VA: 0x129A680
	public byte[] DeriveKey(int size) { }

	// RVA: 0x129A700 Offset: 0x129A700 VA: 0x129A700
	public byte[] DeriveIV(int size) { }

	// RVA: 0x129F36C Offset: 0x129F36C VA: 0x129F36C
	public byte[] DeriveMAC(int size) { }
}

// Namespace: 
public enum PKCS12.DeriveBytes.Purpose // TypeDefIndex: 1835
{
	// Fields
	public int value__; // 0x0
	public const PKCS12.DeriveBytes.Purpose Key = 0;
	public const PKCS12.DeriveBytes.Purpose IV = 1;
	public const PKCS12.DeriveBytes.Purpose MAC = 2;
}

// Namespace: Mono.Security.X509
public sealed class X501 // TypeDefIndex: 1836
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC3FFE4 Offset: 0xC3FFE4 VA: 0xC3FFE4
	private static Dictionary<string, int> <>f__switch$mapD; // 0x78

	// Methods

	// RVA: 0x12A7724 Offset: 0x12A7724 VA: 0x12A7724
	private void .ctor() { }

	// RVA: 0x12A772C Offset: 0x12A772C VA: 0x12A772C
	private static void .cctor() { }

	// RVA: 0x12A7E9C Offset: 0x12A7E9C VA: 0x12A7E9C
	public static string ToString(ASN1 seq) { }

	// RVA: 0x12A88CC Offset: 0x12A88CC VA: 0x12A88CC
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x12A7FE4 Offset: 0x12A7FE4 VA: 0x12A7FE4
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }

	// RVA: 0x12A8AC4 Offset: 0x12A8AC4 VA: 0x12A8AC4
	private static X520.AttributeTypeAndValue GetAttributeFromOid(string attributeType) { }

	// RVA: 0x12A920C Offset: 0x12A920C VA: 0x12A920C
	private static bool IsOid(string oid) { }

	// RVA: 0x12A92F8 Offset: 0x12A92F8 VA: 0x12A92F8
	private static X520.AttributeTypeAndValue ReadAttribute(string value, ref int pos) { }

	// RVA: 0x12A94DC Offset: 0x12A94DC VA: 0x12A94DC
	private static bool IsHex(char c) { }

	// RVA: 0x12A95BC Offset: 0x12A95BC VA: 0x12A95BC
	private static string ReadHex(string value, ref int pos) { }

	// RVA: 0x12A9850 Offset: 0x12A9850 VA: 0x12A9850
	private static int ReadEscaped(StringBuilder sb, string value, int pos) { }

	// RVA: 0x12A9A64 Offset: 0x12A9A64 VA: 0x12A9A64
	private static int ReadQuoted(StringBuilder sb, string value, int pos) { }

	// RVA: 0x12A9C4C Offset: 0x12A9C4C VA: 0x12A9C4C
	private static string ReadValue(string value, ref int pos) { }

	// RVA: 0x12A9F74 Offset: 0x12A9F74 VA: 0x12A9F74
	public static ASN1 FromString(string rdn) { }
}

// Namespace: Mono.Security.X509
public abstract class X509Builder // TypeDefIndex: 1837
{
	// Fields
	private const string defaultHash = "SHA1";
	private string hashName; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3FFF4 Offset: 0xC3FFF4 VA: 0xC3FFF4
	private static Dictionary<string, int> <>f__switch$mapE; // 0x0

	// Properties
	public string Hash { get; set; }

	// Methods

	// RVA: 0x12AA254 Offset: 0x12AA254 VA: 0x12AA254
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract ASN1 ToBeSigned(string hashName);

	// RVA: 0x12AA2B0 Offset: 0x12AA2B0 VA: 0x12AA2B0
	protected string GetOid(string hashName) { }

	// RVA: 0x12AA5F0 Offset: 0x12AA5F0 VA: 0x12AA5F0
	public string get_Hash() { }

	// RVA: 0x12AA5F8 Offset: 0x12AA5F8 VA: 0x12AA5F8
	public void set_Hash(string value) { }

	// RVA: 0x12AA660 Offset: 0x12AA660 VA: 0x12AA660 Slot: 5
	public virtual byte[] Sign(AsymmetricAlgorithm aa) { }

	// RVA: 0x12AA7C8 Offset: 0x12AA7C8 VA: 0x12AA7C8
	private byte[] Build(ASN1 tbs, string hashoid, byte[] signature) { }

	// RVA: 0x12AA938 Offset: 0x12AA938 VA: 0x12AA938 Slot: 6
	public virtual byte[] Sign(RSA key) { }

	// RVA: 0x12AAA78 Offset: 0x12AAA78 VA: 0x12AAA78 Slot: 7
