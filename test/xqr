	[PackKeyAttribute] // RVA: 0xC60C24 Offset: 0xC60C24 VA: 0xC60C24
	public int[] vals; // 0x28
	[PackKeyAttribute] // RVA: 0xC60C5C Offset: 0xC60C5C VA: 0xC60C5C
	public int buffRate; // 0x30
	[PackKeyAttribute] // RVA: 0xC60C94 Offset: 0xC60C94 VA: 0xC60C94
	public int paramAdd; // 0x34
	[PackKeyAttribute] // RVA: 0xC60CCC Offset: 0xC60CCC VA: 0xC60CCC
	public int paramMax; // 0x38
	[PackKeyAttribute] // RVA: 0xC60D04 Offset: 0xC60D04 VA: 0xC60D04
	public int onfiledUniqueId; // 0x3C
	[PackKeyAttribute] // RVA: 0xC60D3C Offset: 0xC60D3C VA: 0xC60D3C
	public int auraEffectId; // 0x40
	[PackKeyAttribute] // RVA: 0xC60D74 Offset: 0xC60D74 VA: 0xC60D74
	public int actorId; // 0x44
	[PackKeyAttribute] // RVA: 0xC60DAC Offset: 0xC60DAC VA: 0xC60DAC
	public int ratioHpHigh; // 0x48
	[PackKeyAttribute] // RVA: 0xC60DE4 Offset: 0xC60DE4 VA: 0xC60DE4
	public int ratioHpLow; // 0x4C
	[PackKeyAttribute] // RVA: 0xC60E1C Offset: 0xC60E1C VA: 0xC60E1C
	public int ratioRangeHigh; // 0x50
	[PackKeyAttribute] // RVA: 0xC60E54 Offset: 0xC60E54 VA: 0xC60E54
	public int ratioRangeLow; // 0x54
	[PackKeyAttribute] // RVA: 0xC60E8C Offset: 0xC60E8C VA: 0xC60E8C
	public long userCommandCodeId; // 0x58
	[PackKeyAttribute] // RVA: 0xC60EC4 Offset: 0xC60EC4 VA: 0xC60EC4
	public bool isActiveCC; // 0x60
	[PackKeyAttribute] // RVA: 0xC60EFC Offset: 0xC60EFC VA: 0xC60EFC
	public int[] targetSkill; // 0x68
	[PackKeyAttribute] // RVA: 0xC60F34 Offset: 0xC60F34 VA: 0xC60F34
	public int reCharge; // 0x70
	[PackKeyAttribute] // RVA: 0xC60F6C Offset: 0xC60F6C VA: 0xC60F6C
	public int[] addIndividualty; // 0x78
	[PackKeyAttribute] // RVA: 0xC60FA4 Offset: 0xC60FA4 VA: 0xC60FA4
	public int[] linkageTargetIndividualty; // 0x80
	[PackKeyAttribute] // RVA: 0xC60FDC Offset: 0xC60FDC VA: 0xC60FDC
	public int resumptionHpFromLossMaxHp; // 0x88
	[PackKeyAttribute] // RVA: 0xC61014 Offset: 0xC61014 VA: 0xC61014
	public int addOrder; // 0x8C
	[PackKeyAttribute] // RVA: 0xC6104C Offset: 0xC6104C VA: 0xC6104C
	public int state; // 0x90
	[PackKeyAttribute] // RVA: 0xC61084 Offset: 0xC61084 VA: 0xC61084
	public BattleBuffData.FieldAliveCondData onFieldAliveCond; // 0x98
	[PackKeyAttribute] // RVA: 0xC610BC Offset: 0xC610BC VA: 0xC610BC
	public int masterCommandCodeId; // 0xA0
	[PackKeyAttribute] // RVA: 0xC610F4 Offset: 0xC610F4 VA: 0xC610F4
	public int skillId; // 0xA4
	[PackKeyAttribute] // RVA: 0xC6112C Offset: 0xC6112C VA: 0xC6112C
	public BattleBuffData.RelationOverwriteData relationOverwrite; // 0xA8
	[PackKeyAttribute] // RVA: 0xC61164 Offset: 0xC61164 VA: 0xC61164
	public int motionChange; // 0xB0
	[PackKeyAttribute] // RVA: 0xC6119C Offset: 0xC6119C VA: 0xC6119C
	public bool isProgressEndEnemyTurn; // 0xB4
	[PackKeyAttribute] // RVA: 0xC611D4 Offset: 0xC611D4 VA: 0xC611D4
	public int progressTurnCond; // 0xB8
	[PackKeyAttribute] // RVA: 0xC6120C Offset: 0xC6120C VA: 0xC6120C
	public int grantSkillType; // 0xBC
	[PackKeyAttribute] // RVA: 0xC61244 Offset: 0xC61244 VA: 0xC61244
	public bool isProgressSelfTurn; // 0xC0
	[PackKeyAttribute] // RVA: 0xC6127C Offset: 0xC6127C VA: 0xC6127C
	public int[] servantCardIdsIndexArray; // 0xC8
	[PackKeyAttribute] // RVA: 0xC612B4 Offset: 0xC612B4 VA: 0xC612B4
	public int cardEffectId; // 0xD0
	[PackKeyAttribute] // RVA: 0xC612EC Offset: 0xC612EC VA: 0xC612EC
	public bool isTakeOverNextBattle; // 0xD4
	[PackKeyAttribute] // RVA: 0xC61324 Offset: 0xC61324 VA: 0xC61324
	public int[] attachTargets; // 0xD8
	[PackKeyAttribute] // RVA: 0xC6135C Offset: 0xC6135C VA: 0xC6135C
	public int[] paramAddSelfIndividuality; // 0xE0
	[PackKeyAttribute] // RVA: 0xC61394 Offset: 0xC61394 VA: 0xC61394
	public int[] paramAddOpIndividuality; // 0xE8
	[PackKeyAttribute] // RVA: 0xC613CC Offset: 0xC613CC VA: 0xC613CC
	public int[] paramAddFieldIndividuality; // 0xF0
	[PackKeyAttribute] // RVA: 0xC61404 Offset: 0xC61404 VA: 0xC61404
	public int paramAddValue; // 0xF8
	[PackKeyAttribute] // RVA: 0xC6143C Offset: 0xC6143C VA: 0xC6143C
	public int paramAddMax; // 0xFC
	[PackKeyAttribute] // RVA: 0xC61474 Offset: 0xC61474 VA: 0xC61474
	public int[] upBuffRateBuffType; // 0x100
	[PackKeyAttribute] // RVA: 0xC614AC Offset: 0xC614AC VA: 0xC614AC
	public int maxBuffRate; // 0x108
	[PackKeyAttribute] // RVA: 0xC614E4 Offset: 0xC614E4 VA: 0xC614E4
	public int paramAddMaxCount; // 0x10C
	[PackKeyAttribute] // RVA: 0xC6151C Offset: 0xC6151C VA: 0xC6151C
	public int onPartyUniqueId; // 0x110
	[PackKeyAttribute] // RVA: 0xC61554 Offset: 0xC61554 VA: 0xC61554
	public int counterId; // 0x114
	[PackKeyAttribute] // RVA: 0xC6158C Offset: 0xC6158C VA: 0xC6158C
	public int counterLv; // 0x118
	[PackKeyAttribute] // RVA: 0xC615C4 Offset: 0xC615C4 VA: 0xC615C4
	public int counterOc; // 0x11C
	[PackKeyAttribute] // RVA: 0xC615FC Offset: 0xC615FC VA: 0xC615FC
	public bool isUseTreasureDevice; // 0x120
	[PackKeyAttribute] // RVA: 0xC61634 Offset: 0xC61634 VA: 0xC61634
	public bool isSkillReaction; // 0x121
	private const int SHOW_STATE = 1;
	private const int HIDE_STATE = -1;
	private const int SHOW_DEFF_STATE = -2;
	private const int SHOW_STATE_STATUS_BUFF_ONLY = 2;
	private const int SHOW_STATE_DAMAGE_AND_COMMANDCARD_BUFF = 3;
	private bool _isRemove; // 0x122
	private int _removeBuffId; // 0x124

	// Properties
	public bool isRemove { get; set; }
	public int removeBuffId { get; set; }
	public int DispTurn { get; }

	// Methods

	// RVA: 0x178C4E0 Offset: 0x178C4E0 VA: 0x178C4E0
	public void .ctor() { }

	// RVA: 0x178A4D0 Offset: 0x178A4D0 VA: 0x178A4D0
	public void onState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x1791F60 Offset: 0x1791F60 VA: 0x1791F60
	public void offState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x17870DC Offset: 0x17870DC VA: 0x17870DC
	public bool checkState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x1785A68 Offset: 0x1785A68 VA: 0x1785A68
	public bool get_isRemove() { }

	// RVA: 0x178C510 Offset: 0x178C510 VA: 0x178C510
	public void set_isRemove(bool value) { }

	// RVA: 0x17953FC Offset: 0x17953FC VA: 0x17953FC
	public int get_removeBuffId() { }

	// RVA: 0x178C51C Offset: 0x178C51C VA: 0x178C51C
	public void set_removeBuffId(int value) { }

	// RVA: 0x1795404 Offset: 0x1795404 VA: 0x1795404
	public int get_DispTurn() { }

	// RVA: 0x1795158 Offset: 0x1795158 VA: 0x1795158
	public void setShowState(int type) { }

	// RVA: 0x17860C0 Offset: 0x17860C0 VA: 0x17860C0
	public bool checkAct() { }

	// RVA: 0x178724C Offset: 0x178724C VA: 0x178724C
	public bool checkProgressTurn() { }

	// RVA: 0x1795420 Offset: 0x1795420 VA: 0x1795420
	public bool isTargetSkill() { }

	// RVA: 0x178F478 Offset: 0x178F478 VA: 0x178F478
	public bool isValidHpRange() { }

	// RVA: 0x178D924 Offset: 0x178D924 VA: 0x178D924
	public bool isActiveCommandCode() { }

	// RVA: 0x178D914 Offset: 0x178D914 VA: 0x178D914
	public bool isCommandCodeBuff() { }

	// RVA: 0x1791978 Offset: 0x1791978 VA: 0x1791978
	public bool IsMineCommandCode(long id) { }

	// RVA: 0x1788204 Offset: 0x1788204 VA: 0x1788204
	public int[] GetIndividualty(bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x179544C Offset: 0x179544C VA: 0x179544C
	public int GetUniqueId() { }

	// RVA: 0x178940C Offset: 0x178940C VA: 0x178940C
	public bool IslinkageTarget() { }

	// RVA: 0x1795454 Offset: 0x1795454 VA: 0x1795454
	public int checkRelationOrder(BattleBuffData.BuffData optBuff, bool isAttack) { }

	// RVA: 0x1794A20 Offset: 0x1794A20 VA: 0x1794A20
	public bool isEffectBuff() { }

	// RVA: 0x1791260 Offset: 0x1791260 VA: 0x1791260
	public bool CheckCond(BattleBuffData svtBuff, BuffList.ActInfo actInfo, int[] selfIndv, int[] opIndv, bool isRect) { }

	// RVA: 0x1795540 Offset: 0x1795540 VA: 0x1795540
	public bool CheckCond(BattleBuffData svtBuff, BuffList.ActInfo actInfo, int[] selfIndv, int[] opIndv, bool isRect, out int plusMinus) { }

	// RVA: 0x17938A8 Offset: 0x17938A8 VA: 0x17938A8
	public bool isEnableCommandCardBuff(BattleCommandData command) { }

	// RVA: 0x1795618 Offset: 0x1795618 VA: 0x1795618
	public void RevertUnused() { }

	// RVA: 0x178D7CC Offset: 0x178D7CC VA: 0x178D7CC
	public bool isCommandCardBuff() { }

	// RVA: 0x178F49C Offset: 0x178F49C VA: 0x178F49C
	public bool isParamAddIndividualiry() { }

	// RVA: 0x178C460 Offset: 0x178C460 VA: 0x178C460
	public bool RemoveBuffCond(int removeTo, int removeCnt, int[] individualities, bool isForceSubState) { }

	// RVA: 0x1793FE4 Offset: 0x1793FE4 VA: 0x1793FE4
	public void SetBuffNoActState(BattleServantData[] servantArray) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC8C8 Offset: 0xCCC8C8 VA: 0xCCC8C8
	// RVA: 0x1795624 Offset: 0x1795624 VA: 0x1795624
	private bool <SetBuffNoActState>m__0(BattleServantData svt) { }
}

// Namespace: 
public enum BattleBuffData.BuffData.STATEENUM // TypeDefIndex: 8802
{
	// Fields
	public int value__; // 0x0
	public const BattleBuffData.BuffData.STATEENUM NOFIELD = 1;
	public const BattleBuffData.BuffData.STATEENUM BOOST = 2;
	public const BattleBuffData.BuffData.STATEENUM ISSHOW = 4;
	public const BattleBuffData.BuffData.STATEENUM ISHIDE = 8;
	public const BattleBuffData.BuffData.STATEENUM NOACT = 16;
	public const BattleBuffData.BuffData.STATEENUM COND = 32;
	public const BattleBuffData.BuffData.STATEENUM FRAME = 64;
	public const BattleBuffData.BuffData.STATEENUM ISHIDEPARAM = 128;
	public const BattleBuffData.BuffData.STATEENUM ISAPPID = 256;
	public const BattleBuffData.BuffData.STATEENUM ISSHOWCOMMAND = 512;
	public const BattleBuffData.BuffData.STATEENUM ISSHOWDEFF = 1024;
	public const BattleBuffData.BuffData.STATEENUM ISOPPONENTONLY = 2048;
	public const BattleBuffData.BuffData.STATEENUM IS_SHOW_STATUS_BUFF_ONLY = 4096;
	public const BattleBuffData.BuffData.STATEENUM IS_SHOW_DAMAGE_AND_COMMANDCARD_BUFF = 8192;
	public const BattleBuffData.BuffData.STATEENUM NO_FIELD_COUNT = 16384;
	public const BattleBuffData.BuffData.STATEENUM INVALID_HIDE = 32768;
	public const BattleBuffData.BuffData.STATEENUM IGNORE_INDIVIDUALITY = 65536;
	public const BattleBuffData.BuffData.STATEENUM FORCE_NOACT = 131072;
	public const BattleBuffData.BuffData.STATEENUM NO_TARGET_NOACT = 262144;
	public const BattleBuffData.BuffData.STATEENUM UNSUBSTATE = 524288;
	public const BattleBuffData.BuffData.STATEENUM IGNORE_INDIV_UNRELEASEABLE = 1048576;
	public const BattleBuffData.BuffData.STATEENUM SKILL_ACTOR_NOT_IN_PARTY_NOACT = 2097152;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B54 Offset: 0xC43B54 VA: 0xC43B54
private sealed class BattleBuffData.BuffData.<isEnableCommandCardBuff>c__AnonStorey0 // TypeDefIndex: 8803
{
	// Fields
	internal BattleCommandData command; // 0x10

	// Methods

	// RVA: 0x1795610 Offset: 0x1795610 VA: 0x1795610
	public void .ctor() { }

	// RVA: 0x1795668 Offset: 0x1795668 VA: 0x1795668
	internal bool <>m__0(int index) { }
}

// Namespace: 
public class BattleBuffData.CheckInvokeBuff // TypeDefIndex: 8804
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC6166C Offset: 0xC6166C VA: 0xC6166C
	[DebuggerBrowsableAttribute] // RVA: 0xC6166C Offset: 0xC6166C VA: 0xC6166C
	private BattleServantData <SelfSvt>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC616A8 Offset: 0xC616A8 VA: 0xC616A8
	[DebuggerBrowsableAttribute] // RVA: 0xC616A8 Offset: 0xC616A8 VA: 0xC616A8
	private BattleServantData <TargetSvt>k__BackingField; // 0x18
	protected BuffList.ACTION[] checkActs; // 0x20

	// Properties
	public BattleServantData SelfSvt { get; set; }
	public BattleServantData TargetSvt { get; set; }

	// Methods

	// RVA: 0x179580C Offset: 0x179580C VA: 0x179580C
	public void .ctor(BattleServantData selfSvt, BattleServantData targetSvt, BuffList.ACTION[] actions) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC8D8 Offset: 0xCCC8D8 VA: 0xCCC8D8
	// RVA: 0x179584C Offset: 0x179584C VA: 0x179584C
	private void set_SelfSvt(BattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC8E8 Offset: 0xCCC8E8 VA: 0xCCC8E8
	// RVA: 0x179585C Offset: 0x179585C VA: 0x179585C
	public BattleServantData get_SelfSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC8F8 Offset: 0xCCC8F8 VA: 0xCCC8F8
	// RVA: 0x1795854 Offset: 0x1795854 VA: 0x1795854
	private void set_TargetSvt(BattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC908 Offset: 0xCCC908 VA: 0xCCC908
	// RVA: 0x1795864 Offset: 0x1795864 VA: 0x1795864
	public BattleServantData get_TargetSvt() { }

	// RVA: 0x179586C Offset: 0x179586C VA: 0x179586C Slot: 4
	public virtual bool IsInvoke(BattleBuffData.BuffData buff, BattleCommandData command) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B64 Offset: 0xC43B64 VA: 0xC43B64
private sealed class BattleBuffData.CheckInvokeBuff.<IsInvoke>c__AnonStorey0 // TypeDefIndex: 8805
{
	// Fields
	internal BattleBuffData.BuffData buff; // 0x10
	internal int[] selfIndv; // 0x18
	internal int[] opIndv; // 0x20
	internal BattleBuffData.CheckInvokeBuff $this; // 0x28

	// Methods

	// RVA: 0x1795994 Offset: 0x1795994 VA: 0x1795994
	public void .ctor() { }

	// RVA: 0x179599C Offset: 0x179599C VA: 0x179599C
	internal bool <>m__0(BuffList.ACTION act) { }
}

// Namespace: 
public class BattleBuffData.SaveData // TypeDefIndex: 8806
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC616E4 Offset: 0xC616E4 VA: 0xC616E4
	public BattleBuffData.BuffData[] passive; // 0x10
	[PackKeyAttribute] // RVA: 0xC6171C Offset: 0xC6171C VA: 0xC6171C
	public BattleBuffData.BuffData[] active; // 0x18
	[PackKeyAttribute] // RVA: 0xC61754 Offset: 0xC61754 VA: 0xC61754
	public int addBuffOrder; // 0x20

	// Methods

	// RVA: 0x178CEE8 Offset: 0x178CEE8 VA: 0x178CEE8
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B74 Offset: 0xC43B74 VA: 0xC43B74
private sealed class BattleBuffData.<getShowServantParam>c__AnonStorey0 // TypeDefIndex: 8807
{
	// Fields
	internal List<BattleBuffData.ShowBuffData> reList; // 0x10
	internal BattleBuffData $this; // 0x18

	// Methods

	// RVA: 0x178657C Offset: 0x178657C VA: 0x178657C
	public void .ctor() { }

	// RVA: 0x17951C8 Offset: 0x17951C8 VA: 0x17951C8
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B84 Offset: 0xC43B84 VA: 0xC43B84
private sealed class BattleBuffData.<DebugGetShowServantParamAll>c__AnonStorey1 // TypeDefIndex: 8808
{
	// Fields
	internal List<BattleBuffData.ShowBuffData> reList; // 0x10

	// Methods

	// RVA: 0x1786AE8 Offset: 0x1786AE8 VA: 0x1786AE8
	public void .ctor() { }

	// RVA: 0x1794DE4 Offset: 0x1794DE4 VA: 0x1794DE4
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B94 Offset: 0xC43B94 VA: 0xC43B94
private sealed class BattleBuffData.<CheckBuffGroup>c__AnonStorey2 // TypeDefIndex: 8809
{
	// Fields
	internal int attachTarget; // 0x10

	// Methods

	// RVA: 0x178AB90 Offset: 0x178AB90 VA: 0x178AB90
	public void .ctor() { }

	// RVA: 0x1794D9C Offset: 0x1794D9C VA: 0x1794D9C
	internal bool <>m__0(int target) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BA4 Offset: 0xC43BA4 VA: 0xC43BA4
private sealed class BattleBuffData.<GetGrantBuffTypeArray>c__AnonStorey3 // TypeDefIndex: 8810
{
	// Fields
	internal List<int> buffTypeList; // 0x10
	internal BattleBuffData $this; // 0x18

	// Methods

	// RVA: 0x178C768 Offset: 0x178C768 VA: 0x178C768
	public void .ctor() { }

	// RVA: 0x1794E70 Offset: 0x1794E70 VA: 0x1794E70
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BB4 Offset: 0xC43BB4 VA: 0xC43BB4
private sealed class BattleBuffData.<getRectBuffList>c__AnonStorey4 // TypeDefIndex: 8811
{
	// Fields
	internal BuffEntity ent; // 0x10

	// Methods

	// RVA: 0x178D7C4 Offset: 0x178D7C4 VA: 0x178D7C4
	public void .ctor() { }

	// RVA: 0x1795190 Offset: 0x1795190 VA: 0x1795190
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BC4 Offset: 0xC43BC4 VA: 0xC43BC4
private sealed class BattleBuffData.<isConditionIndividuality>c__AnonStorey5 // TypeDefIndex: 8812
{
	// Fields
	internal int val; // 0x10

	// Methods

	// RVA: 0x178E100 Offset: 0x178E100 VA: 0x178E100
	public void .ctor() { }

	// RVA: 0x17953EC Offset: 0x17953EC VA: 0x17953EC
	internal bool <>m__0(int indiv) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BD4 Offset: 0xC43BD4 VA: 0xC43BD4
private sealed class BattleBuffData.<ChangeBuffState>c__AnonStorey6 // TypeDefIndex: 8813
{
	// Fields
	internal int now; // 0x10
	internal int max; // 0x14
	internal int[] servantIndv; // 0x18
	internal int[] buffIndv; // 0x20
	internal int[] fieldIndiv; // 0x28
	internal bool isValueChanged; // 0x30
	internal BattleBuffData $this; // 0x38

	// Methods

	// RVA: 0x178E3BC Offset: 0x178E3BC VA: 0x178E3BC
	public void .ctor() { }

	// RVA: 0x1794C0C Offset: 0x1794C0C VA: 0x1794C0C
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BE4 Offset: 0xC43BE4 VA: 0xC43BE4
private sealed class BattleBuffData.<UpdateForceAllBuffNoAct>c__AnonStorey7 // TypeDefIndex: 8814
{
	// Fields
	internal int showState; // 0x10

	// Methods

	// RVA: 0x178E4B4 Offset: 0x178E4B4 VA: 0x178E4B4
	public void .ctor() { }

	// RVA: 0x17950E0 Offset: 0x17950E0 VA: 0x17950E0
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43BF4 Offset: 0xC43BF4 VA: 0xC43BF4
private sealed class BattleBuffData.<CheckBuffType>c__AnonStorey8 // TypeDefIndex: 8815
{
	// Fields
	internal BuffEntity buffEnt; // 0x10

	// Methods

	// RVA: 0x179128C Offset: 0x179128C VA: 0x179128C
	public void .ctor() { }

	// RVA: 0x1794DAC Offset: 0x1794DAC VA: 0x1794DAC
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C04 Offset: 0xC43C04 VA: 0xC43C04
private sealed class BattleBuffData.<InitializeShift>c__AnonStorey9 // TypeDefIndex: 8816
{
	// Fields
	internal int actorId; // 0x10
	internal int[] buffindivs; // 0x18
	internal BattleBuffData $this; // 0x20

	// Methods

	// RVA: 0x17915A4 Offset: 0x17915A4 VA: 0x17915A4
	public void .ctor() { }

	// RVA: 0x1794FAC Offset: 0x1794FAC VA: 0x1794FAC
	internal bool <>m__0(BattleBuffData.BuffData s) { }

	// RVA: 0x1794FE8 Offset: 0x1794FE8 VA: 0x1794FE8
	internal bool <>m__1(BattleBuffData.BuffData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C14 Offset: 0xC43C14 VA: 0xC43C14
private sealed class BattleBuffData.<GetSkillTypeBuff>c__AnonStoreyA // TypeDefIndex: 8817
{
	// Fields
	internal List<int> targetSkillList; // 0x10

	// Methods

	// RVA: 0x179224C Offset: 0x179224C VA: 0x179224C
	public void .ctor() { }

	// RVA: 0x1794F2C Offset: 0x1794F2C VA: 0x1794F2C
	internal bool <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C24 Offset: 0xC43C24 VA: 0xC43C24
private sealed class BattleBuffData.<UpdateBuffAddOrder>c__AnonStoreyB // TypeDefIndex: 8818
{
	// Fields
	internal int addPassiveMaxOrder; // 0x10

	// Methods

	// RVA: 0x1792998 Offset: 0x1792998 VA: 0x1792998
	public void .ctor() { }

	// RVA: 0x1795028 Offset: 0x1795028 VA: 0x1795028
	internal void <>m__0(BattleBuffData.BuffData x) { }

	// RVA: 0x1795084 Offset: 0x1795084 VA: 0x1795084
	internal void <>m__1(BattleBuffData.BuffData x) { }
}

// Namespace: 
public interface BuffInterface // TypeDefIndex: 8819
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void setBuffState();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int getBuffStateValue(BuffList.CHANGEVALUE changeValue, int ratioParam);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int getBuffRangeValue(int lowEffectValue, int highEffectValue, int lowRange, int highRange);
}

// Namespace: 
public abstract class BattleCallBackBase // TypeDefIndex: 8820
{
	// Methods

	// RVA: 0x1796424 Offset: 0x1796424 VA: 0x1796424
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void call();
}

// Namespace: 
public class BattleCallBack<T> : BattleCallBackBase // TypeDefIndex: 8821
{
	// Fields
	private T argument; // 0x0
	private Action<T> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T argument, Action<T> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x22570A0 Offset: 0x22570A0 VA: 0x22570A0
	|-BattleCallBack<BattleActionData>..ctor
	|-BattleCallBack<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x22570E4 Offset: 0x22570E4 VA: 0x22570E4
	|-BattleCallBack<object>.call
	*/
}

// Namespace: 
public class BattleCallBack<T1, T2> : BattleCallBackBase // TypeDefIndex: 8822
{
	// Fields
	private T1 arg1; // 0x0
	private T2 arg2; // 0x0
	private Action<T1, T2> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T1 arg1, T2 arg2, Action<T1, T2> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2257130 Offset: 0x2257130 VA: 0x2257130
	|-BattleCallBack<BattleServantParamComponent, ShiftHpData>..ctor
	|-BattleCallBack<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x225717C Offset: 0x225717C VA: 0x225717C
	|-BattleCallBack<object, object>.call
	*/
}

// Namespace: 
public class BattleCallBack<T1, T2, T3> : BattleCallBackBase // TypeDefIndex: 8823
{
	// Fields
	private T1 arg1; // 0x0
	private T2 arg2; // 0x0
	private T3 arg3; // 0x0
	private Action<T1, T2, T3> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T1 arg1, T2 arg2, T3 arg3, Action<T1, T2, T3> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x225719C Offset: 0x225719C VA: 0x225719C
	|-BattleCallBack<int, bool, bool>..ctor
	|
	|-RVA: 0x225722C Offset: 0x225722C VA: 0x225722C
	|-BattleCallBack<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2257204 Offset: 0x2257204 VA: 0x2257204
	|-BattleCallBack<int, bool, bool>.call
	|
	|-RVA: 0x2257284 Offset: 0x2257284 VA: 0x2257284
	|-BattleCallBack<object, object, object>.call
	*/
}

// Namespace: 
public class BattleCallBack : BattleCallBackBase // TypeDefIndex: 8824
{
	// Fields
	private Action callBack; // 0x10

	// Methods

	// RVA: 0x17963F8 Offset: 0x17963F8 VA: 0x17963F8
	public void .ctor(Action callBack) { }

	// RVA: 0x179642C Offset: 0x179642C VA: 0x179642C Slot: 4
	public override void call() { }
}

// Namespace: 
public class BattleCameraHitJudgment : MonoBehaviour // TypeDefIndex: 8825
{
	// Fields
	private Dictionary<MeshCollider, Action> targetColliderAction; // 0x18
	private Dictionary<MeshCollider, SkinnedMeshRenderer> targetSkinnedMesh; // 0x20
	private Dictionary<MeshCollider, int> targetColliderUIColliderIndex; // 0x28
	private Dictionary<MeshCollider, int> targetSvtId; // 0x30
	private List<SkinnedMeshRenderer> updatedSkinnedMeshs; // 0x38
	private Dictionary<SkinnedMeshRenderer, Bounds> prevSkinnedMeshBounds; // 0x40
	private int[] xScaleApplySvtId; // 0x48
	private Camera battleActorCamera; // 0x50
	private BattlePerformance battlePerformance; // 0x58
	[SerializeField] // RVA: 0xC6178C Offset: 0xC6178C VA: 0xC6178C
	private Transform enemyInputRoot; // 0x60
	private Vector3 enemyInputRootDefaultPosition; // 0x68
	private Vector3 enemyInputRootDefaultScale; // 0x74
	[SerializeField] // RVA: 0xC6179C Offset: 0xC6179C VA: 0xC6179C
	private BattleValueButtonComponent[] uiColliderAction; // 0x80
	[SerializeField] // RVA: 0xC617AC Offset: 0xC617AC VA: 0xC617AC
	private BoxCollider[] uiCollider; // 0x88
	[SerializeField] // RVA: 0xC617BC Offset: 0xC617BC VA: 0xC617BC
	private float BakeMeshThresholdValue; // 0x90
	private Camera battleUICamera; // 0x98
	private bool isTouched; // 0xA0
	private Collider touchedCollision; // 0xA8
	private int touchFinderID; // 0xB0

	// Properties
	private int[] XScaleApplySvtId { get; }

	// Methods

	// RVA: 0x179645C Offset: 0x179645C VA: 0x179645C
	public void .ctor() { }

	// RVA: 0x17965DC Offset: 0x17965DC VA: 0x17965DC
	private int[] get_XScaleApplySvtId() { }

	// RVA: 0x179669C Offset: 0x179669C VA: 0x179669C
	private void Awake() { }

	// RVA: 0x1796700 Offset: 0x1796700 VA: 0x1796700
	public void SetCamera(Camera camera) { }

	// RVA: 0x1796708 Offset: 0x1796708 VA: 0x1796708
	public void SetUICamera(Camera camera) { }

	// RVA: 0x1796710 Offset: 0x1796710 VA: 0x1796710
	public void SetBattlePerformance(BattlePerformance battlePerformance) { }

	// RVA: 0x1796718 Offset: 0x1796718 VA: 0x1796718
	public void Clear() { }

	// RVA: 0x179682C Offset: 0x179682C VA: 0x179682C
	public void AddCollider(MeshCollider collider, SkinnedMeshRenderer skinnedMesh, int uiColliderIndex, int svtId, Action clickAction, bool isEnableUiCollider) { }

	// RVA: 0x1796A38 Offset: 0x1796A38 VA: 0x1796A38
	public void RemoveCollider(MeshCollider collider) { }

	// RVA: 0x1796C78 Offset: 0x1796C78 VA: 0x1796C78
	private void BakeMesh(MeshCollider meshCollider, SkinnedMeshRenderer skinnedMesh) { }

	// RVA: 0x17972BC Offset: 0x17972BC VA: 0x17972BC
	private void LateUpdate() { }

	// RVA: 0x1796C64 Offset: 0x1796C64 VA: 0x1796C64
	private void ClearTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC918 Offset: 0xCCC918 VA: 0xCCC918
	// RVA: 0x1798300 Offset: 0x1798300 VA: 0x1798300
	private bool <LateUpdate>m__0(BoxCollider x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43C34 Offset: 0xC43C34 VA: 0xC43C34
private sealed class BattleCameraHitJudgment.<BakeMesh>c__AnonStorey0 // TypeDefIndex: 8826
{
	// Fields
	internal int svtId; // 0x10

	// Methods

	// RVA: 0x17972B4 Offset: 0x17972B4 VA: 0x17972B4
	public void .ctor() { }

	// RVA: 0x179837C Offset: 0x179837C VA: 0x179837C
	internal bool <>m__0(int x) { }
}

// Namespace: 
public class BattleCutInComponent : BaseMonoBehaviour // TypeDefIndex: 8827
{
	// Fields
	public UISprite sprite; // 0x18
	public UILabel label; // 0x20
	private Hashtable table; // 0x28
	private Vector3 startTr; // 0x30
	private Vector3 endTr; // 0x3C
	private float totaltime; // 0x48

	// Methods

	// RVA: 0x104745C Offset: 0x104745C VA: 0x104745C
	public void .ctor() { }

	// RVA: 0x10474C4 Offset: 0x10474C4 VA: 0x10474C4
	public void setData(int Id, int type, Vector3 startt, Vector3 endt, float time, string param) { }

	// RVA: 0x1047624 Offset: 0x1047624 VA: 0x1047624
	public void startAction() { }

	// RVA: 0x10477CC Offset: 0x10477CC VA: 0x10477CC
	public void onStartComp() { }

	// RVA: 0x10479BC Offset: 0x10479BC VA: 0x10479BC
	public void onEndComp() { }
}

// Namespace: 
public class BattleData : MonoBehaviour, AiInterface // TypeDefIndex: 8828
{
	// Fields
	public PlayMakerFSM rootfsm; // 0x18
	public PlayMakerFSM fsm; // 0x20
	public BattleData data; // 0x28
	public BattleLogic logic; // 0x30
	public BattlePerformance perf; // 0x38
	private BattleEntity battle_ent; // 0x40
	private BattleInfoData battle_info; // 0x48
	private QuestEntity quest_ent; // 0x50
	private QuestPhaseEntity questphase_ent; // 0x58
	private List<int> questIndividuality; // 0x60
	public int masterSkillIconId; // 0x68
	public List<BattleSkillInfoData> masterSkillInfo; // 0x70
	public List<BattleBoostItemInfoData> boostSkillInfo; // 0x78
	public List<BattleServantData> player_datalist; // 0x80
	private List<AiNpcBattleServantData> aiNpcDataList; // 0x88
	public BattleFieldData[] field_datalist; // 0x90
	public BattleCommandData[] p_cmlist; // 0x98
	public List<BattleServantData> enemy_datalist; // 0xA0
	public EnemyMstBattleEntity enemyMasterInfo; // 0xA8
	public int initturn; // 0xB0
	public int wavecount; // 0xB4
	public int turnCount; // 0xB8
	public int totalTurnCount; // 0xBC
	public int limitTurnCount; // 0xC0
	public int limitAct; // 0xC4
	public int[] turnEffect; // 0xC8
	public int turnEffectType; // 0xD0
	public int changeBgId; // 0xD4
	public int changeBgType; // 0xD8
	private int[] overwriteBgIndividuality; // 0xE0
	public bool turnElapsedEndBattleFlag; // 0xE8
	public bool isTurnElapsedEndBattle; // 0xE9
	public int[] waveClearNeedTurn; // 0xF0
	public List<Dictionary<string, object>> firstNpPlayList; // 0xF8
	public int stateshowturn; // 0x100
	public int enemyActCount; // 0x104
	public bool leaderDown; // 0x108
	public bool endbattleFlg; // 0x109
	public bool loseBattleFlg; // 0x10A
	public int maxEnemyUniqueID; // 0x10C
	public int maxEnemyIndex; // 0x110
	public int[] p_entryid; // 0x118
	public int[] e_entryid; // 0x120
	public int[] p_changedecklist; // 0x128
	public int countEnemyAttack; // 0x130
	public int p_maxcommand; // 0x134
	public int globaltargetId; // 0x138
	public List<int> lockTargetIdList; // 0x140
	public bool[] enemyAppearValid; // 0x148
	public int enemyMasterCommandSpellUseCnt; // 0x150
	public long maxTurnDamageRecord; // 0x158
	public long maxTurnDamageInBattle; // 0x160
	public long totalDamageInTurn; // 0x168
	public QuestKnockdownInfo currenctKnockdown; // 0x170
	public int[] waveKnockdownNums; // 0x178
	public int battleGenderType; // 0x180
	private PlayerFieldStatus playerFieldStatus; // 0x188
	private EnemyFieldStatus enemyFieldStatus; // 0x190
	public int shuffleindex; // 0x198
	public BattleCommandData[] p_shcmlist; // 0x1A0
	public BattleCommandData[] draw_commandlist; // 0x1A8
	public BattleCommandData[] selectcommandlist; // 0x1B0
	public BattleComboData combodata; // 0x1B8
	public CommandCodeInfo[] commandCodeInfos; // 0x1C0
	private BattleCommandData[] fixedCommands; // 0x1C8
	private BattleCommandData[] wkCommands; // 0x1D0
	private int canSelectCommandIndex; // 0x1D8
	private List<int> doNotSelectCommandSvtIdList; // 0x1E0
	private BattleCommandData[] canSelectCommands; // 0x1E8
	public List<BattleData.CommandHistory> comhistory; // 0x1F0
	public BattleActionLogManagerInterface actionLogManager; // 0x1F8
	public List<BattleDropItem> droplist; // 0x200
	public int criticalstars; // 0x208
	private int totalCriticalStars; // 0x20C
	private int addCriticalstars; // 0x210
	private int subCriticalCount; // 0x214
	private int prevCriticalstars; // 0x218
	private bool isCalcCritical; // 0x21C
	private List<DataVals> performedValsList; // 0x220
	private List<BattleActionData.BuffData> freshBuffDataList; // 0x228
	private int[] commandCriticalArray; // 0x230
	private int continueCount; // 0x238
	private List<RestockServantLogic> restockServantLogicList; // 0x240
	[CompilerGeneratedAttribute] // RVA: 0xC617CC Offset: 0xC617CC VA: 0xC617CC
	[DebuggerBrowsableAttribute] // RVA: 0xC617CC Offset: 0xC617CC VA: 0xC617CC
	private bool <IsReleaseUnusedAssetsWhenEntryMember>k__BackingField; // 0x248
	private ItemDroppedSkillShiftInfo itemDroppedSkillShiftInfo; // 0x250
	public int win_lose; // 0x258
	public BattleData.WinResult winResult; // 0x25C
	public bool systemflg_selectcancel; // 0x260
	public bool systemflg_autosave; // 0x261
	public bool systemflg_skipskillconf; // 0x262
	public bool systemflg_TdConstantvelocity; // 0x263
	public int systemflg_acceleration; // 0x264
	public bool systemflg_skipDead; // 0x268
	public bool systemflg_skipDeadtemp; // 0x269
	public bool flg_resumebattle; // 0x26A
	public int progresslistflg; // 0x26C
	private const int VALID_TOTAL_STAR_MAX = 99;
	private const int VALID_VIEW_STAR_MAX = 49;
	public TutorialFlag.Id tutorialRaidBattleId; // 0x270
	public BattleData.TYPETURN typeTurn; // 0x274
	private int[] overrideBgmData; // 0x278
	[CompilerGeneratedAttribute] // RVA: 0xC61808 Offset: 0xC61808 VA: 0xC61808
	[DebuggerBrowsableAttribute] // RVA: 0xC61808 Offset: 0xC61808 VA: 0xC61808
	private SubBgmPlayArgs[] <CurrentSubBgmArgsArray>k__BackingField; // 0x280
	private List<int> playedSpeedOneSkillIdList; // 0x288
	private List<string> playedSpeedOneFieldIdList; // 0x290
	private Dictionary<int, int> usedEventMasterSkillDict; // 0x298
	private Dictionary<int, int> eventPointActivityDict; // 0x2A0
	public int endMasterSkillTurnBuffValue; // 0x2A8
	private bool isRetryable; // 0x2AC
	public bool winBattleNotRelatedSurvivalStatus; // 0x2AD
	public bool isMultiTargetBattle; // 0x2AE
	public ChangeBattlePhaseNotify changePhaseNotify; // 0x2B0
	public const string FOCUSUP = "FOCUS_UP";
	public const string FOCUSCENTER = "FOCUS_CENTER";
	public const string FOCUSUNDER = "FOCUS_UNDER";
	public const string FOCUSUP_EX = "FOCUS_UP_EX";
	public const string FOCUSCENTER_EX = "FOCUS_CENTER_EX";
	public const string FOCUSUNDER_EX = "FOCUS_UNDER_EX";
	public int justDeadTargetId; // 0x2B8
	public bool isItemResultSkip; // 0x2BC
	public BattleActionData beforeAction; // 0x2C0
	public bool isLoseRetireClear; // 0x2C8
	private const string svtCommonFlagSaveKey = "BATTLE_SVT_COMMON_FLAG";
	public int[] maleIndiv; // 0x2D0
	public int[] femaleIndiv; // 0x2D8
	public BattleAttackManager battleAtkManager; // 0x2E0
	public BaseBattleEvent battleEvent; // 0x2E8
	public bool isWaitDrawCard; // 0x2F0
	public bool isCommandSelected; // 0x2F1
	[CompilerGeneratedAttribute] // RVA: 0xC61844 Offset: 0xC61844 VA: 0xC61844
	[DebuggerBrowsableAttribute] // RVA: 0xC61844 Offset: 0xC61844 VA: 0xC61844
	private int <EnemyFieldPosCount>k__BackingField; // 0x2F4
	[CompilerGeneratedAttribute] // RVA: 0xC61880 Offset: 0xC61880 VA: 0xC61880
	[DebuggerBrowsableAttribute] // RVA: 0xC61880 Offset: 0xC61880 VA: 0xC61880
	private int[] <EnemyAddOrderPosArray>k__BackingField; // 0x2F8
	public List<BattleSkillInfoData> boostInfoList; // 0x300
	public int temporarySpell; // 0x308
	public BattleDefenceTargetData defenceTargetData; // 0x310
	protected Dictionary<string, object> voicePlayedInfo; // 0x318
	protected HashSet<string> voicePlayedOver64Info; // 0x320
	private List<string> commonEffectPathList; // 0x328
	public long masterSkillUseWaveTurn; // 0x330
	private Dictionary<BattleData.CHAIN_COUNT_TYPE, int> chainCountDict; // 0x338
	private UseSkillEachTurn useSkillEachTurn; // 0x340
	private bool isShowMasterSkillCutIn; // 0x348
	private int lastactorId; // 0x34C
	private long prevactId; // 0x350
	private long prevtargetId; // 0x358
	public const int VALID_STAR_MAX = 50;
	private static readonly string skipKey; // 0x0
	private static readonly string speedKey; // 0x8
	private static readonly string TdCvKey; // 0x10
	private static readonly string SkipDeadKey; // 0x18
	private const string savekey = "SAVEKEY_";
	private const string reserveSavekey = "RESERVE_BATTKE_SAVEKEY";
	private const string questSaveKey = "QUESTID";
	private const string questPhaseSaveKey = "QUESTPHASEID";
	private const string questUsedTurnSaveKey = "QUESTUSEDTURNSAVEKEY";
	private const string version = "0.6.17.1";
	private const bool isDuelMessagePack = True;
	private const string continueBattleSaveKey = "CONTINUE_BATTLE_SAVEKEY";
	private const string commandSpellBattleSaveKey = "COMMAND_SPELL_BATTLE_SAVEKEY";
	private const string continueItemSaveKey = "CONTINUE_ITEM_SAVEKEY";
	private const string battleUseItemSaveKey = "BATTLE_USE_ITEM_SAVEKEY";
	private const string continueCountSaveKey = "CONTINUECOUNT";
	public int tutorialId; // 0x360
	public int tutorialState; // 0x364
	private Dictionary<int, BattleServantData.SaveData> tmpEnemyData_MP; // 0x368
	private Dictionary<string, object> tmpEnemyData; // 0x370
	private BattleFieldData.SaveData[] tmpFieldDataSave; // 0x378
	private int tmpEnemySpellCntSave; // 0x380
	private long tmpMaxTurnDamage; // 0x388
	private List<Dictionary<string, object>> tmpFirstNpPlayList; // 0x390
	private bool[] tmpEnemyAppearValids; // 0x398
	private const string UP_PARTS_NODE_NAME = "en_Parts_Up01";
	private const string UNDER_PARTS_NODE_NAME = "en_Parts_Under01";
	private double[] wkZeroParam; // 0x3A0
	private int oldAliveCount; // 0x3A8
	private int continueUseItemId; // 0x3AC
	private int continueItemImageId; // 0x3B0
	private int continueItemNum; // 0x3B4
	private long continueItemDeadLine; // 0x3B8
	[CompilerGeneratedAttribute] // RVA: 0xC618BC Offset: 0xC618BC VA: 0xC618BC
	private static Func<RestrictionEntity, bool> <>f__am$cache0; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC618CC Offset: 0xC618CC VA: 0xC618CC
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC618DC Offset: 0xC618DC VA: 0xC618DC
	private static Predicate<RestockServantLogic> <>f__am$cache2; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC618EC Offset: 0xC618EC VA: 0xC618EC
	private static Action<AiNpcBattleServantData> <>f__am$cache3; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC618FC Offset: 0xC618FC VA: 0xC618FC
	private static Func<int, int> <>f__am$cache4; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC6190C Offset: 0xC6190C VA: 0xC6190C
	private static Comparison<BattleServantData> <>f__am$cache5; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC6191C Offset: 0xC6191C VA: 0xC6191C
	private static Comparison<BattleServantData> <>f__am$cache6; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC6192C Offset: 0xC6192C VA: 0xC6192C
	private static Comparison<BattleServantData> <>f__am$cache7; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC6193C Offset: 0xC6193C VA: 0xC6193C
	private static Predicate<BattleServantData> <>f__am$cache8; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC6194C Offset: 0xC6194C VA: 0xC6194C
	private static Func<BattleServantData, int> <>f__am$cache9; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC6195C Offset: 0xC6195C VA: 0xC6195C
	private static Func<BattleServantData, int> <>f__am$cacheA; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC6196C Offset: 0xC6196C VA: 0xC6196C
	private static Converter<string, int> <>f__am$cacheB; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC6197C Offset: 0xC6197C VA: 0xC6197C
	private static Func<AiNpcBattleServantData, BattleServantData.SaveData> <>f__am$cacheC; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC6198C Offset: 0xC6198C VA: 0xC6198C
