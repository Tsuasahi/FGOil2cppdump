	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD691DC Offset: 0xD691DC VA: 0xD691DC Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD691E4 Offset: 0xD691E4 VA: 0xD691E4 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD691EC Offset: 0xD691EC VA: 0xD691EC Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD691F4 Offset: 0xD691F4 VA: 0xD691F4 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD691FC Offset: 0xD691FC VA: 0xD691FC Slot: 21
	public int CompareTo(object obj) { }

	// RVA: 0xD69204 Offset: 0xD69204 VA: 0xD69204 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD6920C Offset: 0xD6920C VA: 0xD6920C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD69214 Offset: 0xD69214 VA: 0xD69214 Slot: 22
	public int CompareTo(sbyte value) { }

	// RVA: 0xD69234 Offset: 0xD69234 VA: 0xD69234 Slot: 23
	public bool Equals(sbyte obj) { }

	// RVA: 0x2396E38 Offset: 0x2396E38 VA: 0x2396E38
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xBCB910 Offset: 0xBCB910 VA: 0xBCB910
	// RVA: 0x2397164 Offset: 0x2397164 VA: 0x2397164
	public static sbyte Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB924 Offset: 0xBCB924 VA: 0xBCB924
	// RVA: 0x2397174 Offset: 0x2397174 VA: 0x2397174
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB938 Offset: 0xBCB938 VA: 0xBCB938
	// RVA: 0x239723C Offset: 0x239723C VA: 0x239723C
	public static bool TryParse(string s, out sbyte result) { }

	// RVA: 0xD69244 Offset: 0xD69244 VA: 0xD69244 Slot: 3
	public override string ToString() { }

	// RVA: 0xD6924C Offset: 0xD6924C VA: 0xD6924C Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD69254 Offset: 0xD69254 VA: 0xD69254
	public string ToString(string format) { }

	// RVA: 0xD69260 Offset: 0xD69260 VA: 0xD69260 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC30CC Offset: 0xBC30CC VA: 0xBC30CC
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable<short>, IEquatable<short> // TypeDefIndex: 20
{
	// Fields
	public const short MaxValue = 32767;
	public const short MinValue = -32768;
	internal short m_value; // 0x0

	// Methods

	// RVA: 0xD71900 Offset: 0xD71900 VA: 0xD71900 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD71908 Offset: 0xD71908 VA: 0xD71908 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD71910 Offset: 0xD71910 VA: 0xD71910 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD71918 Offset: 0xD71918 VA: 0xD71918 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD71920 Offset: 0xD71920 VA: 0xD71920 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD71928 Offset: 0xD71928 VA: 0xD71928 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD71930 Offset: 0xD71930 VA: 0xD71930 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD71938 Offset: 0xD71938 VA: 0xD71938 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD71940 Offset: 0xD71940 VA: 0xD71940 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD71948 Offset: 0xD71948 VA: 0xD71948 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD71950 Offset: 0xD71950 VA: 0xD71950 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD71958 Offset: 0xD71958 VA: 0xD71958 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD71960 Offset: 0xD71960 VA: 0xD71960 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD71968 Offset: 0xD71968 VA: 0xD71968 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD71970 Offset: 0xD71970 VA: 0xD71970 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD71978 Offset: 0xD71978 VA: 0xD71978 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD71980 Offset: 0xD71980 VA: 0xD71980 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD71988 Offset: 0xD71988 VA: 0xD71988 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD71990 Offset: 0xD71990 VA: 0xD71990 Slot: 22
	public int CompareTo(short value) { }

	// RVA: 0xD719B0 Offset: 0xD719B0 VA: 0xD719B0 Slot: 23
	public bool Equals(short obj) { }

	// RVA: 0x264FA10 Offset: 0x264FA10 VA: 0x264FA10
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc) { }

	// RVA: 0x264FE30 Offset: 0x264FE30 VA: 0x264FE30
	public static short Parse(string s, IFormatProvider provider) { }

	// RVA: 0x264FE40 Offset: 0x264FE40 VA: 0x264FE40
	public static short Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x264FF90 Offset: 0x264FF90 VA: 0x264FF90
	public static bool TryParse(string s, out short result) { }

	// RVA: 0xD719C0 Offset: 0xD719C0 VA: 0xD719C0 Slot: 3
	public override string ToString() { }

	// RVA: 0xD719C8 Offset: 0xD719C8 VA: 0xD719C8 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD719D0 Offset: 0xD719D0 VA: 0xD719D0
	public string ToString(string format) { }

	// RVA: 0xD719DC Offset: 0xD719DC VA: 0xD719DC Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xBC30E0 Offset: 0xBC30E0 VA: 0xBC30E0
[ComVisibleAttribute] // RVA: 0xBC30E0 Offset: 0xBC30E0 VA: 0xBC30E0
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535;
	public const ushort MinValue = 0;
	internal ushort m_value; // 0x0

	// Methods

	// RVA: 0xD73944 Offset: 0xD73944 VA: 0xD73944 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD7394C Offset: 0xD7394C VA: 0xD7394C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD73954 Offset: 0xD73954 VA: 0xD73954 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD7395C Offset: 0xD7395C VA: 0xD7395C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD73964 Offset: 0xD73964 VA: 0xD73964 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD7396C Offset: 0xD7396C VA: 0xD7396C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD73974 Offset: 0xD73974 VA: 0xD73974 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD7397C Offset: 0xD7397C VA: 0xD7397C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD73984 Offset: 0xD73984 VA: 0xD73984 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD7398C Offset: 0xD7398C VA: 0xD7398C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD73994 Offset: 0xD73994 VA: 0xD73994 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD7399C Offset: 0xD7399C VA: 0xD7399C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD739A4 Offset: 0xD739A4 VA: 0xD739A4 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD739AC Offset: 0xD739AC VA: 0xD739AC Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD739B4 Offset: 0xD739B4 VA: 0xD739B4 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD739BC Offset: 0xD739BC VA: 0xD739BC Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD739C4 Offset: 0xD739C4 VA: 0xD739C4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD739CC Offset: 0xD739CC VA: 0xD739CC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD739D4 Offset: 0xD739D4 VA: 0xD739D4 Slot: 22
	public int CompareTo(ushort value) { }

	// RVA: 0xD739E0 Offset: 0xD739E0 VA: 0xD739E0 Slot: 23
	public bool Equals(ushort obj) { }

	[CLSCompliantAttribute] // RVA: 0xBCB94C Offset: 0xBCB94C VA: 0xBCB94C
	// RVA: 0x2AF2F3C Offset: 0x2AF2F3C VA: 0x2AF2F3C
	public static ushort Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB960 Offset: 0xBCB960 VA: 0xBCB960
	// RVA: 0x2AF2F4C Offset: 0x2AF2F4C VA: 0x2AF2F4C
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB974 Offset: 0xBCB974 VA: 0xBCB974
	// RVA: 0x2AF30AC Offset: 0x2AF30AC VA: 0x2AF30AC
	public static bool TryParse(string s, out ushort result) { }

	[CLSCompliantAttribute] // RVA: 0xBCB988 Offset: 0xBCB988 VA: 0xBCB988
	// RVA: 0x2AF30C0 Offset: 0x2AF30C0 VA: 0x2AF30C0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result) { }

	// RVA: 0xD739F0 Offset: 0xD739F0 VA: 0xD739F0 Slot: 3
	public override string ToString() { }

	// RVA: 0xD739F8 Offset: 0xD739F8 VA: 0xD739F8 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD73A00 Offset: 0xD73A00 VA: 0xD73A00
	public string ToString(string format) { }

	// RVA: 0xD73A0C Offset: 0xD73A0C VA: 0xD73A0C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC3120 Offset: 0xBC3120 VA: 0xBC3120
[GuidAttribute] // RVA: 0xBC3120 Offset: 0xBC3120 VA: 0xBC3120
public interface IEnumerator // TypeDefIndex: 22
{
	// Properties
	public abstract object Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Current();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool MoveNext();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Reset();
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC3170 Offset: 0xBC3170 VA: 0xBC3170
[GuidAttribute] // RVA: 0xBC3170 Offset: 0xBC3170 VA: 0xBC3170
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods

	[DispIdAttribute] // RVA: 0xBCB99C Offset: 0xBCB99C VA: 0xBCB99C
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator GetEnumerator();
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC31C0 Offset: 0xBC31C0 VA: 0xBC31C0
public interface IDisposable // TypeDefIndex: 24
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Dispose();
}

// Namespace: System.Collections.Generic
public interface IEnumerator<T> : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Properties
	public abstract T Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Current();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerator<object>.get_Current
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC31D4 Offset: 0xBC31D4 VA: 0xBC31D4
[Serializable]
public struct Char : IConvertible, IComparable, IComparable<char>, IEquatable<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = '\xffff';
	public const char MinValue = '\x0';
	internal char m_value; // 0x0
	private static readonly byte* category_data; // 0x0
	private static readonly byte* numeric_data; // 0x8
	private static readonly double* numeric_data_values; // 0x10
	private static readonly ushort* to_lower_data_low; // 0x18
	private static readonly ushort* to_lower_data_high; // 0x20
	private static readonly ushort* to_upper_data_low; // 0x28
	private static readonly ushort* to_upper_data_high; // 0x30

	// Methods

	// RVA: 0x2285030 Offset: 0x2285030 VA: 0x2285030
	private static void .cctor() { }

	// RVA: 0xD67EEC Offset: 0xD67EEC VA: 0xD67EEC Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD67EF4 Offset: 0xD67EF4 VA: 0xD67EF4 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD67F00 Offset: 0xD67F00 VA: 0xD67F00 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD67F08 Offset: 0xD67F08 VA: 0xD67F08 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD67F10 Offset: 0xD67F10 VA: 0xD67F10 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD67F1C Offset: 0xD67F1C VA: 0xD67F1C Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD67F28 Offset: 0xD67F28 VA: 0xD67F28 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD67F34 Offset: 0xD67F34 VA: 0xD67F34 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD67F3C Offset: 0xD67F3C VA: 0xD67F3C Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD67F44 Offset: 0xD67F44 VA: 0xD67F44 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD67F4C Offset: 0xD67F4C VA: 0xD67F4C Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD67F54 Offset: 0xD67F54 VA: 0xD67F54 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD67F60 Offset: 0xD67F60 VA: 0xD67F60 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD67F68 Offset: 0xD67F68 VA: 0xD67F68 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD67F70 Offset: 0xD67F70 VA: 0xD67F70 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2285094 Offset: 0x2285094 VA: 0x2285094
	private static void GetDataTablePointers(out byte* category_data, out byte* numeric_data, out double* numeric_data_values, out ushort* to_lower_data_low, out ushort* to_lower_data_high, out ushort* to_upper_data_low, out ushort* to_upper_data_high) { }

	// RVA: 0xD67F78 Offset: 0xD67F78 VA: 0xD67F78 Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0xD67F80 Offset: 0xD67F80 VA: 0xD67F80 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67F88 Offset: 0xD67F88 VA: 0xD67F88 Slot: 21
	public int CompareTo(char value) { }

	// RVA: 0xD67FA0 Offset: 0xD67FA0 VA: 0xD67FA0 Slot: 22
	public bool Equals(char obj) { }

	// RVA: 0xD67FB0 Offset: 0xD67FB0 VA: 0xD67FB0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x22858AC Offset: 0x22858AC VA: 0x22858AC
	public static double GetNumericValue(char c) { }

	// RVA: 0x2276288 Offset: 0x2276288 VA: 0x2276288
	public static UnicodeCategory GetUnicodeCategory(char c) { }

	// RVA: 0x228595C Offset: 0x228595C VA: 0x228595C
	public static bool IsControl(char c) { }

	// RVA: 0x22859D8 Offset: 0x22859D8 VA: 0x22859D8
	public static bool IsDigit(char c) { }

	// RVA: 0x2285A54 Offset: 0x2285A54 VA: 0x2285A54
	public static bool IsDigit(string s, int index) { }

	// RVA: 0x2285BD8 Offset: 0x2285BD8 VA: 0x2285BD8
	public static bool IsLetter(char c) { }

	// RVA: 0x2285C54 Offset: 0x2285C54 VA: 0x2285C54
	public static bool IsLetterOrDigit(char c) { }

	// RVA: 0x2285CDC Offset: 0x2285CDC VA: 0x2285CDC
	public static bool IsLetterOrDigit(string s, int index) { }

	// RVA: 0x2285D70 Offset: 0x2285D70 VA: 0x2285D70
	public static bool IsLower(char c) { }

	// RVA: 0x2285DEC Offset: 0x2285DEC VA: 0x2285DEC
	public static bool IsLowSurrogate(char c) { }

	// RVA: 0x2285DFC Offset: 0x2285DFC VA: 0x2285DFC
	public static bool IsNumber(char c) { }

	// RVA: 0x2285E7C Offset: 0x2285E7C VA: 0x2285E7C
	public static bool IsSurrogate(char c) { }

	// RVA: 0x2285EF8 Offset: 0x2285EF8 VA: 0x2285EF8
	public static bool IsUpper(char c) { }

	// RVA: 0x2285F74 Offset: 0x2285F74 VA: 0x2285F74
	public static bool IsWhiteSpace(char c) { }

	// RVA: 0x2286038 Offset: 0x2286038 VA: 0x2286038
	public static bool IsWhiteSpace(string s, int index) { }

	// RVA: 0x2285AE8 Offset: 0x2285AE8 VA: 0x2285AE8
	private static void CheckParameter(string s, int index) { }

	// RVA: 0x22860CC Offset: 0x22860CC VA: 0x22860CC
	public static char Parse(string s) { }

	// RVA: 0x22861BC Offset: 0x22861BC VA: 0x22861BC
	public static char ToLower(char c) { }

	// RVA: 0x228625C Offset: 0x228625C VA: 0x228625C
	public static char ToLowerInvariant(char c) { }

	// RVA: 0x2286328 Offset: 0x2286328 VA: 0x2286328
	public static char ToLower(char c, CultureInfo culture) { }

	// RVA: 0x2286430 Offset: 0x2286430 VA: 0x2286430
	public static char ToUpper(char c) { }

	// RVA: 0x22864D0 Offset: 0x22864D0 VA: 0x22864D0
	public static char ToUpperInvariant(char c) { }

	// RVA: 0x228659C Offset: 0x228659C VA: 0x228659C
	public static char ToUpper(char c, CultureInfo culture) { }

	// RVA: 0xD67FB8 Offset: 0xD67FB8 VA: 0xD67FB8 Slot: 3
	public override string ToString() { }

	// RVA: 0x22866B8 Offset: 0x22866B8 VA: 0x22866B8
	public static string ToString(char c) { }

	// RVA: 0xD67FCC Offset: 0xD67FCC VA: 0xD67FCC Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD67FE0 Offset: 0xD67FE0 VA: 0xD67FE0 Slot: 23
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC31E8 Offset: 0xBC31E8 VA: 0xBC31E8
[DefaultMemberAttribute] // RVA: 0xBC31E8 Offset: 0xBC31E8 VA: 0xBC31E8
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable<string>, IEquatable<string>, IEnumerable<char> // TypeDefIndex: 27
{
	// Fields
	private int length; // 0x10
	private char start_char; // 0x14
	public static readonly string Empty; // 0x0
	private static readonly char[] WhiteChars; // 0x8

	// Properties
	public char Chars { get; }
	public int Length { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0xBCB9B0 Offset: 0xBCB9B0 VA: 0xBCB9B0
	// RVA: 0x1F64E60 Offset: 0x1F64E60 VA: 0x1F64E60
	public void .ctor(char* value) { }

	[CLSCompliantAttribute] // RVA: 0xBCB9C4 Offset: 0xBCB9C4 VA: 0xBCB9C4
	// RVA: 0x1F64E64 Offset: 0x1F64E64 VA: 0x1F64E64
	public void .ctor(char* value, int startIndex, int length) { }

	[CLSCompliantAttribute] // RVA: 0xBCB9D8 Offset: 0xBCB9D8 VA: 0xBCB9D8
	// RVA: 0x1F64E68 Offset: 0x1F64E68 VA: 0x1F64E68
	public void .ctor(sbyte* value) { }

	[CLSCompliantAttribute] // RVA: 0xBCB9EC Offset: 0xBCB9EC VA: 0xBCB9EC
	// RVA: 0x1F64E6C Offset: 0x1F64E6C VA: 0x1F64E6C
	public void .ctor(sbyte* value, int startIndex, int length) { }

	[CLSCompliantAttribute] // RVA: 0xBCBA00 Offset: 0xBCBA00 VA: 0xBCBA00
	// RVA: 0x1F64E70 Offset: 0x1F64E70 VA: 0x1F64E70
	public void .ctor(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0x1F64E74 Offset: 0x1F64E74 VA: 0x1F64E74
	public void .ctor(char[] value, int startIndex, int length) { }

	// RVA: 0x1F64E78 Offset: 0x1F64E78 VA: 0x1F64E78
	public void .ctor(char[] value) { }

	// RVA: 0x1F64E7C Offset: 0x1F64E7C VA: 0x1F64E7C
	public void .ctor(char c, int count) { }

	// RVA: 0x1F64E80 Offset: 0x1F64E80 VA: 0x1F64E80
	private static void .cctor() { }

	// RVA: 0x1F64F14 Offset: 0x1F64F14 VA: 0x1F64F14 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x1F64F8C Offset: 0x1F64F8C VA: 0x1F64F8C Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x1F65004 Offset: 0x1F65004 VA: 0x1F65004 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x1F6507C Offset: 0x1F6507C VA: 0x1F6507C Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x1F650F4 Offset: 0x1F650F4 VA: 0x1F650F4 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x1F6516C Offset: 0x1F6516C VA: 0x1F6516C Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x1F651E4 Offset: 0x1F651E4 VA: 0x1F651E4 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x1F6525C Offset: 0x1F6525C VA: 0x1F6525C Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x1F652D4 Offset: 0x1F652D4 VA: 0x1F652D4 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x1F6534C Offset: 0x1F6534C VA: 0x1F6534C Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x1F653C4 Offset: 0x1F653C4 VA: 0x1F653C4 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x1F6543C Offset: 0x1F6543C VA: 0x1F6543C Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x1F65508 Offset: 0x1F65508 VA: 0x1F65508 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x1F65580 Offset: 0x1F65580 VA: 0x1F65580 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x1F655F8 Offset: 0x1F655F8 VA: 0x1F655F8 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x1F65670 Offset: 0x1F65670 VA: 0x1F65670 Slot: 25
	private IEnumerator<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator() { }

	// RVA: 0x1F656D4 Offset: 0x1F656D4 VA: 0x1F656D4 Slot: 21
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1F65738 Offset: 0x1F65738 VA: 0x1F65738
	public static bool Equals(string a, string b) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBA14 Offset: 0xBCBA14 VA: 0xBCBA14
	// RVA: 0x1F65850 Offset: 0x1F65850 VA: 0x1F65850 Slot: 0
	public override bool Equals(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBA2C Offset: 0xBCBA2C VA: 0xBCBA2C
	// RVA: 0x1F658E0 Offset: 0x1F658E0 VA: 0x1F658E0 Slot: 24
	public bool Equals(string value) { }

	// RVA: 0x1F5DA48 Offset: 0x1F5DA48 VA: 0x1F5DA48
	public char get_Chars(int index) { }

	// RVA: 0x1F65954 Offset: 0x1F65954 VA: 0x1F65954 Slot: 22
	public object Clone() { }

	// RVA: 0x1F65958 Offset: 0x1F65958 VA: 0x1F65958
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }

	// RVA: 0x1F65C28 Offset: 0x1F65C28 VA: 0x1F65C28
	public char[] ToCharArray() { }

	// RVA: 0x1F65C34 Offset: 0x1F65C34 VA: 0x1F65C34
	public char[] ToCharArray(int startIndex, int length) { }

	// RVA: 0x1F65DB0 Offset: 0x1F65DB0 VA: 0x1F65DB0
	public string[] Split(char[] separator) { }

	// RVA: 0x1F65DB8 Offset: 0x1F65DB8 VA: 0x1F65DB8
	public string[] Split(char[] separator, int count) { }

	[ComVisibleAttribute] // RVA: 0xBCBA44 Offset: 0xBCBA44 VA: 0xBCBA44
	[MonoDocumentationNoteAttribute] // RVA: 0xBCBA44 Offset: 0xBCBA44 VA: 0xBCBA44
	// RVA: 0x1F65F40 Offset: 0x1F65F40 VA: 0x1F65F40
	public string[] Split(char[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xBCBA94 Offset: 0xBCBA94 VA: 0xBCBA94
	// RVA: 0x1F66274 Offset: 0x1F66274 VA: 0x1F66274
	public string[] Split(string[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xBCBAA8 Offset: 0xBCBAA8 VA: 0xBCBAA8
	// RVA: 0x1F668E4 Offset: 0x1F668E4 VA: 0x1F668E4
	public string[] Split(char[] separator, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xBCBABC Offset: 0xBCBABC VA: 0xBCBABC
	// RVA: 0x1F668F4 Offset: 0x1F668F4 VA: 0x1F668F4
	public string[] Split(string[] separator, StringSplitOptions options) { }

	// RVA: 0x1F5F648 Offset: 0x1F5F648 VA: 0x1F5F648
	public string Substring(int startIndex) { }

	// RVA: 0x1F66794 Offset: 0x1F66794 VA: 0x1F66794
	public string Substring(int startIndex, int length) { }

	// RVA: 0x1F66904 Offset: 0x1F66904 VA: 0x1F66904
	internal string SubstringUnchecked(int startIndex, int length) { }

	// RVA: 0x1F669E0 Offset: 0x1F669E0 VA: 0x1F669E0
	public string Trim() { }

	// RVA: 0x1F66BCC Offset: 0x1F66BCC VA: 0x1F66BCC
	public string Trim(char[] trimChars) { }

	// RVA: 0x1F66DAC Offset: 0x1F66DAC VA: 0x1F66DAC
	public string TrimStart(char[] trimChars) { }

	// RVA: 0x1F66E8C Offset: 0x1F66E8C VA: 0x1F66E8C
	public string TrimEnd(char[] trimChars) { }

	// RVA: 0x1F66AB4 Offset: 0x1F66AB4 VA: 0x1F66AB4
	private int FindNotWhiteSpace(int pos, int target, int change) { }

	// RVA: 0x1F66CD8 Offset: 0x1F66CD8 VA: 0x1F66CD8
	private int FindNotInTable(int pos, int target, int change, char[] table) { }

	// RVA: 0x1F66F74 Offset: 0x1F66F74 VA: 0x1F66F74
	public static int Compare(string strA, string strB) { }

	// RVA: 0x1F67028 Offset: 0x1F67028 VA: 0x1F67028
	public static int Compare(string strA, string strB, bool ignoreCase) { }

	// RVA: 0x1F670E4 Offset: 0x1F670E4 VA: 0x1F670E4
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0x1F671C0 Offset: 0x1F671C0 VA: 0x1F671C0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0x1F6741C Offset: 0x1F6741C VA: 0x1F6741C
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase) { }

	// RVA: 0x1F6728C Offset: 0x1F6728C VA: 0x1F6728C
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0x1F674F4 Offset: 0x1F674F4 VA: 0x1F674F4
	public static int Compare(string strA, string strB, StringComparison comparisonType) { }

	// RVA: 0x1F67A88 Offset: 0x1F67A88 VA: 0x1F67A88
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType) { }

	// RVA: 0x1F67FB8 Offset: 0x1F67FB8 VA: 0x1F67FB8
	public static bool Equals(string a, string b, StringComparison comparisonType) { }

	// RVA: 0x1F68040 Offset: 0x1F68040 VA: 0x1F68040
	public bool Equals(string value, StringComparison comparisonType) { }

	// RVA: 0x1F680C8 Offset: 0x1F680C8 VA: 0x1F680C8 Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0x1F681E8 Offset: 0x1F681E8 VA: 0x1F681E8 Slot: 23
	public int CompareTo(string strB) { }

	// RVA: 0x1F68274 Offset: 0x1F68274 VA: 0x1F68274
	public static int CompareOrdinal(string strA, string strB) { }

	// RVA: 0x1F67DA0 Offset: 0x1F67DA0 VA: 0x1F67DA0
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0x1F67EAC Offset: 0x1F67EAC VA: 0x1F67EAC
	internal static int CompareOrdinalCaseInsensitive(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0x1F677E0 Offset: 0x1F677E0 VA: 0x1F677E0
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0x1F678FC Offset: 0x1F678FC VA: 0x1F678FC
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0x1F682F8 Offset: 0x1F682F8 VA: 0x1F682F8
	public bool EndsWith(string value) { }

	// RVA: 0x1F5D990 Offset: 0x1F5D990 VA: 0x1F5D990
	public int IndexOfAny(char[] anyOf) { }

	// RVA: 0x1F6851C Offset: 0x1F6851C VA: 0x1F6851C
	public int IndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x1F685E4 Offset: 0x1F685E4 VA: 0x1F685E4
	public int IndexOfAny(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x1F683F4 Offset: 0x1F683F4 VA: 0x1F683F4
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x1F688D0 Offset: 0x1F688D0 VA: 0x1F688D0
	public int IndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0x1F688E4 Offset: 0x1F688E4 VA: 0x1F688E4
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0x1F68BA0 Offset: 0x1F68BA0 VA: 0x1F68BA0
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x1F68CD8 Offset: 0x1F68CD8 VA: 0x1F68CD8
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x1F68E14 Offset: 0x1F68E14 VA: 0x1F68E14
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x1F68F88 Offset: 0x1F68F88 VA: 0x1F68F88
	public int LastIndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0x1F6903C Offset: 0x1F6903C VA: 0x1F6903C
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0x1F69300 Offset: 0x1F69300 VA: 0x1F69300
	internal int LastIndexOfOrdinal(string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x1F69440 Offset: 0x1F69440 VA: 0x1F69440
	internal int LastIndexOfOrdinalUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x1F69588 Offset: 0x1F69588 VA: 0x1F69588
	internal int LastIndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count) { }

	// RVA: 0x1F698D8 Offset: 0x1F698D8 VA: 0x1F698D8
	public int IndexOf(char value) { }

	// RVA: 0x1F698F0 Offset: 0x1F698F0 VA: 0x1F698F0
	public int IndexOf(char value, int startIndex) { }

	// RVA: 0x1F699F4 Offset: 0x1F699F4 VA: 0x1F699F4
	public int IndexOf(char value, int startIndex, int count) { }

	// RVA: 0x1F68704 Offset: 0x1F68704 VA: 0x1F68704
	internal int IndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0x1F54E6C Offset: 0x1F54E6C VA: 0x1F54E6C
	public int IndexOf(string value) { }

	// RVA: 0x1F66788 Offset: 0x1F66788 VA: 0x1F66788
	public int IndexOf(string value, int startIndex) { }

	// RVA: 0x1F69B44 Offset: 0x1F69B44 VA: 0x1F69B44
	public int IndexOf(string value, int startIndex, int count) { }

	// RVA: 0x1F69D0C Offset: 0x1F69D0C VA: 0x1F69D0C
	public int LastIndexOfAny(char[] anyOf) { }

	// RVA: 0x1F69E8C Offset: 0x1F69E8C VA: 0x1F69E8C
	public int LastIndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0x1F69DA4 Offset: 0x1F69DA4 VA: 0x1F69DA4
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0x1F69F88 Offset: 0x1F69F88 VA: 0x1F69F88
	public int LastIndexOf(char value) { }

	// RVA: 0x1F69FA0 Offset: 0x1F69FA0 VA: 0x1F69FA0
	public int LastIndexOf(char value, int startIndex) { }

	// RVA: 0x1F69FA8 Offset: 0x1F69FA8 VA: 0x1F69FA8
	public int LastIndexOf(char value, int startIndex, int count) { }

	// RVA: 0x1F69708 Offset: 0x1F69708 VA: 0x1F69708
	internal int LastIndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0x1F6A104 Offset: 0x1F6A104 VA: 0x1F6A104
	public int LastIndexOf(string value) { }

	// RVA: 0x1F6A33C Offset: 0x1F6A33C VA: 0x1F6A33C
	public int LastIndexOf(string value, int startIndex) { }

	// RVA: 0x1F6A11C Offset: 0x1F6A11C VA: 0x1F6A11C
	public int LastIndexOf(string value, int startIndex, int count) { }

	// RVA: 0x1F6A34C Offset: 0x1F6A34C VA: 0x1F6A34C
	public bool Contains(string value) { }

	// RVA: 0x1F6A368 Offset: 0x1F6A368 VA: 0x1F6A368
	public static bool IsNullOrEmpty(string value) { }

	// RVA: 0x1F6A384 Offset: 0x1F6A384 VA: 0x1F6A384
	public string Remove(int startIndex) { }

	// RVA: 0x1F6A5D4 Offset: 0x1F6A5D4 VA: 0x1F6A5D4
	public string PadLeft(int totalWidth, char paddingChar) { }

	// RVA: 0x1F6A730 Offset: 0x1F6A730 VA: 0x1F6A730
	public string PadRight(int totalWidth, char paddingChar) { }

	// RVA: 0x1F6A898 Offset: 0x1F6A898 VA: 0x1F6A898
	public bool StartsWith(string value) { }

	[ComVisibleAttribute] // RVA: 0xBCBAD0 Offset: 0xBCBAD0 VA: 0xBCBAD0
	// RVA: 0x1F6A994 Offset: 0x1F6A994 VA: 0x1F6A994
	public bool StartsWith(string value, StringComparison comparisonType) { }

	// RVA: 0x1F50028 Offset: 0x1F50028 VA: 0x1F50028
	public string Replace(char oldChar, char newChar) { }

	// RVA: 0x1F6ACD0 Offset: 0x1F6ACD0 VA: 0x1F6ACD0
	public string Replace(string oldValue, string newValue) { }

	// RVA: 0x1F6ADF4 Offset: 0x1F6ADF4 VA: 0x1F6ADF4
	private string ReplaceUnchecked(string oldValue, string newValue) { }

	// RVA: 0x1F6B0E8 Offset: 0x1F6B0E8 VA: 0x1F6B0E8
	private string ReplaceFallback(string oldValue, string newValue, int testedCount) { }

	// RVA: 0x1F6A45C Offset: 0x1F6A45C VA: 0x1F6A45C
	public string Remove(int startIndex, int count) { }

	// RVA: 0x1F6B27C Offset: 0x1F6B27C VA: 0x1F6B27C
	public string ToLower() { }

	// RVA: 0x1F6B2EC Offset: 0x1F6B2EC VA: 0x1F6B2EC
	public string ToLower(CultureInfo culture) { }

	// RVA: 0x1F6B3D8 Offset: 0x1F6B3D8 VA: 0x1F6B3D8
	public string ToLowerInvariant() { }

	// RVA: 0x1F6B4F0 Offset: 0x1F6B4F0 VA: 0x1F6B4F0
	public string ToUpper() { }

	// RVA: 0x1F6B560 Offset: 0x1F6B560 VA: 0x1F6B560
	public string ToUpper(CultureInfo culture) { }

	// RVA: 0x1F6B64C Offset: 0x1F6B64C VA: 0x1F6B64C
	public string ToUpperInvariant() { }

	// RVA: 0x1F6B764 Offset: 0x1F6B764 VA: 0x1F6B764 Slot: 3
	public override string ToString() { }

	// RVA: 0x1F6B768 Offset: 0x1F6B768 VA: 0x1F6B768 Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x1F4FD90 Offset: 0x1F4FD90 VA: 0x1F4FD90
	public static string Format(string format, object arg0) { }

	// RVA: 0x1F4FC60 Offset: 0x1F4FC60 VA: 0x1F4FC60
	public static string Format(string format, object arg0, object arg1) { }

	// RVA: 0x1F6B804 Offset: 0x1F6B804 VA: 0x1F6B804
	public static string Format(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x1F6B988 Offset: 0x1F6B988 VA: 0x1F6B988
	public static string Format(string format, object[] args) { }

	// RVA: 0x1F6B76C Offset: 0x1F6B76C VA: 0x1F6B76C
	public static string Format(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x1F6BA00 Offset: 0x1F6BA00 VA: 0x1F6BA00
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x1F6C5F8 Offset: 0x1F6C5F8 VA: 0x1F6C5F8
	public static string Copy(string str) { }

	// RVA: 0x1F58F30 Offset: 0x1F58F30 VA: 0x1F58F30
	public static string Concat(object arg0, object arg1) { }

	// RVA: 0x1F66118 Offset: 0x1F66118 VA: 0x1F66118
	public static string Concat(object arg0, object arg1, object arg2) { }

	// RVA: 0x1F528D4 Offset: 0x1F528D4 VA: 0x1F528D4
	public static string Concat(string str0, string str1) { }

	// RVA: 0x1F50178 Offset: 0x1F50178 VA: 0x1F50178
	public static string Concat(string str0, string str1, string str2) { }

	// RVA: 0x1F6C70C Offset: 0x1F6C70C VA: 0x1F6C70C
	public static string Concat(string str0, string str1, string str2, string str3) { }

	// RVA: 0x1F6CA88 Offset: 0x1F6CA88 VA: 0x1F6CA88
	public static string Concat(object[] args) { }

	// RVA: 0x1F6CE2C Offset: 0x1F6CE2C VA: 0x1F6CE2C
	public static string Concat(string[] values) { }

	// RVA: 0x1F6CCD0 Offset: 0x1F6CCD0 VA: 0x1F6CCD0
	private static string ConcatInternal(string[] values, int length) { }

	// RVA: 0x1F6CF40 Offset: 0x1F6CF40 VA: 0x1F6CF40
	public string Insert(int startIndex, string value) { }

	// RVA: 0x1F6D0E0 Offset: 0x1F6D0E0 VA: 0x1F6D0E0
	public static string Intern(string str) { }

	// RVA: 0x1F6D190 Offset: 0x1F6D190 VA: 0x1F6D190
	public static string Join(string separator, string[] value) { }

	// RVA: 0x1F6D558 Offset: 0x1F6D558 VA: 0x1F6D558
	public static string Join(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0x1F6D278 Offset: 0x1F6D278 VA: 0x1F6D278
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0x1F5DA40 Offset: 0x1F5DA40 VA: 0x1F5DA40
	public int get_Length() { }

	// RVA: 0x1F6C164 Offset: 0x1F6C164 VA: 0x1F6C164
	private static void ParseFormatSpecifier(string str, ref int ptr, out int n, out int width, out bool left_align, out string format) { }

	// RVA: 0x1F6D728 Offset: 0x1F6D728 VA: 0x1F6D728
	private static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0x1F6D7BC Offset: 0x1F6D7BC VA: 0x1F6D7BC
	internal void InternalSetChar(int idx, char val) { }

	// RVA: 0x1F6D868 Offset: 0x1F6D868 VA: 0x1F6D868
	internal void InternalSetLength(int newLength) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBAE4 Offset: 0xBCBAE4 VA: 0xBCBAE4
	// RVA: 0x1F6D938 Offset: 0x1F6D938 VA: 0x1F6D938 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F6D9E4 Offset: 0x1F6D9E4 VA: 0x1F6D9E4
	internal int GetCaseInsensitiveHashCode() { }

	// RVA: 0x1F6DB30 Offset: 0x1F6DB30 VA: 0x1F6DB30
	private string CreateString(sbyte* value) { }

	// RVA: 0x1F6DEDC Offset: 0x1F6DEDC VA: 0x1F6DEDC
	private string CreateString(sbyte* value, int startIndex, int length) { }

	// RVA: 0x1F6DBDC Offset: 0x1F6DBDC VA: 0x1F6DBDC
	private string CreateString(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0x1F6E028 Offset: 0x1F6E028 VA: 0x1F6E028
	private string CreateString(char* value) { }

	// RVA: 0x1F6E134 Offset: 0x1F6E134 VA: 0x1F6E134
	private string CreateString(char* value, int startIndex, int length) { }

	// RVA: 0x1F6E29C Offset: 0x1F6E29C VA: 0x1F6E29C
	private string CreateString(char[] val, int startIndex, int length) { }

	// RVA: 0x1F6E46C Offset: 0x1F6E46C VA: 0x1F6E46C
	private string CreateString(char[] val) { }

	// RVA: 0x1F6E584 Offset: 0x1F6E584 VA: 0x1F6E584
	private string CreateString(char c, int count) { }

	// RVA: 0x1F6E690 Offset: 0x1F6E690 VA: 0x1F6E690
	private static void memcpy4(byte* dest, byte* src, int size) { }

	// RVA: 0x1F6E71C Offset: 0x1F6E71C VA: 0x1F6E71C
	private static void memcpy2(byte* dest, byte* src, int size) { }

	// RVA: 0x1F6E798 Offset: 0x1F6E798 VA: 0x1F6E798
	private static void memcpy1(byte* dest, byte* src, int size) { }

	// RVA: 0x1F6DEE4 Offset: 0x1F6DEE4 VA: 0x1F6DEE4
	internal static void memcpy(byte* dest, byte* src, int size) { }

	// RVA: 0x1F65B40 Offset: 0x1F65B40 VA: 0x1F65B40
	internal static void CharCopy(char* dest, char* src, int count) { }

	// RVA: 0x1F6E844 Offset: 0x1F6E844 VA: 0x1F6E844
	internal static void CharCopyReverse(char* dest, char* src, int count) { }

	// RVA: 0x1F6E878 Offset: 0x1F6E878 VA: 0x1F6E878
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count) { }

	// RVA: 0x1F6E938 Offset: 0x1F6E938 VA: 0x1F6E938
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count) { }

	// RVA: 0x1F6E9F8 Offset: 0x1F6E9F8 VA: 0x1F6E9F8
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count) { }

