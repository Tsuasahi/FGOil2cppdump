	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBB9C0 Offset: 0xBBB9C0 VA: 0xBBB9C0 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBB9C8 Offset: 0xBBB9C8 VA: 0xBBB9C8 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBB9D0 Offset: 0xBBB9D0 VA: 0xBBB9D0 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBB9D8 Offset: 0xBBB9D8 VA: 0xBBB9D8 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBBB9E0 Offset: 0xBBB9E0 VA: 0xBBB9E0 Slot: 21
	public int CompareTo(object obj) { }

	// RVA: 0xBBB9E8 Offset: 0xBBB9E8 VA: 0xBBB9E8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB9F0 Offset: 0xBBB9F0 VA: 0xBBB9F0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBB9F8 Offset: 0xBBB9F8 VA: 0xBBB9F8 Slot: 22
	public int CompareTo(sbyte value) { }

	// RVA: 0xBBBA18 Offset: 0xBBBA18 VA: 0xBBBA18 Slot: 23
	public bool Equals(sbyte obj) { }

	// RVA: 0x1161AE0 Offset: 0x1161AE0 VA: 0x1161AE0
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xC37A38 Offset: 0xC37A38 VA: 0xC37A38
	// RVA: 0x1161E0C Offset: 0x1161E0C VA: 0x1161E0C
	public static sbyte Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37A4C Offset: 0xC37A4C VA: 0xC37A4C
	// RVA: 0x1161E1C Offset: 0x1161E1C VA: 0x1161E1C
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37A60 Offset: 0xC37A60 VA: 0xC37A60
	// RVA: 0x1161EE4 Offset: 0x1161EE4 VA: 0x1161EE4
	public static bool TryParse(string s, out sbyte result) { }

	// RVA: 0xBBBA28 Offset: 0xBBBA28 VA: 0xBBBA28 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBBA30 Offset: 0xBBBA30 VA: 0xBBBA30 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBBBA38 Offset: 0xBBBA38 VA: 0xBBBA38
	public string ToString(string format) { }

	// RVA: 0xBBBA44 Offset: 0xBBBA44 VA: 0xBBBA44 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F1F4 Offset: 0xC2F1F4 VA: 0xC2F1F4
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable<short>, IEquatable<short> // TypeDefIndex: 20
{
	// Fields
	public const short MaxValue = 32767;
	public const short MinValue = -32768;
	internal short m_value; // 0x0

	// Methods

	// RVA: 0xDD3438 Offset: 0xDD3438 VA: 0xDD3438 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xDD3440 Offset: 0xDD3440 VA: 0xDD3440 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xDD3448 Offset: 0xDD3448 VA: 0xDD3448 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xDD3450 Offset: 0xDD3450 VA: 0xDD3450 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xDD3458 Offset: 0xDD3458 VA: 0xDD3458 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xDD3460 Offset: 0xDD3460 VA: 0xDD3460 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xDD3468 Offset: 0xDD3468 VA: 0xDD3468 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xDD3470 Offset: 0xDD3470 VA: 0xDD3470 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xDD3478 Offset: 0xDD3478 VA: 0xDD3478 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xDD3480 Offset: 0xDD3480 VA: 0xDD3480 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xDD3488 Offset: 0xDD3488 VA: 0xDD3488 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xDD3490 Offset: 0xDD3490 VA: 0xDD3490 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xDD3498 Offset: 0xDD3498 VA: 0xDD3498 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xDD34A0 Offset: 0xDD34A0 VA: 0xDD34A0 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xDD34A8 Offset: 0xDD34A8 VA: 0xDD34A8 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xDD34B0 Offset: 0xDD34B0 VA: 0xDD34B0 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xDD34B8 Offset: 0xDD34B8 VA: 0xDD34B8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDD34C0 Offset: 0xDD34C0 VA: 0xDD34C0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDD34C8 Offset: 0xDD34C8 VA: 0xDD34C8 Slot: 22
	public int CompareTo(short value) { }

	// RVA: 0xDD34E8 Offset: 0xDD34E8 VA: 0xDD34E8 Slot: 23
	public bool Equals(short obj) { }

	// RVA: 0x273B1CC Offset: 0x273B1CC VA: 0x273B1CC
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc) { }

	// RVA: 0x273B5EC Offset: 0x273B5EC VA: 0x273B5EC
	public static short Parse(string s, IFormatProvider provider) { }

	// RVA: 0x273B5FC Offset: 0x273B5FC VA: 0x273B5FC
	public static short Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x273B74C Offset: 0x273B74C VA: 0x273B74C
	public static bool TryParse(string s, out short result) { }

	// RVA: 0xDD34F8 Offset: 0xDD34F8 VA: 0xDD34F8 Slot: 3
	public override string ToString() { }

	// RVA: 0xDD3500 Offset: 0xDD3500 VA: 0xDD3500 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDD3508 Offset: 0xDD3508 VA: 0xDD3508
	public string ToString(string format) { }

	// RVA: 0xDD3514 Offset: 0xDD3514 VA: 0xDD3514 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xC2F208 Offset: 0xC2F208 VA: 0xC2F208
[ComVisibleAttribute] // RVA: 0xC2F208 Offset: 0xC2F208 VA: 0xC2F208
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535;
	public const ushort MinValue = 0;
	internal ushort m_value; // 0x0

	// Methods

	// RVA: 0xBC08D8 Offset: 0xBC08D8 VA: 0xBC08D8 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBC08E0 Offset: 0xBC08E0 VA: 0xBC08E0 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBC08E8 Offset: 0xBC08E8 VA: 0xBC08E8 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBC08F0 Offset: 0xBC08F0 VA: 0xBC08F0 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBC08F8 Offset: 0xBC08F8 VA: 0xBC08F8 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBC0900 Offset: 0xBC0900 VA: 0xBC0900 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBC0908 Offset: 0xBC0908 VA: 0xBC0908 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBC0910 Offset: 0xBC0910 VA: 0xBC0910 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBC0918 Offset: 0xBC0918 VA: 0xBC0918 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBC0920 Offset: 0xBC0920 VA: 0xBC0920 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBC0928 Offset: 0xBC0928 VA: 0xBC0928 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBC0930 Offset: 0xBC0930 VA: 0xBC0930 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBC0938 Offset: 0xBC0938 VA: 0xBC0938 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBC0940 Offset: 0xBC0940 VA: 0xBC0940 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBC0948 Offset: 0xBC0948 VA: 0xBC0948 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBC0950 Offset: 0xBC0950 VA: 0xBC0950 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBC0958 Offset: 0xBC0958 VA: 0xBC0958 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBC0960 Offset: 0xBC0960 VA: 0xBC0960 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0968 Offset: 0xBC0968 VA: 0xBC0968 Slot: 22
	public int CompareTo(ushort value) { }

	// RVA: 0xBC0974 Offset: 0xBC0974 VA: 0xBC0974 Slot: 23
	public bool Equals(ushort obj) { }

	[CLSCompliantAttribute] // RVA: 0xC37A74 Offset: 0xC37A74 VA: 0xC37A74
	// RVA: 0x13002D8 Offset: 0x13002D8 VA: 0x13002D8
	public static ushort Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37A88 Offset: 0xC37A88 VA: 0xC37A88
	// RVA: 0x13002E8 Offset: 0x13002E8 VA: 0x13002E8
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37A9C Offset: 0xC37A9C VA: 0xC37A9C
	// RVA: 0x1300448 Offset: 0x1300448 VA: 0x1300448
	public static bool TryParse(string s, out ushort result) { }

	[CLSCompliantAttribute] // RVA: 0xC37AB0 Offset: 0xC37AB0 VA: 0xC37AB0
	// RVA: 0x130045C Offset: 0x130045C VA: 0x130045C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result) { }

	// RVA: 0xBC0984 Offset: 0xBC0984 VA: 0xBC0984 Slot: 3
	public override string ToString() { }

	// RVA: 0xBC098C Offset: 0xBC098C VA: 0xBC098C Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBC0994 Offset: 0xBC0994 VA: 0xBC0994
	public string ToString(string format) { }

	// RVA: 0xBC09A0 Offset: 0xBC09A0 VA: 0xBC09A0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC2F248 Offset: 0xC2F248 VA: 0xC2F248
[GuidAttribute] // RVA: 0xC2F248 Offset: 0xC2F248 VA: 0xC2F248
public interface IEnumerator // TypeDefIndex: 22
{
	// Properties
	public abstract object Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Current();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool MoveNext();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Reset();
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC2F298 Offset: 0xC2F298 VA: 0xC2F298
[GuidAttribute] // RVA: 0xC2F298 Offset: 0xC2F298 VA: 0xC2F298
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods

	[DispIdAttribute] // RVA: 0xC37AC4 Offset: 0xC37AC4 VA: 0xC37AC4
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator GetEnumerator();
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F2E8 Offset: 0xC2F2E8 VA: 0xC2F2E8
public interface IDisposable // TypeDefIndex: 24
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Dispose();
}

// Namespace: System.Collections.Generic
public interface IEnumerator<T> : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Properties
	public abstract T Current { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Current();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerator<object>.get_Current
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F2FC Offset: 0xC2F2FC VA: 0xC2F2FC
[Serializable]
public struct Char : IConvertible, IComparable, IComparable<char>, IEquatable<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = '\xffff';
	public const char MinValue = '\x0';
	internal char m_value; // 0x0
	private static readonly byte* category_data; // 0x0
	private static readonly byte* numeric_data; // 0x8
	private static readonly double* numeric_data_values; // 0x10
	private static readonly ushort* to_lower_data_low; // 0x18
	private static readonly ushort* to_lower_data_high; // 0x20
	private static readonly ushort* to_upper_data_low; // 0x28
	private static readonly ushort* to_upper_data_high; // 0x30

	// Methods

	// RVA: 0x10D681C Offset: 0x10D681C VA: 0x10D681C
	private static void .cctor() { }

	// RVA: 0xBBAE74 Offset: 0xBBAE74 VA: 0xBBAE74 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBAE7C Offset: 0xBBAE7C VA: 0xBBAE7C Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBAE88 Offset: 0xBBAE88 VA: 0xBBAE88 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBAE90 Offset: 0xBBAE90 VA: 0xBBAE90 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBAE98 Offset: 0xBBAE98 VA: 0xBBAE98 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBAEA4 Offset: 0xBBAEA4 VA: 0xBBAEA4 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBAEB0 Offset: 0xBBAEB0 VA: 0xBBAEB0 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBAEBC Offset: 0xBBAEBC VA: 0xBBAEBC Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBAEC4 Offset: 0xBBAEC4 VA: 0xBBAEC4 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBAECC Offset: 0xBBAECC VA: 0xBBAECC Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBAED4 Offset: 0xBBAED4 VA: 0xBBAED4 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBAEDC Offset: 0xBBAEDC VA: 0xBBAEDC Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBAEE8 Offset: 0xBBAEE8 VA: 0xBBAEE8 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBAEF0 Offset: 0xBBAEF0 VA: 0xBBAEF0 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBAEF8 Offset: 0xBBAEF8 VA: 0xBBAEF8 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x10D6880 Offset: 0x10D6880 VA: 0x10D6880
	private static void GetDataTablePointers(out byte* category_data, out byte* numeric_data, out double* numeric_data_values, out ushort* to_lower_data_low, out ushort* to_lower_data_high, out ushort* to_upper_data_low, out ushort* to_upper_data_high) { }

	// RVA: 0xBBAF00 Offset: 0xBBAF00 VA: 0xBBAF00 Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0xBBAF08 Offset: 0xBBAF08 VA: 0xBBAF08 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBAF10 Offset: 0xBBAF10 VA: 0xBBAF10 Slot: 21
	public int CompareTo(char value) { }

	// RVA: 0xBBAF28 Offset: 0xBBAF28 VA: 0xBBAF28 Slot: 22
	public bool Equals(char obj) { }

	// RVA: 0xBBAF38 Offset: 0xBBAF38 VA: 0xBBAF38 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10D7098 Offset: 0x10D7098 VA: 0x10D7098
	public static double GetNumericValue(char c) { }

	// RVA: 0x10C7A74 Offset: 0x10C7A74 VA: 0x10C7A74
	public static UnicodeCategory GetUnicodeCategory(char c) { }

	// RVA: 0x10D7148 Offset: 0x10D7148 VA: 0x10D7148
	public static bool IsControl(char c) { }

	// RVA: 0x10D71C4 Offset: 0x10D71C4 VA: 0x10D71C4
	public static bool IsDigit(char c) { }

	// RVA: 0x10D7240 Offset: 0x10D7240 VA: 0x10D7240
	public static bool IsDigit(string s, int index) { }

	// RVA: 0x10D73C4 Offset: 0x10D73C4 VA: 0x10D73C4
	public static bool IsLetter(char c) { }

	// RVA: 0x10D7440 Offset: 0x10D7440 VA: 0x10D7440
	public static bool IsLetterOrDigit(char c) { }

	// RVA: 0x10D74C8 Offset: 0x10D74C8 VA: 0x10D74C8
	public static bool IsLetterOrDigit(string s, int index) { }

	// RVA: 0x10D755C Offset: 0x10D755C VA: 0x10D755C
	public static bool IsLower(char c) { }

	// RVA: 0x10D75D8 Offset: 0x10D75D8 VA: 0x10D75D8
	public static bool IsLowSurrogate(char c) { }

	// RVA: 0x10D75E8 Offset: 0x10D75E8 VA: 0x10D75E8
	public static bool IsNumber(char c) { }

	// RVA: 0x10D7668 Offset: 0x10D7668 VA: 0x10D7668
	public static bool IsSurrogate(char c) { }

	// RVA: 0x10D76E4 Offset: 0x10D76E4 VA: 0x10D76E4
	public static bool IsUpper(char c) { }

	// RVA: 0x10D7760 Offset: 0x10D7760 VA: 0x10D7760
	public static bool IsWhiteSpace(char c) { }

	// RVA: 0x10D7824 Offset: 0x10D7824 VA: 0x10D7824
	public static bool IsWhiteSpace(string s, int index) { }

	// RVA: 0x10D72D4 Offset: 0x10D72D4 VA: 0x10D72D4
	private static void CheckParameter(string s, int index) { }

	// RVA: 0x10D78B8 Offset: 0x10D78B8 VA: 0x10D78B8
	public static char Parse(string s) { }

	// RVA: 0x10D79A8 Offset: 0x10D79A8 VA: 0x10D79A8
	public static char ToLower(char c) { }

	// RVA: 0x10D7A48 Offset: 0x10D7A48 VA: 0x10D7A48
	public static char ToLowerInvariant(char c) { }

	// RVA: 0x10D7B14 Offset: 0x10D7B14 VA: 0x10D7B14
	public static char ToLower(char c, CultureInfo culture) { }

	// RVA: 0x10D7C1C Offset: 0x10D7C1C VA: 0x10D7C1C
	public static char ToUpper(char c) { }

	// RVA: 0x10D7CBC Offset: 0x10D7CBC VA: 0x10D7CBC
	public static char ToUpperInvariant(char c) { }

	// RVA: 0x10D7D88 Offset: 0x10D7D88 VA: 0x10D7D88
	public static char ToUpper(char c, CultureInfo culture) { }

	// RVA: 0xBBAF40 Offset: 0xBBAF40 VA: 0xBBAF40 Slot: 3
	public override string ToString() { }

	// RVA: 0x10D7EA4 Offset: 0x10D7EA4 VA: 0x10D7EA4
	public static string ToString(char c) { }

	// RVA: 0xBBAF54 Offset: 0xBBAF54 VA: 0xBBAF54 Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBBAF68 Offset: 0xBBAF68 VA: 0xBBAF68 Slot: 23
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F310 Offset: 0xC2F310 VA: 0xC2F310
[DefaultMemberAttribute] // RVA: 0xC2F310 Offset: 0xC2F310 VA: 0xC2F310
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable<string>, IEquatable<string>, IEnumerable<char> // TypeDefIndex: 27
{
	// Fields
	private int length; // 0x10
	private char start_char; // 0x14
	public static readonly string Empty; // 0x0
	private static readonly char[] WhiteChars; // 0x8

	// Properties
	public char Chars { get; }
	public int Length { get; }

	// Methods

	[CLSCompliantAttribute] // RVA: 0xC37AD8 Offset: 0xC37AD8 VA: 0xC37AD8
	// RVA: 0xEFF7D4 Offset: 0xEFF7D4 VA: 0xEFF7D4
	public void .ctor(char* value) { }

	[CLSCompliantAttribute] // RVA: 0xC37AEC Offset: 0xC37AEC VA: 0xC37AEC
	// RVA: 0xEFF7D8 Offset: 0xEFF7D8 VA: 0xEFF7D8
	public void .ctor(char* value, int startIndex, int length) { }

	[CLSCompliantAttribute] // RVA: 0xC37B00 Offset: 0xC37B00 VA: 0xC37B00
	// RVA: 0xEFF7DC Offset: 0xEFF7DC VA: 0xEFF7DC
	public void .ctor(sbyte* value) { }

	[CLSCompliantAttribute] // RVA: 0xC37B14 Offset: 0xC37B14 VA: 0xC37B14
	// RVA: 0xEFF7E0 Offset: 0xEFF7E0 VA: 0xEFF7E0
	public void .ctor(sbyte* value, int startIndex, int length) { }

	[CLSCompliantAttribute] // RVA: 0xC37B28 Offset: 0xC37B28 VA: 0xC37B28
	// RVA: 0xEFF7E4 Offset: 0xEFF7E4 VA: 0xEFF7E4
	public void .ctor(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0xEFF7E8 Offset: 0xEFF7E8 VA: 0xEFF7E8
	public void .ctor(char[] value, int startIndex, int length) { }

	// RVA: 0xEFF7EC Offset: 0xEFF7EC VA: 0xEFF7EC
	public void .ctor(char[] value) { }

	// RVA: 0xEFF7F0 Offset: 0xEFF7F0 VA: 0xEFF7F0
	public void .ctor(char c, int count) { }

	// RVA: 0xEFF7F4 Offset: 0xEFF7F4 VA: 0xEFF7F4
	private static void .cctor() { }

	// RVA: 0xEFF888 Offset: 0xEFF888 VA: 0xEFF888 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xEFF900 Offset: 0xEFF900 VA: 0xEFF900 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xEFF978 Offset: 0xEFF978 VA: 0xEFF978 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xEFF9F0 Offset: 0xEFF9F0 VA: 0xEFF9F0 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xEFFA68 Offset: 0xEFFA68 VA: 0xEFFA68 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xEFFAE0 Offset: 0xEFFAE0 VA: 0xEFFAE0 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xEFFB58 Offset: 0xEFFB58 VA: 0xEFFB58 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xEFFBD0 Offset: 0xEFFBD0 VA: 0xEFFBD0 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xEFFC48 Offset: 0xEFFC48 VA: 0xEFFC48 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xEFFCC0 Offset: 0xEFFCC0 VA: 0xEFFCC0 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xEFFD38 Offset: 0xEFFD38 VA: 0xEFFD38 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xEFFDB0 Offset: 0xEFFDB0 VA: 0xEFFDB0 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xEFFE7C Offset: 0xEFFE7C VA: 0xEFFE7C Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xEFFEF4 Offset: 0xEFFEF4 VA: 0xEFFEF4 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xEFFF6C Offset: 0xEFFF6C VA: 0xEFFF6C Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xEFFFE4 Offset: 0xEFFFE4 VA: 0xEFFFE4 Slot: 25
	private IEnumerator<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator() { }

	// RVA: 0xF00048 Offset: 0xF00048 VA: 0xF00048 Slot: 21
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xF000AC Offset: 0xF000AC VA: 0xF000AC
	public static bool Equals(string a, string b) { }

	[ReliabilityContractAttribute] // RVA: 0xC37B3C Offset: 0xC37B3C VA: 0xC37B3C
	// RVA: 0xF001C4 Offset: 0xF001C4 VA: 0xF001C4 Slot: 0
	public override bool Equals(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0xC37B54 Offset: 0xC37B54 VA: 0xC37B54
	// RVA: 0xF00254 Offset: 0xF00254 VA: 0xF00254 Slot: 24
	public bool Equals(string value) { }

	// RVA: 0xEF83BC Offset: 0xEF83BC VA: 0xEF83BC
	public char get_Chars(int index) { }

	// RVA: 0xF002C8 Offset: 0xF002C8 VA: 0xF002C8 Slot: 22
	public object Clone() { }

	// RVA: 0xF002CC Offset: 0xF002CC VA: 0xF002CC
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }

	// RVA: 0xF0059C Offset: 0xF0059C VA: 0xF0059C
	public char[] ToCharArray() { }

	// RVA: 0xF005A8 Offset: 0xF005A8 VA: 0xF005A8
	public char[] ToCharArray(int startIndex, int length) { }

	// RVA: 0xF00724 Offset: 0xF00724 VA: 0xF00724
	public string[] Split(char[] separator) { }

	// RVA: 0xF0072C Offset: 0xF0072C VA: 0xF0072C
	public string[] Split(char[] separator, int count) { }

	[ComVisibleAttribute] // RVA: 0xC37B6C Offset: 0xC37B6C VA: 0xC37B6C
	[MonoDocumentationNoteAttribute] // RVA: 0xC37B6C Offset: 0xC37B6C VA: 0xC37B6C
	// RVA: 0xF008B4 Offset: 0xF008B4 VA: 0xF008B4
	public string[] Split(char[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xC37BBC Offset: 0xC37BBC VA: 0xC37BBC
	// RVA: 0xF00BE8 Offset: 0xF00BE8 VA: 0xF00BE8
	public string[] Split(string[] separator, int count, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xC37BD0 Offset: 0xC37BD0 VA: 0xC37BD0
	// RVA: 0xF01258 Offset: 0xF01258 VA: 0xF01258
	public string[] Split(char[] separator, StringSplitOptions options) { }

	[ComVisibleAttribute] // RVA: 0xC37BE4 Offset: 0xC37BE4 VA: 0xC37BE4
	// RVA: 0xF01268 Offset: 0xF01268 VA: 0xF01268
	public string[] Split(string[] separator, StringSplitOptions options) { }

	// RVA: 0xEF9FBC Offset: 0xEF9FBC VA: 0xEF9FBC
	public string Substring(int startIndex) { }

	// RVA: 0xF01108 Offset: 0xF01108 VA: 0xF01108
	public string Substring(int startIndex, int length) { }

	// RVA: 0xF01278 Offset: 0xF01278 VA: 0xF01278
	internal string SubstringUnchecked(int startIndex, int length) { }

	// RVA: 0xF01354 Offset: 0xF01354 VA: 0xF01354
	public string Trim() { }

	// RVA: 0xF01540 Offset: 0xF01540 VA: 0xF01540
	public string Trim(char[] trimChars) { }

	// RVA: 0xF01720 Offset: 0xF01720 VA: 0xF01720
	public string TrimStart(char[] trimChars) { }

	// RVA: 0xF01800 Offset: 0xF01800 VA: 0xF01800
	public string TrimEnd(char[] trimChars) { }

	// RVA: 0xF01428 Offset: 0xF01428 VA: 0xF01428
	private int FindNotWhiteSpace(int pos, int target, int change) { }

	// RVA: 0xF0164C Offset: 0xF0164C VA: 0xF0164C
	private int FindNotInTable(int pos, int target, int change, char[] table) { }

	// RVA: 0xF018E8 Offset: 0xF018E8 VA: 0xF018E8
	public static int Compare(string strA, string strB) { }

	// RVA: 0xF0199C Offset: 0xF0199C VA: 0xF0199C
	public static int Compare(string strA, string strB, bool ignoreCase) { }

	// RVA: 0xF01A58 Offset: 0xF01A58 VA: 0xF01A58
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0xF01B34 Offset: 0xF01B34 VA: 0xF01B34
	public static int Compare(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0xF01D90 Offset: 0xF01D90 VA: 0xF01D90
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase) { }

	// RVA: 0xF01C00 Offset: 0xF01C00 VA: 0xF01C00
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture) { }

	// RVA: 0xF01E68 Offset: 0xF01E68 VA: 0xF01E68
	public static int Compare(string strA, string strB, StringComparison comparisonType) { }

	// RVA: 0xF023FC Offset: 0xF023FC VA: 0xF023FC
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType) { }

	// RVA: 0xF0292C Offset: 0xF0292C VA: 0xF0292C
	public static bool Equals(string a, string b, StringComparison comparisonType) { }

	// RVA: 0xF029B4 Offset: 0xF029B4 VA: 0xF029B4
	public bool Equals(string value, StringComparison comparisonType) { }

	// RVA: 0xF02A3C Offset: 0xF02A3C VA: 0xF02A3C Slot: 20
	public int CompareTo(object value) { }

	// RVA: 0xF02B5C Offset: 0xF02B5C VA: 0xF02B5C Slot: 23
	public int CompareTo(string strB) { }

	// RVA: 0xF02BE8 Offset: 0xF02BE8 VA: 0xF02BE8
	public static int CompareOrdinal(string strA, string strB) { }

	// RVA: 0xF02714 Offset: 0xF02714 VA: 0xF02714
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0xF02820 Offset: 0xF02820 VA: 0xF02820
	internal static int CompareOrdinalCaseInsensitive(string strA, int indexA, string strB, int indexB, int length) { }

	// RVA: 0xF02154 Offset: 0xF02154 VA: 0xF02154
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0xF02270 Offset: 0xF02270 VA: 0xF02270
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }

	// RVA: 0xF02C6C Offset: 0xF02C6C VA: 0xF02C6C
	public bool EndsWith(string value) { }

	// RVA: 0xEF8304 Offset: 0xEF8304 VA: 0xEF8304
	public int IndexOfAny(char[] anyOf) { }

	// RVA: 0xF02E90 Offset: 0xF02E90 VA: 0xF02E90
	public int IndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0xF02F58 Offset: 0xF02F58 VA: 0xF02F58
	public int IndexOfAny(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xF02D68 Offset: 0xF02D68 VA: 0xF02D68
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xF03244 Offset: 0xF03244 VA: 0xF03244
	public int IndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0xF03258 Offset: 0xF03258 VA: 0xF03258
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0xF03514 Offset: 0xF03514 VA: 0xF03514
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0xF0364C Offset: 0xF0364C VA: 0xF0364C
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count) { }

	// RVA: 0xF03788 Offset: 0xF03788 VA: 0xF03788
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count) { }

	// RVA: 0xF038FC Offset: 0xF038FC VA: 0xF038FC
	public int LastIndexOf(string value, StringComparison comparisonType) { }

	// RVA: 0xF039B0 Offset: 0xF039B0 VA: 0xF039B0
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }

	// RVA: 0xF03C74 Offset: 0xF03C74 VA: 0xF03C74
	internal int LastIndexOfOrdinal(string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0xF03DB4 Offset: 0xF03DB4 VA: 0xF03DB4
	internal int LastIndexOfOrdinalUnchecked(string value, int startIndex, int count) { }

	// RVA: 0xF03EFC Offset: 0xF03EFC VA: 0xF03EFC
	internal int LastIndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count) { }

	// RVA: 0xF0424C Offset: 0xF0424C VA: 0xF0424C
	public int IndexOf(char value) { }

	// RVA: 0xF04264 Offset: 0xF04264 VA: 0xF04264
	public int IndexOf(char value, int startIndex) { }

	// RVA: 0xF04368 Offset: 0xF04368 VA: 0xF04368
	public int IndexOf(char value, int startIndex, int count) { }

	// RVA: 0xF03078 Offset: 0xF03078 VA: 0xF03078
	internal int IndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0xEEF7E0 Offset: 0xEEF7E0 VA: 0xEEF7E0
	public int IndexOf(string value) { }

	// RVA: 0xF010FC Offset: 0xF010FC VA: 0xF010FC
	public int IndexOf(string value, int startIndex) { }

	// RVA: 0xF044B8 Offset: 0xF044B8 VA: 0xF044B8
	public int IndexOf(string value, int startIndex, int count) { }

	// RVA: 0xF04680 Offset: 0xF04680 VA: 0xF04680
	public int LastIndexOfAny(char[] anyOf) { }

	// RVA: 0xF04800 Offset: 0xF04800 VA: 0xF04800
	public int LastIndexOfAny(char[] anyOf, int startIndex) { }

	// RVA: 0xF04718 Offset: 0xF04718 VA: 0xF04718
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }

	// RVA: 0xF048FC Offset: 0xF048FC VA: 0xF048FC
	public int LastIndexOf(char value) { }

	// RVA: 0xF04914 Offset: 0xF04914 VA: 0xF04914
	public int LastIndexOf(char value, int startIndex) { }

	// RVA: 0xF0491C Offset: 0xF0491C VA: 0xF0491C
	public int LastIndexOf(char value, int startIndex, int count) { }

	// RVA: 0xF0407C Offset: 0xF0407C VA: 0xF0407C
	internal int LastIndexOfUnchecked(char value, int startIndex, int count) { }

	// RVA: 0xF04A78 Offset: 0xF04A78 VA: 0xF04A78
	public int LastIndexOf(string value) { }

	// RVA: 0xF04CB0 Offset: 0xF04CB0 VA: 0xF04CB0
	public int LastIndexOf(string value, int startIndex) { }

	// RVA: 0xF04A90 Offset: 0xF04A90 VA: 0xF04A90
	public int LastIndexOf(string value, int startIndex, int count) { }

	// RVA: 0xF04CC0 Offset: 0xF04CC0 VA: 0xF04CC0
	public bool Contains(string value) { }

	// RVA: 0xF04CDC Offset: 0xF04CDC VA: 0xF04CDC
	public static bool IsNullOrEmpty(string value) { }

	// RVA: 0xF04CF8 Offset: 0xF04CF8 VA: 0xF04CF8
	public string Remove(int startIndex) { }

	// RVA: 0xF04F48 Offset: 0xF04F48 VA: 0xF04F48
	public string PadLeft(int totalWidth, char paddingChar) { }

	// RVA: 0xF050A4 Offset: 0xF050A4 VA: 0xF050A4
	public string PadRight(int totalWidth, char paddingChar) { }

	// RVA: 0xF0520C Offset: 0xF0520C VA: 0xF0520C
	public bool StartsWith(string value) { }

	[ComVisibleAttribute] // RVA: 0xC37BF8 Offset: 0xC37BF8 VA: 0xC37BF8
	// RVA: 0xF05308 Offset: 0xF05308 VA: 0xF05308
	public bool StartsWith(string value, StringComparison comparisonType) { }

	// RVA: 0xEEA99C Offset: 0xEEA99C VA: 0xEEA99C
	public string Replace(char oldChar, char newChar) { }

	// RVA: 0xF05644 Offset: 0xF05644 VA: 0xF05644
	public string Replace(string oldValue, string newValue) { }

	// RVA: 0xF05768 Offset: 0xF05768 VA: 0xF05768
	private string ReplaceUnchecked(string oldValue, string newValue) { }

	// RVA: 0xF05A5C Offset: 0xF05A5C VA: 0xF05A5C
	private string ReplaceFallback(string oldValue, string newValue, int testedCount) { }

	// RVA: 0xF04DD0 Offset: 0xF04DD0 VA: 0xF04DD0
	public string Remove(int startIndex, int count) { }

	// RVA: 0xF05BF0 Offset: 0xF05BF0 VA: 0xF05BF0
	public string ToLower() { }

	// RVA: 0xF05C60 Offset: 0xF05C60 VA: 0xF05C60
	public string ToLower(CultureInfo culture) { }

	// RVA: 0xF05D4C Offset: 0xF05D4C VA: 0xF05D4C
	public string ToLowerInvariant() { }

	// RVA: 0xF05E64 Offset: 0xF05E64 VA: 0xF05E64
	public string ToUpper() { }

	// RVA: 0xF05ED4 Offset: 0xF05ED4 VA: 0xF05ED4
	public string ToUpper(CultureInfo culture) { }

	// RVA: 0xF05FC0 Offset: 0xF05FC0 VA: 0xF05FC0
	public string ToUpperInvariant() { }

	// RVA: 0xF060D8 Offset: 0xF060D8 VA: 0xF060D8 Slot: 3
	public override string ToString() { }

	// RVA: 0xF060DC Offset: 0xF060DC VA: 0xF060DC Slot: 15
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xEEA704 Offset: 0xEEA704 VA: 0xEEA704
	public static string Format(string format, object arg0) { }

	// RVA: 0xEEA5D4 Offset: 0xEEA5D4 VA: 0xEEA5D4
	public static string Format(string format, object arg0, object arg1) { }

	// RVA: 0xF06178 Offset: 0xF06178 VA: 0xF06178
	public static string Format(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0xF062FC Offset: 0xF062FC VA: 0xF062FC
	public static string Format(string format, object[] args) { }

	// RVA: 0xF060E0 Offset: 0xF060E0 VA: 0xF060E0
	public static string Format(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0xF06374 Offset: 0xF06374 VA: 0xF06374
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args) { }

	// RVA: 0xF06F6C Offset: 0xF06F6C VA: 0xF06F6C
	public static string Copy(string str) { }

	// RVA: 0xEF38A4 Offset: 0xEF38A4 VA: 0xEF38A4
	public static string Concat(object arg0, object arg1) { }

	// RVA: 0xF00A8C Offset: 0xF00A8C VA: 0xF00A8C
	public static string Concat(object arg0, object arg1, object arg2) { }

	// RVA: 0xEED248 Offset: 0xEED248 VA: 0xEED248
	public static string Concat(string str0, string str1) { }

	// RVA: 0xEEAAEC Offset: 0xEEAAEC VA: 0xEEAAEC
	public static string Concat(string str0, string str1, string str2) { }

	// RVA: 0xF07080 Offset: 0xF07080 VA: 0xF07080
	public static string Concat(string str0, string str1, string str2, string str3) { }

	// RVA: 0xF073FC Offset: 0xF073FC VA: 0xF073FC
	public static string Concat(object[] args) { }

	// RVA: 0xF077A0 Offset: 0xF077A0 VA: 0xF077A0
	public static string Concat(string[] values) { }

	// RVA: 0xF07644 Offset: 0xF07644 VA: 0xF07644
	private static string ConcatInternal(string[] values, int length) { }

	// RVA: 0xF078B4 Offset: 0xF078B4 VA: 0xF078B4
	public string Insert(int startIndex, string value) { }

	// RVA: 0xF07A54 Offset: 0xF07A54 VA: 0xF07A54
	public static string Intern(string str) { }

	// RVA: 0xF07B04 Offset: 0xF07B04 VA: 0xF07B04
	public static string Join(string separator, string[] value) { }

	// RVA: 0xF07ECC Offset: 0xF07ECC VA: 0xF07ECC
	public static string Join(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0xF07BEC Offset: 0xF07BEC VA: 0xF07BEC
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count) { }

	// RVA: 0xEF83B4 Offset: 0xEF83B4 VA: 0xEF83B4
	public int get_Length() { }

	// RVA: 0xF06AD8 Offset: 0xF06AD8 VA: 0xF06AD8
	private static void ParseFormatSpecifier(string str, ref int ptr, out int n, out int width, out bool left_align, out string format) { }

	// RVA: 0xF0809C Offset: 0xF0809C VA: 0xF0809C
	private static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0xF08130 Offset: 0xF08130 VA: 0xF08130
	internal void InternalSetChar(int idx, char val) { }

	// RVA: 0xF081DC Offset: 0xF081DC VA: 0xF081DC
	internal void InternalSetLength(int newLength) { }

	[ReliabilityContractAttribute] // RVA: 0xC37C0C Offset: 0xC37C0C VA: 0xC37C0C
	// RVA: 0xF082AC Offset: 0xF082AC VA: 0xF082AC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF08358 Offset: 0xF08358 VA: 0xF08358
	internal int GetCaseInsensitiveHashCode() { }

	// RVA: 0xF084A4 Offset: 0xF084A4 VA: 0xF084A4
	private string CreateString(sbyte* value) { }

	// RVA: 0xF08850 Offset: 0xF08850 VA: 0xF08850
	private string CreateString(sbyte* value, int startIndex, int length) { }

	// RVA: 0xF08550 Offset: 0xF08550 VA: 0xF08550
	private string CreateString(sbyte* value, int startIndex, int length, Encoding enc) { }

	// RVA: 0xF0899C Offset: 0xF0899C VA: 0xF0899C
	private string CreateString(char* value) { }

	// RVA: 0xF08AA8 Offset: 0xF08AA8 VA: 0xF08AA8
	private string CreateString(char* value, int startIndex, int length) { }

	// RVA: 0xF08C10 Offset: 0xF08C10 VA: 0xF08C10
	private string CreateString(char[] val, int startIndex, int length) { }

	// RVA: 0xF08DE0 Offset: 0xF08DE0 VA: 0xF08DE0
	private string CreateString(char[] val) { }

	// RVA: 0xF08EF8 Offset: 0xF08EF8 VA: 0xF08EF8
	private string CreateString(char c, int count) { }

	// RVA: 0xF09004 Offset: 0xF09004 VA: 0xF09004
	private static void memcpy4(byte* dest, byte* src, int size) { }

	// RVA: 0xF09090 Offset: 0xF09090 VA: 0xF09090
	private static void memcpy2(byte* dest, byte* src, int size) { }

	// RVA: 0xF0910C Offset: 0xF0910C VA: 0xF0910C
	private static void memcpy1(byte* dest, byte* src, int size) { }

	// RVA: 0xF08858 Offset: 0xF08858 VA: 0xF08858
	internal static void memcpy(byte* dest, byte* src, int size) { }

	// RVA: 0xF004B4 Offset: 0xF004B4 VA: 0xF004B4
	internal static void CharCopy(char* dest, char* src, int count) { }

	// RVA: 0xF091B8 Offset: 0xF091B8 VA: 0xF091B8
	internal static void CharCopyReverse(char* dest, char* src, int count) { }

	// RVA: 0xF091EC Offset: 0xF091EC VA: 0xF091EC
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count) { }

	// RVA: 0xF092AC Offset: 0xF092AC VA: 0xF092AC
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count) { }

	// RVA: 0xF0936C Offset: 0xF0936C VA: 0xF0936C
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count) { }

