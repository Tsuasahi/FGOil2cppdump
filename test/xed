	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0xBC8DE0 Offset: 0xBC8DE0 VA: 0xBC8DE0
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 636
{
	// Fields
	public int value__; // 0x0
	public const WellKnownObjectMode Singleton = 1;
	public const WellKnownObjectMode SingleCall = 2;
}

// Namespace: System.Runtime.Remoting
[ComVisibleAttribute] // RVA: 0xBC8DF4 Offset: 0xBC8DF4 VA: 0xBC8DF4
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 637
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_uri; // 0x28
	private WellKnownObjectMode obj_mode; // 0x30

	// Properties
	public WellKnownObjectMode Mode { get; }
	public Type ObjectType { get; }
	public string ObjectUri { get; }

	// Methods

	// RVA: 0x1ED1478 Offset: 0x1ED1478 VA: 0x1ED1478
	public void .ctor(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode) { }

	// RVA: 0x1ECA34C Offset: 0x1ECA34C VA: 0x1ECA34C
	public WellKnownObjectMode get_Mode() { }

	// RVA: 0x1ECA344 Offset: 0x1ECA344 VA: 0x1ECA344
	public Type get_ObjectType() { }

	// RVA: 0x1ECA33C Offset: 0x1ECA33C VA: 0x1ECA33C
	public string get_ObjectUri() { }

	// RVA: 0x1ED15B0 Offset: 0x1ED15B0 VA: 0x1ED15B0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon // TypeDefIndex: 638
{
	// Fields
	public static byte[] BinaryHeader; // 0x0
	private static Type[] _typeCodesToType; // 0x8
	private static byte[] _typeCodeMap; // 0x10
	public static bool UseReflectionSerialization; // 0x18

	// Methods

	// RVA: 0x1ED2920 Offset: 0x1ED2920 VA: 0x1ED2920
	private static void .cctor() { }

	// RVA: 0x1ED362C Offset: 0x1ED362C VA: 0x1ED362C
	public static bool IsPrimitive(Type type) { }

	// RVA: 0x1ED3788 Offset: 0x1ED3788 VA: 0x1ED3788
	public static byte GetTypeCode(Type type) { }

	// RVA: 0x1ED38A4 Offset: 0x1ED38A4 VA: 0x1ED38A4
	public static Type GetTypeFromCode(int code) { }

	// RVA: 0x1ED3944 Offset: 0x1ED3944 VA: 0x1ED3944
	public static void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x1ED3AE4 Offset: 0x1ED3AE4 VA: 0x1ED3AE4
	public static void SwapBytes(byte[] byteArray, int size, int dataSize) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryElement // TypeDefIndex: 639
{
	// Fields
	public byte value__; // 0x0
	public const BinaryElement Header = 0;
	public const BinaryElement RefTypeObject = 1;
	public const BinaryElement UntypedRuntimeObject = 2;
	public const BinaryElement UntypedExternalObject = 3;
	public const BinaryElement RuntimeObject = 4;
	public const BinaryElement ExternalObject = 5;
	public const BinaryElement String = 6;
	public const BinaryElement GenericArray = 7;
	public const BinaryElement BoxedPrimitiveTypeValue = 8;
	public const BinaryElement ObjectReference = 9;
	public const BinaryElement NullValue = 10;
	public const BinaryElement End = 11;
	public const BinaryElement Assembly = 12;
	public const BinaryElement ArrayFiller8b = 13;
	public const BinaryElement ArrayFiller32b = 14;
	public const BinaryElement ArrayOfPrimitiveType = 15;
	public const BinaryElement ArrayOfObject = 16;
	public const BinaryElement ArrayOfString = 17;
	public const BinaryElement Method = 18;
	public const BinaryElement _Unknown4 = 19;
	public const BinaryElement _Unknown5 = 20;
	public const BinaryElement MethodCall = 21;
	public const BinaryElement MethodResponse = 22;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum TypeTag // TypeDefIndex: 640
{
	// Fields
	public byte value__; // 0x0
	public const TypeTag PrimitiveType = 0;
	public const TypeTag String = 1;
	public const TypeTag ObjectType = 2;
	public const TypeTag RuntimeType = 3;
	public const TypeTag GenericType = 4;
	public const TypeTag ArrayOfObject = 5;
	public const TypeTag ArrayOfString = 6;
	public const TypeTag ArrayOfPrimitiveType = 7;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum MethodFlags // TypeDefIndex: 641
{
	// Fields
	public int value__; // 0x0
	public const MethodFlags NoArguments = 1;
	public const MethodFlags PrimitiveArguments = 2;
	public const MethodFlags ArgumentsInSimpleArray = 4;
	public const MethodFlags ArgumentsInMultiArray = 8;
	public const MethodFlags ExcludeLogicalCallContext = 16;
	public const MethodFlags IncludesLogicalCallContext = 64;
	public const MethodFlags IncludesSignature = 128;
	public const MethodFlags FormatMask = 15;
	public const MethodFlags GenericArguments = 32768;
	public const MethodFlags NeedsInfoArrayMask = 32972;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ReturnTypeTag // TypeDefIndex: 642
{
	// Fields
	public byte value__; // 0x0
	public const ReturnTypeTag Null = 2;
	public const ReturnTypeTag PrimitiveType = 8;
	public const ReturnTypeTag ObjectType = 16;
	public const ReturnTypeTag Exception = 32;
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[ComVisibleAttribute] // RVA: 0xBC8E08 Offset: 0xBC8E08 VA: 0xBC8E08
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 643
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x10
	private SerializationBinder binder; // 0x18
	private StreamingContext context; // 0x20
	private ISurrogateSelector surrogate_selector; // 0x30
	private FormatterTypeStyle type_format; // 0x38
	private TypeFilterLevel filter_level; // 0x3C
	[CompilerGeneratedAttribute] // RVA: 0xBCB6A0 Offset: 0xBCB6A0 VA: 0xBCB6A0
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x0

	// Properties
	public static ISurrogateSelector DefaultSurrogateSelector { get; }
	public FormatterAssemblyStyle AssemblyFormat { set; }
	public SerializationBinder Binder { get; }
	public StreamingContext Context { get; }
	public ISurrogateSelector SurrogateSelector { get; set; }
	public TypeFilterLevel FilterLevel { get; }

	// Methods

	// RVA: 0x1ED401C Offset: 0x1ED401C VA: 0x1ED401C
	public void .ctor() { }

	// RVA: 0x1ECC1C0 Offset: 0x1ECC1C0 VA: 0x1ECC1C0
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }

	[CompilerGeneratedAttribute] // RVA: 0xBCD220 Offset: 0xBCD220 VA: 0xBCD220
	// RVA: 0x1ED40AC Offset: 0x1ED40AC VA: 0x1ED40AC
	public static ISurrogateSelector get_DefaultSurrogateSelector() { }

	// RVA: 0x1ECC20C Offset: 0x1ECC20C VA: 0x1ECC20C
	public void set_AssemblyFormat(FormatterAssemblyStyle value) { }

	// RVA: 0x1ED40FC Offset: 0x1ED40FC VA: 0x1ED40FC Slot: 5
	public SerializationBinder get_Binder() { }

	// RVA: 0x1ED4104 Offset: 0x1ED4104 VA: 0x1ED4104 Slot: 6
	public StreamingContext get_Context() { }

	// RVA: 0x1ED4110 Offset: 0x1ED4110 VA: 0x1ED4110 Slot: 7
	public ISurrogateSelector get_SurrogateSelector() { }

	// RVA: 0x1ED4118 Offset: 0x1ED4118 VA: 0x1ED4118 Slot: 8
	public void set_SurrogateSelector(ISurrogateSelector value) { }

	// RVA: 0x1ED4120 Offset: 0x1ED4120 VA: 0x1ED4120
	public TypeFilterLevel get_FilterLevel() { }

	// RVA: 0x1ED4128 Offset: 0x1ED4128 VA: 0x1ED4128 Slot: 4
	public object Deserialize(Stream serializationStream) { }

	// RVA: 0x1ED433C Offset: 0x1ED433C VA: 0x1ED433C Slot: 9
	public object Deserialize(Stream serializationStream, HeaderHandler handler) { }

	// RVA: 0x1ED4130 Offset: 0x1ED4130 VA: 0x1ED4130
	private object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler) { }

	// RVA: 0x1ED5BAC Offset: 0x1ED5BAC VA: 0x1ED5BAC
	public object DeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }

	// RVA: 0x1ED5BB0 Offset: 0x1ED5BB0 VA: 0x1ED5BB0
	private object NoCheckDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }

	// RVA: 0x1ED5D58 Offset: 0x1ED5D58 VA: 0x1ED5D58 Slot: 10
	public void Serialize(Stream serializationStream, object graph) { }

	// RVA: 0x1ED5D60 Offset: 0x1ED5D60 VA: 0x1ED5D60 Slot: 11
	public void Serialize(Stream serializationStream, object graph, Header[] headers) { }

	// RVA: 0x1ED5F4C Offset: 0x1ED5F4C VA: 0x1ED5F4C
	private void WriteBinaryHeader(BinaryWriter writer, bool hasHeaders) { }

	// RVA: 0x1ED4340 Offset: 0x1ED4340 VA: 0x1ED4340
	private void ReadBinaryHeader(BinaryReader reader, out bool hasHeaders) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator // TypeDefIndex: 644
{
	// Fields
	private static object monitor; // 0x0
	private static ModuleBuilder _module; // 0x8

	// Methods

	// RVA: 0x1ED80BC Offset: 0x1ED80BC VA: 0x1ED80BC
	private static void .cctor() { }

	// RVA: 0x1ED81F4 Offset: 0x1ED81F4 VA: 0x1ED81F4
	public static Type GenerateMetadataType(Type type, StreamingContext context) { }

	// RVA: 0x1ED8300 Offset: 0x1ED8300 VA: 0x1ED8300
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context) { }

	// RVA: 0x1EDA5CC Offset: 0x1EDA5CC VA: 0x1EDA5CC
	public static void LoadFromPtr(ILGenerator ig, Type t) { }

	// RVA: 0x1EDA0F4 Offset: 0x1EDA0F4 VA: 0x1EDA0F4
	private static void EmitWriteTypeSpec(ILGenerator gen, Type type, string member) { }

	// RVA: 0x1ED9DD4 Offset: 0x1ED9DD4 VA: 0x1ED9DD4
	private static void EmitLoadTypeAssembly(ILGenerator gen, Type type, string member) { }

	// RVA: 0x1ED9F74 Offset: 0x1ED9F74 VA: 0x1ED9F74
	private static void EmitWrite(ILGenerator gen, Type type) { }

	// RVA: 0x1EDAC94 Offset: 0x1EDAC94 VA: 0x1EDAC94
	public static void EmitWritePrimitiveValue(ILGenerator gen, Type type) { }

	// RVA: 0x1EDB188 Offset: 0x1EDB188 VA: 0x1EDB188
	public static Type EnumToUnderlying(Type t) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter // TypeDefIndex: 645
{
	// Methods

	// RVA: 0x1ED6024 Offset: 0x1ED6024 VA: 0x1ED6024
	public static void WriteMethodCall(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x1ED6F88 Offset: 0x1ED6F88 VA: 0x1ED6F88
	public static void WriteMethodResponse(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x1ED442C Offset: 0x1ED442C VA: 0x1ED442C
	public static object ReadMethodCall(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter) { }

	// RVA: 0x1ED5CF0 Offset: 0x1ED5CF0 VA: 0x1ED5CF0
	public static object ReadMethodResponse(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }

	// RVA: 0x1ED506C Offset: 0x1ED506C VA: 0x1ED506C
	public static object ReadMethodResponse(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }

	// RVA: 0x1EDC0A4 Offset: 0x1EDC0A4 VA: 0x1EDC0A4
	private static bool AllTypesArePrimitive(object[] objects) { }

	// RVA: 0x1EDC130 Offset: 0x1EDC130 VA: 0x1EDC130
	public static bool IsMethodPrimitive(Type type) { }

	// RVA: 0x1EDBCAC Offset: 0x1EDBCAC VA: 0x1EDBCAC
	private static object[] GetExtraProperties(IDictionary properties, string[] internalKeys) { }

	// RVA: 0x1EDC24C Offset: 0x1EDC24C VA: 0x1EDC24C
	private static bool IsInternalKey(string key, string[] internalKeys) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader // TypeDefIndex: 646
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x10
	private StreamingContext _context; // 0x18
	private SerializationBinder _binder; // 0x28
	private TypeFilterLevel _filterLevel; // 0x30
	private ObjectManager _manager; // 0x38
	private Hashtable _registeredAssemblies; // 0x40
	private Hashtable _typeMetadataCache; // 0x48
	private object _lastObject; // 0x50
	private long _lastObjectID; // 0x58
	private long _rootObjectID; // 0x60
	private byte[] arrayBuffer; // 0x68
	private int ArrayBufferLength; // 0x70

	// Properties
	public object CurrentObject { get; }

	// Methods

	// RVA: 0x2386E2C Offset: 0x2386E2C VA: 0x2386E2C
	public void .ctor(BinaryFormatter formatter) { }

	// RVA: 0x2387044 Offset: 0x2387044 VA: 0x2387044
	public void ReadObjectGraph(BinaryReader reader, bool readHeaders, out object result, out Header[] headers) { }

	// RVA: 0x23870B4 Offset: 0x23870B4 VA: 0x23870B4
	public void ReadObjectGraph(BinaryElement elem, BinaryReader reader, bool readHeaders, out object result, out Header[] headers) { }

	// RVA: 0x238727C Offset: 0x238727C VA: 0x238727C
	private bool ReadNextObject(BinaryElement element, BinaryReader reader) { }

	// RVA: 0x2387344 Offset: 0x2387344 VA: 0x2387344
	public bool ReadNextObject(BinaryReader reader) { }

	// RVA: 0x238733C Offset: 0x238733C VA: 0x238733C
	public object get_CurrentObject() { }

	// RVA: 0x2387430 Offset: 0x2387430 VA: 0x2387430
	private void ReadObject(BinaryElement element, BinaryReader reader, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x2388018 Offset: 0x2388018 VA: 0x2388018
	private void ReadAssembly(BinaryReader reader) { }

	// RVA: 0x2387B58 Offset: 0x2387B58 VA: 0x2387B58
	private void ReadObjectInstance(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x2387964 Offset: 0x2387964 VA: 0x2387964
	private void ReadRefTypeObjectInstance(BinaryReader reader, out long objectId, out object value, out SerializationInfo info) { }

	// RVA: 0x23896A8 Offset: 0x23896A8 VA: 0x23896A8
	private void ReadObjectContent(BinaryReader reader, ObjectReader.TypeMetadata metadata, long objectId, out object objectInstance, out SerializationInfo info) { }

	// RVA: 0x23877AC Offset: 0x23877AC VA: 0x23877AC
	private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMemeber, int[] indices) { }

	// RVA: 0x2387BF8 Offset: 0x2387BF8 VA: 0x2387BF8
	private void ReadStringIntance(BinaryReader reader, out long objectId, out object value) { }

	// RVA: 0x2387C70 Offset: 0x2387C70 VA: 0x2387C70
	private void ReadGenericArray(BinaryReader reader, out long objectId, out object val) { }

	// RVA: 0x2387FEC Offset: 0x2387FEC VA: 0x2387FEC
	private object ReadBoxedPrimitiveTypeValue(BinaryReader reader) { }

	// RVA: 0x2388120 Offset: 0x2388120 VA: 0x2388120
	private void ReadArrayOfPrimitiveType(BinaryReader reader, out long objectId, out object val) { }

	// RVA: 0x238A95C Offset: 0x238A95C VA: 0x238A95C
	private void BlockRead(BinaryReader reader, Array array, int dataSize) { }

	// RVA: 0x2388BC8 Offset: 0x2388BC8 VA: 0x2388BC8
	private void ReadArrayOfObject(BinaryReader reader, out long objectId, out object array) { }

	// RVA: 0x2388C70 Offset: 0x2388C70 VA: 0x2388C70
	private void ReadArrayOfString(BinaryReader reader, out long objectId, out object array) { }

	// RVA: 0x238AB40 Offset: 0x238AB40 VA: 0x238AB40
	private void ReadSimpleArray(BinaryReader reader, Type elementType, out long objectId, out object val) { }

	// RVA: 0x2388D20 Offset: 0x2388D20 VA: 0x2388D20
	private ObjectReader.TypeMetadata ReadTypeMetadata(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo) { }

	// RVA: 0x2389BB4 Offset: 0x2389BB4 VA: 0x2389BB4
	private void ReadValue(BinaryReader reader, object parentObject, long parentObjectId, SerializationInfo info, Type valueType, string fieldName, MemberInfo memberInfo, int[] indices) { }

	// RVA: 0x238AE9C Offset: 0x238AE9C VA: 0x238AE9C
	private void SetObjectValue(object parentObject, string fieldName, MemberInfo memberInfo, SerializationInfo info, object value, Type valueType, int[] indices) { }

	// RVA: 0x238B2C0 Offset: 0x238B2C0 VA: 0x238B2C0
	private void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, int[] indices) { }

	// RVA: 0x238ACC4 Offset: 0x238ACC4 VA: 0x238ACC4
	private Type GetDeserializationType(long assemblyId, string className) { }

	// RVA: 0x2389F9C Offset: 0x2389F9C VA: 0x2389F9C
	public Type ReadType(BinaryReader reader, TypeTag code) { }

	// RVA: 0x238A430 Offset: 0x238A430 VA: 0x238A430
	public static object ReadPrimitiveTypeValue(BinaryReader reader, Type type) { }
}

// Namespace: 
private class ObjectReader.TypeMetadata // TypeDefIndex: 647
{
	// Fields
	public Type Type; // 0x10
	public Type[] MemberTypes; // 0x18
	public string[] MemberNames; // 0x20
	public MemberInfo[] MemberInfos; // 0x28
	public int FieldCount; // 0x30
	public bool NeedsSerializationInfo; // 0x34

	// Methods

	// RVA: 0x238ACBC Offset: 0x238ACBC VA: 0x238ACBC
	public void .ctor() { }
}

// Namespace: 
private class ObjectReader.ArrayNullFiller // TypeDefIndex: 648
{
	// Fields
	public int NullCount; // 0x10

	// Methods

	// RVA: 0x23880F4 Offset: 0x23880F4 VA: 0x23880F4
	public void .ctor(int count) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata // TypeDefIndex: 649
{
	// Fields
	public string TypeAssemblyName; // 0x10
	public string InstanceTypeName; // 0x18

	// Properties
	public abstract bool RequiresTypes { get; }

	// Methods

	// RVA: 0x23902EC Offset: 0x23902EC VA: 0x23902EC
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void WriteAssemblies(ObjectWriter ow, BinaryWriter writer);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data);

	// RVA: 0x2390B70 Offset: 0x2390B70 VA: 0x2390B70 Slot: 7
	public virtual bool IsCompatible(TypeMetadata other) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_RequiresTypes();
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata // TypeDefIndex: 650
{
	// Fields
	public Type InstanceType; // 0x20

	// Properties
	public override bool RequiresTypes { get; }

	// Methods

	// RVA: 0x1ED8024 Offset: 0x1ED8024 VA: 0x1ED8024
	public void .ctor(Type instanceType) { }

	// RVA: 0x1ED80B4 Offset: 0x1ED80B4 VA: 0x1ED80B4 Slot: 8
	public override bool get_RequiresTypes() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata // TypeDefIndex: 651
{
	// Fields
	private Type[] types; // 0x20
	private string[] names; // 0x28

	// Properties
	public override bool RequiresTypes { get; }

	// Methods

	// RVA: 0x238CE0C Offset: 0x238CE0C VA: 0x238CE0C
	public void .ctor(Type itype, SerializationInfo info) { }

	// RVA: 0x23904A0 Offset: 0x23904A0 VA: 0x23904A0 Slot: 7
	public override bool IsCompatible(TypeMetadata other) { }

	// RVA: 0x2390718 Offset: 0x2390718 VA: 0x2390718 Slot: 4
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }

	// RVA: 0x239081C Offset: 0x239081C VA: 0x239081C Slot: 5
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes) { }

	// RVA: 0x23909F8 Offset: 0x23909F8 VA: 0x23909F8 Slot: 6
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data) { }

	// RVA: 0x2390B68 Offset: 0x2390B68 VA: 0x2390B68 Slot: 8
	public override bool get_RequiresTypes() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata // TypeDefIndex: 652
{
	// Fields
	private MemberInfo[] members; // 0x28

	// Methods

	// RVA: 0x1EDB4F0 Offset: 0x1EDB4F0 VA: 0x1EDB4F0
	public void .ctor(Type type, StreamingContext context) { }

	// RVA: 0x1EDB520 Offset: 0x1EDB520 VA: 0x1EDB520 Slot: 4
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }

	// RVA: 0x1EDB6E8 Offset: 0x1EDB6E8 VA: 0x1EDB6E8 Slot: 5
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes) { }

	// RVA: 0x1EDBA74 Offset: 0x1EDBA74 VA: 0x1EDBA74 Slot: 6
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter // TypeDefIndex: 653
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x10
	private Hashtable _cachedMetadata; // 0x18
	private Queue _pendingObjects; // 0x20
	private Hashtable _assemblyCache; // 0x28
	private static Hashtable _cachedTypes; // 0x0
	internal static Assembly CorlibAssembly; // 0x8
	internal static string CorlibAssemblyName; // 0x10
	private ISurrogateSelector _surrogateSelector; // 0x30
	private StreamingContext _context; // 0x38
	private FormatterAssemblyStyle _assemblyFormat; // 0x48
	private FormatterTypeStyle _typeFormat; // 0x4C
	private byte[] arrayBuffer; // 0x50
	private int ArrayBufferLength; // 0x58
	private SerializationObjectManager _manager; // 0x60

	// Methods

	// RVA: 0x238B6AC Offset: 0x238B6AC VA: 0x238B6AC
	public void .ctor(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }

	// RVA: 0x238B8FC Offset: 0x238B8FC VA: 0x238B8FC
	private static void .cctor() { }

	// RVA: 0x238BA28 Offset: 0x238BA28 VA: 0x238BA28
	public void WriteObjectGraph(BinaryWriter writer, object obj, Header[] headers) { }

	// RVA: 0x238BB84 Offset: 0x238BB84 VA: 0x238BB84
	public void QueueObject(object obj) { }

	// RVA: 0x238BBC4 Offset: 0x238BBC4 VA: 0x238BBC4
	public void WriteQueuedObjects(BinaryWriter writer) { }

	// RVA: 0x238BCA0 Offset: 0x238BCA0 VA: 0x238BCA0
	public void WriteObjectInstance(BinaryWriter writer, object obj, bool isValueObject) { }

	// RVA: 0x238BC50 Offset: 0x238BC50 VA: 0x238BC50
	public static void WriteSerializationEnd(BinaryWriter writer) { }

	// RVA: 0x238C0B8 Offset: 0x238C0B8 VA: 0x238C0B8
	private void WriteObject(BinaryWriter writer, long id, object obj) { }

	// RVA: 0x238C458 Offset: 0x238C458 VA: 0x238C458
	private void GetObjectData(object obj, out TypeMetadata metadata, out object data) { }

	// RVA: 0x238D344 Offset: 0x238D344 VA: 0x238D344
	private TypeMetadata CreateMemberTypeMetadata(Type type) { }

	// RVA: 0x238BE84 Offset: 0x238BE84 VA: 0x238BE84
	private void WriteArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x238E738 Offset: 0x238E738 VA: 0x238E738
	private void WriteGenericArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x238D4BC Offset: 0x238D4BC VA: 0x238D4BC
	private void WriteObjectArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x238D5D4 Offset: 0x238D5D4 VA: 0x238D5D4
	private void WriteStringArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x238D6EC Offset: 0x238D6EC VA: 0x238D6EC
	private void WritePrimitiveTypeArray(BinaryWriter writer, long id, Array array) { }

	// RVA: 0x238F504 Offset: 0x238F504 VA: 0x238F504
	private void BlockWrite(BinaryWriter writer, Array array, int dataSize) { }

	// RVA: 0x238EFA8 Offset: 0x238EFA8 VA: 0x238EFA8
	private void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType) { }

	// RVA: 0x238F6D4 Offset: 0x238F6D4 VA: 0x238F6D4
	private void WriteNullFiller(BinaryWriter writer, int numNulls) { }

	// RVA: 0x238F798 Offset: 0x238F798 VA: 0x238F798
	private void WriteObjectReference(BinaryWriter writer, long id) { }

	// RVA: 0x238F26C Offset: 0x238F26C VA: 0x238F26C
	public void WriteValue(BinaryWriter writer, Type valueType, object val) { }

	// RVA: 0x238BDDC Offset: 0x238BDDC VA: 0x238BDDC
	private void WriteString(BinaryWriter writer, long id, string str) { }

	// RVA: 0x238EBF4 Offset: 0x238EBF4 VA: 0x238EBF4
	public int WriteAssembly(BinaryWriter writer, Assembly assembly) { }

	// RVA: 0x238CC64 Offset: 0x238CC64 VA: 0x238CC64
	public int WriteAssemblyName(BinaryWriter writer, string assembly) { }

	// RVA: 0x238FEF0 Offset: 0x238FEF0 VA: 0x238FEF0
	public int GetAssemblyId(Assembly assembly) { }

	// RVA: 0x238FF34 Offset: 0x238FF34 VA: 0x238FF34
	public int GetAssemblyNameId(string assembly) { }

	// RVA: 0x238FD90 Offset: 0x238FD90 VA: 0x238FD90
	private int RegisterAssembly(string assembly, out bool firstTime) { }

	// RVA: 0x238F7F8 Offset: 0x238F7F8 VA: 0x238F7F8
	public static void WritePrimitiveValue(BinaryWriter writer, object value) { }

	// RVA: 0x238EC48 Offset: 0x238EC48 VA: 0x238EC48
	public static void WriteTypeCode(BinaryWriter writer, Type type) { }

	// RVA: 0x238FFBC Offset: 0x238FFBC VA: 0x238FFBC
	public static TypeTag GetTypeTag(Type type) { }

	// RVA: 0x238ECDC Offset: 0x238ECDC VA: 0x238ECDC
	public void WriteTypeSpec(BinaryWriter writer, Type type) { }
}

// Namespace: 
private class ObjectWriter.MetadataReference // TypeDefIndex: 654
{
	// Fields
	public TypeMetadata Metadata; // 0x10
	public long ObjectID; // 0x18

	// Methods

	// RVA: 0x238CC2C Offset: 0x238CC2C VA: 0x238CC2C
	public void .ctor(TypeMetadata metadata, long id) { }
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0xBC8E1C Offset: 0xBC8E1C VA: 0xBC8E1C
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 655
{
	// Fields
	public int value__; // 0x0
	public const FormatterAssemblyStyle Simple = 0;
	public const FormatterAssemblyStyle Full = 1;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0xBC8E30 Offset: 0xBC8E30 VA: 0xBC8E30
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 656
{
	// Fields
	public int value__; // 0x0
	public const FormatterTypeStyle TypesWhenNeeded = 0;
	public const FormatterTypeStyle TypesAlways = 1;
	public const FormatterTypeStyle XsdString = 2;
}

// Namespace: System.Runtime.Serialization.Formatters
[ComVisibleAttribute] // RVA: 0xBC8E44 Offset: 0xBC8E44 VA: 0xBC8E44
public enum TypeFilterLevel // TypeDefIndex: 657
{
	// Fields
	public int value__; // 0x0
	public const TypeFilterLevel Low = 2;
	public const TypeFilterLevel Full = 3;
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8E58 Offset: 0xBC8E58 VA: 0xBC8E58
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 658
{
	// Methods

	// RVA: 0x1ED1C58 Offset: 0x1ED1C58 VA: 0x1ED1C58
	public void .ctor() { }

	// RVA: 0x1ED1C60 Offset: 0x1ED1C60 VA: 0x1ED1C60 Slot: 4
	public object Convert(object value, Type type) { }

	// RVA: 0x1ED1CD8 Offset: 0x1ED1CD8 VA: 0x1ED1CD8 Slot: 5
	public bool ToBoolean(object value) { }

	// RVA: 0x1ED1D88 Offset: 0x1ED1D88 VA: 0x1ED1D88 Slot: 6
	public short ToInt16(object value) { }

	// RVA: 0x1ED1E38 Offset: 0x1ED1E38 VA: 0x1ED1E38 Slot: 7
	public int ToInt32(object value) { }

	// RVA: 0x1ED1EE8 Offset: 0x1ED1EE8 VA: 0x1ED1EE8 Slot: 8
	public long ToInt64(object value) { }

	// RVA: 0x1ED1F98 Offset: 0x1ED1F98 VA: 0x1ED1F98 Slot: 9
	public string ToString(object value) { }

	[CLSCompliantAttribute] // RVA: 0xBCD230 Offset: 0xBCD230 VA: 0xBCD230
	// RVA: 0x1ED2048 Offset: 0x1ED2048 VA: 0x1ED2048 Slot: 10
	public uint ToUInt32(object value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8E6C Offset: 0xBC8E6C VA: 0xBC8E6C
public sealed class FormatterServices // TypeDefIndex: 659
{
	// Methods

	// RVA: 0x1ED20F8 Offset: 0x1ED20F8 VA: 0x1ED20F8
	public static object[] GetObjectData(object obj, MemberInfo[] members) { }

	// RVA: 0x1ED2410 Offset: 0x1ED2410 VA: 0x1ED2410
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context) { }

	// RVA: 0x1ED260C Offset: 0x1ED260C VA: 0x1ED260C
	private static void GetFields(Type reflectedType, Type type, ArrayList fields) { }

	// RVA: 0x1ED2820 Offset: 0x1ED2820 VA: 0x1ED2820
	public static object GetUninitializedObject(Type type) { }

	// RVA: 0x1ED291C Offset: 0x1ED291C VA: 0x1ED291C
	public static object GetSafeUninitializedObject(Type type) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8E80 Offset: 0xBC8E80 VA: 0xBC8E80
public interface IDeserializationCallback // TypeDefIndex: 660
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeserialization(object sender);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8E94 Offset: 0xBC8E94 VA: 0xBC8E94
public interface IFormatter // TypeDefIndex: 661
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Deserialize(Stream serializationStream);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8EA8 Offset: 0xBC8EA8 VA: 0xBC8EA8
[CLSCompliantAttribute] // RVA: 0xBC8EA8 Offset: 0xBC8EA8 VA: 0xBC8EA8
public interface IFormatterConverter // TypeDefIndex: 662
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Convert(object value, Type type);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(object value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract short ToInt16(object value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int ToInt32(object value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long ToInt64(object value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(object value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract uint ToUInt32(object value);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8EE8 Offset: 0xBC8EE8 VA: 0xBC8EE8
public interface IObjectReference // TypeDefIndex: 663
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetRealObject(StreamingContext context);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8EFC Offset: 0xBC8EFC VA: 0xBC8EFC
public interface ISerializationSurrogate // TypeDefIndex: 664
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(object obj, SerializationInfo info, StreamingContext context);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8F10 Offset: 0xBC8F10 VA: 0xBC8F10
public interface ISurrogateSelector // TypeDefIndex: 665
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[MonoTODOAttribute] // RVA: 0xBC8F24 Offset: 0xBC8F24 VA: 0xBC8F24
[ComVisibleAttribute] // RVA: 0xBC8F24 Offset: 0xBC8F24 VA: 0xBC8F24
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 666
{
	// Fields
	private Hashtable table; // 0x10
	private long current; // 0x18
	private static ObjectIDGenerator.InstanceComparer comparer; // 0x0

	// Properties
	internal long NextId { get; }

	// Methods

	// RVA: 0x238B7D0 Offset: 0x238B7D0 VA: 0x238B7D0
	public void .ctor() { }

	// RVA: 0x2390D6C Offset: 0x2390D6C VA: 0x2390D6C
	private static void .cctor() { }

	// RVA: 0x2390DE0 Offset: 0x2390DE0 VA: 0x2390DE0 Slot: 4
	public virtual long GetId(object obj, out bool firstTime) { }

	// RVA: 0x238BDC8 Offset: 0x238BDC8 VA: 0x238BDC8
	internal long get_NextId() { }
}

// Namespace: 
private class ObjectIDGenerator.InstanceComparer : IComparer, IHashCodeProvider // TypeDefIndex: 667
{
	// Methods

	// RVA: 0x2390DD8 Offset: 0x2390DD8 VA: 0x2390DD8
	public void .ctor() { }

	// RVA: 0x2390F24 Offset: 0x2390F24 VA: 0x2390F24 Slot: 4
	private int System.Collections.IComparer.Compare(object o1, object o2) { }

	// RVA: 0x2390FB0 Offset: 0x2390FB0 VA: 0x2390FB0 Slot: 5
	private int System.Collections.IHashCodeProvider.GetHashCode(object o) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC8F74 Offset: 0xBC8F74 VA: 0xBC8F74
public class ObjectManager // TypeDefIndex: 668
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x10
	private ObjectRecord _lastObjectRecord; // 0x18
	private ArrayList _deserializedRecords; // 0x20
	private ArrayList _onDeserializedCallbackRecords; // 0x28
	private Hashtable _objectRecords; // 0x30
	private bool _finalFixup; // 0x38
	private ISurrogateSelector _selector; // 0x40
	private StreamingContext _context; // 0x48
	private int _registeredObjectsCount; // 0x58

	// Methods

	// RVA: 0x2386F7C Offset: 0x2386F7C VA: 0x2386F7C
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }

	// RVA: 0x2390FBC Offset: 0x2390FBC VA: 0x2390FBC Slot: 4
	public virtual void DoFixups() { }

	// RVA: 0x23921C4 Offset: 0x23921C4 VA: 0x23921C4
	internal ObjectRecord GetObjectRecord(long objectID) { }

	// RVA: 0x239241C Offset: 0x239241C VA: 0x239241C Slot: 5
	public virtual object GetObject(long objectID) { }

	// RVA: 0x239259C Offset: 0x239259C VA: 0x239259C Slot: 6
	public virtual void RaiseDeserializationEvent() { }

	// RVA: 0x23899A0 Offset: 0x23899A0 VA: 0x23899A0
	public void RaiseOnDeserializingEvent(object obj) { }

	// RVA: 0x2392828 Offset: 0x2392828 VA: 0x2392828
	private void RaiseOnDeserializedEvent(object obj) { }

	// RVA: 0x23929FC Offset: 0x23929FC VA: 0x23929FC
	private void AddFixup(BaseFixupRecord record) { }

	// RVA: 0x2392ABC Offset: 0x2392ABC VA: 0x2392ABC Slot: 7
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired) { }

	// RVA: 0x2392BEC Offset: 0x2392BEC VA: 0x2392BEC Slot: 8
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired) { }

	// RVA: 0x2392D4C Offset: 0x2392D4C VA: 0x2392D4C Slot: 9
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired) { }

	// RVA: 0x2392EAC Offset: 0x2392EAC VA: 0x2392EAC Slot: 10
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired) { }

	// RVA: 0x239300C Offset: 0x239300C VA: 0x239300C
	private void RegisterObjectInternal(object obj, ObjectRecord record) { }

	// RVA: 0x2389E34 Offset: 0x2389E34 VA: 0x2389E34
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex) { }
}

// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord // TypeDefIndex: 669
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x10
	protected internal ObjectRecord ObjectRequired; // 0x18
	public BaseFixupRecord NextSameContainer; // 0x20
	public BaseFixupRecord NextSameRequired; // 0x28

	// Methods

	// RVA: 0x1ED1810 Offset: 0x1ED1810 VA: 0x1ED1810
	public void .ctor(ObjectRecord objectToBeFixed, ObjectRecord objectRequired) { }

	// RVA: 0x1ED195C Offset: 0x1ED195C VA: 0x1ED195C
	public bool DoFixup(ObjectManager manager, bool strict) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void FixupImpl(ObjectManager manager);
}

// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 670
{
	// Fields
	private int _index; // 0x30

	// Methods

	// RVA: 0x1ED17D0 Offset: 0x1ED17D0 VA: 0x1ED17D0
	public void .ctor(ObjectRecord objectToBeFixed, int index, ObjectRecord objectRequired) { }

	// RVA: 0x1ED1848 Offset: 0x1ED1848 VA: 0x1ED1848 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 671
{
	// Fields
	private int[] _indices; // 0x30

	// Methods

	// RVA: 0x2390B78 Offset: 0x2390B78 VA: 0x2390B78
	public void .ctor(ObjectRecord objectToBeFixed, int[] indices, ObjectRecord objectRequired) { }

	// RVA: 0x2390BA8 Offset: 0x2390BA8 VA: 0x2390BA8 Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord // TypeDefIndex: 672
{
	// Fields
	public MemberInfo _member; // 0x30

	// Methods

	// RVA: 0x1ED1BBC Offset: 0x1ED1BBC VA: 0x1ED1BBC
	public void .ctor(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired) { }

	// RVA: 0x1ED1BFC Offset: 0x1ED1BFC VA: 0x1ED1BFC Slot: 4
	protected override void FixupImpl(ObjectManager manager) { }
}

// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord // TypeDefIndex: 673
{
