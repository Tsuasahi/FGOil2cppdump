	// Properties
	public int ItemBaseWindowHeight { get; }

	// Methods

	// RVA: 0x10A394C Offset: 0x10A394C VA: 0x10A394C
	public void .ctor() { }

	// RVA: 0x10A3954 Offset: 0x10A3954 VA: 0x10A3954
	public int get_ItemBaseWindowHeight() { }

	// RVA: 0x10A3984 Offset: 0x10A3984 VA: 0x10A3984
	public void Init(int eventId, int svtId, Action drawAction, Action<int, string[], Action> playVoice, Action<BattleDropItem[], int, Action> requestCallBack) { }

	// RVA: 0x10A41F0 Offset: 0x10A41F0 VA: 0x10A41F0
	public void UpdateEventItemList() { }

	// RVA: 0x10A4230 Offset: 0x10A4230 VA: 0x10A4230
	public void StopUpdateRemainTime() { }
}

// Namespace: 
public class EventTreasureBoxPanelComponent : MonoBehaviour // TypeDefIndex: 9919
{
	// Fields
	[SerializeField] // RVA: 0xC6F488 Offset: 0xC6F488 VA: 0xC6F488
	private UISprite treasureBoxBg; // 0x18
	[SerializeField] // RVA: 0xC6F498 Offset: 0xC6F498 VA: 0xC6F498
	private UISprite eventItemRootBg; // 0x20
	[SerializeField] // RVA: 0xC6F4A8 Offset: 0xC6F4A8 VA: 0xC6F4A8
	private GameObject treasureBoxDrawBtn; // 0x28
	[SerializeField] // RVA: 0xC6F4B8 Offset: 0xC6F4B8 VA: 0xC6F4B8
	private UILabel treasureBoxPayNum; // 0x30
	[SerializeField] // RVA: 0xC6F4C8 Offset: 0xC6F4C8 VA: 0xC6F4C8
	private EventItemComponent eventTreasureBoxItemInfo; // 0x38
	[SerializeField] // RVA: 0xC6F4D8 Offset: 0xC6F4D8 VA: 0xC6F4D8
	private UILabel treasureBoxEndTimeLabel; // 0x40
	[SerializeField] // RVA: 0xC6F4E8 Offset: 0xC6F4E8 VA: 0xC6F4E8
	private ItemIconComponent treasureIcon; // 0x48
	[SerializeField] // RVA: 0xC6F4F8 Offset: 0xC6F4F8 VA: 0xC6F4F8
	private UISprite treasureIconFrameBack; // 0x50
	[SerializeField] // RVA: 0xC6F508 Offset: 0xC6F508 VA: 0xC6F508
	private UISprite treasureIconFrameFront; // 0x58
	[SerializeField] // RVA: 0xC6F518 Offset: 0xC6F518 VA: 0xC6F518
	private UISprite treasureBoxDetailBtn; // 0x60
	[SerializeField] // RVA: 0xC6F528 Offset: 0xC6F528 VA: 0xC6F528
	private UISprite treasureBoxLine; // 0x68
	[SerializeField] // RVA: 0xC6F538 Offset: 0xC6F538 VA: 0xC6F538
	private UILabel userEventItemLb; // 0x70
	[SerializeField] // RVA: 0xC6F548 Offset: 0xC6F548 VA: 0xC6F548
	private UILabel payEventItemLb; // 0x78
	[SerializeField] // RVA: 0xC6F558 Offset: 0xC6F558 VA: 0xC6F558
	private UILabel drawBtnLb; // 0x80
	[SerializeField] // RVA: 0xC6F568 Offset: 0xC6F568 VA: 0xC6F568
	private TreasureBoxBulkBuyConfirmMenu treasureBoxBuyWindow; // 0x88
	private long eventEndTime; // 0x90
	private long eventPointNum; // 0x98
	private int payNum; // 0xA0
	private int svtId; // 0xA4
	private Action drawAction; // 0xA8
	private Action<int, string[], Action> playVoiceAction; // 0xB0
	private Action<BattleDropItem[], int, Action> requestCallBack; // 0xB8
	private TreasureBoxEntity treasureBoxEntity; // 0xC0
	private static AssetData effectAssetData; // 0x0
	private string itemName; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xC6F578 Offset: 0xC6F578 VA: 0xC6F578
	private static Action <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x10A4260 Offset: 0x10A4260 VA: 0x10A4260
	public void .ctor() { }

	// RVA: 0x10A3D5C Offset: 0x10A3D5C VA: 0x10A3D5C
	public void Init(TreasureBoxEntity ent, int svtId, Action drawAction, Action<int, string[], Action> playVoice, Action<BattleDropItem[], int, Action> requestCallBack) { }

	// RVA: 0x10A4554 Offset: 0x10A4554 VA: 0x10A4554
	private void SetEventEnableTime() { }

	// RVA: 0x10A45B8 Offset: 0x10A45B8 VA: 0x10A45B8
	private void GetTreasureBoxEventEnableTime() { }

	// RVA: 0x10A4320 Offset: 0x10A4320 VA: 0x10A4320
	public void SetTreasureBoxDrawBtn() { }

	// RVA: 0x10A4270 Offset: 0x10A4270 VA: 0x10A4270
	private void loadTreasureBoxEffect() { }

	// RVA: 0x10A47A0 Offset: 0x10A47A0 VA: 0x10A47A0
	private void endloadEffect(AssetData data) { }

	// RVA: 0x10A47F8 Offset: 0x10A47F8 VA: 0x10A47F8
	public static GameObject getEffect(string name, Transform parentTr) { }

	// RVA: 0x10A49CC Offset: 0x10A49CC VA: 0x10A49CC
	public void OnClickDetail() { }

	// RVA: 0x10A4B1C Offset: 0x10A4B1C VA: 0x10A4B1C
	public void OnClickDrawBtn() { }

	// RVA: 0x10A4BEC Offset: 0x10A4BEC VA: 0x10A4BEC
	private void TreasureBoxDrawRequest(int drawNum) { }

	// RVA: 0x10A4CCC Offset: 0x10A4CCC VA: 0x10A4CCC
	private void Response(string result) { }

	// RVA: 0x10A5164 Offset: 0x10A5164 VA: 0x10A5164
	private void CheckOpenQuest() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD04F0 Offset: 0xCD04F0 VA: 0xCD04F0
	// RVA: 0x10A5630 Offset: 0x10A5630 VA: 0x10A5630
	private static void <CheckOpenQuest>m__0() { }
}

// Namespace: 
public class EventTreasureBoxPanelComponent.resData // TypeDefIndex: 9920
{
	// Fields
	public int[] giftIds; // 0x10
	public BattleDropItem[] eventRewardInfos; // 0x18
	public UserEventPointEntity[] oldUserEventPoint; // 0x20

	// Methods

	// RVA: 0x10A5AA0 Offset: 0x10A5AA0 VA: 0x10A5AA0
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44BE4 Offset: 0xC44BE4 VA: 0xC44BE4
private sealed class EventTreasureBoxPanelComponent.<Init>c__AnonStorey0 // TypeDefIndex: 9921
{
	// Fields
	internal TreasureBoxEntity ent; // 0x10
	internal EventTreasureBoxPanelComponent $this; // 0x18

	// Methods

	// RVA: 0x10A4268 Offset: 0x10A4268 VA: 0x10A4268
	public void .ctor() { }

	// RVA: 0x10A5634 Offset: 0x10A5634 VA: 0x10A5634
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44BF4 Offset: 0xC44BF4 VA: 0xC44BF4
private sealed class EventTreasureBoxPanelComponent.<Response>c__AnonStorey1 // TypeDefIndex: 9922
{
	// Fields
	internal EventTreasureBoxPanelComponent.resData[] res; // 0x10
	internal Action pointRewardCallBack; // 0x18
	internal EventTreasureBoxPanelComponent $this; // 0x20

	// Methods

	// RVA: 0x10A515C Offset: 0x10A515C VA: 0x10A515C
	public void .ctor() { }

	// RVA: 0x10A58D4 Offset: 0x10A58D4 VA: 0x10A58D4
	internal void <>m__0() { }

	// RVA: 0x10A59C4 Offset: 0x10A59C4 VA: 0x10A59C4
	internal void <>m__1() { }
}

// Namespace: 
public class TreasureBoxBulkBuyConfirmMenu : BaseDialog // TypeDefIndex: 9923
{
	// Fields
	public static readonly string DECIED_BTN_NAME_DEFAULT; // 0x0
	public static readonly string DECIED_BTN_NAME_LIMIT_MATERIAL; // 0x8
	[SerializeField] // RVA: 0xC6F588 Offset: 0xC6F588 VA: 0xC6F588
	private GameObject exchangeBase; // 0x58
	[SerializeField] // RVA: 0xC6F598 Offset: 0xC6F598 VA: 0xC6F598
	private UILabel warningLabel; // 0x60
	[SerializeField] // RVA: 0xC6F5A8 Offset: 0xC6F5A8 VA: 0xC6F5A8
	private UICommonButton decideButton; // 0x68
	[SerializeField] // RVA: 0xC6F5B8 Offset: 0xC6F5B8 VA: 0xC6F5B8
	private UISprite decideButtonImg; // 0x70
	[SerializeField] // RVA: 0xC6F5C8 Offset: 0xC6F5C8 VA: 0xC6F5C8
	private UICommonButton cancelButton; // 0x78
	[SerializeField] // RVA: 0xC6F5D8 Offset: 0xC6F5D8 VA: 0xC6F5D8
	private UICommonButton plusButton; // 0x80
	[SerializeField] // RVA: 0xC6F5E8 Offset: 0xC6F5E8 VA: 0xC6F5E8
	private UICommonButton minusButton; // 0x88
	[SerializeField] // RVA: 0xC6F5F8 Offset: 0xC6F5F8 VA: 0xC6F5F8
	public UISliderWithButton itemSlider; // 0x90
	[SerializeField] // RVA: 0xC6F608 Offset: 0xC6F608 VA: 0xC6F608
	private UILabel exchangeOrigin; // 0x98
	[SerializeField] // RVA: 0xC6F618 Offset: 0xC6F618 VA: 0xC6F618
	private UILabel exchangeDestination; // 0xA0
	[SerializeField] // RVA: 0xC6F628 Offset: 0xC6F628 VA: 0xC6F628
	private UILabel exchangeDestinationCount; // 0xA8
	[SerializeField] // RVA: 0xC6F638 Offset: 0xC6F638 VA: 0xC6F638
	private EventItemComponent eventTreasureBoxItemInfo; // 0xB0
	[SerializeField] // RVA: 0xC6F648 Offset: 0xC6F648 VA: 0xC6F648
	private ItemIconComponent eventItemIcon; // 0xB8
	[SerializeField] // RVA: 0xC6F658 Offset: 0xC6F658 VA: 0xC6F658
	private UISprite eventItemRootLine; // 0xC0
	[SerializeField] // RVA: 0xC6F668 Offset: 0xC6F668 VA: 0xC6F668
	private UILabel titleLb; // 0xC8
	private TreasureBoxBulkBuyConfirmMenu.State state; // 0xD0
	private Action<int> onDecide; // 0xD8
	private Action onClose; // 0xE0
	private TreasureBoxEntity treasureBoxEntity; // 0xE8
	private int payNum; // 0xF0
	private SeManager.SystemSeKind decideSe; // 0xF4
	private int buyCount; // 0xF8

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x1888900 Offset: 0x1888900 VA: 0x1888900
	public void .ctor() { }

	// RVA: 0x1888968 Offset: 0x1888968 VA: 0x1888968
	public void Init() { }

	// RVA: 0x18889B8 Offset: 0x18889B8 VA: 0x18889B8
	public void Open(TreasureBoxEntity treasure, Action<int> onDecide, SeManager.SystemSeKind se = 8) { }

	// RVA: 0x18890A0 Offset: 0x18890A0 VA: 0x18890A0
	private void SetLabelActive(UILabel label, bool isActive) { }

	// RVA: 0x1888E90 Offset: 0x1888E90 VA: 0x1888E90
	private void SetLabelText(UILabel label, string text) { }

	// RVA: 0x1889160 Offset: 0x1889160 VA: 0x1889160
	private void SetSpriteName(UISprite sprite, string spriteName) { }

	// RVA: 0x1889044 Offset: 0x1889044 VA: 0x1889044
	private void SetItemSlider(UserGameEntity userGameEntity) { }

	// RVA: 0x1889208 Offset: 0x1889208 VA: 0x1889208
	private void SetWarningActive(bool isActive) { }

	// RVA: 0x1888E18 Offset: 0x1888E18 VA: 0x1888E18
	private int GetItemSliderMax(UserGameEntity userGameEntity) { }

	// RVA: 0x188925C Offset: 0x188925C VA: 0x188925C
	private int GetUserItemBuyableCount(UserGameEntity userGameEntity) { }

	// RVA: 0x1889354 Offset: 0x1889354 VA: 0x1889354
	private void EndOpen() { }

	// RVA: 0x1889360 Offset: 0x1889360 VA: 0x1889360
	public void Close() { }

	// RVA: 0x1889368 Offset: 0x1889368 VA: 0x1889368
	public void Close(Action callback) { }

	// RVA: 0x18893F8 Offset: 0x18893F8 VA: 0x18893F8
	private void EndClose() { }

	// RVA: 0x1889478 Offset: 0x1889478 VA: 0x1889478
	private void CallOnDecide(int result) { }

	// RVA: 0x188945C Offset: 0x188945C VA: 0x188945C
	private void CallOnClose() { }

	// RVA: 0x18894F0 Offset: 0x18894F0 VA: 0x18894F0
	public void OnClickDecide() { }

	// RVA: 0x1888F50 Offset: 0x1888F50 VA: 0x1888F50
	private bool SetShopNotEnableWarning() { }

	// RVA: 0x1889594 Offset: 0x1889594 VA: 0x1889594
	private bool IsEnable() { }

	// RVA: 0x1889684 Offset: 0x1889684 VA: 0x1889684
	public void OnClickCancel() { }

	// RVA: 0x1889734 Offset: 0x1889734 VA: 0x1889734
	public void SliderValueChange() { }

	// RVA: 0x1889800 Offset: 0x1889800 VA: 0x1889800
	private long ItemMaxOverCheck(long count, long price) { }

	// RVA: 0x18898B0 Offset: 0x18898B0 VA: 0x18898B0 Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x1889950 Offset: 0x1889950 VA: 0x1889950
	private static void .cctor() { }
}

// Namespace: 
private enum TreasureBoxBulkBuyConfirmMenu.State // TypeDefIndex: 9924
{
	// Fields
	public int value__; // 0x0
	public const TreasureBoxBulkBuyConfirmMenu.State INIT = 0;
	public const TreasureBoxBulkBuyConfirmMenu.State OPEN = 1;
	public const TreasureBoxBulkBuyConfirmMenu.State INPUT = 2;
	public const TreasureBoxBulkBuyConfirmMenu.State SELECTED = 3;
	public const TreasureBoxBulkBuyConfirmMenu.State CLOSE = 4;
}

// Namespace: 
public class TreasureBoxDialogComponent : BaseDialog // TypeDefIndex: 9925
{
	// Fields
	private readonly float TYPE_SPRITE_POS_Y; // 0x58
	private Action closeCallbackFunc; // 0x60
	[SerializeField] // RVA: 0xC6F678 Offset: 0xC6F678 VA: 0xC6F678
	private Transform listRoot; // 0x68
	[SerializeField] // RVA: 0xC6F688 Offset: 0xC6F688 VA: 0xC6F688
	private Transform iconListRoot; // 0x70
	[SerializeField] // RVA: 0xC6F698 Offset: 0xC6F698 VA: 0xC6F698
	private GameObject prefabResultItem; // 0x78
	[SerializeField] // RVA: 0xC6F6A8 Offset: 0xC6F6A8 VA: 0xC6F6A8
	private float iconScale; // 0x80
	[SerializeField] // RVA: 0xC6F6B8 Offset: 0xC6F6B8 VA: 0xC6F6B8
	private UIPanel scrollView; // 0x88
	[SerializeField] // RVA: 0xC6F6C8 Offset: 0xC6F6C8 VA: 0xC6F6C8
	private UIPanel scrollBar; // 0x90
	[SerializeField] // RVA: 0xC6F6D8 Offset: 0xC6F6D8 VA: 0xC6F6D8
	private UISprite listBg; // 0x98
	[SerializeField] // RVA: 0xC6F6E8 Offset: 0xC6F6E8 VA: 0xC6F6E8
	private UILabel titleLabel; // 0xA0
	[SerializeField] // RVA: 0xC6F6F8 Offset: 0xC6F6F8 VA: 0xC6F6F8
	private UISprite titleIcon; // 0xA8
	[SerializeField] // RVA: 0xC6F708 Offset: 0xC6F708 VA: 0xC6F708
	private UICommonButton closeButton; // 0xB0
	[SerializeField] // RVA: 0xC6F718 Offset: 0xC6F718 VA: 0xC6F718
	private UIButton viewChangeButton; // 0xB8
	[SerializeField] // RVA: 0xC6F728 Offset: 0xC6F728 VA: 0xC6F728
	private UILabel viewChangeButtonLabel; // 0xC0
	[SerializeField] // RVA: 0xC6F738 Offset: 0xC6F738 VA: 0xC6F738
	private Color[] viewChangeButtonLabelEffectColors; // 0xC8
	[SerializeField] // RVA: 0xC6F748 Offset: 0xC6F748 VA: 0xC6F748
	private GameObject pointRewardRoot; // 0xD0
	[SerializeField] // RVA: 0xC6F758 Offset: 0xC6F758 VA: 0xC6F758
	private UILabel titleAtLabel; // 0xD8
	[SerializeField] // RVA: 0xC6F768 Offset: 0xC6F768 VA: 0xC6F768
	private UILabel titleNextItemLabel; // 0xE0
	[SerializeField] // RVA: 0xC6F778 Offset: 0xC6F778 VA: 0xC6F778
	private UILabel atLabel; // 0xE8
	[SerializeField] // RVA: 0xC6F788 Offset: 0xC6F788 VA: 0xC6F788
	private UILabel nextItemLabel; // 0xF0
	[SerializeField] // RVA: 0xC6F798 Offset: 0xC6F798 VA: 0xC6F798
	private UILabel atNameLabel; // 0xF8
	[SerializeField] // RVA: 0xC6F7A8 Offset: 0xC6F7A8 VA: 0xC6F7A8
	private UILabel nextItemNameLabel; // 0x100
	[SerializeField] // RVA: 0xC6F7B8 Offset: 0xC6F7B8 VA: 0xC6F7B8
	private UISprite eventPointBg; // 0x108
	[SerializeField] // RVA: 0xC6F7C8 Offset: 0xC6F7C8 VA: 0xC6F7C8
	private UISprite eventPointSprite; // 0x110
	[SerializeField] // RVA: 0xC6F7D8 Offset: 0xC6F7D8 VA: 0xC6F7D8
	private UISprite eventPointRewardBg; // 0x118
	[SerializeField] // RVA: 0xC6F7E8 Offset: 0xC6F7E8 VA: 0xC6F7E8
	private GameObject getPointRoot; // 0x120
	[SerializeField] // RVA: 0xC6F7F8 Offset: 0xC6F7F8 VA: 0xC6F7F8
	private UISprite totalEventPointBg; // 0x128
	[SerializeField] // RVA: 0xC6F808 Offset: 0xC6F808 VA: 0xC6F808
	private UILabel totalTitleLabel; // 0x130
	[SerializeField] // RVA: 0xC6F818 Offset: 0xC6F818 VA: 0xC6F818
	private UILabel totalNumLabel; // 0x138
	[SerializeField] // RVA: 0xC6F828 Offset: 0xC6F828 VA: 0xC6F828
	private UISprite totalEventPointIcon; // 0x140
	[SerializeField] // RVA: 0xC6F838 Offset: 0xC6F838 VA: 0xC6F838
	private UISprite getEventPointBg; // 0x148
	[SerializeField] // RVA: 0xC6F848 Offset: 0xC6F848 VA: 0xC6F848
	private UILabel getTitleLabel; // 0x150
	[SerializeField] // RVA: 0xC6F858 Offset: 0xC6F858 VA: 0xC6F858
	private UILabel getNumLabel; // 0x158
	[SerializeField] // RVA: 0xC6F868 Offset: 0xC6F868 VA: 0xC6F868
	private UISprite getEventPointIcon; // 0x160
	[SerializeField] // RVA: 0xC6F878 Offset: 0xC6F878 VA: 0xC6F878
	private Vector3 basePos; // 0x168
	[SerializeField] // RVA: 0xC6F888 Offset: 0xC6F888 VA: 0xC6F888
	private Vector3 gridPos; // 0x174
	[SerializeField] // RVA: 0xC6F898 Offset: 0xC6F898 VA: 0xC6F898
	private int width; // 0x180
	[SerializeField] // RVA: 0xC6F8A8 Offset: 0xC6F8A8 VA: 0xC6F8A8
	private int height; // 0x184
	[SerializeField] // RVA: 0xC6F8B8 Offset: 0xC6F8B8 VA: 0xC6F8B8
	private float scrollWait; // 0x188
	[SerializeField] // RVA: 0xC6F8C8 Offset: 0xC6F8C8 VA: 0xC6F8C8
	private float itemDispWaitTime; // 0x18C
	[SerializeField] // RVA: 0xC6F8D8 Offset: 0xC6F8D8 VA: 0xC6F8D8
	private float itemDispTime; // 0x190
	[SerializeField] // RVA: 0xC6F8E8 Offset: 0xC6F8E8 VA: 0xC6F8E8
	private int maxItemDrawNum; // 0x194
	[SerializeField] // RVA: 0xC6F8F8 Offset: 0xC6F8F8 VA: 0xC6F8F8
	private BoxCollider skipCollider; // 0x198
	private static readonly string EVENT_POINT_BG_TITLE_NAME; // 0x0
	private static readonly string EVENT_POINT_REWARD_AT; // 0x8
	private TreasureBoxDialogComponent.DialogType dialogType; // 0x1A0
	private List<GameObject> fallEffectObjList; // 0x1A8
	private List<GameObject> resultItemObjList; // 0x1B0
	private List<GameObject> resultIconHideObjList; // 0x1B8
	private GameObject dispObj; // 0x1C0
	private int playCnt; // 0x1C8
	private int maxPlayCnt; // 0x1CC
	private bool isSkip; // 0x1D0
	private bool canSkip; // 0x1D1
	private bool isShowPossessionNum; // 0x1D2

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x18899C4 Offset: 0x18899C4 VA: 0x18899C4
	public void .ctor() { }

	// RVA: 0x1889AA4 Offset: 0x1889AA4 VA: 0x1889AA4
	public void Init() { }

	// RVA: 0x1889AEC Offset: 0x1889AEC VA: 0x1889AEC
	public void Open(int[] giftIds, BattleDropItem[] pointRewards, TreasureBoxDialogComponent.DialogType type, TreasureBoxEntity treasureBoxEnt, Action closeCallback, string eventItemName) { }

	// RVA: 0x188B20C Offset: 0x188B20C VA: 0x188B20C
	public void OnClickCloseButton() { }

	// RVA: 0x188B2C4 Offset: 0x188B2C4 VA: 0x188B2C4
	public void Close(Action callback) { }

	// RVA: 0x188AC08 Offset: 0x188AC08 VA: 0x188AC08
	public void SetResultData(int[] resultIds, int treasureIconId, Action callBack) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD0500 Offset: 0xCD0500 VA: 0xCD0500
	// RVA: 0x188B4CC Offset: 0x188B4CC VA: 0x188B4CC
	private IEnumerator StartDisp() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD0510 Offset: 0xCD0510 VA: 0xCD0510
	// RVA: 0x188B544 Offset: 0x188B544 VA: 0x188B544
	private IEnumerator StartRewardAction(TreasureBoxDialogComponent.RewardAction rewardAction) { }

	// RVA: 0x188B5E0 Offset: 0x188B5E0 VA: 0x188B5E0
	public void SetListData(int[] giftIds, BattleDropItem[] pointRewards) { }

	// RVA: 0x188B78C Offset: 0x188B78C VA: 0x188B78C
	private void SetIcon(GiftEntity gift, BattleDropItem pointRewards) { }

	// RVA: 0x188A994 Offset: 0x188A994 VA: 0x188A994
	private void SetNextItemLabel(long userEventPoint, EventRewardEntity eventRewardEnt) { }

	// RVA: 0x188BAAC Offset: 0x188BAAC VA: 0x188BAAC
	private void EndClose() { }

	// RVA: 0x188BAE8 Offset: 0x188BAE8 VA: 0x188BAE8
	public void ClickSkip() { }

	// RVA: 0x188BC34 Offset: 0x188BC34 VA: 0x188BC34
	public void OnClickSwitchShowMode() { }

	// RVA: 0x188B34C Offset: 0x188B34C VA: 0x188B34C
	private void SetPossession(ItemIconComponent item, int objectId) { }

	// RVA: 0x188BDDC Offset: 0x188BDDC VA: 0x188BDDC Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x188BE7C Offset: 0x188BE7C VA: 0x188BE7C
	private static void .cctor() { }
}

// Namespace: 
public enum TreasureBoxDialogComponent.DialogType // TypeDefIndex: 9926
{
	// Fields
	public int value__; // 0x0
	public const TreasureBoxDialogComponent.DialogType TreasureBoxLineupDialog = 0;
	public const TreasureBoxDialogComponent.DialogType GetTreasureBoxItemDialog = 1;
	public const TreasureBoxDialogComponent.DialogType GetEventPointRewardDialog = 2;
}

// Namespace: 
private class TreasureBoxDialogComponent.RewardAction // TypeDefIndex: 9927
{
	// Fields
	public int index; // 0x10
	public int playCnt; // 0x14
	public bool isEnd; // 0x18
	public Coroutine coroutine; // 0x20

	// Methods

	// RVA: 0x188C96C Offset: 0x188C96C VA: 0x188C96C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44C04 Offset: 0xC44C04 VA: 0xC44C04
private sealed class TreasureBoxDialogComponent.<Open>c__AnonStorey2 // TypeDefIndex: 9928
{
	// Fields
	internal int[] giftIds; // 0x10
	internal BattleDropItem[] pointRewards; // 0x18
	internal TreasureBoxDialogComponent $this; // 0x20

	// Methods

	// RVA: 0x188A98C Offset: 0x188A98C VA: 0x188A98C
	public void .ctor() { }

	// RVA: 0x188BEF0 Offset: 0x188BEF0 VA: 0x188BEF0
	internal void <>m__0() { }

	// RVA: 0x188BF84 Offset: 0x188BF84 VA: 0x188BF84
	internal void <>m__1() { }

	// RVA: 0x188C01C Offset: 0x188C01C VA: 0x188C01C
	internal void <>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44C14 Offset: 0xC44C14 VA: 0xC44C14
private sealed class TreasureBoxDialogComponent.<StartDisp>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9929
{
	// Fields
	internal List<TreasureBoxDialogComponent.RewardAction> <listRewardAction>__1; // 0x10
	internal int <columnLimit>__2; // 0x18
	internal int <line>__2; // 0x1C
	internal float <moving>__2; // 0x20
	internal float <move>__2; // 0x24
	internal List.Enumerator<GameObject> $locvar0; // 0x28
	internal TreasureBoxDialogComponent $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC580 Offset: 0xCDC580 VA: 0xCDC580
	// RVA: 0x188B53C Offset: 0x188B53C VA: 0x188B53C
	public void .ctor() { }

	// RVA: 0x188C080 Offset: 0x188C080 VA: 0x188C080 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC590 Offset: 0xCDC590 VA: 0xCDC590
	// RVA: 0x188C974 Offset: 0x188C974 VA: 0x188C974 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC5A0 Offset: 0xCDC5A0 VA: 0xCDC5A0
	// RVA: 0x188C97C Offset: 0x188C97C VA: 0x188C97C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC5B0 Offset: 0xCDC5B0 VA: 0xCDC5B0
	// RVA: 0x188C984 Offset: 0x188C984 VA: 0x188C984 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC5C0 Offset: 0xCDC5C0 VA: 0xCDC5C0
	// RVA: 0x188C998 Offset: 0x188C998 VA: 0x188C998 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44C24 Offset: 0xC44C24 VA: 0xC44C24
private sealed class TreasureBoxDialogComponent.<StartRewardAction>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9930
{
	// Fields
	internal int <i>__1; // 0x10
	internal TreasureBoxDialogComponent.RewardAction rewardAction; // 0x18
	internal GameObject <fallEffectObj>__0; // 0x20
	internal TreasureBoxDialogComponent $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC5D0 Offset: 0xCDC5D0 VA: 0xCDC5D0
	// RVA: 0x188B5D8 Offset: 0x188B5D8 VA: 0x188B5D8
	public void .ctor() { }

	// RVA: 0x188CA00 Offset: 0x188CA00 VA: 0x188CA00 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC5E0 Offset: 0xCDC5E0 VA: 0xCDC5E0
	// RVA: 0x188CE5C Offset: 0x188CE5C VA: 0x188CE5C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC5F0 Offset: 0xCDC5F0 VA: 0xCDC5F0
	// RVA: 0x188CE64 Offset: 0x188CE64 VA: 0x188CE64 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC600 Offset: 0xCDC600 VA: 0xCDC600
	// RVA: 0x188CE6C Offset: 0x188CE6C VA: 0x188CE6C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC610 Offset: 0xCDC610 VA: 0xCDC610
	// RVA: 0x188CE80 Offset: 0x188CE80 VA: 0x188CE80 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class FollowerQuestInfomationDraw : MonoBehaviour // TypeDefIndex: 9931
{
	// Fields
	[SerializeField] // RVA: 0xC6F908 Offset: 0xC6F908 VA: 0xC6F908
	protected UIPanel infomationPanel; // 0x18
	[SerializeField] // RVA: 0xC6F918 Offset: 0xC6F918 VA: 0xC6F918
	protected GameObject trendInfoBase; // 0x20
	[SerializeField] // RVA: 0xC6F928 Offset: 0xC6F928 VA: 0xC6F928
	protected GameObject levelInfoBase; // 0x28
	[SerializeField] // RVA: 0xC6F938 Offset: 0xC6F938 VA: 0xC6F938
	protected Transform levelInfoTrans; // 0x30
	[SerializeField] // RVA: 0xC6F948 Offset: 0xC6F948 VA: 0xC6F948
	protected UILabel levelInfoLabel; // 0x38
	[SerializeField] // RVA: 0xC6F958 Offset: 0xC6F958 VA: 0xC6F958
	protected GameObject classInfoBase; // 0x40
	[SerializeField] // RVA: 0xC6F968 Offset: 0xC6F968 VA: 0xC6F968
	protected ServantClassIconComponent[] classIconList; // 0x48
	[SerializeField] // RVA: 0xC6F978 Offset: 0xC6F978 VA: 0xC6F978
	protected Transform restrictionMessageBase; // 0x50
	[SerializeField] // RVA: 0xC6F988 Offset: 0xC6F988 VA: 0xC6F988
	protected UILabel restrictionMessageLabel; // 0x58
	protected QuestRestrictionInfo questRestrictionInfo; // 0x60
	protected bool isDispTrend; // 0x68
	protected int dispNum; // 0x6C
	protected IEnumerator dispCRW; // 0x70
	protected bool isClick; // 0x78
	protected int baseMessageWidth; // 0x7C

	// Methods

	// RVA: 0x1371984 Offset: 0x1371984 VA: 0x1371984
	public void .ctor() { }

	// RVA: 0x1371994 Offset: 0x1371994 VA: 0x1371994
	protected void Awake() { }

	// RVA: 0x13719EC Offset: 0x13719EC VA: 0x13719EC
	public void SetInfomation(QuestRestrictionInfo questRestrictionInfo) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD0520 Offset: 0xCD0520 VA: 0xCD0520
	// RVA: 0x1371FF8 Offset: 0x1371FF8 VA: 0x1371FF8
	private IEnumerator DispTotalDropItemCR() { }

	// RVA: 0x1372068 Offset: 0x1372068 VA: 0x1372068
	protected void StopTotalDropItemtweenAlpha() { }

	// RVA: 0x1371B10 Offset: 0x1371B10 VA: 0x1371B10
	protected bool SetTrendDisp() { }

	// RVA: 0x1372148 Offset: 0x1372148 VA: 0x1372148
	protected bool SetRestrictionDisp(RestrictionEntity restrictionEntity) { }

	// RVA: 0x1372368 Offset: 0x1372368 VA: 0x1372368
	public void OnClick() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44C34 Offset: 0xC44C34 VA: 0xC44C34
private sealed class FollowerQuestInfomationDraw.<DispTotalDropItemCR>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9932
{
	// Fields
	internal RestrictionEntity[] <restrictionEntityList>__0; // 0x10
	internal int <restrictionCount>__0; // 0x18
	internal TweenAlpha <ta>__1; // 0x20
	internal WaitForEndOfFrame <wait>__2; // 0x28
	internal float <startTime>__3; // 0x30
	internal float <nowTime>__4; // 0x34
	internal WaitForEndOfFrame <wait>__5; // 0x38
	internal FollowerQuestInfomationDraw $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDC620 Offset: 0xCDC620 VA: 0xCDC620
	// RVA: 0x1372360 Offset: 0x1372360 VA: 0x1372360
	public void .ctor() { }

	// RVA: 0x13723EC Offset: 0x13723EC VA: 0x13723EC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC630 Offset: 0xCDC630 VA: 0xCDC630
	// RVA: 0x1372B6C Offset: 0x1372B6C VA: 0x1372B6C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC640 Offset: 0xCDC640 VA: 0xCDC640
	// RVA: 0x1372B74 Offset: 0x1372B74 VA: 0x1372B74 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC650 Offset: 0xCDC650 VA: 0xCDC650
	// RVA: 0x1372B7C Offset: 0x1372B7C VA: 0x1372B7C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDC660 Offset: 0xCDC660 VA: 0xCDC660
	// RVA: 0x1372B90 Offset: 0x1372B90 VA: 0x1372B90 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class FollowerRootComponent : SceneRootComponent // TypeDefIndex: 9933
{
	// Fields
	private static readonly int LIST_UPDATE_MESSAGE_FONT_SIZE; // 0x0
	protected static UIAtlas partyOrganizationAtlasCache; // 0x8
	[SerializeField] // RVA: 0xC6F998 Offset: 0xC6F998 VA: 0xC6F998
	protected UIAtlas partyOrganizationAtlas; // 0x38
	[SerializeField] // RVA: 0xC6F9A8 Offset: 0xC6F9A8 VA: 0xC6F9A8
	protected UISkinSprite backSkinSprite; // 0x40
	[SerializeField] // RVA: 0xC6F9B8 Offset: 0xC6F9B8 VA: 0xC6F9B8
	protected FollowerQuestInfomationDraw followerQuestInfomationDraw; // 0x48
	[SerializeField] // RVA: 0xC6F9C8 Offset: 0xC6F9C8 VA: 0xC6F9C8
	protected FollowerSelectItemListViewManager operationItemListViewManager; // 0x50
	[SerializeField] // RVA: 0xC6F9D8 Offset: 0xC6F9D8 VA: 0xC6F9D8
	protected UILabel infomationLabel; // 0x58
	[SerializeField] // RVA: 0xC6F9E8 Offset: 0xC6F9E8 VA: 0xC6F9E8
	protected GameObject refreshButtonBase; // 0x60
	[SerializeField] // RVA: 0xC6F9F8 Offset: 0xC6F9F8 VA: 0xC6F9F8
	protected TitleInfoControl titleInfo; // 0x68
	[SerializeField] // RVA: 0xC6FA08 Offset: 0xC6FA08 VA: 0xC6FA08
	protected GameObject tutorialMaskBase; // 0x70
	[SerializeField] // RVA: 0xC6FA18 Offset: 0xC6FA18 VA: 0xC6FA18
	protected GameObject tutorialMaskBase2; // 0x78
	[SerializeField] // RVA: 0xC6FA28 Offset: 0xC6FA28 VA: 0xC6FA28
	protected CommonConfirmDialog commonConfirmDialog; // 0x80
	protected BattleSetupInfo battleSetupInfo; // 0x88
	protected int friendPointUpVal; // 0x90
	protected int friendPointUpMaxVal; // 0x94
	protected EventCampaignEntity[] friendPointCampaignEntityList; // 0x98
	protected static readonly int RETURN_TERMINAL_MESSAGE_FONT_SIZE; // 0x10
	protected static readonly int RETURN_TERMINAL_MESSAGE_POSITION_Y; // 0x14
	protected static readonly int RETURN_TERMINAL_MESSAGE_SPACING_Y; // 0x18
	protected FollowerRootComponent.TutorialMode tutorialMode; // 0xA0
	protected FollowerRootComponent.TutorialState tutorialState; // 0xA4
	protected FollowerRootComponent.State state; // 0xA8
	protected int selectItemNum; // 0xAC
	protected string selectFriendCode; // 0xB0
	protected Vector3 openScroll; // 0xB8
	protected Vector2 openOffset; // 0xC4
	[CompilerGeneratedAttribute] // RVA: 0xC6FA38 Offset: 0xC6FA38 VA: 0xC6FA38
	private static Action <>f__am$cache0; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC6FA48 Offset: 0xC6FA48 VA: 0xC6FA48
	private static Action <>f__am$cache1; // 0x28

	// Methods

	// RVA: 0x1372BF8 Offset: 0x1372BF8 VA: 0x1372BF8
	public void .ctor() { }

	// RVA: 0x1372C00 Offset: 0x1372C00 VA: 0x1372C00
	public static bool SetFollowerBase(UISprite sprite, string spriteName) { }

	// RVA: 0x1372CAC Offset: 0x1372CAC VA: 0x1372CAC Slot: 4
	public override void beginInitialize() { }

	// RVA: 0x1372D20 Offset: 0x1372D20 VA: 0x1372D20 Slot: 5
	public override void beginStartUp(object data) { }

	// RVA: 0x1373664 Offset: 0x1373664 VA: 0x1373664
	private void PlayBGM() { }

	// RVA: 0x1374474 Offset: 0x1374474 VA: 0x1374474
	protected void EndLoadCommonBg() { }

	// RVA: 0x1374540 Offset: 0x1374540 VA: 0x1374540
	protected void EndLoadOutGameAtlas() { }

	// RVA: 0x13745D8 Offset: 0x13745D8 VA: 0x13745D8
	protected void EndLoadEventAtlas() { }

	// RVA: 0x1374618 Offset: 0x1374618 VA: 0x1374618 Slot: 9
	public override void beginResume(object data) { }

	// RVA: 0x1375350 Offset: 0x1375350 VA: 0x1375350 Slot: 7
	public override void beginFinish() { }

	// RVA: 0x1375478 Offset: 0x1375478 VA: 0x1375478
	public void RequestFollowerList() { }

	// RVA: 0x13755A8 Offset: 0x13755A8 VA: 0x13755A8
	protected void CallbackFollowerList(string result) { }

	// RVA: 0x137560C Offset: 0x137560C VA: 0x137560C
	public void Init() { }

	// RVA: 0x13739D4 Offset: 0x13739D4 VA: 0x13739D4
	private void UpdateDeckInfomation() { }

	// RVA: 0x1375A84 Offset: 0x1375A84 VA: 0x1375A84
	public void Quit() { }

	// RVA: 0x1375AF8 Offset: 0x1375AF8 VA: 0x1375AF8
	public void SelectShowServant(FollowerSelectItemListViewItem item) { }

	// RVA: 0x1375BF8 Offset: 0x1375BF8 VA: 0x1375BF8
	protected void EndShowServant(bool isDecide) { }

	// RVA: 0x1375CF0 Offset: 0x1375CF0 VA: 0x1375CF0
	protected void EndCloseShowServant() { }

	// RVA: 0x1375D84 Offset: 0x1375D84 VA: 0x1375D84
	public void SelectShowServantEquip(EquipTargetInfo equipInfo, ServantStatusDialog.Kind statusKind) { }

	// RVA: 0x1375E70 Offset: 0x1375E70 VA: 0x1375E70
	protected void EndShowServantEquip(bool isDecide) { }

	// RVA: 0x1375F68 Offset: 0x1375F68 VA: 0x1375F68
	protected void EndCloseShowServantEquip() { }

	// RVA: 0x1373558 Offset: 0x1373558 VA: 0x1373558
	public bool ReturnQuestMenu() { }

	// RVA: 0x1374F50 Offset: 0x1374F50 VA: 0x1374F50
	public bool ReturnBattleSetupMenu() { }

	// RVA: 0x1373880 Offset: 0x1373880 VA: 0x1373880
	public bool StartBattleSetupMenu() { }

	// RVA: 0x1374EDC Offset: 0x1374EDC VA: 0x1374EDC
	private void setBattleSetupFollowType(Follower.Type type) { }

	// RVA: 0x1375FFC Offset: 0x1375FFC VA: 0x1375FFC
	public bool StartSupportInfoMenu() { }

	// RVA: 0x1375038 Offset: 0x1375038 VA: 0x1375038
	private void OnMoveEnd() { }

	// RVA: 0x1376308 Offset: 0x1376308 VA: 0x1376308
	public void OnSelectFollowerItem(FollowerSelectItemListViewManager.ResultKind kind, int n) { }

	// RVA: 0x13774F4 Offset: 0x13774F4 VA: 0x13774F4
	protected void EndRefreshConfirm(bool isDecide) { }

	// RVA: 0x13776A0 Offset: 0x13776A0 VA: 0x13776A0
	protected void CallbackRefresh(string result) { }

	// RVA: 0x137784C Offset: 0x137784C VA: 0x137784C
	protected void EndRefreshRest() { }

	// RVA: 0x13778E0 Offset: 0x13778E0 VA: 0x13778E0
	protected void EndCloseTutorialArrow() { }

	// RVA: 0x137796C Offset: 0x137796C VA: 0x137796C
	public void OnClickBack() { }

	// RVA: 0x1377F38 Offset: 0x1377F38 VA: 0x1377F38
	private void QuestHintDialogResetTemporarilyId() { }

	// RVA: 0x1377F98 Offset: 0x1377F98 VA: 0x1377F98
	protected void EndTutorialFollowerGuideNotification1() { }

	// RVA: 0x1378054 Offset: 0x1378054 VA: 0x1378054
	protected void EndTutorialFollowerGuideNotification2() { }

	// RVA: 0x1378204 Offset: 0x1378204 VA: 0x1378204
	protected void EndOpenTutorialArrow() { }

	// RVA: 0x13782A0 Offset: 0x13782A0 VA: 0x13782A0
	protected void EndTutorialFollowerCommonGuide() { }

	// RVA: 0x137833C Offset: 0x137833C VA: 0x137833C
	public BattleSetupInfo GetBattleSetupInfo() { }

	// RVA: 0x1378344 Offset: 0x1378344 VA: 0x1378344
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD0530 Offset: 0xCD0530 VA: 0xCD0530
	// RVA: 0x13783C0 Offset: 0x13783C0 VA: 0x13783C0
	private static void <Init>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD0540 Offset: 0xCD0540 VA: 0xCD0540
	// RVA: 0x1378458 Offset: 0x1378458 VA: 0x1378458
	private static void <OnSelectFollowerItem>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD0550 Offset: 0xCD0550 VA: 0xCD0550
	// RVA: 0x13784F0 Offset: 0x13784F0 VA: 0x13784F0
	private void <OnClickBack>m__2(bool isDecide) { }
}

// Namespace: 
protected enum FollowerRootComponent.TutorialMode // TypeDefIndex: 9934
{
	// Fields
	public int value__; // 0x0
	public const FollowerRootComponent.TutorialMode NONE = 0;
	public const FollowerRootComponent.TutorialMode SELECT_NONE = 1;
	public const FollowerRootComponent.TutorialMode FRIEND = 2;
	public const FollowerRootComponent.TutorialMode NPC = 3;
	public const FollowerRootComponent.TutorialMode MY_SVT_OR_NPC = 4;
}

// Namespace: 
protected enum FollowerRootComponent.TutorialState // TypeDefIndex: 9935
{
	// Fields
	public int value__; // 0x0
	public const FollowerRootComponent.TutorialState NONE = 0;
	public const FollowerRootComponent.TutorialState INIT = 1;
	public const FollowerRootComponent.TutorialState SELECT = 2;
}

// Namespace: 
protected enum FollowerRootComponent.State // TypeDefIndex: 9936
{
	// Fields
	public int value__; // 0x0
	public const FollowerRootComponent.State INIT = 0;
	public const FollowerRootComponent.State INIT_TOP = 1;
	public const FollowerRootComponent.State INIT_SHOW_FOLLOWER = 2;
	public const FollowerRootComponent.State INPUT_SHOW_FOLLOWER = 3;
	public const FollowerRootComponent.State QUIT_SHOW_FOLLOWER = 4;
	public const FollowerRootComponent.State BATTLE_SETUP_SCENE = 5;
	public const FollowerRootComponent.State SUPPORT_SHOW_SCENE = 6;
}

// Namespace: 
public class FollowerSelectItemListViewItem : ListViewItem // TypeDefIndex: 9937
{
	// Fields
	protected FollowerInfo followerInfo; // 0x70
	protected int followerClassId; // 0x78
	protected int followerIndex; // 0x7C
	protected ServantEntity servantEntity; // 0x80
	protected IconLabelInfo iconLabelInfo1; // 0x88
	protected IconLabelInfo iconLabelInfo2; // 0x90
	protected EventUpValSetupInfo setupInfo; // 0x98
	protected QuestRestrictionInfo questRestrictionInfo; // 0xA0
	protected bool isNpc; // 0xA8
	protected int friendPointUpVal; // 0xAC
	protected int friendPointUpMaxVal; // 0xB0
	protected EventCampaignEntity[] friendPointCampaignEntityList; // 0xB8
	protected EventCampaignEntity friendPointCampaignEntity; // 0xC0
	protected bool isBonusFilterEnable; // 0xC8
	protected bool isServantBonusFilterEnable; // 0xC9
	protected bool isServantEquipBonusFilterEnable; // 0xCA
	protected bool isQuestRestriction; // 0xCB
	protected bool isUniqueSvtRestriction; // 0xCC
	protected bool isMessageDisp; // 0xCD
	protected bool isLockUser; // 0xCE
	protected bool isServantEventUpVal; // 0xCF
	protected bool isEquipEventUpVal; // 0xD0
	protected bool isEventUpVal; // 0xD1
	protected EventUpValInfo eventUpValInfo; // 0xD8
	protected EventMargeItemUpValInfo[] eventUpValItemList; // 0xE0
	protected bool isRecommended; // 0xE8
	private int classIndex; // 0xEC
	private int supportDeckId; // 0xF0
	private int deckPriority; // 0xF4
	[CompilerGeneratedAttribute] // RVA: 0xC6FA58 Offset: 0xC6FA58 VA: 0xC6FA58
	[DebuggerBrowsableAttribute] // RVA: 0xC6FA58 Offset: 0xC6FA58 VA: 0xC6FA58
	private bool <isRecommendedUser>k__BackingField; // 0xF8

	// Properties
	public bool isRecommendedUser { get; set; }
	private FollowerInfo.ReturnSupportServantType DisplayServantType { get; }
	public int SelectClassId { get; }
	public int FollowerIndex { get; }
	public FollowerInfo FollowerData { get; }
	public int SvtId { get; }
	public ServantLeaderInfo ServantLeader { get; }
	public EquipTargetInfo EquipInfo { get; }
	public Follower.Type FollowerType { get; }
	public bool IsNpc { get; }
	public long FollowerId { get; }
	public string PlayerNameText { get; }
	public int PlayerLevel { get; }
	public long LoginTime { get; }
	public string SvtNameText { get; }
	public IconLabelInfo IconInfo1 { get; }
	public IconLabelInfo IconInfo2 { get; }
	public bool IsRecommended { get; }
	public bool IsEventUpVal { get; }
	public EventMargeItemUpValInfo[] EventUpValItemList { get; }
	public bool IsQuestRestriction { get; }
	public bool IsUniqueSvtRestriction { get; }
	public bool IsMessageDisp { get; }
	public bool IsLockUser { get; }
	public QuestRestrictionInfo QuestRestrictionInfo { get; }
	public int SupportDeckId { get; }

	// Methods

	// RVA: 0x170D65C Offset: 0x170D65C VA: 0x170D65C
	public void .ctor(int index, int index2, FollowerInfo followerInfo, int followerClassId, int friendPointUpVal, int friendPointUpMaxVal, EventCampaignEntity[] friendPointCampaignEntityList, bool isBonusFilterEnable, bool isServantBonusFilterEnable, bool isServantEquipBonusFilterEnable, bool isRecommended, EventUpValSetupInfo setupInfo, QuestRestrictionInfo questRestrictionInfo, bool isRecommendedUser = False, int supportDeckId = 0, int deckPriority = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD0560 Offset: 0xCD0560 VA: 0xCD0560
	// RVA: 0x170E110 Offset: 0x170E110 VA: 0x170E110
	public bool get_isRecommendedUser() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD0570 Offset: 0xCD0570 VA: 0xCD0570
	// RVA: 0x170D7D0 Offset: 0x170D7D0 VA: 0x170D7D0
	private void set_isRecommendedUser(bool value) { }

	// RVA: 0x170E118 Offset: 0x170E118 VA: 0x170E118
	private FollowerInfo.ReturnSupportServantType get_DisplayServantType() { }

	// RVA: 0x170E134 Offset: 0x170E134 VA: 0x170E134
