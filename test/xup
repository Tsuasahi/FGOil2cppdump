	// RVA: 0x2BB2B00 Offset: 0x2BB2B00 VA: 0x2BB2B00
	public int GetSpotRoadId() { }

	// RVA: 0x2BB2A80 Offset: 0x2BB2A80 VA: 0x2BB2A80
	private SpotRoadMaster GetSpotRoadMaster() { }
}

// Namespace: 
public enum MapControl.SpotRoadInfo.DispType // TypeDefIndex: 11080
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotRoadInfo.DispType None = 0;
	public const MapControl.SpotRoadInfo.DispType Normal = 1;
	public const MapControl.SpotRoadInfo.DispType Gray = 2;
}

// Namespace: 
public class MapControl.MapGimmickInfo // TypeDefIndex: 11081
{
	// Fields
	private MapControl.MapGimmickInfo.DispType dispType; // 0x10
	private int mapGimmickId; // 0x14
	private MapGimmickMaster mapGimmickMaster; // 0x18

	// Methods

	// RVA: 0x2BB051C Offset: 0x2BB051C VA: 0x2BB051C
	public void .ctor() { }

	// RVA: 0x2BB0524 Offset: 0x2BB0524 VA: 0x2BB0524
	public void Reset() { }

	// RVA: 0x2BB052C Offset: 0x2BB052C VA: 0x2BB052C
	public void SetDispType(MapControl.MapGimmickInfo.DispType dispType) { }

	// RVA: 0x2BB0534 Offset: 0x2BB0534 VA: 0x2BB0534
	public MapControl.MapGimmickInfo.DispType GetDispType() { }

	// RVA: 0x2BB053C Offset: 0x2BB053C VA: 0x2BB053C
	public void SetMine(int mapGimmickId) { }

	// RVA: 0x2BB0544 Offset: 0x2BB0544 VA: 0x2BB0544
	public MapGimmickEntity GetMine() { }

	// RVA: 0x2BB0630 Offset: 0x2BB0630 VA: 0x2BB0630
	public int GetMapGimmickId() { }

	// RVA: 0x2BB05B0 Offset: 0x2BB05B0 VA: 0x2BB05B0
	private MapGimmickMaster GetMapGimmickMaster() { }
}

// Namespace: 
public enum MapControl.MapGimmickInfo.DispType // TypeDefIndex: 11082
{
	// Fields
	public int value__; // 0x0
	public const MapControl.MapGimmickInfo.DispType None = 0;
	public const MapControl.MapGimmickInfo.DispType Normal = 1;
}

// Namespace: 
public class MapControl.MapInfo // TypeDefIndex: 11083
{
	// Fields
	private int warId; // 0x10
	private int mapId; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC7C644 Offset: 0xC7C644 VA: 0xC7C644
	[DebuggerBrowsableAttribute] // RVA: 0xC7C644 Offset: 0xC7C644 VA: 0xC7C644
	private bool <IsNext>k__BackingField; // 0x18
	private List<MapControl.SpotInfo> spotInfoList; // 0x20
	private List<MapControl.SpotRoadInfo> spotRoadInfoList; // 0x28
	private List<MapControl.MapGimmickInfo> mapGimmickInfoList; // 0x30
	private MapMaster mapMaster; // 0x38

	// Properties
	public bool IsNext { get; set; }

	// Methods

	// RVA: 0x2BB0638 Offset: 0x2BB0638 VA: 0x2BB0638
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3988 Offset: 0xCD3988 VA: 0xCD3988
	// RVA: 0x2BB0758 Offset: 0x2BB0758 VA: 0x2BB0758
	public bool get_IsNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3998 Offset: 0xCD3998 VA: 0xCD3998
	// RVA: 0x2BB0760 Offset: 0x2BB0760 VA: 0x2BB0760
	public void set_IsNext(bool value) { }

	// RVA: 0x2BB076C Offset: 0x2BB076C VA: 0x2BB076C
	public void Reset() { }

	// RVA: 0x2BABA28 Offset: 0x2BABA28 VA: 0x2BABA28
	public int GetMapID() { }

	// RVA: 0x2BB0C0C Offset: 0x2BB0C0C VA: 0x2BB0C0C
	public MapControl.SpotInfo AddChild(int spotId) { }

	// RVA: 0x2BB0D74 Offset: 0x2BB0D74 VA: 0x2BB0D74
	public List<MapControl.SpotInfo> GetSpotList() { }

	// RVA: 0x2BB0D7C Offset: 0x2BB0D7C VA: 0x2BB0D7C
	public MapControl.SpotRoadInfo AddSpotRoad(int spotRoadId) { }

	// RVA: 0x2BB0E30 Offset: 0x2BB0E30 VA: 0x2BB0E30
	public List<MapControl.SpotRoadInfo> GetSpotRoadList() { }

	// RVA: 0x2BB0E38 Offset: 0x2BB0E38 VA: 0x2BB0E38
	public MapControl.MapGimmickInfo AddMapGimmick(int mapGimmickId) { }

	// RVA: 0x2BB0EDC Offset: 0x2BB0EDC VA: 0x2BB0EDC
	public List<MapControl.MapGimmickInfo> GetMapGimmickList() { }

	// RVA: 0x2BB0EE4 Offset: 0x2BB0EE4 VA: 0x2BB0EE4
	public void SetMine(int mapId, int warId) { }

	// RVA: 0x2BB0EEC Offset: 0x2BB0EEC VA: 0x2BB0EEC
	public MapEntity GetMine() { }

	// RVA: 0x2BB0F64 Offset: 0x2BB0F64 VA: 0x2BB0F64
	private MapMaster GetMapMaster() { }
}

// Namespace: 
public class MapControl.WarInfo // TypeDefIndex: 11084
{
	// Fields
	private readonly int DEFAULT_WAR_CHECK_STATUS; // 0x10
	private int warId; // 0x14
	private int status; // 0x18
	private List<MapControl.MapInfo> mapInfoList; // 0x20
	private WarEntity mine; // 0x28

	// Methods

	// RVA: 0x2BB2078 Offset: 0x2BB2078 VA: 0x2BB2078
	public void .ctor() { }

	// RVA: 0x2BB1D80 Offset: 0x2BB1D80 VA: 0x2BB1D80
	public void Reset() { }

	// RVA: 0x2BB2B08 Offset: 0x2BB2B08 VA: 0x2BB2B08
	public MapControl.MapInfo AddChild(int mapId) { }

	// RVA: 0x2BB2BAC Offset: 0x2BB2BAC VA: 0x2BB2BAC
	public List<MapControl.MapInfo> GetMapList() { }

	// RVA: 0x2BB2BB4 Offset: 0x2BB2BB4 VA: 0x2BB2BB4
	public MapControl.MapInfo GetMap(int mapId) { }

	// RVA: 0x2BB2DA4 Offset: 0x2BB2DA4 VA: 0x2BB2DA4
	public MapControl.MapInfo GetNextMap() { }

	// RVA: 0x2BB2D38 Offset: 0x2BB2D38 VA: 0x2BB2D38
	public bool IsMultiMap() { }

	// RVA: 0x2BB2F24 Offset: 0x2BB2F24 VA: 0x2BB2F24
	public MapControl.MapInfo GetActionMap(QuestAfterAction.COMMAND_TYPE commandType, int target) { }

	// RVA: 0x2BB2634 Offset: 0x2BB2634 VA: 0x2BB2634
	public int GetWarID() { }

	// RVA: 0x2BB263C Offset: 0x2BB263C VA: 0x2BB263C
	public MapControl.WarInfo.Status GetStatus() { }

	// RVA: 0x2BB32C8 Offset: 0x2BB32C8 VA: 0x2BB32C8
	public bool IsClosedWar() { }

	// RVA: 0x2BAB9FC Offset: 0x2BAB9FC VA: 0x2BAB9FC
	public int GetEventId() { }

	// RVA: 0x2BB3344 Offset: 0x2BB3344 VA: 0x2BB3344
	public bool IsEvent() { }

	// RVA: 0x2BB2118 Offset: 0x2BB2118 VA: 0x2BB2118
	public void SetMine(int warId) { }

	// RVA: 0x2BB32B8 Offset: 0x2BB32B8 VA: 0x2BB32B8
	public bool IsStatusCheckFlagAvailable(MapControl.WarInfo.StatusCheckFlag flag) { }

	// RVA: 0x2BB3378 Offset: 0x2BB3378 VA: 0x2BB3378
	public void SetStatusCheckFlag(MapControl.WarInfo.StatusCheckFlag flag, bool setTo) { }

	// RVA: 0x2BB2270 Offset: 0x2BB2270 VA: 0x2BB2270
	public WarEntity GetMine() { }
}

// Namespace: 
public enum MapControl.WarInfo.Status // TypeDefIndex: 11085
{
	// Fields
	public int value__; // 0x0
	public const MapControl.WarInfo.Status None = 0;
	public const MapControl.WarInfo.Status Normal = 1;
	public const MapControl.WarInfo.Status New = 2;
	public const MapControl.WarInfo.Status Clear = 3;
	public const MapControl.WarInfo.Status Complete = 4;
}

// Namespace: 
public enum MapControl.WarInfo.StatusCheckFlag // TypeDefIndex: 11086
{
	// Fields
	public int value__; // 0x0
	public const MapControl.WarInfo.StatusCheckFlag isClosed = 1;
	public const MapControl.WarInfo.StatusCheckFlag isClearingAll = 2;
	public const MapControl.WarInfo.StatusCheckFlag isHasNoneUserQuest = 4;
	public const MapControl.WarInfo.StatusCheckFlag isWarLastQuestCleard = 8;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A04 Offset: 0xC45A04 VA: 0xC45A04
private sealed class MapControl.WarInfo.<GetActionMap>c__AnonStorey0 // TypeDefIndex: 11087
{
	// Fields
	internal int target; // 0x10

	// Methods

	// RVA: 0x2BB32B0 Offset: 0x2BB32B0 VA: 0x2BB32B0
	public void .ctor() { }

	// RVA: 0x2BB33A0 Offset: 0x2BB33A0 VA: 0x2BB33A0
	internal bool <>m__0(MapControl.SpotInfo x) { }

	// RVA: 0x2BB33DC Offset: 0x2BB33DC VA: 0x2BB33DC
	internal bool <>m__1(MapControl.SpotRoadInfo x) { }

	// RVA: 0x2BB3418 Offset: 0x2BB3418 VA: 0x2BB3418
	internal bool <>m__2(MapControl.MapGimmickInfo x) { }
}

// Namespace: 
public class MapControl.RootInfo // TypeDefIndex: 11088
{
	// Fields
	private List<MapControl.WarInfo> warInfoList; // 0x10

	// Methods

	// RVA: 0x2BB1BB4 Offset: 0x2BB1BB4 VA: 0x2BB1BB4
	public void .ctor() { }

	// RVA: 0x2BB1C44 Offset: 0x2BB1C44 VA: 0x2BB1C44
	public void Reset() { }

	// RVA: 0x2BB1EC4 Offset: 0x2BB1EC4 VA: 0x2BB1EC4
	public void Remove(int warId) { }

	// RVA: 0x2BB1FD8 Offset: 0x2BB1FD8 VA: 0x2BB1FD8
	public MapControl.WarInfo AddChild(int warId) { }

	// RVA: 0x2BB2120 Offset: 0x2BB2120 VA: 0x2BB2120
	public MapControl.WarInfo GetChildByWarID(int warId) { }

	// RVA: 0x2BB236C Offset: 0x2BB236C VA: 0x2BB236C
	public MapControl.WarInfo GetChildByEventID(int eventId) { }

	// RVA: 0x2BB24BC Offset: 0x2BB24BC VA: 0x2BB24BC
	public bool IsOpenedMainScenarioWar(int warId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A14 Offset: 0xC45A14 VA: 0xC45A14
private sealed class MapControl.RootInfo.<Remove>c__AnonStorey0 // TypeDefIndex: 11089
{
	// Fields
	internal int warId; // 0x10

	// Methods

	// RVA: 0x2BB1FD0 Offset: 0x2BB1FD0 VA: 0x2BB1FD0
	public void .ctor() { }

	// RVA: 0x2BB2674 Offset: 0x2BB2674 VA: 0x2BB2674
	internal bool <>m__0(MapControl.WarInfo x) { }
}

// Namespace: 
public class MapEffectComponent : CommonEffectComponent // TypeDefIndex: 11090
{
	// Fields
	[SerializeField] // RVA: 0xC7C680 Offset: 0xC7C680 VA: 0xC7C680
	private bool isCameraFollow; // 0xA8
	private MapCamera mapCamera; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC7C690 Offset: 0xC7C690 VA: 0xC7C690
	[DebuggerBrowsableAttribute] // RVA: 0xC7C690 Offset: 0xC7C690 VA: 0xC7C690
	private float <OffestPositionY>k__BackingField; // 0xB8

	// Properties
	public float OffestPositionY { get; set; }

	// Methods

	// RVA: 0x2BB3454 Offset: 0x2BB3454 VA: 0x2BB3454
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39A8 Offset: 0xCD39A8 VA: 0xCD39A8
	// RVA: 0x2BB345C Offset: 0x2BB345C VA: 0x2BB345C
	public float get_OffestPositionY() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39B8 Offset: 0xCD39B8 VA: 0xCD39B8
	// RVA: 0x2BB3464 Offset: 0x2BB3464 VA: 0x2BB3464
	public void set_OffestPositionY(float value) { }

	// RVA: 0x2BB346C Offset: 0x2BB346C VA: 0x2BB346C
	private void LateUpdate() { }

	// RVA: 0x2BB35A4 Offset: 0x2BB35A4 VA: 0x2BB35A4
	public void Setup(GameObject parent, MapCamera mapCamera) { }

	// RVA: 0x2BB3470 Offset: 0x2BB3470 VA: 0x2BB3470
	protected void UpdateCameraFollow() { }
}

// Namespace: 
public class MapGimmickComponent : MonoBehaviour // TypeDefIndex: 11091
{
	// Fields
	private const float FIXED_VAL = 1000;
	private const float MAP_GIMMICK_OFFSET_CENTER_Y = 576;
	[SerializeField] // RVA: 0xC7C6CC Offset: 0xC7C6CC VA: 0xC7C6CC
	private UISprite mSprite; // 0x18
	[SerializeField] // RVA: 0xC7C6DC Offset: 0xC7C6DC VA: 0xC7C6DC
	private int mDepthBase; // 0x20
	[SerializeField] // RVA: 0xC7C6EC Offset: 0xC7C6EC VA: 0xC7C6EC
	private float mScaleBase; // 0x24
	[SerializeField] // RVA: 0xC7C6FC Offset: 0xC7C6FC VA: 0xC7C6FC
	private float mAnimTime; // 0x28
	[SerializeField] // RVA: 0xC7C70C Offset: 0xC7C70C VA: 0xC7C70C
	private Easing.TYPE mEasingType; // 0x2C
	[SerializeField] // RVA: 0xC7C71C Offset: 0xC7C71C VA: 0xC7C71C
	private string mHideSeName; // 0x30
	[SerializeField] // RVA: 0xC7C72C Offset: 0xC7C72C VA: 0xC7C72C
	private string mDispSeName; // 0x38
	private CStateManager<MapGimmickComponent> mFSM; // 0x40
	private long mOldDispTime; // 0x48
	private CommonEffectComponent commonEffectComponent; // 0x50
	private CommonEffectComponent actionEffect; // 0x58
	private MapControl.MapGimmickInfo mMapCtrl_MapGimmickInfo; // 0x60
	private Action mStateEndAct; // 0x68

	// Methods

	// RVA: 0x2BB3F80 Offset: 0x2BB3F80 VA: 0x2BB3F80
	public void .ctor() { }

	// RVA: 0x2BB4024 Offset: 0x2BB4024 VA: 0x2BB4024
	public static string GetGobjName(int id) { }

	// RVA: 0x2BB40BC Offset: 0x2BB40BC VA: 0x2BB40BC
	public MapControl.MapGimmickInfo GetMapCtrl_MapGimmickInfo() { }

	// RVA: 0x2BB40C4 Offset: 0x2BB40C4 VA: 0x2BB40C4
	private float GetAnimTime() { }

	// RVA: 0x2BB4124 Offset: 0x2BB4124 VA: 0x2BB4124
	private void Awake() { }

	// RVA: 0x2BB435C Offset: 0x2BB435C VA: 0x2BB435C
	private void Update() { }

	// RVA: 0x2BB43BC Offset: 0x2BB43BC VA: 0x2BB43BC
	public void Setup(MapControl.MapGimmickInfo mg_inf, MapCamera mapCamera, List<UIAtlas> atlases, AssetData assetData, AssetData multiAssetData) { }

	// RVA: 0x2BB5080 Offset: 0x2BB5080 VA: 0x2BB5080
	private GameObject GetEffectPrefab(string effectPrefabName, AssetData assetData, AssetData multiAssetData) { }

	// RVA: 0x2BB5188 Offset: 0x2BB5188 VA: 0x2BB5188
	private CommonEffectComponent GetCommonEffectComponent(GameObject prefab, MapCamera mapCamera) { }

	// RVA: 0x2BB5380 Offset: 0x2BB5380 VA: 0x2BB5380
	public MapGimmickComponent.STATE GetState() { }

	// RVA: 0x2BB42E4 Offset: 0x2BB42E4 VA: 0x2BB42E4
	public void SetState(MapGimmickComponent.STATE state, Action end_act) { }

	// RVA: 0x2BB53E0 Offset: 0x2BB53E0 VA: 0x2BB53E0
	private void StartActionEffect() { }

	// RVA: 0x2BB54B4 Offset: 0x2BB54B4 VA: 0x2BB54B4
	private void StateDispAnimEnd() { }

	// RVA: 0x2BB54E8 Offset: 0x2BB54E8 VA: 0x2BB54E8
	public void SetDispAnim(bool is_disp) { }

	// RVA: 0x2BB5904 Offset: 0x2BB5904 VA: 0x2BB5904
	public void SetDispAnimQuick(bool is_disp) { }

	// RVA: 0x2BB5518 Offset: 0x2BB5518 VA: 0x2BB5518
	private void SetDispAnim(bool is_disp, float time, bool is_play_se) { }

	// RVA: 0x2BB5ACC Offset: 0x2BB5ACC VA: 0x2BB5ACC
	public void SetMoveAnim(Vector3 posTo, float time, Easing.TYPE easeType, Action callback) { }

	// RVA: 0x2BB59F8 Offset: 0x2BB59F8 VA: 0x2BB59F8
	private void StateHideAnimEnd() { }

	// RVA: 0x2BB591C Offset: 0x2BB591C VA: 0x2BB591C
	private void SetTouchEnable(bool enabled) { }
}

// Namespace: 
public enum MapGimmickComponent.STATE // TypeDefIndex: 11092
{
	// Fields
	public int value__; // 0x0
	public const MapGimmickComponent.STATE NONE = 0;
	public const MapGimmickComponent.STATE MAP_MAIN = 1;
	public const MapGimmickComponent.STATE HIDE_ANIM = 2;
	public const MapGimmickComponent.STATE DISP_ANIM = 3;
	public const MapGimmickComponent.STATE SIZEOF = 4;
}

// Namespace: 
private class MapGimmickComponent.StateNone : IState<MapGimmickComponent> // TypeDefIndex: 11093
{
	// Methods

	// RVA: 0x2BB42C4 Offset: 0x2BB42C4 VA: 0x2BB42C4
	public void .ctor() { }

	// RVA: 0x2BB6680 Offset: 0x2BB6680 VA: 0x2BB6680 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x2BB6684 Offset: 0x2BB6684 VA: 0x2BB6684 Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x2BB6688 Offset: 0x2BB6688 VA: 0x2BB6688 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
private class MapGimmickComponent.StateMapMain : IState<MapGimmickComponent> // TypeDefIndex: 11094
{
	// Fields
	public static readonly int CHECK_DISP_ITVL_SEC; // 0x0
	private MapGimmickComponent mThat; // 0x10

	// Methods

	// RVA: 0x2BB42CC Offset: 0x2BB42CC VA: 0x2BB42CC
	public void .ctor() { }

	// RVA: 0x2BB6484 Offset: 0x2BB6484 VA: 0x2BB6484 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x2BB648C Offset: 0x2BB648C VA: 0x2BB648C Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x2BB6628 Offset: 0x2BB6628 VA: 0x2BB6628 Slot: 6
	public void end(MapGimmickComponent that) { }

	// RVA: 0x2BB6490 Offset: 0x2BB6490 VA: 0x2BB6490
	private void CheckDispTime() { }

	// RVA: 0x2BB662C Offset: 0x2BB662C VA: 0x2BB662C
	private static void .cctor() { }
}

// Namespace: 
private class MapGimmickComponent.StateHideAnim : IState<MapGimmickComponent> // TypeDefIndex: 11095
{
	// Methods

	// RVA: 0x2BB42D4 Offset: 0x2BB42D4 VA: 0x2BB42D4
	public void .ctor() { }

	// RVA: 0x2BB6404 Offset: 0x2BB6404 VA: 0x2BB6404 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x2BB647C Offset: 0x2BB647C VA: 0x2BB647C Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x2BB6480 Offset: 0x2BB6480 VA: 0x2BB6480 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
private class MapGimmickComponent.StateDispAnim : IState<MapGimmickComponent> // TypeDefIndex: 11096
{
	// Methods

	// RVA: 0x2BB42DC Offset: 0x2BB42DC VA: 0x2BB42DC
	public void .ctor() { }

	// RVA: 0x2BB6370 Offset: 0x2BB6370 VA: 0x2BB6370 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x2BB63FC Offset: 0x2BB63FC VA: 0x2BB63FC Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x2BB6400 Offset: 0x2BB6400 VA: 0x2BB6400 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A24 Offset: 0xC45A24 VA: 0xC45A24
private sealed class MapGimmickComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 11097
{
	// Fields
	internal MapGimmickEntity mg_ent; // 0x10

	// Methods

	// RVA: 0x2BB5078 Offset: 0x2BB5078 VA: 0x2BB5078
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A34 Offset: 0xC45A34 VA: 0xC45A34
private sealed class MapGimmickComponent.<Setup>c__AnonStorey1 // TypeDefIndex: 11098
{
	// Fields
	internal EventDetailEntity eventDetailEnt; // 0x10
	internal EventMissionEntity[] eventMissionEntList; // 0x18
	internal MapGimmickComponent.<Setup>c__AnonStorey0 <>f__ref$0; // 0x20

	// Methods

	// RVA: 0x2BB5378 Offset: 0x2BB5378 VA: 0x2BB5378
	public void .ctor() { }

	// RVA: 0x2BB5FB4 Offset: 0x2BB5FB4 VA: 0x2BB5FB4
	internal void <>m__0() { }

	// RVA: 0x2BB6108 Offset: 0x2BB6108 VA: 0x2BB6108
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A44 Offset: 0xC45A44 VA: 0xC45A44
private sealed class MapGimmickComponent.<SetDispAnim>c__AnonStorey2 // TypeDefIndex: 11099
{
	// Fields
	internal int to; // 0x10
	internal float from; // 0x14
	internal EasingObject eo; // 0x18
	internal MapGimmickComponent $this; // 0x20

	// Methods

	// RVA: 0x2BB5914 Offset: 0x2BB5914 VA: 0x2BB5914
	public void .ctor() { }

	// RVA: 0x2BB5CD0 Offset: 0x2BB5CD0 VA: 0x2BB5CD0
	internal void <>m__0() { }

	// RVA: 0x2BB5D54 Offset: 0x2BB5D54 VA: 0x2BB5D54
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45A54 Offset: 0xC45A54 VA: 0xC45A54
private sealed class MapGimmickComponent.<SetMoveAnim>c__AnonStorey3 // TypeDefIndex: 11100
{
	// Fields
	internal Vector3 posTo; // 0x10
	internal Action callback; // 0x20
	internal Vector3 posFrom; // 0x28
	internal EasingObject eo; // 0x38
	internal MapGimmickComponent $this; // 0x40

	// Methods

	// RVA: 0x2BB5CC8 Offset: 0x2BB5CC8 VA: 0x2BB5CC8
	public void .ctor() { }

	// RVA: 0x2BB5DE8 Offset: 0x2BB5DE8 VA: 0x2BB5DE8
	internal void <>m__0() { }

	// RVA: 0x2BB5E7C Offset: 0x2BB5E7C VA: 0x2BB5E7C
	internal void <>m__1() { }
}

// Namespace: 
public class MapGimmickEffectComponent : CommonEffectComponent // TypeDefIndex: 11101
{
	// Fields
	[SerializeField] // RVA: 0xC7C73C Offset: 0xC7C73C VA: 0xC7C73C
	protected string startAnimationName; // 0xA8
	[SerializeField] // RVA: 0xC7C74C Offset: 0xC7C74C VA: 0xC7C74C
	protected string loopAnimationName; // 0xB0
	[SerializeField] // RVA: 0xC7C75C Offset: 0xC7C75C VA: 0xC7C75C
	protected string endAnimationName; // 0xB8

	// Methods

	// RVA: 0x2BB668C Offset: 0x2BB668C VA: 0x2BB668C
	public void .ctor() { }

	// RVA: 0x2BB6694 Offset: 0x2BB6694 VA: 0x2BB6694
	private string GetAnimationName(CommonEffectComponent.Status status) { }

	// RVA: 0x2BB6AC0 Offset: 0x2BB6AC0 VA: 0x2BB6AC0 Slot: 5
	protected override void NextPlayAnimation(CommonEffectComponent.Status next) { }

	// RVA: 0x2BB6F04 Offset: 0x2BB6F04 VA: 0x2BB6F04 Slot: 6
	public override void ForceStart(bool isOverWrite, Action callback) { }

	// RVA: 0x2BB7214 Offset: 0x2BB7214 VA: 0x2BB7214 Slot: 7
	public override void ForceLoop(bool isOverWrite) { }

	// RVA: 0x2BB7514 Offset: 0x2BB7514 VA: 0x2BB7514 Slot: 8
	public override void Stop(bool isDestroy = True, Action callback) { }
}

// Namespace: 
public class MapScroll // TypeDefIndex: 11102
{
	// Fields
	private const int AcceptTouchCountMin = 1;
	private const int AcceptTouchCountMax = 2;
	private MapCamera mMapCamera; // 0x10
	private Vector2 mTgt; // 0x18
	private Vector2 mTchDif; // 0x20
	private Vector2 mTchDifOld; // 0x28
	private Vector2 mSpd; // 0x30
	private Vector2 mInertiaSpd; // 0x38
	private Camera mCamera; // 0x40
	private MapTouchDetector touchDetector; // 0x48
	private Action mPlaySEAction_Flick; // 0x50
	private Vector2 mAutoMvStPos; // 0x58
	private Vector2 mAutoMvEdPos; // 0x60
	private float mAutoMvTime; // 0x68
	private float mAutoMvDuration; // 0x6C
	private Easing.TYPE mAutoMvEaseType; // 0x70
	private Action mAutoMvEndAct; // 0x78
	public float UserTotalScrollAmount; // 0x80

	// Methods

	// RVA: 0x1491910 Offset: 0x1491910 VA: 0x1491910
	public void .ctor() { }

	// RVA: 0x1491918 Offset: 0x1491918 VA: 0x1491918
	public void Init(MapCamera mc, MapTouchDetector touchDetector) { }

	// RVA: 0x14919C8 Offset: 0x14919C8 VA: 0x14919C8
	public void UnInit() { }

	// RVA: 0x14919D4 Offset: 0x14919D4 VA: 0x14919D4
	public void Process() { }

	// RVA: 0x14923F0 Offset: 0x14923F0 VA: 0x14923F0
	public void StartAutoMove(Vector3 screenPos, float sec, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x149214C Offset: 0x149214C VA: 0x149214C
	public void Stop(bool is_force = False) { }

	// RVA: 0x1492284 Offset: 0x1492284 VA: 0x1492284
	public bool IsStop() { }

	// RVA: 0x14924E0 Offset: 0x14924E0 VA: 0x14924E0
	public Vector2 GetScrlTgtPos() { }

	// RVA: 0x14924E8 Offset: 0x14924E8 VA: 0x14924E8
	public void SetScrlTgtPos(Vector2 pos) { }

	// RVA: 0x14924F0 Offset: 0x14924F0 VA: 0x14924F0
	public void AddScrlTgtPos(Vector2 pos) { }

	// RVA: 0x1492208 Offset: 0x1492208 VA: 0x1492208
	private bool BrakeMv(float spd_rate = 0) { }

	// RVA: 0x1492588 Offset: 0x1492588 VA: 0x1492588
	private bool BrakeMv(Rect cam_rect, float spd_rate = 0) { }

	// RVA: 0x149230C Offset: 0x149230C VA: 0x149230C
	private void LimitMv() { }

	// RVA: 0x1492864 Offset: 0x1492864 VA: 0x1492864
	private Vector2 LimitMv(Vector2 pos, Rect cam_rect, float rebound_rate = 0) { }

	// RVA: 0x1492068 Offset: 0x1492068 VA: 0x1492068
	public Vector2 GetScrlPos() { }

	// RVA: 0x1492AA0 Offset: 0x1492AA0 VA: 0x1492AA0
	public Vector3 GetScrlPosVec3() { }

	// RVA: 0x14920FC Offset: 0x14920FC VA: 0x14920FC
	public void SetScrlPos(Vector2 pos) { }
}

// Namespace: 
public class MapShakerComponent : MonoBehaviour // TypeDefIndex: 11103
{
	// Fields
	public float MagnitudeXMax; // 0x18
	public float MagnitudeXMin; // 0x1C
	public float MagnitudeYMax; // 0x20
	public float MagnitudeYMin; // 0x24
	public MapShakerComponent.ShakeType shakeType; // 0x28
	private GameObject toShake; // 0x30
	private int flag; // 0x38
	private int frameCnt; // 0x3C

	// Methods

	// RVA: 0x1492AD8 Offset: 0x1492AD8 VA: 0x1492AD8
	public void .ctor() { }

	// RVA: 0x1492AF8 Offset: 0x1492AF8 VA: 0x1492AF8
	private void Start() { }

	// RVA: 0x1492B98 Offset: 0x1492B98 VA: 0x1492B98
	private void Update() { }

	// RVA: 0x1492DD8 Offset: 0x1492DD8 VA: 0x1492DD8
	private void OnDisable() { }

	// RVA: 0x1492AFC Offset: 0x1492AFC VA: 0x1492AFC
	private void getMap() { }
}

// Namespace: 
public enum MapShakerComponent.ShakeType // TypeDefIndex: 11104
{
	// Fields
	public int value__; // 0x0
	public const MapShakerComponent.ShakeType RANDOM_COORDINATE = 0;
	public const MapShakerComponent.ShakeType FLAGED_RANDOM = 1;
	public const MapShakerComponent.ShakeType FREQUENTIZED_RANDOM = 2;
}

// Namespace: 
public class MapZoom // TypeDefIndex: 11105
{
	// Fields
	public static readonly float ZOOM_DEFAULT; // 0x0
	public static readonly float ZOOM_MIN; // 0x4
	public static readonly float ZOOM_BASE_MAX_X; // 0x8
	public static readonly float ZOOM_BASE_MAX_Y; // 0xC
	public static readonly float ZOOM_MARGIN; // 0x10
	private const int AcceptTouchCountMin = 2;
	private const int AcceptTouchCountMax = 2;
	private float mZoomMax; // 0x10
	private float mZoomRange; // 0x14
	private float mZoomMargin; // 0x18
	private MapCamera mMapCamera; // 0x20
	private float mTgt; // 0x28
	private float mSpd; // 0x2C
	private Camera mCamera; // 0x30
	private MapTouchDetector touchDetector; // 0x38
	private float startMTgt; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC7C76C Offset: 0xC7C76C VA: 0xC7C76C
	[DebuggerBrowsableAttribute] // RVA: 0xC7C76C Offset: 0xC7C76C VA: 0xC7C76C
	private bool <IsZoomMaxFit>k__BackingField; // 0x44
	[CompilerGeneratedAttribute] // RVA: 0xC7C7A8 Offset: 0xC7C7A8 VA: 0xC7C7A8
	[DebuggerBrowsableAttribute] // RVA: 0xC7C7A8 Offset: 0xC7C7A8 VA: 0xC7C7A8
	private bool <IsZoomMaxFitPosFix>k__BackingField; // 0x45
	private float mAutoZmStVal; // 0x48
	private float mAutoZmEdVal; // 0x4C
	private float mAutoZmTime; // 0x50
	private float mAutoZmDuration; // 0x54
	private Easing.TYPE mAutoZmEaseType; // 0x58
	private Action mAutoZmEndAct; // 0x60
	private bool mIsAutoZoom; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC7C7E4 Offset: 0xC7C7E4 VA: 0xC7C7E4
	[DebuggerBrowsableAttribute] // RVA: 0xC7C7E4 Offset: 0xC7C7E4 VA: 0xC7C7E4
	private float <UserTotalZoomAmount>k__BackingField; // 0x6C

	// Properties
	public float ZoomMargin { get; }
	public float ZoomMin { get; }
	public float ZoomMax { get; }
	public bool IsZoomMaxFit { get; set; }
	public bool IsZoomMaxFitPosFix { get; set; }
	public bool IsAutoZoom { get; }
	public float UserTotalZoomAmount { get; set; }

	// Methods

	// RVA: 0x14937A0 Offset: 0x14937A0 VA: 0x14937A0
	public void .ctor() { }

	// RVA: 0x14937A8 Offset: 0x14937A8 VA: 0x14937A8
	public float get_ZoomMargin() { }

	// RVA: 0x14937B0 Offset: 0x14937B0 VA: 0x14937B0
	public float get_ZoomMin() { }

	// RVA: 0x1493818 Offset: 0x1493818 VA: 0x1493818
	public float get_ZoomMax() { }

	// RVA: 0x1493820 Offset: 0x1493820 VA: 0x1493820
	public void SetZoomRate(float rate, bool xBaseUse) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39C8 Offset: 0xCD39C8 VA: 0xCD39C8
	// RVA: 0x1493930 Offset: 0x1493930 VA: 0x1493930
	public bool get_IsZoomMaxFit() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39D8 Offset: 0xCD39D8 VA: 0xCD39D8
	// RVA: 0x1493924 Offset: 0x1493924 VA: 0x1493924
	private void set_IsZoomMaxFit(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39E8 Offset: 0xCD39E8 VA: 0xCD39E8
	// RVA: 0x1492200 Offset: 0x1492200 VA: 0x1492200
	public bool get_IsZoomMaxFitPosFix() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD39F8 Offset: 0xCD39F8 VA: 0xCD39F8
	// RVA: 0x1493938 Offset: 0x1493938 VA: 0x1493938
	private void set_IsZoomMaxFitPosFix(bool value) { }

	// RVA: 0x1493944 Offset: 0x1493944 VA: 0x1493944
	public bool get_IsAutoZoom() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3A08 Offset: 0xCD3A08 VA: 0xCD3A08
	// RVA: 0x149394C Offset: 0x149394C VA: 0x149394C
	public float get_UserTotalZoomAmount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3A18 Offset: 0xCD3A18 VA: 0xCD3A18
	// RVA: 0x1493954 Offset: 0x1493954 VA: 0x1493954
	private void set_UserTotalZoomAmount(float value) { }

	// RVA: 0x149395C Offset: 0x149395C VA: 0x149395C
	public void Init(MapCamera mc, MapTouchDetector touchDetector) { }

	// RVA: 0x1493B38 Offset: 0x1493B38 VA: 0x1493B38
	public void UnInit() { }

	// RVA: 0x1493C48 Offset: 0x1493C48 VA: 0x1493C48
	public void Process() { }

	// RVA: 0x1494170 Offset: 0x1494170 VA: 0x1494170
	public void StartAutoZoom(float zoom, float sec, Easing.TYPE easeType = 5, Action endAct) { }

	// RVA: 0x149413C Offset: 0x149413C VA: 0x149413C
	public void ResetZoomMaxFlag() { }

	// RVA: 0x1494154 Offset: 0x1494154 VA: 0x1494154
	public void Stop(bool is_force = False) { }

	// RVA: 0x1494144 Offset: 0x1494144 VA: 0x1494144
	public bool IsStop() { }

	// RVA: 0x1493F2C Offset: 0x1493F2C VA: 0x1493F2C
	private void Limit(float spd_rate) { }

	// RVA: 0x1492254 Offset: 0x1492254 VA: 0x1492254
	public float GetZoomSize() { }

	// RVA: 0x1493B44 Offset: 0x1493B44 VA: 0x1493B44
	public void SetZoomSize(float size, bool is_tgt_update = False, bool ignoreMaxFlag = False) { }

	// RVA: 0x149278C Offset: 0x149278C VA: 0x149278C
	public float GetZoomRate() { }

	// RVA: 0x1493FFC Offset: 0x1493FFC VA: 0x1493FFC
	private float CalcZoomByPinch() { }

	[ConditionalAttribute] // RVA: 0xCD3A28 Offset: 0xCD3A28 VA: 0xCD3A28
	// RVA: 0x14941D4 Offset: 0x14941D4 VA: 0x14941D4
	private void MouseScrollWheel() { }

	// RVA: 0x14942A0 Offset: 0x14942A0 VA: 0x14942A0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3A60 Offset: 0xCD3A60 VA: 0xCD3A60
	// RVA: 0x149433C Offset: 0x149433C VA: 0x149433C
	private void <Init>m__0(int oldTouchCount, int newTouchCount) { }
}

// Namespace: 
public class PlayerStatusRaidPointComponent : MonoBehaviour // TypeDefIndex: 11106
{
	// Fields
	private static readonly int RAID_MARKDISP_STEP_DEFAULT; // 0x0
	private static readonly string[] RP_SPNAME_FRAME; // 0x8
	private static readonly string[] RP_SPNAME_NORMAL; // 0x10
	private static readonly string[] RP_SPNAME_OVER; // 0x18
	private static readonly int[] RP_OFFSET; // 0x20
	[SerializeField] // RVA: 0xC7C820 Offset: 0xC7C820 VA: 0xC7C820
	private UISprite raidPointSp; // 0x18
	[SerializeField] // RVA: 0xC7C830 Offset: 0xC7C830 VA: 0xC7C830
	private UISprite raidFrameSp; // 0x20
	[SerializeField] // RVA: 0xC7C840 Offset: 0xC7C840 VA: 0xC7C840
	private UISprite markFrontSp; // 0x28
	[SerializeField] // RVA: 0xC7C850 Offset: 0xC7C850 VA: 0xC7C850
	private UISprite markBackSp; // 0x30
	private int BpType; // 0x38

	// Methods

	// RVA: 0x177E664 Offset: 0x177E664 VA: 0x177E664
	public void .ctor() { }

	// RVA: 0x177E66C Offset: 0x177E66C VA: 0x177E66C
	public void Setup(int index, int iBpType) { }

	// RVA: 0x177E948 Offset: 0x177E948 VA: 0x177E948
	public void SetDispType(PlayerStatusRaidPointComponent.DispType dispType) { }

	// RVA: 0x177EB40 Offset: 0x177EB40 VA: 0x177EB40
	private static void .cctor() { }
}

// Namespace: 
public enum PlayerStatusRaidPointComponent.DispType // TypeDefIndex: 11107
{
	// Fields
	public int value__; // 0x0
	public const PlayerStatusRaidPointComponent.DispType EMPTY = 0;
	public const PlayerStatusRaidPointComponent.DispType NORMAL = 1;
	public const PlayerStatusRaidPointComponent.DispType OVER = 2;
}

// Namespace: 
public class QuestAfterAction : SingletonMonoBehaviour<QuestAfterAction> // TypeDefIndex: 11108
{
	// Fields
	public const float ANIM_TIME = 0.5;
	public const UITweener.Method ANIM_TWEEN_METHOD = 2;
	private const string MESSAGE_KEY_PREFIX = "QUEST_AFTER_ACTION_MESSAGE_";
	public const string AFTER_ACTION_QUEST_KEY = "afterActionBk";
	private const int NOTICE_WINDOW_DEPTH = 210;
	private const int NOTICE_OTHER_WINDOW_FONT_SIZE = 28;
	private const float NOTICE_OTHER_WINDOW_POSITION_Y = 40;
	private const float NOTICE_OTHER_WINDOW_BUTTON_Y = -162.5;
	private const int NOTICE_WINDOW_BOOST_SUPPOR_FONT_SIZE = 30;
	private const float NOTICE_WINDOW_BOOST_SUPPOR_POSITION_Y = 30;
	private List<int> invalidMapGimmickIdList; // 0x18
	private const int COMMAND_SIZE = 2;
	private QuestAfterAction.Command[] commandBuf; // 0x20
	private int commandIdx; // 0x28
	private Dictionary<QuestAfterAction.COMMAND_TYPE, List<int>> commandTypeIds; // 0x30
	private Dictionary<int, QuestAfterAction.VoiceInfo> svtVoices; // 0x38
	private CStateManager<QuestAfterAction> fsm; // 0x40
	[SerializeField] // RVA: 0xC7C860 Offset: 0xC7C860 VA: 0xC7C860
	private GameObject mSpotRoot; // 0x48
	[SerializeField] // RVA: 0xC7C870 Offset: 0xC7C870 VA: 0xC7C870
	private GameObject mRoadRoot; // 0x50
	[SerializeField] // RVA: 0xC7C880 Offset: 0xC7C880 VA: 0xC7C880
	private GameObject mGimmickRoot; // 0x58
	[SerializeField] // RVA: 0xC7C890 Offset: 0xC7C890 VA: 0xC7C890
	private MapCamera mMapCamera; // 0x60
	private BoxCollider screenCollider; // 0x68
	private bool isLoadedVoice; // 0x70
	private bool isSkippedNext; // 0x71
	private Action endAct; // 0x78
	private SrcSpotBasePrefab lastDispSpot; // 0x80
	private bool hasFadeCommand; // 0x88
	private bool isRequestedStopBgm; // 0x89
	public QuestAfterAction.COMMAND_TYPE ActionMapTargetType; // 0x8C
	public int ActionMapTargetId; // 0x90

	// Properties
	public bool HasFadeCommand { get; set; }
	public bool IsRequestedStopBgm { get; set; }

	// Methods

	// RVA: 0x12E1124 Offset: 0x12E1124 VA: 0x12E1124
	public void .ctor() { }

	// RVA: 0x12E11C4 Offset: 0x12E11C4 VA: 0x12E11C4
	public static void DeleteContinueData() { }

	// RVA: 0x12E1210 Offset: 0x12E1210 VA: 0x12E1210
	public bool IsActiveCommand() { }

	// RVA: 0x12E1220 Offset: 0x12E1220 VA: 0x12E1220
	public bool IsPlaying() { }

	// RVA: 0x12E129C Offset: 0x12E129C VA: 0x12E129C
	public SrcSpotBasePrefab GetLastDispSpot() { }

	// RVA: 0x12E12A4 Offset: 0x12E12A4 VA: 0x12E12A4
	public void Init() { }

	// RVA: 0x12E158C Offset: 0x12E158C VA: 0x12E158C
	public void CreateCommandBuf(bool isBeforeAction = False) { }

	// RVA: 0x12E358C Offset: 0x12E358C VA: 0x12E358C
	private int[] GetMapGimmickId(int spotId) { }

	// RVA: 0x12E3710 Offset: 0x12E3710 VA: 0x12E3710
	public int[] getMapGmkOffIdList() { }

	// RVA: 0x12E321C Offset: 0x12E321C VA: 0x12E321C
	private QuestAfterAction.COMMAND_TYPE GetCommandType(int commandId) { }

	// RVA: 0x12E3270 Offset: 0x12E3270 VA: 0x12E3270
	private void SetActionMap(QuestAfterAction.Command com) { }

	// RVA: 0x12E3770 Offset: 0x12E3770 VA: 0x12E3770
	public bool IsExistCommand(QuestAfterAction.COMMAND_TYPE commandType, int commandTypeId) { }

	// RVA: 0x12E3848 Offset: 0x12E3848 VA: 0x12E3848
	public void LoadVoice(Action endAct) { }

	// RVA: 0x12E391C Offset: 0x12E391C VA: 0x12E391C
	private void LoadVoice(List<QuestAfterAction.VoiceInfo> svtVInfos, Action endAct) { }

	// RVA: 0x12E28A4 Offset: 0x12E28A4 VA: 0x12E28A4
	public void releaseVoice() { }

	// RVA: 0x12E227C Offset: 0x12E227C VA: 0x12E227C
