	// RVA: -1 Offset: -1 Slot: 6
	protected abstract ECPoint Detach();

	// RVA: 0x25081B8 Offset: 0x25081B8 VA: 0x25081B8 Slot: 7
	protected virtual int get_CurveCoordinateSystem() { }

	// RVA: 0x25081D4 Offset: 0x25081D4 VA: 0x25081D4 Slot: 8
	public virtual ECFieldElement get_X() { }

	// RVA: 0x2508214 Offset: 0x2508214 VA: 0x2508214 Slot: 9
	public virtual ECFieldElement get_Y() { }

	// RVA: 0x2508254 Offset: 0x2508254 VA: 0x2508254 Slot: 10
	public virtual ECFieldElement get_AffineXCoord() { }

	// RVA: 0x250828C Offset: 0x250828C VA: 0x250828C Slot: 11
	public virtual ECFieldElement get_AffineYCoord() { }

	// RVA: 0x25082C4 Offset: 0x25082C4 VA: 0x25082C4 Slot: 12
	public virtual ECFieldElement get_XCoord() { }

	// RVA: 0x25082CC Offset: 0x25082CC VA: 0x25082CC Slot: 13
	public virtual ECFieldElement get_YCoord() { }

	// RVA: 0x25082D4 Offset: 0x25082D4 VA: 0x25082D4 Slot: 14
	public virtual ECFieldElement GetZCoord(int index) { }

	// RVA: 0x250835C Offset: 0x250835C VA: 0x250835C Slot: 15
	public virtual ECFieldElement[] GetZCoords() { }

	// RVA: 0x24FB548 Offset: 0x24FB548 VA: 0x24FB548
	protected internal ECFieldElement get_RawXCoord() { }

	// RVA: 0x24FB550 Offset: 0x24FB550 VA: 0x24FB550
	protected internal ECFieldElement get_RawYCoord() { }

	// RVA: 0x24FB578 Offset: 0x24FB578 VA: 0x24FB578
	protected internal ECFieldElement[] get_RawZCoords() { }

	// RVA: 0x25083F8 Offset: 0x25083F8 VA: 0x25083F8 Slot: 16
	protected virtual void CheckNormalized() { }

	// RVA: 0x2508494 Offset: 0x2508494 VA: 0x2508494 Slot: 17
	public virtual bool IsNormalized() { }

	// RVA: 0x2508530 Offset: 0x2508530 VA: 0x2508530 Slot: 18
	public virtual ECPoint Normalize() { }

	// RVA: 0x2508600 Offset: 0x2508600 VA: 0x2508600 Slot: 19
	internal virtual ECPoint Normalize(ECFieldElement zInv) { }

	// RVA: 0x2508724 Offset: 0x2508724 VA: 0x2508724 Slot: 20
	protected virtual ECPoint CreateScaledPoint(ECFieldElement sx, ECFieldElement sy) { }

	// RVA: 0x24FB558 Offset: 0x24FB558 VA: 0x24FB558
	public bool get_IsInfinity() { }

	// RVA: 0x24FBEF4 Offset: 0x24FBEF4 VA: 0x24FBEF4
	public bool get_IsCompressed() { }

	// RVA: 0x2504E00 Offset: 0x2504E00 VA: 0x2504E00
	public bool IsValid() { }

	// RVA: 0x25087E8 Offset: 0x25087E8 VA: 0x25087E8 Slot: 21
	public virtual ECPoint ScaleX(ECFieldElement scale) { }

	// RVA: 0x25088B4 Offset: 0x25088B4 VA: 0x25088B4 Slot: 22
	public virtual ECPoint ScaleY(ECFieldElement scale) { }

	// RVA: 0x2508980 Offset: 0x2508980 VA: 0x2508980 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2508A1C Offset: 0x2508A1C VA: 0x2508A1C Slot: 23
	public virtual bool Equals(ECPoint other) { }

	// RVA: 0x2508D54 Offset: 0x2508D54 VA: 0x2508D54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2508E3C Offset: 0x2508E3C VA: 0x2508E3C Slot: 3
	public override string ToString() { }

	// RVA: 0x250903C Offset: 0x250903C VA: 0x250903C Slot: 24
	public virtual byte[] GetEncoded() { }

	// RVA: -1 Offset: -1 Slot: 25
	public abstract byte[] GetEncoded(bool compressed);

	// RVA: -1 Offset: -1 Slot: 26
	protected internal abstract bool get_CompressionYTilde();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract ECPoint Add(ECPoint b);

	// RVA: -1 Offset: -1 Slot: 28
	public abstract ECPoint Subtract(ECPoint b);

	// RVA: -1 Offset: -1 Slot: 29
	public abstract ECPoint Negate();

	// RVA: 0x2509050 Offset: 0x2509050 VA: 0x2509050 Slot: 30
	public virtual ECPoint TimesPow2(int e) { }

	// RVA: -1 Offset: -1 Slot: 31
	public abstract ECPoint Twice();

	// RVA: -1 Offset: -1 Slot: 32
	public abstract ECPoint Multiply(BigInteger b);

	// RVA: 0x2509128 Offset: 0x2509128 VA: 0x2509128 Slot: 33
	public virtual ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2509178 Offset: 0x2509178 VA: 0x2509178 Slot: 34
	public virtual ECPoint ThreeTimes() { }

	// RVA: 0x250918C Offset: 0x250918C VA: 0x250918C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECPointBase : ECPoint // TypeDefIndex: 5126
{
	// Methods

	// RVA: 0x25091F0 Offset: 0x25091F0 VA: 0x25091F0
	protected internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2509284 Offset: 0x2509284 VA: 0x2509284
	protected internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x250932C Offset: 0x250932C VA: 0x250932C Slot: 25
	public override byte[] GetEncoded(bool compressed) { }

	// RVA: 0x2509560 Offset: 0x2509560 VA: 0x2509560 Slot: 32
	public override ECPoint Multiply(BigInteger k) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractFpPoint : ECPointBase // TypeDefIndex: 5127
{
	// Properties
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2652C78 Offset: 0x2652C78 VA: 0x2652C78
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2652C84 Offset: 0x2652C84 VA: 0x2652C84
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2652C90 Offset: 0x2652C90 VA: 0x2652C90 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2652CD0 Offset: 0x2652CD0 VA: 0x2652CD0 Slot: 4
	protected override bool SatisfiesCurveEquation() { }

	// RVA: 0x26530B8 Offset: 0x26530B8 VA: 0x26530B8 Slot: 28
	public override ECPoint Subtract(ECPoint b) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpPoint : AbstractFpPoint // TypeDefIndex: 5128
{
	// Methods

	// RVA: 0x250E310 Offset: 0x250E310 VA: 0x250E310
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250E6D0 Offset: 0x250E6D0 VA: 0x250E6D0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x250E83C Offset: 0x250E83C VA: 0x250E83C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2511128 Offset: 0x2511128 VA: 0x2511128 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x25111C8 Offset: 0x25111C8 VA: 0x25111C8 Slot: 14
	public override ECFieldElement GetZCoord(int index) { }

	// RVA: 0x251122C Offset: 0x251122C VA: 0x251122C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2512148 Offset: 0x2512148 VA: 0x2512148 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2512DD4 Offset: 0x2512DD4 VA: 0x2512DD4 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2513358 Offset: 0x2513358 VA: 0x2513358 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x251382C Offset: 0x251382C VA: 0x251382C Slot: 30
	public override ECPoint TimesPow2(int e) { }

	// RVA: 0x2514188 Offset: 0x2514188 VA: 0x2514188 Slot: 35
	protected virtual ECFieldElement Two(ECFieldElement x) { }

	// RVA: 0x25141C0 Offset: 0x25141C0 VA: 0x25141C0 Slot: 36
	protected virtual ECFieldElement Three(ECFieldElement x) { }

	// RVA: 0x2514208 Offset: 0x2514208 VA: 0x2514208 Slot: 37
	protected virtual ECFieldElement Four(ECFieldElement x) { }

	// RVA: 0x2514248 Offset: 0x2514248 VA: 0x2514248 Slot: 38
	protected virtual ECFieldElement Eight(ECFieldElement x) { }

	// RVA: 0x2514288 Offset: 0x2514288 VA: 0x2514288 Slot: 39
	protected virtual ECFieldElement DoubleProductFromSquares(ECFieldElement a, ECFieldElement b, ECFieldElement aSquared, ECFieldElement bSquared) { }

	// RVA: 0x2514330 Offset: 0x2514330 VA: 0x2514330 Slot: 29
	public override ECPoint Negate() { }

	// RVA: 0x2514458 Offset: 0x2514458 VA: 0x2514458 Slot: 40
	protected virtual ECFieldElement CalculateJacobianModifiedW(ECFieldElement Z, ECFieldElement ZSquared) { }

	// RVA: 0x25145F0 Offset: 0x25145F0 VA: 0x25145F0 Slot: 41
	protected virtual ECFieldElement GetJacobianModifiedW() { }

	// RVA: 0x25146CC Offset: 0x25146CC VA: 0x25146CC Slot: 42
	protected virtual FpPoint TwiceJacobianModified(bool calculateW) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractF2mPoint : ECPointBase // TypeDefIndex: 5129
{
	// Methods

	// RVA: 0x2651648 Offset: 0x2651648 VA: 0x2651648
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2651654 Offset: 0x2651654 VA: 0x2651654
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2651660 Offset: 0x2651660 VA: 0x2651660 Slot: 4
	protected override bool SatisfiesCurveEquation() { }

	// RVA: 0x2651BEC Offset: 0x2651BEC VA: 0x2651BEC Slot: 21
	public override ECPoint ScaleX(ECFieldElement scale) { }

	// RVA: 0x2651F68 Offset: 0x2651F68 VA: 0x2651F68 Slot: 22
	public override ECPoint ScaleY(ECFieldElement scale) { }

	// RVA: 0x26520D8 Offset: 0x26520D8 VA: 0x26520D8 Slot: 28
	public override ECPoint Subtract(ECPoint b) { }

	// RVA: 0x2652158 Offset: 0x2652158 VA: 0x2652158 Slot: 35
	public virtual AbstractF2mPoint Tau() { }

	// RVA: 0x2652520 Offset: 0x2652520 VA: 0x2652520 Slot: 36
	public virtual AbstractF2mPoint TauPow(int pow) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mPoint : AbstractF2mPoint // TypeDefIndex: 5130
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2509F58 Offset: 0x2509F58 VA: 0x2509F58
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x250A508 Offset: 0x250A508 VA: 0x250A508
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x250A6B8 Offset: 0x250A6B8 VA: 0x250A6B8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	[ObsoleteAttribute] // RVA: 0xD34DD8 Offset: 0xD34DD8 VA: 0xD34DD8
	// RVA: 0x250BB0C Offset: 0x250BB0C VA: 0x250BB0C
	public void .ctor(ECCurve curve) { }

	// RVA: 0x250BB1C Offset: 0x250BB1C VA: 0x250BB1C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x250BBBC Offset: 0x250BBBC VA: 0x250BBBC Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x250BD04 Offset: 0x250BD04 VA: 0x250BD04 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x250BDF4 Offset: 0x250BDF4 VA: 0x250BDF4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x250CCCC Offset: 0x250CCCC VA: 0x250CCCC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x250D73C Offset: 0x250D73C VA: 0x250D73C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x250DD98 Offset: 0x250DD98 VA: 0x250DD98 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public interface ECPointMap // TypeDefIndex: 5131
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPoint Map(ECPoint p);
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public interface ECEndomorphism // TypeDefIndex: 5132
{
	// Properties
	public abstract ECPointMap PointMap { get; }
	public abstract bool HasEfficientPointMap { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPointMap get_PointMap();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_HasEfficientPointMap();
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public interface GlvEndomorphism : ECEndomorphism // TypeDefIndex: 5133
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract BigInteger[] DecomposeScalar(BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public class GlvTypeBEndomorphism : GlvEndomorphism, ECEndomorphism // TypeDefIndex: 5134
{
	// Fields
	protected readonly ECCurve m_curve; // 0x10
	protected readonly GlvTypeBParameters m_parameters; // 0x18
	protected readonly ECPointMap m_pointMap; // 0x20

	// Properties
	public virtual ECPointMap PointMap { get; }
	public virtual bool HasEfficientPointMap { get; }

	// Methods

	// RVA: 0x2509654 Offset: 0x2509654 VA: 0x2509654
	public void .ctor(ECCurve curve, GlvTypeBParameters parameters) { }

	// RVA: 0x2509720 Offset: 0x2509720 VA: 0x2509720 Slot: 7
	public virtual BigInteger[] DecomposeScalar(BigInteger k) { }

	// RVA: 0x2509AAC Offset: 0x2509AAC VA: 0x2509AAC Slot: 8
	public virtual ECPointMap get_PointMap() { }

	// RVA: 0x2509AB4 Offset: 0x2509AB4 VA: 0x2509AB4 Slot: 9
	public virtual bool get_HasEfficientPointMap() { }

	// RVA: 0x2509ABC Offset: 0x2509ABC VA: 0x2509ABC Slot: 10
	protected virtual BigInteger CalculateB(BigInteger k, BigInteger g, int t) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public class GlvTypeBParameters // TypeDefIndex: 5135
{
	// Fields
	protected readonly BigInteger m_beta; // 0x10
	protected readonly BigInteger m_lambda; // 0x18
	protected readonly BigInteger[] m_v1; // 0x20
	protected readonly BigInteger[] m_v2; // 0x28
	protected readonly BigInteger m_g1; // 0x30
	protected readonly BigInteger m_g2; // 0x38
	protected readonly int m_bits; // 0x40

	// Properties
	public virtual BigInteger Beta { get; }
	public virtual BigInteger Lambda { get; }
	public virtual BigInteger[] V1 { get; }
	public virtual BigInteger[] V2 { get; }
	public virtual BigInteger G1 { get; }
	public virtual BigInteger G2 { get; }
	public virtual int Bits { get; }

	// Methods

	// RVA: 0x2509C58 Offset: 0x2509C58 VA: 0x2509C58
	public void .ctor(BigInteger beta, BigInteger lambda, BigInteger[] v1, BigInteger[] v2, BigInteger g1, BigInteger g2, int bits) { }

	// RVA: 0x2509CC0 Offset: 0x2509CC0 VA: 0x2509CC0 Slot: 4
	public virtual BigInteger get_Beta() { }

	// RVA: 0x2509CC8 Offset: 0x2509CC8 VA: 0x2509CC8 Slot: 5
	public virtual BigInteger get_Lambda() { }

	// RVA: 0x2509CD0 Offset: 0x2509CD0 VA: 0x2509CD0 Slot: 6
	public virtual BigInteger[] get_V1() { }

	// RVA: 0x2509CD8 Offset: 0x2509CD8 VA: 0x2509CD8 Slot: 7
	public virtual BigInteger[] get_V2() { }

	// RVA: 0x2509CE0 Offset: 0x2509CE0 VA: 0x2509CE0 Slot: 8
	public virtual BigInteger get_G1() { }

	// RVA: 0x2509CE8 Offset: 0x2509CE8 VA: 0x2509CE8 Slot: 9
	public virtual BigInteger get_G2() { }

	// RVA: 0x2509CF0 Offset: 0x2509CF0 VA: 0x2509CF0 Slot: 10
	public virtual int get_Bits() { }
}

// Namespace: Org.BouncyCastle.Math.EC
internal class LongArray // TypeDefIndex: 5136
{
	// Fields
	private static readonly ushort[] INTERLEAVE2_TABLE; // 0x0
	private static readonly int[] INTERLEAVE3_TABLE; // 0x8
	private static readonly int[] INTERLEAVE4_TABLE; // 0x10
	private static readonly int[] INTERLEAVE5_TABLE; // 0x18
	private static readonly long[] INTERLEAVE7_TABLE; // 0x20
	private const string ZEROES = "0000000000000000000000000000000000000000000000000000000000000000";
	internal static readonly byte[] BitLengths; // 0x28
	private long[] m_ints; // 0x10

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0x25F9B60 Offset: 0x25F9B60 VA: 0x25F9B60
	public void .ctor(int intLen) { }

	// RVA: 0x25F9BD0 Offset: 0x25F9BD0 VA: 0x25F9BD0
	public void .ctor(long[] ints) { }

	// RVA: 0x25F9BFC Offset: 0x25F9BFC VA: 0x25F9BFC
	public void .ctor(long[] ints, int off, int len) { }

	// RVA: 0x25F9CCC Offset: 0x25F9CCC VA: 0x25F9CCC
	public void .ctor(BigInteger bigInt) { }

	// RVA: 0x25F9F94 Offset: 0x25F9F94 VA: 0x25F9F94
	public bool IsOne() { }

	// RVA: 0x25FA034 Offset: 0x25FA034 VA: 0x25FA034
	public bool IsZero() { }

	// RVA: 0x25FA0AC Offset: 0x25FA0AC VA: 0x25FA0AC
	public int GetUsedLength() { }

	// RVA: 0x25FA0E0 Offset: 0x25FA0E0 VA: 0x25FA0E0
	public int GetUsedLengthFrom(int from) { }

	// RVA: 0x25FA1D4 Offset: 0x25FA1D4 VA: 0x25FA1D4
	public int Degree() { }

	// RVA: 0x25FA48C Offset: 0x25FA48C VA: 0x25FA48C
	private int DegreeFrom(int limit) { }

	// RVA: 0x25FA2C0 Offset: 0x25FA2C0 VA: 0x25FA2C0
	private static int BitLength(long w) { }

	// RVA: 0x25FA570 Offset: 0x25FA570 VA: 0x25FA570
	private long[] ResizedInts(int newLen) { }

	// RVA: 0x25FA614 Offset: 0x25FA614 VA: 0x25FA614
	public BigInteger ToBigInteger() { }

	// RVA: 0x25FA8E4 Offset: 0x25FA8E4 VA: 0x25FA8E4
	private static long ShiftUp(long[] x, int xOff, int count, int shift) { }

	// RVA: 0x25FA9A8 Offset: 0x25FA9A8 VA: 0x25FA9A8
	private static long ShiftUp(long[] x, int xOff, long[] z, int zOff, int count, int shift) { }

	// RVA: 0x25FAAA4 Offset: 0x25FAAA4 VA: 0x25FAAA4
	public LongArray AddOne() { }

	// RVA: 0x25FABB4 Offset: 0x25FABB4 VA: 0x25FABB4
	private void AddShiftedByBitsSafe(LongArray other, int otherDegree, int bits) { }

	// RVA: 0x25FADC0 Offset: 0x25FADC0 VA: 0x25FADC0
	private static long AddShiftedUp(long[] x, int xOff, long[] y, int yOff, int count, int shift) { }

	// RVA: 0x25FAEB4 Offset: 0x25FAEB4 VA: 0x25FAEB4
	private static long AddShiftedDown(long[] x, int xOff, long[] y, int yOff, int count, int shift) { }

	// RVA: 0x25FAFA4 Offset: 0x25FAFA4 VA: 0x25FAFA4
	public void AddShiftedByWords(LongArray other, int words) { }

	// RVA: 0x25FACF4 Offset: 0x25FACF4 VA: 0x25FACF4
	private static void Add(long[] x, int xOff, long[] y, int yOff, int count) { }

	// RVA: 0x25FB0B0 Offset: 0x25FB0B0 VA: 0x25FB0B0
	private static void Add(long[] x, int xOff, long[] y, int yOff, long[] z, int zOff, int count) { }

	// RVA: 0x25FB1C0 Offset: 0x25FB1C0 VA: 0x25FB1C0
	private static void AddBoth(long[] x, int xOff, long[] y1, int y1Off, long[] y2, int y2Off, int count) { }

	// RVA: 0x25FB2F0 Offset: 0x25FB2F0 VA: 0x25FB2F0
	private static void Distribute(long[] x, int src, int dst1, int dst2, int count) { }

	// RVA: 0x25FB3E4 Offset: 0x25FB3E4 VA: 0x25FB3E4
	public int get_Length() { }

	// RVA: 0x25FB410 Offset: 0x25FB410 VA: 0x25FB410
	private static void FlipWord(long[] buf, int off, int bit, long word) { }

	// RVA: 0x25FB4D8 Offset: 0x25FB4D8 VA: 0x25FB4D8
	public bool TestBitZero() { }

	// RVA: 0x25FB548 Offset: 0x25FB548 VA: 0x25FB548
	private static bool TestBit(long[] buf, int off, int n) { }

	// RVA: 0x25FB5C4 Offset: 0x25FB5C4 VA: 0x25FB5C4
	private static void FlipBit(long[] buf, int off, int n) { }

	// RVA: 0x25FB640 Offset: 0x25FB640 VA: 0x25FB640
	private static void MultiplyWord(long a, long[] b, int bLen, long[] c, int cOff) { }

	// RVA: 0x25FB78C Offset: 0x25FB78C VA: 0x25FB78C
	public LongArray ModMultiplyLD(LongArray other, int m, int[] ks) { }

	// RVA: 0x25FBEB8 Offset: 0x25FBEB8 VA: 0x25FBEB8
	public LongArray ModMultiply(LongArray other, int m, int[] ks) { }

	// RVA: 0x25FC418 Offset: 0x25FC418 VA: 0x25FC418
	public LongArray ModMultiplyAlt(LongArray other, int m, int[] ks) { }

	// RVA: 0x25FCC20 Offset: 0x25FCC20 VA: 0x25FCC20
	public LongArray ModReduce(int m, int[] ks) { }

	// RVA: 0x25FCFE0 Offset: 0x25FCFE0 VA: 0x25FCFE0
	public LongArray Multiply(LongArray other, int m, int[] ks) { }

	// RVA: 0x25FD4F0 Offset: 0x25FD4F0 VA: 0x25FD4F0
	public void Reduce(int m, int[] ks) { }

	// RVA: 0x25FBDF8 Offset: 0x25FBDF8 VA: 0x25FBDF8
	private static LongArray ReduceResult(long[] buf, int off, int len, int m, int[] ks) { }

	// RVA: 0x25FCCE8 Offset: 0x25FCCE8 VA: 0x25FCCE8
	private static int ReduceInPlace(long[] buf, int off, int len, int m, int[] ks) { }

	// RVA: 0x25FD960 Offset: 0x25FD960 VA: 0x25FD960
	private static void ReduceBitWise(long[] buf, int off, int BitLength, int m, int[] ks) { }

	// RVA: 0x25FDA3C Offset: 0x25FDA3C VA: 0x25FDA3C
	private static void ReduceBit(long[] buf, int off, int bit, int m, int[] ks) { }

	// RVA: 0x25FD74C Offset: 0x25FD74C VA: 0x25FD74C
	private static void ReduceWordWise(long[] buf, int off, int len, int toBit, int m, int[] ks) { }

	// RVA: 0x25FDB7C Offset: 0x25FDB7C VA: 0x25FDB7C
	private static void ReduceWord(long[] buf, int off, int bit, long word, int m, int[] ks) { }

	// RVA: 0x25FD5E8 Offset: 0x25FD5E8 VA: 0x25FD5E8
	private static void ReduceVectorWise(long[] buf, int off, int len, int words, int m, int[] ks) { }

	// RVA: 0x25FDCB0 Offset: 0x25FDCB0 VA: 0x25FDCB0
	private static void FlipVector(long[] x, int xOff, long[] y, int yOff, int yLen, int bits) { }

	// RVA: 0x25FDDE4 Offset: 0x25FDDE4 VA: 0x25FDDE4
	public LongArray ModSquare(int m, int[] ks) { }

	// RVA: 0x25FE158 Offset: 0x25FE158 VA: 0x25FE158
	public LongArray ModSquareN(int n, int m, int[] ks) { }

	// RVA: 0x25FE3C8 Offset: 0x25FE3C8 VA: 0x25FE3C8
	public LongArray Square(int m, int[] ks) { }

	// RVA: 0x25FE290 Offset: 0x25FE290 VA: 0x25FE290
	private static void SquareInPlace(long[] x, int xLen, int m, int[] ks) { }

	// RVA: 0x25FCA40 Offset: 0x25FCA40 VA: 0x25FCA40
	private static void Interleave(long[] x, int xOff, long[] z, int zOff, int count, int width) { }

	// RVA: 0x25FE570 Offset: 0x25FE570 VA: 0x25FE570
	private static void Interleave3(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x25FE9E0 Offset: 0x25FE9E0 VA: 0x25FE9E0
	private static long Interleave3(long x) { }

	// RVA: 0x25FEA78 Offset: 0x25FEA78 VA: 0x25FEA78
	private static long Interleave3_21to63(int x) { }

	// RVA: 0x25FE688 Offset: 0x25FE688 VA: 0x25FE688
	private static void Interleave5(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x25FEBB0 Offset: 0x25FEBB0 VA: 0x25FEBB0
	private static long Interleave5(long x) { }

	// RVA: 0x25FEC68 Offset: 0x25FEC68 VA: 0x25FEC68
	private static long Interleave3_13to65(int x) { }

	// RVA: 0x25FE7A0 Offset: 0x25FE7A0 VA: 0x25FE7A0
	private static void Interleave7(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x25FED58 Offset: 0x25FED58 VA: 0x25FED58
	private static long Interleave7(long x) { }

	// RVA: 0x25FE8B8 Offset: 0x25FE8B8 VA: 0x25FE8B8
	private static void Interleave2_n(long[] x, int xOff, long[] z, int zOff, int count, int rounds) { }

	// RVA: 0x25FEFB8 Offset: 0x25FEFB8 VA: 0x25FEFB8
	private static long Interleave2_n(long x, int rounds) { }

	// RVA: 0x25FF0CC Offset: 0x25FF0CC VA: 0x25FF0CC
	private static long Interleave4_16to64(int x) { }

	// RVA: 0x25FDFD8 Offset: 0x25FDFD8 VA: 0x25FDFD8
	private static long Interleave2_32to64(int x) { }

	// RVA: 0x25FF1BC Offset: 0x25FF1BC VA: 0x25FF1BC
	public LongArray ModInverse(int m, int[] ks) { }

	// RVA: 0x25FF908 Offset: 0x25FF908 VA: 0x25FF908 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x25FF9A0 Offset: 0x25FF9A0 VA: 0x25FF9A0 Slot: 4
	public virtual bool Equals(LongArray other) { }

	// RVA: 0x25FFA98 Offset: 0x25FFA98 VA: 0x25FFA98 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25FF890 Offset: 0x25FF890 VA: 0x25FF890
	public LongArray Copy() { }

	// RVA: 0x25FFB40 Offset: 0x25FFB40 VA: 0x25FFB40 Slot: 3
	public override string ToString() { }

	// RVA: 0x25FFD6C Offset: 0x25FFD6C VA: 0x25FFD6C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public abstract class AbstractECMultiplier : ECMultiplier // TypeDefIndex: 5137
{
	// Methods

	// RVA: 0x25FFEF8 Offset: 0x25FFEF8 VA: 0x25FFEF8
	protected void .ctor() { }

	// RVA: 0x25FFF00 Offset: 0x25FFF00 VA: 0x25FFF00 Slot: 5
	public virtual ECPoint Multiply(ECPoint p, BigInteger k) { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract ECPoint MultiplyPositive(ECPoint p, BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public interface ECMultiplier // TypeDefIndex: 5138
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPoint Multiply(ECPoint p, BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointCombMultiplier : AbstractECMultiplier // TypeDefIndex: 5139
{
	// Methods

	// RVA: 0x2600018 Offset: 0x2600018 VA: 0x2600018
	public void .ctor() { }

	// RVA: 0x2600020 Offset: 0x2600020 VA: 0x2600020 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }

	// RVA: 0x2600824 Offset: 0x2600824 VA: 0x2600824 Slot: 7
	protected virtual int GetWidthForCombSize(int combSize) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointPreCompInfo : PreCompInfo // TypeDefIndex: 5140
{
	// Fields
	protected ECPoint[] m_preComp; // 0x10
	protected int m_width; // 0x18

	// Properties
	public virtual ECPoint[] PreComp { get; set; }
	public virtual int Width { get; set; }

	// Methods

	// RVA: 0x2600834 Offset: 0x2600834 VA: 0x2600834
	public void .ctor() { }

	// RVA: 0x2600844 Offset: 0x2600844 VA: 0x2600844 Slot: 4
	public virtual ECPoint[] get_PreComp() { }

	// RVA: 0x260084C Offset: 0x260084C VA: 0x260084C Slot: 5
	public virtual void set_PreComp(ECPoint[] value) { }

	// RVA: 0x2600854 Offset: 0x2600854 VA: 0x2600854 Slot: 6
	public virtual int get_Width() { }

	// RVA: 0x260085C Offset: 0x260085C VA: 0x260085C Slot: 7
	public virtual void set_Width(int value) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointUtilities // TypeDefIndex: 5141
{
	// Fields
	public static readonly string PRECOMP_NAME; // 0x0

	// Methods

	// RVA: 0x2600864 Offset: 0x2600864 VA: 0x2600864
	public void .ctor() { }

	// RVA: 0x26002A0 Offset: 0x26002A0 VA: 0x26002A0
	public static int GetCombSize(ECCurve c) { }

	// RVA: 0x260086C Offset: 0x260086C VA: 0x260086C
	public static FixedPointPreCompInfo GetFixedPointPreCompInfo(PreCompInfo preCompInfo) { }

	// RVA: 0x2600300 Offset: 0x2600300 VA: 0x2600300
	public static FixedPointPreCompInfo Precompute(ECPoint p, int minWidth) { }

	// RVA: 0x2600900 Offset: 0x2600900 VA: 0x2600900
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class GlvMultiplier : AbstractECMultiplier // TypeDefIndex: 5142
{
	// Fields
	protected readonly ECCurve curve; // 0x10
	protected readonly GlvEndomorphism glvEndomorphism; // 0x18

	// Methods

	// RVA: 0x260095C Offset: 0x260095C VA: 0x260095C
	public void .ctor(ECCurve curve, GlvEndomorphism glvEndomorphism) { }

	// RVA: 0x2600A28 Offset: 0x2600A28 VA: 0x2600A28 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public interface PreCompInfo // TypeDefIndex: 5143
{}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WNafL2RMultiplier : AbstractECMultiplier // TypeDefIndex: 5144
{
	// Methods

	// RVA: 0x2600DC4 Offset: 0x2600DC4 VA: 0x2600DC4
	public void .ctor() { }

	// RVA: 0x2600DCC Offset: 0x2600DCC VA: 0x2600DCC Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }

	// RVA: 0x2601D70 Offset: 0x2601D70 VA: 0x2601D70 Slot: 7
	protected virtual int GetWindowSize(int bits) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WNafPreCompInfo : PreCompInfo // TypeDefIndex: 5145
{
	// Fields
	protected ECPoint[] m_preComp; // 0x10
	protected ECPoint[] m_preCompNeg; // 0x18
	protected ECPoint m_twice; // 0x20

	// Properties
	public virtual ECPoint[] PreComp { get; set; }
	public virtual ECPoint[] PreCompNeg { get; set; }
	public virtual ECPoint Twice { get; set; }

	// Methods

	// RVA: 0x2601E44 Offset: 0x2601E44 VA: 0x2601E44
	public void .ctor() { }

	// RVA: 0x2601E4C Offset: 0x2601E4C VA: 0x2601E4C Slot: 4
	public virtual ECPoint[] get_PreComp() { }

	// RVA: 0x2601E54 Offset: 0x2601E54 VA: 0x2601E54 Slot: 5
	public virtual void set_PreComp(ECPoint[] value) { }

	// RVA: 0x2601E5C Offset: 0x2601E5C VA: 0x2601E5C Slot: 6
	public virtual ECPoint[] get_PreCompNeg() { }

	// RVA: 0x2601E64 Offset: 0x2601E64 VA: 0x2601E64 Slot: 7
	public virtual void set_PreCompNeg(ECPoint[] value) { }

	// RVA: 0x2601E6C Offset: 0x2601E6C VA: 0x2601E6C Slot: 8
	public virtual ECPoint get_Twice() { }

	// RVA: 0x2601E74 Offset: 0x2601E74 VA: 0x2601E74 Slot: 9
	public virtual void set_Twice(ECPoint value) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public abstract class WNafUtilities // TypeDefIndex: 5146
{
	// Fields
	public static readonly string PRECOMP_NAME; // 0x0
	private static readonly int[] DEFAULT_WINDOW_SIZE_CUTOFFS; // 0x8
	private static readonly byte[] EMPTY_BYTES; // 0x10
	private static readonly int[] EMPTY_INTS; // 0x18
	private static readonly ECPoint[] EMPTY_POINTS; // 0x20

	// Methods

	// RVA: 0x2601E7C Offset: 0x2601E7C VA: 0x2601E7C
	protected void .ctor() { }

	// RVA: 0x2601E84 Offset: 0x2601E84 VA: 0x2601E84
	public static int[] GenerateCompactNaf(BigInteger k) { }

	// RVA: 0x2601A18 Offset: 0x2601A18 VA: 0x2601A18
	public static int[] GenerateCompactWindowNaf(int width, BigInteger k) { }

	// RVA: 0x2602214 Offset: 0x2602214 VA: 0x2602214
	public static byte[] GenerateJsf(BigInteger g, BigInteger h) { }

	// RVA: 0x26025A0 Offset: 0x26025A0 VA: 0x26025A0
	public static byte[] GenerateNaf(BigInteger k) { }

	// RVA: 0x26027BC Offset: 0x26027BC VA: 0x26027BC
	public static byte[] GenerateWindowNaf(int width, BigInteger k) { }

	// RVA: 0x2602AC8 Offset: 0x2602AC8 VA: 0x2602AC8
	public static int GetNafWeight(BigInteger k) { }

	// RVA: 0x2602B70 Offset: 0x2602B70 VA: 0x2602B70
	public static WNafPreCompInfo GetWNafPreCompInfo(ECPoint p) { }

	// RVA: 0x2602C30 Offset: 0x2602C30 VA: 0x2602C30
	public static WNafPreCompInfo GetWNafPreCompInfo(PreCompInfo preCompInfo) { }

	// RVA: 0x2601DD4 Offset: 0x2601DD4 VA: 0x2601DD4
	public static int GetWindowSize(int bits) { }

	// RVA: 0x2602CBC Offset: 0x2602CBC VA: 0x2602CBC
	public static int GetWindowSize(int bits, int[] windowSizeCutoffs) { }

	// RVA: 0x2602D3C Offset: 0x2602D3C VA: 0x2602D3C
	public static ECPoint MapPointWithPrecomp(ECPoint p, int width, bool includeNegated, ECPointMap pointMap) { }

	// RVA: 0x26011D4 Offset: 0x26011D4 VA: 0x26011D4
	public static WNafPreCompInfo Precompute(ECPoint p, int width, bool includeNegated) { }

	// RVA: 0x2602514 Offset: 0x2602514 VA: 0x2602514
	private static byte[] Trim(byte[] a, int length) { }

	// RVA: 0x2602188 Offset: 0x2602188 VA: 0x2602188
	private static int[] Trim(int[] a, int length) { }

	// RVA: 0x260325C Offset: 0x260325C VA: 0x260325C
	private static ECPoint[] ResizeTable(ECPoint[] a, int length) { }

	// RVA: 0x26032EC Offset: 0x26032EC VA: 0x26032EC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WTauNafMultiplier : AbstractECMultiplier // TypeDefIndex: 5147
{
	// Fields
	internal static readonly string PRECOMP_NAME; // 0x0

	// Methods

	// RVA: 0x26033E0 Offset: 0x26033E0 VA: 0x26033E0
	public void .ctor() { }

	// RVA: 0x26033E8 Offset: 0x26033E8 VA: 0x26033E8 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint point, BigInteger k) { }

	// RVA: 0x260369C Offset: 0x260369C VA: 0x260369C
	private AbstractF2mPoint MultiplyWTnaf(AbstractF2mPoint p, ZTauElement lambda, PreCompInfo preCompInfo, sbyte a, sbyte mu) { }

	// RVA: 0x2603800 Offset: 0x2603800 VA: 0x2603800
	private static AbstractF2mPoint MultiplyFromWTnaf(AbstractF2mPoint p, sbyte[] u, PreCompInfo preCompInfo) { }

	// RVA: 0x2603EB4 Offset: 0x2603EB4 VA: 0x2603EB4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WTauNafPreCompInfo : PreCompInfo // TypeDefIndex: 5148
{
	// Fields
	protected AbstractF2mPoint[] m_preComp; // 0x10

	// Properties
	public virtual AbstractF2mPoint[] PreComp { get; set; }

	// Methods

	// RVA: 0x2603EAC Offset: 0x2603EAC VA: 0x2603EAC
	public void .ctor() { }

	// RVA: 0x2603F10 Offset: 0x2603F10 VA: 0x2603F10 Slot: 4
	public virtual AbstractF2mPoint[] get_PreComp() { }

	// RVA: 0x2603F18 Offset: 0x2603F18 VA: 0x2603F18 Slot: 5
	public virtual void set_PreComp(AbstractF2mPoint[] value) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class ScaleXPointMap : ECPointMap // TypeDefIndex: 5149
{
	// Fields
	protected readonly ECFieldElement scale; // 0x10

	// Methods

	// RVA: 0x2603F20 Offset: 0x2603F20 VA: 0x2603F20
	public void .ctor(ECFieldElement scale) { }

	// RVA: 0x2603F4C Offset: 0x2603F4C VA: 0x2603F4C Slot: 5
	public virtual ECPoint Map(ECPoint p) { }
}

// Namespace: Org.BouncyCastle.Math.Field
public abstract class FiniteFields // TypeDefIndex: 5150
{
	// Fields
	internal static readonly IFiniteField GF_2; // 0x0
	internal static readonly IFiniteField GF_3; // 0x8

	// Methods

	// RVA: 0x2603F8C Offset: 0x2603F8C VA: 0x2603F8C
	protected void .ctor() { }

	// RVA: 0x2603F94 Offset: 0x2603F94 VA: 0x2603F94
	public static IPolynomialExtensionField GetBinaryExtensionField(int[] exponents) { }

	// RVA: 0x26041D8 Offset: 0x26041D8 VA: 0x26041D8
	public static IFiniteField GetPrimeField(BigInteger characteristic) { }

	// RVA: 0x260439C Offset: 0x260439C VA: 0x260439C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.Field
internal class GenericPolynomialExtensionField : IPolynomialExtensionField, IExtensionField, IFiniteField // TypeDefIndex: 5151
{
	// Fields
	protected readonly IFiniteField subfield; // 0x10
	protected readonly IPolynomial minimalPolynomial; // 0x18

	// Properties
	public virtual BigInteger Characteristic { get; }
	public virtual int Dimension { get; }
	public virtual IFiniteField Subfield { get; }
	public virtual int Degree { get; }
	public virtual IPolynomial MinimalPolynomial { get; }

	// Methods

	// RVA: 0x26041A0 Offset: 0x26041A0 VA: 0x26041A0
	internal void .ctor(IFiniteField subfield, IPolynomial polynomial) { }

	// RVA: 0x26045BC Offset: 0x26045BC VA: 0x26045BC Slot: 9
	public virtual BigInteger get_Characteristic() { }

	// RVA: 0x2604670 Offset: 0x2604670 VA: 0x2604670 Slot: 10
	public virtual int get_Dimension() { }

	// RVA: 0x26047AC Offset: 0x26047AC VA: 0x26047AC Slot: 11
	public virtual IFiniteField get_Subfield() { }

	// RVA: 0x26047B4 Offset: 0x26047B4 VA: 0x26047B4 Slot: 12
	public virtual int get_Degree() { }

	// RVA: 0x2604868 Offset: 0x2604868 VA: 0x2604868 Slot: 13
	public virtual IPolynomial get_MinimalPolynomial() { }

	// RVA: 0x2604870 Offset: 0x2604870 VA: 0x2604870 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2604978 Offset: 0x2604978 VA: 0x2604978 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.Field
internal class GF2Polynomial : IPolynomial // TypeDefIndex: 5152
{
	// Fields
	protected readonly int[] exponents; // 0x10

	// Properties
	public virtual int Degree { get; }

	// Methods

	// RVA: 0x2604168 Offset: 0x2604168 VA: 0x2604168
	internal void .ctor(int[] exponents) { }

	// RVA: 0x2604480 Offset: 0x2604480 VA: 0x2604480 Slot: 6
	public virtual int get_Degree() { }

