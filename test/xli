	public static void CheckFieldElements(ECFieldElement a, ECFieldElement b) { }

	// RVA: 0x220A8BC Offset: 0x220A8BC VA: 0x220A8BC Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x220AA00 Offset: 0x220AA00 VA: 0x220AA00 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x220AA98 Offset: 0x220AA98 VA: 0x220AA98 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x220AAA4 Offset: 0x220AAA4 VA: 0x220AAA4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x220AC50 Offset: 0x220AC50 VA: 0x220AC50 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220AC60 Offset: 0x220AC60 VA: 0x220AC60 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220B090 Offset: 0x220B090 VA: 0x220B090 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x220B0E0 Offset: 0x220B0E0 VA: 0x220B0E0 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x220B0E4 Offset: 0x220B0E4 VA: 0x220B0E4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x220B184 Offset: 0x220B184 VA: 0x220B184 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220B194 Offset: 0x220B194 VA: 0x220B194 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220B4DC Offset: 0x220B4DC VA: 0x220B4DC Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x220B594 Offset: 0x220B594 VA: 0x220B594 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x220B634 Offset: 0x220B634 VA: 0x220B634 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x220B6B4 Offset: 0x220B6B4 VA: 0x220B6B4
	public int get_Representation() { }

	// RVA: 0x220B6BC Offset: 0x220B6BC VA: 0x220B6BC
	public int get_M() { }

	// RVA: 0x220B6C4 Offset: 0x220B6C4 VA: 0x220B6C4
	public int get_K1() { }

	// RVA: 0x220B708 Offset: 0x220B708 VA: 0x220B708
	public int get_K2() { }

	// RVA: 0x220B778 Offset: 0x220B778 VA: 0x220B778
	public int get_K3() { }

	// RVA: 0x220B7E8 Offset: 0x220B7E8 VA: 0x220B7E8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x220B8A4 Offset: 0x220B8A4 VA: 0x220B8A4 Slot: 27
	public virtual bool Equals(F2mFieldElement other) { }

	// RVA: 0x220B944 Offset: 0x220B944 VA: 0x220B944 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECPoint // TypeDefIndex: 5125
{
	// Fields
	protected static ECFieldElement[] EMPTY_ZS; // 0x0
	protected internal readonly ECCurve m_curve; // 0x10
	protected internal readonly ECFieldElement m_x; // 0x18
	protected internal readonly ECFieldElement m_y; // 0x20
	protected internal readonly ECFieldElement[] m_zs; // 0x28
	protected internal readonly bool m_withCompression; // 0x30
	protected internal IDictionary m_preCompTable; // 0x38

	// Properties
	public virtual ECCurve Curve { get; }
	protected virtual int CurveCoordinateSystem { get; }
	[ObsoleteAttribute] // RVA: 0xCDE8D8 Offset: 0xCDE8D8 VA: 0xCDE8D8
	public virtual ECFieldElement X { get; }
	[ObsoleteAttribute] // RVA: 0xCDE910 Offset: 0xCDE910 VA: 0xCDE910
	public virtual ECFieldElement Y { get; }
	public virtual ECFieldElement AffineXCoord { get; }
	public virtual ECFieldElement AffineYCoord { get; }
	public virtual ECFieldElement XCoord { get; }
	public virtual ECFieldElement YCoord { get; }
	protected internal ECFieldElement RawXCoord { get; }
	protected internal ECFieldElement RawYCoord { get; }
	protected internal ECFieldElement[] RawZCoords { get; }
	public bool IsInfinity { get; }
	public bool IsCompressed { get; }
	protected internal abstract bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2207B98 Offset: 0x2207B98 VA: 0x2207B98
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2207FAC Offset: 0x2207FAC VA: 0x2207FAC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2207C40 Offset: 0x2207C40 VA: 0x2207C40
	protected static ECFieldElement[] GetInitialZCoords(ECCurve curve) { }

	// RVA: 0x2207424 Offset: 0x2207424 VA: 0x2207424
	protected internal bool SatisfiesCofactor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract bool SatisfiesCurveEquation();

	// RVA: 0x2208004 Offset: 0x2208004 VA: 0x2208004
	public ECPoint GetDetachedPoint() { }

	// RVA: 0x2208044 Offset: 0x2208044 VA: 0x2208044 Slot: 5
	public virtual ECCurve get_Curve() { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract ECPoint Detach();

	// RVA: 0x220804C Offset: 0x220804C VA: 0x220804C Slot: 7
	protected virtual int get_CurveCoordinateSystem() { }

	// RVA: 0x2208068 Offset: 0x2208068 VA: 0x2208068 Slot: 8
	public virtual ECFieldElement get_X() { }

	// RVA: 0x22080A8 Offset: 0x22080A8 VA: 0x22080A8 Slot: 9
	public virtual ECFieldElement get_Y() { }

	// RVA: 0x22080E8 Offset: 0x22080E8 VA: 0x22080E8 Slot: 10
	public virtual ECFieldElement get_AffineXCoord() { }

	// RVA: 0x2208120 Offset: 0x2208120 VA: 0x2208120 Slot: 11
	public virtual ECFieldElement get_AffineYCoord() { }

	// RVA: 0x2208158 Offset: 0x2208158 VA: 0x2208158 Slot: 12
	public virtual ECFieldElement get_XCoord() { }

	// RVA: 0x2208160 Offset: 0x2208160 VA: 0x2208160 Slot: 13
	public virtual ECFieldElement get_YCoord() { }

	// RVA: 0x2208168 Offset: 0x2208168 VA: 0x2208168 Slot: 14
	public virtual ECFieldElement GetZCoord(int index) { }

	// RVA: 0x22081F0 Offset: 0x22081F0 VA: 0x22081F0 Slot: 15
	public virtual ECFieldElement[] GetZCoords() { }

	// RVA: 0x21FB3DC Offset: 0x21FB3DC VA: 0x21FB3DC
	protected internal ECFieldElement get_RawXCoord() { }

	// RVA: 0x21FB3E4 Offset: 0x21FB3E4 VA: 0x21FB3E4
	protected internal ECFieldElement get_RawYCoord() { }

	// RVA: 0x21FB40C Offset: 0x21FB40C VA: 0x21FB40C
	protected internal ECFieldElement[] get_RawZCoords() { }

	// RVA: 0x220828C Offset: 0x220828C VA: 0x220828C Slot: 16
	protected virtual void CheckNormalized() { }

	// RVA: 0x2208328 Offset: 0x2208328 VA: 0x2208328 Slot: 17
	public virtual bool IsNormalized() { }

	// RVA: 0x22083C4 Offset: 0x22083C4 VA: 0x22083C4 Slot: 18
	public virtual ECPoint Normalize() { }

	// RVA: 0x2208494 Offset: 0x2208494 VA: 0x2208494 Slot: 19
	internal virtual ECPoint Normalize(ECFieldElement zInv) { }

	// RVA: 0x22085B8 Offset: 0x22085B8 VA: 0x22085B8 Slot: 20
	protected virtual ECPoint CreateScaledPoint(ECFieldElement sx, ECFieldElement sy) { }

	// RVA: 0x21FB3EC Offset: 0x21FB3EC VA: 0x21FB3EC
	public bool get_IsInfinity() { }

	// RVA: 0x21FBD88 Offset: 0x21FBD88 VA: 0x21FBD88
	public bool get_IsCompressed() { }

	// RVA: 0x2204C94 Offset: 0x2204C94 VA: 0x2204C94
	public bool IsValid() { }

	// RVA: 0x220867C Offset: 0x220867C VA: 0x220867C Slot: 21
	public virtual ECPoint ScaleX(ECFieldElement scale) { }

	// RVA: 0x2208748 Offset: 0x2208748 VA: 0x2208748 Slot: 22
	public virtual ECPoint ScaleY(ECFieldElement scale) { }

	// RVA: 0x2208814 Offset: 0x2208814 VA: 0x2208814 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22088B0 Offset: 0x22088B0 VA: 0x22088B0 Slot: 23
	public virtual bool Equals(ECPoint other) { }

	// RVA: 0x2208BE8 Offset: 0x2208BE8 VA: 0x2208BE8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2208CD0 Offset: 0x2208CD0 VA: 0x2208CD0 Slot: 3
	public override string ToString() { }

	// RVA: 0x2208ED0 Offset: 0x2208ED0 VA: 0x2208ED0 Slot: 24
	public virtual byte[] GetEncoded() { }

	// RVA: -1 Offset: -1 Slot: 25
	public abstract byte[] GetEncoded(bool compressed);

	// RVA: -1 Offset: -1 Slot: 26
	protected internal abstract bool get_CompressionYTilde();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract ECPoint Add(ECPoint b);

	// RVA: -1 Offset: -1 Slot: 28
	public abstract ECPoint Subtract(ECPoint b);

	// RVA: -1 Offset: -1 Slot: 29
	public abstract ECPoint Negate();

	// RVA: 0x2208EE4 Offset: 0x2208EE4 VA: 0x2208EE4 Slot: 30
	public virtual ECPoint TimesPow2(int e) { }

	// RVA: -1 Offset: -1 Slot: 31
	public abstract ECPoint Twice();

	// RVA: -1 Offset: -1 Slot: 32
	public abstract ECPoint Multiply(BigInteger b);

	// RVA: 0x2208FBC Offset: 0x2208FBC VA: 0x2208FBC Slot: 33
	public virtual ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x220900C Offset: 0x220900C VA: 0x220900C Slot: 34
	public virtual ECPoint ThreeTimes() { }

	// RVA: 0x2209020 Offset: 0x2209020 VA: 0x2209020
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class ECPointBase : ECPoint // TypeDefIndex: 5126
{
	// Methods

	// RVA: 0x2209084 Offset: 0x2209084 VA: 0x2209084
	protected internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2209118 Offset: 0x2209118 VA: 0x2209118
	protected internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x22091C0 Offset: 0x22091C0 VA: 0x22091C0 Slot: 25
	public override byte[] GetEncoded(bool compressed) { }

	// RVA: 0x22093F4 Offset: 0x22093F4 VA: 0x22093F4 Slot: 32
	public override ECPoint Multiply(BigInteger k) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractFpPoint : ECPointBase // TypeDefIndex: 5127
{
	// Properties
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x24EBAC8 Offset: 0x24EBAC8 VA: 0x24EBAC8
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24EBAD4 Offset: 0x24EBAD4 VA: 0x24EBAD4
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24EBAE0 Offset: 0x24EBAE0 VA: 0x24EBAE0 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x24EBB20 Offset: 0x24EBB20 VA: 0x24EBB20 Slot: 4
	protected override bool SatisfiesCurveEquation() { }

	// RVA: 0x24EBF08 Offset: 0x24EBF08 VA: 0x24EBF08 Slot: 28
	public override ECPoint Subtract(ECPoint b) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class FpPoint : AbstractFpPoint // TypeDefIndex: 5128
{
	// Methods

	// RVA: 0x220E1A4 Offset: 0x220E1A4 VA: 0x220E1A4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220E564 Offset: 0x220E564 VA: 0x220E564
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x220E6D0 Offset: 0x220E6D0 VA: 0x220E6D0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2210FBC Offset: 0x2210FBC VA: 0x2210FBC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x221105C Offset: 0x221105C VA: 0x221105C Slot: 14
	public override ECFieldElement GetZCoord(int index) { }

	// RVA: 0x22110C0 Offset: 0x22110C0 VA: 0x22110C0 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2211FDC Offset: 0x2211FDC VA: 0x2211FDC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2212C68 Offset: 0x2212C68 VA: 0x2212C68 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x22131EC Offset: 0x22131EC VA: 0x22131EC Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x22136C0 Offset: 0x22136C0 VA: 0x22136C0 Slot: 30
	public override ECPoint TimesPow2(int e) { }

	// RVA: 0x221401C Offset: 0x221401C VA: 0x221401C Slot: 35
	protected virtual ECFieldElement Two(ECFieldElement x) { }

	// RVA: 0x2214054 Offset: 0x2214054 VA: 0x2214054 Slot: 36
	protected virtual ECFieldElement Three(ECFieldElement x) { }

	// RVA: 0x221409C Offset: 0x221409C VA: 0x221409C Slot: 37
	protected virtual ECFieldElement Four(ECFieldElement x) { }

	// RVA: 0x22140DC Offset: 0x22140DC VA: 0x22140DC Slot: 38
	protected virtual ECFieldElement Eight(ECFieldElement x) { }

	// RVA: 0x221411C Offset: 0x221411C VA: 0x221411C Slot: 39
	protected virtual ECFieldElement DoubleProductFromSquares(ECFieldElement a, ECFieldElement b, ECFieldElement aSquared, ECFieldElement bSquared) { }

	// RVA: 0x22141C4 Offset: 0x22141C4 VA: 0x22141C4 Slot: 29
	public override ECPoint Negate() { }

	// RVA: 0x22142EC Offset: 0x22142EC VA: 0x22142EC Slot: 40
	protected virtual ECFieldElement CalculateJacobianModifiedW(ECFieldElement Z, ECFieldElement ZSquared) { }

	// RVA: 0x2214484 Offset: 0x2214484 VA: 0x2214484 Slot: 41
	protected virtual ECFieldElement GetJacobianModifiedW() { }

	// RVA: 0x2214560 Offset: 0x2214560 VA: 0x2214560 Slot: 42
	protected virtual FpPoint TwiceJacobianModified(bool calculateW) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public abstract class AbstractF2mPoint : ECPointBase // TypeDefIndex: 5129
{
	// Methods

	// RVA: 0x24EA498 Offset: 0x24EA498 VA: 0x24EA498
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24EA4A4 Offset: 0x24EA4A4 VA: 0x24EA4A4
	protected void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24EA4B0 Offset: 0x24EA4B0 VA: 0x24EA4B0 Slot: 4
	protected override bool SatisfiesCurveEquation() { }

	// RVA: 0x24EAA3C Offset: 0x24EAA3C VA: 0x24EAA3C Slot: 21
	public override ECPoint ScaleX(ECFieldElement scale) { }

	// RVA: 0x24EADB8 Offset: 0x24EADB8 VA: 0x24EADB8 Slot: 22
	public override ECPoint ScaleY(ECFieldElement scale) { }

	// RVA: 0x24EAF28 Offset: 0x24EAF28 VA: 0x24EAF28 Slot: 28
	public override ECPoint Subtract(ECPoint b) { }

	// RVA: 0x24EAFA8 Offset: 0x24EAFA8 VA: 0x24EAFA8 Slot: 35
	public virtual AbstractF2mPoint Tau() { }

	// RVA: 0x24EB370 Offset: 0x24EB370 VA: 0x24EB370 Slot: 36
	public virtual AbstractF2mPoint TauPow(int pow) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class F2mPoint : AbstractF2mPoint // TypeDefIndex: 5130
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2209DEC Offset: 0x2209DEC VA: 0x2209DEC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x220A39C Offset: 0x220A39C VA: 0x220A39C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x220A54C Offset: 0x220A54C VA: 0x220A54C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	[ObsoleteAttribute] // RVA: 0xCC7704 Offset: 0xCC7704 VA: 0xCC7704
	// RVA: 0x220B9A0 Offset: 0x220B9A0 VA: 0x220B9A0
	public void .ctor(ECCurve curve) { }

	// RVA: 0x220B9B0 Offset: 0x220B9B0 VA: 0x220B9B0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x220BA50 Offset: 0x220BA50 VA: 0x220BA50 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x220BB98 Offset: 0x220BB98 VA: 0x220BB98 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x220BC88 Offset: 0x220BC88 VA: 0x220BC88 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x220CB60 Offset: 0x220CB60 VA: 0x220CB60 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x220D5D0 Offset: 0x220D5D0 VA: 0x220D5D0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x220DC2C Offset: 0x220DC2C VA: 0x220DC2C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC
public interface ECPointMap // TypeDefIndex: 5131
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPoint Map(ECPoint p);
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public interface ECEndomorphism // TypeDefIndex: 5132
{
	// Properties
	public abstract ECPointMap PointMap { get; }
	public abstract bool HasEfficientPointMap { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPointMap get_PointMap();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_HasEfficientPointMap();
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public interface GlvEndomorphism : ECEndomorphism // TypeDefIndex: 5133
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract BigInteger[] DecomposeScalar(BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public class GlvTypeBEndomorphism : GlvEndomorphism, ECEndomorphism // TypeDefIndex: 5134
{
	// Fields
	protected readonly ECCurve m_curve; // 0x10
	protected readonly GlvTypeBParameters m_parameters; // 0x18
	protected readonly ECPointMap m_pointMap; // 0x20

	// Properties
	public virtual ECPointMap PointMap { get; }
	public virtual bool HasEfficientPointMap { get; }

	// Methods

	// RVA: 0x22094E8 Offset: 0x22094E8 VA: 0x22094E8
	public void .ctor(ECCurve curve, GlvTypeBParameters parameters) { }

	// RVA: 0x22095B4 Offset: 0x22095B4 VA: 0x22095B4 Slot: 7
	public virtual BigInteger[] DecomposeScalar(BigInteger k) { }

	// RVA: 0x2209940 Offset: 0x2209940 VA: 0x2209940 Slot: 8
	public virtual ECPointMap get_PointMap() { }

	// RVA: 0x2209948 Offset: 0x2209948 VA: 0x2209948 Slot: 9
	public virtual bool get_HasEfficientPointMap() { }

	// RVA: 0x2209950 Offset: 0x2209950 VA: 0x2209950 Slot: 10
	protected virtual BigInteger CalculateB(BigInteger k, BigInteger g, int t) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Endo
public class GlvTypeBParameters // TypeDefIndex: 5135
{
	// Fields
	protected readonly BigInteger m_beta; // 0x10
	protected readonly BigInteger m_lambda; // 0x18
	protected readonly BigInteger[] m_v1; // 0x20
	protected readonly BigInteger[] m_v2; // 0x28
	protected readonly BigInteger m_g1; // 0x30
	protected readonly BigInteger m_g2; // 0x38
	protected readonly int m_bits; // 0x40

	// Properties
	public virtual BigInteger Beta { get; }
	public virtual BigInteger Lambda { get; }
	public virtual BigInteger[] V1 { get; }
	public virtual BigInteger[] V2 { get; }
	public virtual BigInteger G1 { get; }
	public virtual BigInteger G2 { get; }
	public virtual int Bits { get; }

	// Methods

	// RVA: 0x2209AEC Offset: 0x2209AEC VA: 0x2209AEC
	public void .ctor(BigInteger beta, BigInteger lambda, BigInteger[] v1, BigInteger[] v2, BigInteger g1, BigInteger g2, int bits) { }

	// RVA: 0x2209B54 Offset: 0x2209B54 VA: 0x2209B54 Slot: 4
	public virtual BigInteger get_Beta() { }

	// RVA: 0x2209B5C Offset: 0x2209B5C VA: 0x2209B5C Slot: 5
	public virtual BigInteger get_Lambda() { }

	// RVA: 0x2209B64 Offset: 0x2209B64 VA: 0x2209B64 Slot: 6
	public virtual BigInteger[] get_V1() { }

	// RVA: 0x2209B6C Offset: 0x2209B6C VA: 0x2209B6C Slot: 7
	public virtual BigInteger[] get_V2() { }

	// RVA: 0x2209B74 Offset: 0x2209B74 VA: 0x2209B74 Slot: 8
	public virtual BigInteger get_G1() { }

	// RVA: 0x2209B7C Offset: 0x2209B7C VA: 0x2209B7C Slot: 9
	public virtual BigInteger get_G2() { }

	// RVA: 0x2209B84 Offset: 0x2209B84 VA: 0x2209B84 Slot: 10
	public virtual int get_Bits() { }
}

// Namespace: Org.BouncyCastle.Math.EC
internal class LongArray // TypeDefIndex: 5136
{
	// Fields
	private static readonly ushort[] INTERLEAVE2_TABLE; // 0x0
	private static readonly int[] INTERLEAVE3_TABLE; // 0x8
	private static readonly int[] INTERLEAVE4_TABLE; // 0x10
	private static readonly int[] INTERLEAVE5_TABLE; // 0x18
	private static readonly long[] INTERLEAVE7_TABLE; // 0x20
	private const string ZEROES = "0000000000000000000000000000000000000000000000000000000000000000";
	internal static readonly byte[] BitLengths; // 0x28
	private long[] m_ints; // 0x10

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0x24787D0 Offset: 0x24787D0 VA: 0x24787D0
	public void .ctor(int intLen) { }

	// RVA: 0x2478840 Offset: 0x2478840 VA: 0x2478840
	public void .ctor(long[] ints) { }

	// RVA: 0x247886C Offset: 0x247886C VA: 0x247886C
	public void .ctor(long[] ints, int off, int len) { }

	// RVA: 0x247893C Offset: 0x247893C VA: 0x247893C
	public void .ctor(BigInteger bigInt) { }

	// RVA: 0x2478C04 Offset: 0x2478C04 VA: 0x2478C04
	public bool IsOne() { }

	// RVA: 0x2478CA4 Offset: 0x2478CA4 VA: 0x2478CA4
	public bool IsZero() { }

	// RVA: 0x2478D1C Offset: 0x2478D1C VA: 0x2478D1C
	public int GetUsedLength() { }

	// RVA: 0x2478D50 Offset: 0x2478D50 VA: 0x2478D50
	public int GetUsedLengthFrom(int from) { }

	// RVA: 0x2478E44 Offset: 0x2478E44 VA: 0x2478E44
	public int Degree() { }

	// RVA: 0x24790FC Offset: 0x24790FC VA: 0x24790FC
	private int DegreeFrom(int limit) { }

	// RVA: 0x2478F30 Offset: 0x2478F30 VA: 0x2478F30
	private static int BitLength(long w) { }

	// RVA: 0x24791E0 Offset: 0x24791E0 VA: 0x24791E0
	private long[] ResizedInts(int newLen) { }

	// RVA: 0x2479284 Offset: 0x2479284 VA: 0x2479284
	public BigInteger ToBigInteger() { }

	// RVA: 0x2479554 Offset: 0x2479554 VA: 0x2479554
	private static long ShiftUp(long[] x, int xOff, int count, int shift) { }

	// RVA: 0x2479618 Offset: 0x2479618 VA: 0x2479618
	private static long ShiftUp(long[] x, int xOff, long[] z, int zOff, int count, int shift) { }

	// RVA: 0x2479714 Offset: 0x2479714 VA: 0x2479714
	public LongArray AddOne() { }

	// RVA: 0x2479824 Offset: 0x2479824 VA: 0x2479824
	private void AddShiftedByBitsSafe(LongArray other, int otherDegree, int bits) { }

	// RVA: 0x2479A30 Offset: 0x2479A30 VA: 0x2479A30
	private static long AddShiftedUp(long[] x, int xOff, long[] y, int yOff, int count, int shift) { }

	// RVA: 0x2479B24 Offset: 0x2479B24 VA: 0x2479B24
	private static long AddShiftedDown(long[] x, int xOff, long[] y, int yOff, int count, int shift) { }

	// RVA: 0x2479C14 Offset: 0x2479C14 VA: 0x2479C14
	public void AddShiftedByWords(LongArray other, int words) { }

	// RVA: 0x2479964 Offset: 0x2479964 VA: 0x2479964
	private static void Add(long[] x, int xOff, long[] y, int yOff, int count) { }

	// RVA: 0x2479D20 Offset: 0x2479D20 VA: 0x2479D20
	private static void Add(long[] x, int xOff, long[] y, int yOff, long[] z, int zOff, int count) { }

	// RVA: 0x2479E30 Offset: 0x2479E30 VA: 0x2479E30
	private static void AddBoth(long[] x, int xOff, long[] y1, int y1Off, long[] y2, int y2Off, int count) { }

	// RVA: 0x2479F60 Offset: 0x2479F60 VA: 0x2479F60
	private static void Distribute(long[] x, int src, int dst1, int dst2, int count) { }

	// RVA: 0x247A054 Offset: 0x247A054 VA: 0x247A054
	public int get_Length() { }

	// RVA: 0x247A080 Offset: 0x247A080 VA: 0x247A080
	private static void FlipWord(long[] buf, int off, int bit, long word) { }

	// RVA: 0x247A148 Offset: 0x247A148 VA: 0x247A148
	public bool TestBitZero() { }

	// RVA: 0x247A1B8 Offset: 0x247A1B8 VA: 0x247A1B8
	private static bool TestBit(long[] buf, int off, int n) { }

	// RVA: 0x247A234 Offset: 0x247A234 VA: 0x247A234
	private static void FlipBit(long[] buf, int off, int n) { }

	// RVA: 0x247A2B0 Offset: 0x247A2B0 VA: 0x247A2B0
	private static void MultiplyWord(long a, long[] b, int bLen, long[] c, int cOff) { }

	// RVA: 0x247A3FC Offset: 0x247A3FC VA: 0x247A3FC
	public LongArray ModMultiplyLD(LongArray other, int m, int[] ks) { }

	// RVA: 0x247AB28 Offset: 0x247AB28 VA: 0x247AB28
	public LongArray ModMultiply(LongArray other, int m, int[] ks) { }

	// RVA: 0x247B088 Offset: 0x247B088 VA: 0x247B088
	public LongArray ModMultiplyAlt(LongArray other, int m, int[] ks) { }

	// RVA: 0x247B890 Offset: 0x247B890 VA: 0x247B890
	public LongArray ModReduce(int m, int[] ks) { }

	// RVA: 0x247BC50 Offset: 0x247BC50 VA: 0x247BC50
	public LongArray Multiply(LongArray other, int m, int[] ks) { }

	// RVA: 0x247C160 Offset: 0x247C160 VA: 0x247C160
	public void Reduce(int m, int[] ks) { }

	// RVA: 0x247AA68 Offset: 0x247AA68 VA: 0x247AA68
	private static LongArray ReduceResult(long[] buf, int off, int len, int m, int[] ks) { }

	// RVA: 0x247B958 Offset: 0x247B958 VA: 0x247B958
	private static int ReduceInPlace(long[] buf, int off, int len, int m, int[] ks) { }

	// RVA: 0x247C5D0 Offset: 0x247C5D0 VA: 0x247C5D0
	private static void ReduceBitWise(long[] buf, int off, int BitLength, int m, int[] ks) { }

	// RVA: 0x247C6AC Offset: 0x247C6AC VA: 0x247C6AC
	private static void ReduceBit(long[] buf, int off, int bit, int m, int[] ks) { }

	// RVA: 0x247C3BC Offset: 0x247C3BC VA: 0x247C3BC
	private static void ReduceWordWise(long[] buf, int off, int len, int toBit, int m, int[] ks) { }

	// RVA: 0x247C7EC Offset: 0x247C7EC VA: 0x247C7EC
	private static void ReduceWord(long[] buf, int off, int bit, long word, int m, int[] ks) { }

	// RVA: 0x247C258 Offset: 0x247C258 VA: 0x247C258
	private static void ReduceVectorWise(long[] buf, int off, int len, int words, int m, int[] ks) { }

	// RVA: 0x247C920 Offset: 0x247C920 VA: 0x247C920
	private static void FlipVector(long[] x, int xOff, long[] y, int yOff, int yLen, int bits) { }

	// RVA: 0x247CA54 Offset: 0x247CA54 VA: 0x247CA54
	public LongArray ModSquare(int m, int[] ks) { }

	// RVA: 0x247CDC8 Offset: 0x247CDC8 VA: 0x247CDC8
	public LongArray ModSquareN(int n, int m, int[] ks) { }

	// RVA: 0x247D038 Offset: 0x247D038 VA: 0x247D038
	public LongArray Square(int m, int[] ks) { }

	// RVA: 0x247CF00 Offset: 0x247CF00 VA: 0x247CF00
	private static void SquareInPlace(long[] x, int xLen, int m, int[] ks) { }

	// RVA: 0x247B6B0 Offset: 0x247B6B0 VA: 0x247B6B0
	private static void Interleave(long[] x, int xOff, long[] z, int zOff, int count, int width) { }

	// RVA: 0x247D1E0 Offset: 0x247D1E0 VA: 0x247D1E0
	private static void Interleave3(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x247D650 Offset: 0x247D650 VA: 0x247D650
	private static long Interleave3(long x) { }

	// RVA: 0x247D6E8 Offset: 0x247D6E8 VA: 0x247D6E8
	private static long Interleave3_21to63(int x) { }

	// RVA: 0x247D2F8 Offset: 0x247D2F8 VA: 0x247D2F8
	private static void Interleave5(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x247D820 Offset: 0x247D820 VA: 0x247D820
	private static long Interleave5(long x) { }

	// RVA: 0x247D8D8 Offset: 0x247D8D8 VA: 0x247D8D8
	private static long Interleave3_13to65(int x) { }

	// RVA: 0x247D410 Offset: 0x247D410 VA: 0x247D410
	private static void Interleave7(long[] x, int xOff, long[] z, int zOff, int count) { }

	// RVA: 0x247D9C8 Offset: 0x247D9C8 VA: 0x247D9C8
	private static long Interleave7(long x) { }

	// RVA: 0x247D528 Offset: 0x247D528 VA: 0x247D528
	private static void Interleave2_n(long[] x, int xOff, long[] z, int zOff, int count, int rounds) { }

	// RVA: 0x247DC28 Offset: 0x247DC28 VA: 0x247DC28
	private static long Interleave2_n(long x, int rounds) { }

	// RVA: 0x247DD3C Offset: 0x247DD3C VA: 0x247DD3C
	private static long Interleave4_16to64(int x) { }

	// RVA: 0x247CC48 Offset: 0x247CC48 VA: 0x247CC48
	private static long Interleave2_32to64(int x) { }

	// RVA: 0x247DE2C Offset: 0x247DE2C VA: 0x247DE2C
	public LongArray ModInverse(int m, int[] ks) { }

	// RVA: 0x247E578 Offset: 0x247E578 VA: 0x247E578 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x247E610 Offset: 0x247E610 VA: 0x247E610 Slot: 4
	public virtual bool Equals(LongArray other) { }

	// RVA: 0x247E708 Offset: 0x247E708 VA: 0x247E708 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x247E500 Offset: 0x247E500 VA: 0x247E500
	public LongArray Copy() { }

	// RVA: 0x247E7B0 Offset: 0x247E7B0 VA: 0x247E7B0 Slot: 3
	public override string ToString() { }

	// RVA: 0x247E9DC Offset: 0x247E9DC VA: 0x247E9DC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public abstract class AbstractECMultiplier : ECMultiplier // TypeDefIndex: 5137
{
	// Methods

	// RVA: 0x247EB68 Offset: 0x247EB68 VA: 0x247EB68
	protected void .ctor() { }

	// RVA: 0x247EB70 Offset: 0x247EB70 VA: 0x247EB70 Slot: 5
	public virtual ECPoint Multiply(ECPoint p, BigInteger k) { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract ECPoint MultiplyPositive(ECPoint p, BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public interface ECMultiplier // TypeDefIndex: 5138
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ECPoint Multiply(ECPoint p, BigInteger k);
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointCombMultiplier : AbstractECMultiplier // TypeDefIndex: 5139
{
	// Methods

	// RVA: 0x247EC88 Offset: 0x247EC88 VA: 0x247EC88
	public void .ctor() { }

	// RVA: 0x247EC90 Offset: 0x247EC90 VA: 0x247EC90 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }

	// RVA: 0x247F494 Offset: 0x247F494 VA: 0x247F494 Slot: 7
	protected virtual int GetWidthForCombSize(int combSize) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointPreCompInfo : PreCompInfo // TypeDefIndex: 5140
{
	// Fields
	protected ECPoint[] m_preComp; // 0x10
	protected int m_width; // 0x18

	// Properties
	public virtual ECPoint[] PreComp { get; set; }
	public virtual int Width { get; set; }

	// Methods

	// RVA: 0x247F4A4 Offset: 0x247F4A4 VA: 0x247F4A4
	public void .ctor() { }

	// RVA: 0x247F4B4 Offset: 0x247F4B4 VA: 0x247F4B4 Slot: 4
	public virtual ECPoint[] get_PreComp() { }

	// RVA: 0x247F4BC Offset: 0x247F4BC VA: 0x247F4BC Slot: 5
	public virtual void set_PreComp(ECPoint[] value) { }

	// RVA: 0x247F4C4 Offset: 0x247F4C4 VA: 0x247F4C4 Slot: 6
	public virtual int get_Width() { }

	// RVA: 0x247F4CC Offset: 0x247F4CC VA: 0x247F4CC Slot: 7
	public virtual void set_Width(int value) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class FixedPointUtilities // TypeDefIndex: 5141
{
	// Fields
	public static readonly string PRECOMP_NAME; // 0x0

	// Methods

	// RVA: 0x247F4D4 Offset: 0x247F4D4 VA: 0x247F4D4
	public void .ctor() { }

	// RVA: 0x247EF10 Offset: 0x247EF10 VA: 0x247EF10
	public static int GetCombSize(ECCurve c) { }

	// RVA: 0x247F4DC Offset: 0x247F4DC VA: 0x247F4DC
	public static FixedPointPreCompInfo GetFixedPointPreCompInfo(PreCompInfo preCompInfo) { }

	// RVA: 0x247EF70 Offset: 0x247EF70 VA: 0x247EF70
	public static FixedPointPreCompInfo Precompute(ECPoint p, int minWidth) { }

	// RVA: 0x247F570 Offset: 0x247F570 VA: 0x247F570
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class GlvMultiplier : AbstractECMultiplier // TypeDefIndex: 5142
{
	// Fields
	protected readonly ECCurve curve; // 0x10
	protected readonly GlvEndomorphism glvEndomorphism; // 0x18

	// Methods

	// RVA: 0x247F5CC Offset: 0x247F5CC VA: 0x247F5CC
	public void .ctor(ECCurve curve, GlvEndomorphism glvEndomorphism) { }

	// RVA: 0x247F698 Offset: 0x247F698 VA: 0x247F698 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public interface PreCompInfo // TypeDefIndex: 5143
{}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WNafL2RMultiplier : AbstractECMultiplier // TypeDefIndex: 5144
{
	// Methods

	// RVA: 0x247FA34 Offset: 0x247FA34 VA: 0x247FA34
	public void .ctor() { }

	// RVA: 0x247FA3C Offset: 0x247FA3C VA: 0x247FA3C Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint p, BigInteger k) { }

	// RVA: 0x24809E0 Offset: 0x24809E0 VA: 0x24809E0 Slot: 7
	protected virtual int GetWindowSize(int bits) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WNafPreCompInfo : PreCompInfo // TypeDefIndex: 5145
{
	// Fields
	protected ECPoint[] m_preComp; // 0x10
	protected ECPoint[] m_preCompNeg; // 0x18
	protected ECPoint m_twice; // 0x20

	// Properties
	public virtual ECPoint[] PreComp { get; set; }
	public virtual ECPoint[] PreCompNeg { get; set; }
	public virtual ECPoint Twice { get; set; }

	// Methods

	// RVA: 0x2480AB4 Offset: 0x2480AB4 VA: 0x2480AB4
	public void .ctor() { }

	// RVA: 0x2480ABC Offset: 0x2480ABC VA: 0x2480ABC Slot: 4
	public virtual ECPoint[] get_PreComp() { }

	// RVA: 0x2480AC4 Offset: 0x2480AC4 VA: 0x2480AC4 Slot: 5
	public virtual void set_PreComp(ECPoint[] value) { }

	// RVA: 0x2480ACC Offset: 0x2480ACC VA: 0x2480ACC Slot: 6
	public virtual ECPoint[] get_PreCompNeg() { }

	// RVA: 0x2480AD4 Offset: 0x2480AD4 VA: 0x2480AD4 Slot: 7
	public virtual void set_PreCompNeg(ECPoint[] value) { }

	// RVA: 0x2480ADC Offset: 0x2480ADC VA: 0x2480ADC Slot: 8
	public virtual ECPoint get_Twice() { }

	// RVA: 0x2480AE4 Offset: 0x2480AE4 VA: 0x2480AE4 Slot: 9
	public virtual void set_Twice(ECPoint value) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public abstract class WNafUtilities // TypeDefIndex: 5146
{
	// Fields
	public static readonly string PRECOMP_NAME; // 0x0
	private static readonly int[] DEFAULT_WINDOW_SIZE_CUTOFFS; // 0x8
	private static readonly byte[] EMPTY_BYTES; // 0x10
	private static readonly int[] EMPTY_INTS; // 0x18
	private static readonly ECPoint[] EMPTY_POINTS; // 0x20

	// Methods

	// RVA: 0x2480AEC Offset: 0x2480AEC VA: 0x2480AEC
	protected void .ctor() { }

	// RVA: 0x2480AF4 Offset: 0x2480AF4 VA: 0x2480AF4
	public static int[] GenerateCompactNaf(BigInteger k) { }

	// RVA: 0x2480688 Offset: 0x2480688 VA: 0x2480688
	public static int[] GenerateCompactWindowNaf(int width, BigInteger k) { }

	// RVA: 0x2480E84 Offset: 0x2480E84 VA: 0x2480E84
	public static byte[] GenerateJsf(BigInteger g, BigInteger h) { }

	// RVA: 0x2481210 Offset: 0x2481210 VA: 0x2481210
	public static byte[] GenerateNaf(BigInteger k) { }

	// RVA: 0x248142C Offset: 0x248142C VA: 0x248142C
	public static byte[] GenerateWindowNaf(int width, BigInteger k) { }

	// RVA: 0x2481738 Offset: 0x2481738 VA: 0x2481738
	public static int GetNafWeight(BigInteger k) { }

	// RVA: 0x24817E0 Offset: 0x24817E0 VA: 0x24817E0
	public static WNafPreCompInfo GetWNafPreCompInfo(ECPoint p) { }

	// RVA: 0x24818A0 Offset: 0x24818A0 VA: 0x24818A0
	public static WNafPreCompInfo GetWNafPreCompInfo(PreCompInfo preCompInfo) { }

	// RVA: 0x2480A44 Offset: 0x2480A44 VA: 0x2480A44
	public static int GetWindowSize(int bits) { }

	// RVA: 0x248192C Offset: 0x248192C VA: 0x248192C
	public static int GetWindowSize(int bits, int[] windowSizeCutoffs) { }

	// RVA: 0x24819AC Offset: 0x24819AC VA: 0x24819AC
	public static ECPoint MapPointWithPrecomp(ECPoint p, int width, bool includeNegated, ECPointMap pointMap) { }

	// RVA: 0x247FE44 Offset: 0x247FE44 VA: 0x247FE44
	public static WNafPreCompInfo Precompute(ECPoint p, int width, bool includeNegated) { }

	// RVA: 0x2481184 Offset: 0x2481184 VA: 0x2481184
	private static byte[] Trim(byte[] a, int length) { }

	// RVA: 0x2480DF8 Offset: 0x2480DF8 VA: 0x2480DF8
	private static int[] Trim(int[] a, int length) { }

	// RVA: 0x2481ECC Offset: 0x2481ECC VA: 0x2481ECC
	private static ECPoint[] ResizeTable(ECPoint[] a, int length) { }

	// RVA: 0x2481F5C Offset: 0x2481F5C VA: 0x2481F5C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WTauNafMultiplier : AbstractECMultiplier // TypeDefIndex: 5147
{
	// Fields
	internal static readonly string PRECOMP_NAME; // 0x0

	// Methods

	// RVA: 0x2482050 Offset: 0x2482050 VA: 0x2482050
	public void .ctor() { }

	// RVA: 0x2482058 Offset: 0x2482058 VA: 0x2482058 Slot: 6
	protected override ECPoint MultiplyPositive(ECPoint point, BigInteger k) { }

	// RVA: 0x248230C Offset: 0x248230C VA: 0x248230C
	private AbstractF2mPoint MultiplyWTnaf(AbstractF2mPoint p, ZTauElement lambda, PreCompInfo preCompInfo, sbyte a, sbyte mu) { }

	// RVA: 0x2482470 Offset: 0x2482470 VA: 0x2482470
