[ComVisibleAttribute] // RVA: 0xBC94CC Offset: 0xBC94CC VA: 0xBC94CC
public class HMACSHA1 : HMAC // TypeDefIndex: 730
{
	// Methods

	// RVA: 0x1D658C4 Offset: 0x1D658C4 VA: 0x1D658C4
	public void .ctor() { }

	// RVA: 0x1D658F4 Offset: 0x1D658F4 VA: 0x1D658F4
	public void .ctor(byte[] key) { }

	// RVA: 0x1D65990 Offset: 0x1D65990 VA: 0x1D65990
	public void .ctor(byte[] key, bool useManagedSha1) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC94E0 Offset: 0xBC94E0 VA: 0xBC94E0
public class HMACSHA256 : HMAC // TypeDefIndex: 731
{
	// Methods

	// RVA: 0x1D65A7C Offset: 0x1D65A7C VA: 0x1D65A7C
	public void .ctor() { }

	// RVA: 0x1D65AAC Offset: 0x1D65AAC VA: 0x1D65AAC
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC94F4 Offset: 0xBC94F4 VA: 0xBC94F4
public class HMACSHA384 : HMAC // TypeDefIndex: 732
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x54

	// Properties
	public bool ProduceLegacyHmacValues { get; set; }

	// Methods

	// RVA: 0x1D65B48 Offset: 0x1D65B48 VA: 0x1D65B48
	public void .ctor() { }

	// RVA: 0x1D65BF0 Offset: 0x1D65BF0 VA: 0x1D65BF0
	public void .ctor(byte[] key) { }

	// RVA: 0x1D65D0C Offset: 0x1D65D0C VA: 0x1D65D0C
	private static void .cctor() { }

	// RVA: 0x1D65DB4 Offset: 0x1D65DB4 VA: 0x1D65DB4
	public bool get_ProduceLegacyHmacValues() { }

	// RVA: 0x1D65CCC Offset: 0x1D65CCC VA: 0x1D65CCC
	public void set_ProduceLegacyHmacValues(bool value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9508 Offset: 0xBC9508 VA: 0xBC9508
public class HMACSHA512 : HMAC // TypeDefIndex: 733
{
	// Fields
	private static bool legacy_mode; // 0x0
	private bool legacy; // 0x54

	// Properties
	public bool ProduceLegacyHmacValues { get; set; }

	// Methods

	// RVA: 0x1D65DBC Offset: 0x1D65DBC VA: 0x1D65DBC
	public void .ctor() { }

	// RVA: 0x1D65E64 Offset: 0x1D65E64 VA: 0x1D65E64
	public void .ctor(byte[] key) { }

	// RVA: 0x1D65F80 Offset: 0x1D65F80 VA: 0x1D65F80
	private static void .cctor() { }

	// RVA: 0x1D66028 Offset: 0x1D66028 VA: 0x1D66028
	public bool get_ProduceLegacyHmacValues() { }

	// RVA: 0x1D65F40 Offset: 0x1D65F40 VA: 0x1D65F40
	public void set_ProduceLegacyHmacValues(bool value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC951C Offset: 0xBC951C VA: 0xBC951C
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 734
{
	// Fields
	protected internal byte[] HashValue; // 0x10
	protected int HashSizeValue; // 0x18
	protected int State; // 0x1C
	private bool disposed; // 0x20

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public virtual byte[] Hash { get; }
	public virtual int HashSize { get; }
	public virtual int InputBlockSize { get; }
	public virtual int OutputBlockSize { get; }

	// Methods

	// RVA: 0x1D66030 Offset: 0x1D66030 VA: 0x1D66030
	protected void .ctor() { }

	// RVA: 0x1D66058 Offset: 0x1D66058 VA: 0x1D66058 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1D66090 Offset: 0x1D66090 VA: 0x1D66090 Slot: 11
	public virtual bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x1D66098 Offset: 0x1D66098 VA: 0x1D66098 Slot: 12
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x1D660A0 Offset: 0x1D660A0 VA: 0x1D660A0
	public void Clear() { }

	// RVA: 0x1D6494C Offset: 0x1D6494C VA: 0x1D6494C
	public byte[] ComputeHash(byte[] buffer) { }

	// RVA: 0x1D660B4 Offset: 0x1D660B4 VA: 0x1D660B4
	public byte[] ComputeHash(byte[] buffer, int offset, int count) { }

	// RVA: 0x1D662BC Offset: 0x1D662BC VA: 0x1D662BC
	public byte[] ComputeHash(Stream inputStream) { }

	// RVA: 0x1D66420 Offset: 0x1D66420 VA: 0x1D66420
	public static HashAlgorithm Create() { }

	// RVA: 0x1D64580 Offset: 0x1D64580 VA: 0x1D64580
	public static HashAlgorithm Create(string hashName) { }

	// RVA: 0x1D66468 Offset: 0x1D66468 VA: 0x1D66468 Slot: 13
	public virtual byte[] get_Hash() { }

	// RVA: -1 Offset: -1 Slot: 14
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize);

	// RVA: -1 Offset: -1 Slot: 15
	protected abstract byte[] HashFinal();

	// RVA: 0x1D66508 Offset: 0x1D66508 VA: 0x1D66508 Slot: 16
	public virtual int get_HashSize() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Initialize();

	// RVA: 0x1D66510 Offset: 0x1D66510 VA: 0x1D66510 Slot: 18
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x1D6651C Offset: 0x1D6651C VA: 0x1D6651C Slot: 19
	public virtual int get_InputBlockSize() { }

	// RVA: 0x1D66524 Offset: 0x1D66524 VA: 0x1D66524 Slot: 20
	public virtual int get_OutputBlockSize() { }

	// RVA: 0x1D650B0 Offset: 0x1D650B0 VA: 0x1D650B0 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x1D652EC Offset: 0x1D652EC VA: 0x1D652EC Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9530 Offset: 0xBC9530 VA: 0xBC9530
public interface ICryptoTransform : IDisposable // TypeDefIndex: 735
{
	// Properties
	public abstract bool CanReuseTransform { get; }
	public abstract bool CanTransformMultipleBlocks { get; }
	public abstract int InputBlockSize { get; }
	public abstract int OutputBlockSize { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_CanReuseTransform();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_CanTransformMultipleBlocks();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int get_InputBlockSize();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int get_OutputBlockSize();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9544 Offset: 0xBC9544 VA: 0xBC9544
public interface ICspAsymmetricAlgorithm // TypeDefIndex: 736
{
	// Properties
	public abstract CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract byte[] ExportCspBlob(bool includePrivateParameters);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ImportCspBlob(byte[] rawData);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract CspKeyContainerInfo get_CspKeyContainerInfo();
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9558 Offset: 0xBC9558 VA: 0xBC9558
[Serializable]
public enum KeyNumber // TypeDefIndex: 737
{
	// Fields
	public int value__; // 0x0
	public const KeyNumber Exchange = 1;
	public const KeyNumber Signature = 2;
}

// Namespace: System.Security.Cryptography
public sealed class KeySizes // TypeDefIndex: 738
{
	// Fields
	private int _maxSize; // 0x10
	private int _minSize; // 0x14
	private int _skipSize; // 0x18

	// Properties
	public int MaxSize { get; }
	public int MinSize { get; }
	public int SkipSize { get; }

	// Methods

	// RVA: 0x1D6652C Offset: 0x1D6652C VA: 0x1D6652C
	public void .ctor(int minSize, int maxSize, int skipSize) { }

	// RVA: 0x1D6656C Offset: 0x1D6656C VA: 0x1D6656C
	public int get_MaxSize() { }

	// RVA: 0x1D66574 Offset: 0x1D66574 VA: 0x1D66574
	public int get_MinSize() { }

	// RVA: 0x1D6657C Offset: 0x1D6657C VA: 0x1D6657C
	public int get_SkipSize() { }

	// RVA: 0x1D66584 Offset: 0x1D66584 VA: 0x1D66584
	internal bool IsLegal(int keySize) { }

	// RVA: 0x1D665D4 Offset: 0x1D665D4 VA: 0x1D665D4
	internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC956C Offset: 0xBC956C VA: 0xBC956C
public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 739
{
	// Fields
	protected byte[] KeyValue; // 0x28

	// Properties
	public virtual byte[] Key { get; set; }

	// Methods

	// RVA: 0x1D64514 Offset: 0x1D64514 VA: 0x1D64514
	protected void .ctor() { }

	// RVA: 0x1D66698 Offset: 0x1D66698 VA: 0x1D66698 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D64750 Offset: 0x1D64750 VA: 0x1D64750 Slot: 21
	public virtual byte[] get_Key() { }

	// RVA: 0x1D649F0 Offset: 0x1D649F0 VA: 0x1D649F0 Slot: 22
	public virtual void set_Key(byte[] value) { }

	// RVA: 0x1D64D6C Offset: 0x1D64D6C VA: 0x1D64D6C Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1D6671C Offset: 0x1D6671C VA: 0x1D6671C
	private void ZeroizeKey() { }

	// RVA: 0x1D66738 Offset: 0x1D66738 VA: 0x1D66738
	public static KeyedHashAlgorithm Create() { }

	// RVA: 0x1D66780 Offset: 0x1D66780 VA: 0x1D66780
	public static KeyedHashAlgorithm Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9580 Offset: 0xBC9580 VA: 0xBC9580
public class MACTripleDES : KeyedHashAlgorithm // TypeDefIndex: 740
{
	// Fields
	private TripleDES tdes; // 0x30
	private MACAlgorithm mac; // 0x38
	private bool m_disposed; // 0x40

	// Properties
	[ComVisibleAttribute] // RVA: 0xBCF278 Offset: 0xBCF278 VA: 0xBCF278
	public PaddingMode Padding { get; set; }

	// Methods

	// RVA: 0x1D66874 Offset: 0x1D66874 VA: 0x1D66874
	public void .ctor() { }

	// RVA: 0x1D66A0C Offset: 0x1D66A0C VA: 0x1D66A0C
	public void .ctor(byte[] rgbKey) { }

	// RVA: 0x1D66AC4 Offset: 0x1D66AC4 VA: 0x1D66AC4
	public void .ctor(string strTripleDES, byte[] rgbKey) { }

	// RVA: 0x1D668D8 Offset: 0x1D668D8 VA: 0x1D668D8
	private void Setup(string strTripleDES, byte[] rgbKey) { }

	// RVA: 0x1D66B90 Offset: 0x1D66B90 VA: 0x1D66B90 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D66C0C Offset: 0x1D66C0C VA: 0x1D66C0C
	public PaddingMode get_Padding() { }

	// RVA: 0x1D66C44 Offset: 0x1D66C44 VA: 0x1D66C44
	public void set_Padding(PaddingMode value) { }

	// RVA: 0x1D66C84 Offset: 0x1D66C84 VA: 0x1D66C84 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1D66D10 Offset: 0x1D66D10 VA: 0x1D66D10 Slot: 17
	public override void Initialize() { }

	// RVA: 0x1D66DC8 Offset: 0x1D66DC8 VA: 0x1D66DC8 Slot: 14
	protected override void HashCore(byte[] rgbData, int ibStart, int cbSize) { }

	// RVA: 0x1D66EB8 Offset: 0x1D66EB8 VA: 0x1D66EB8 Slot: 15
	protected override byte[] HashFinal() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9594 Offset: 0xBC9594 VA: 0xBC9594
public abstract class MD5 : HashAlgorithm // TypeDefIndex: 741
{
	// Methods

	// RVA: 0x1D66F60 Offset: 0x1D66F60 VA: 0x1D66F60
	protected void .ctor() { }

	// RVA: 0x1D66F90 Offset: 0x1D66F90 VA: 0x1D66F90
	public static MD5 Create() { }

	// RVA: 0x1D66FD8 Offset: 0x1D66FD8 VA: 0x1D66FD8
	public static MD5 Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC95A8 Offset: 0xBC95A8 VA: 0xBC95A8
public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 742
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private const int HASH_SIZE_BYTES = 16;
	private uint[] _H; // 0x28
	private uint[] buff; // 0x30
	private ulong count; // 0x38
	private byte[] _ProcessingBuffer; // 0x40
	private int _ProcessingBufferCount; // 0x48
	private static readonly uint[] K; // 0x0

	// Methods

	// RVA: 0x1D670CC Offset: 0x1D670CC VA: 0x1D670CC
	public void .ctor() { }

	// RVA: 0x1D67268 Offset: 0x1D67268 VA: 0x1D67268
	private static void .cctor() { }

	// RVA: 0x1D672E4 Offset: 0x1D672E4 VA: 0x1D672E4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D672F4 Offset: 0x1D672F4 VA: 0x1D672F4 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1D67370 Offset: 0x1D67370 VA: 0x1D67370 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x1D6992C Offset: 0x1D6992C VA: 0x1D6992C Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x1D67168 Offset: 0x1D67168 VA: 0x1D67168 Slot: 17
	public override void Initialize() { }

	// RVA: 0x1D6747C Offset: 0x1D6747C VA: 0x1D6747C
	private void ProcessBlock(byte[] inputBuffer, int inputOffset) { }

	// RVA: 0x1D69A50 Offset: 0x1D69A50 VA: 0x1D69A50
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x1D69C78 Offset: 0x1D69C78 VA: 0x1D69C78
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC95BC Offset: 0xBC95BC VA: 0xBC95BC
public abstract class MaskGenerationMethod // TypeDefIndex: 743
{
	// Methods

	// RVA: 0x1D69E30 Offset: 0x1D69E30 VA: 0x1D69E30
	protected void .ctor() { }

	[ComVisibleAttribute] // RVA: 0xBCD690 Offset: 0xBCD690 VA: 0xBCD690
	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] GenerateMask(byte[] rgbSeed, int cbReturn);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC95D0 Offset: 0xBC95D0 VA: 0xBC95D0
public class PKCS1MaskGenerationMethod : MaskGenerationMethod // TypeDefIndex: 744
{
	// Fields
	private string hashName; // 0x10

	// Properties
	public string HashName { get; set; }

	// Methods

	// RVA: 0x1D69E38 Offset: 0x1D69E38 VA: 0x1D69E38
	public void .ctor() { }

	// RVA: 0x1D69E94 Offset: 0x1D69E94 VA: 0x1D69E94
	public string get_HashName() { }

	// RVA: 0x1D69E9C Offset: 0x1D69E9C VA: 0x1D69E9C
	public void set_HashName(string value) { }

	// RVA: 0x1D69F0C Offset: 0x1D69F0C VA: 0x1D69F0C Slot: 4
	public override byte[] GenerateMask(byte[] rgbSeed, int cbReturn) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC95E4 Offset: 0xBC95E4 VA: 0xBC95E4
[Serializable]
public enum PaddingMode // TypeDefIndex: 745
{
	// Fields
	public int value__; // 0x0
	public const PaddingMode None = 1;
	public const PaddingMode PKCS7 = 2;
	public const PaddingMode Zeros = 3;
	public const PaddingMode ANSIX923 = 4;
	public const PaddingMode ISO10126 = 5;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC95F8 Offset: 0xBC95F8 VA: 0xBC95F8
public class PasswordDeriveBytes : DeriveBytes // TypeDefIndex: 746
{
	// Fields
	private string HashNameValue; // 0x10
	private byte[] SaltValue; // 0x18
	private int IterationsValue; // 0x20
	private HashAlgorithm hash; // 0x28
	private int state; // 0x30
	private byte[] password; // 0x38
	private byte[] initial; // 0x40
	private byte[] output; // 0x48
	private int position; // 0x50
	private int hashnumber; // 0x54

	// Properties
	public string HashName { get; set; }
	public int IterationCount { get; set; }
	public byte[] Salt { get; set; }

	// Methods

	// RVA: 0x1D69F9C Offset: 0x1D69F9C VA: 0x1D69F9C
	public void .ctor(string strPassword, byte[] rgbSalt) { }

	// RVA: 0x1D6A13C Offset: 0x1D6A13C VA: 0x1D6A13C
	public void .ctor(string strPassword, byte[] rgbSalt, CspParameters cspParams) { }

	// RVA: 0x1D6A220 Offset: 0x1D6A220 VA: 0x1D6A220
	public void .ctor(string strPassword, byte[] rgbSalt, string strHashName, int iterations) { }

	// RVA: 0x1D6A278 Offset: 0x1D6A278 VA: 0x1D6A278
	public void .ctor(string strPassword, byte[] rgbSalt, string strHashName, int iterations, CspParameters cspParams) { }

	// RVA: 0x1D6A364 Offset: 0x1D6A364 VA: 0x1D6A364
	public void .ctor(byte[] password, byte[] salt) { }

	// RVA: 0x1D6A538 Offset: 0x1D6A538 VA: 0x1D6A538
	public void .ctor(byte[] password, byte[] salt, CspParameters cspParams) { }

	// RVA: 0x1D6A61C Offset: 0x1D6A61C VA: 0x1D6A61C
	public void .ctor(byte[] password, byte[] salt, string hashName, int iterations) { }

	// RVA: 0x1D6A674 Offset: 0x1D6A674 VA: 0x1D6A674
	public void .ctor(byte[] password, byte[] salt, string hashName, int iterations, CspParameters cspParams) { }

	// RVA: 0x1D6A760 Offset: 0x1D6A760 VA: 0x1D6A760 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D6A014 Offset: 0x1D6A014 VA: 0x1D6A014
	private void Prepare(string strPassword, byte[] rgbSalt, string strHashName, int iterations) { }

	// RVA: 0x1D6A3DC Offset: 0x1D6A3DC VA: 0x1D6A3DC
	private void Prepare(byte[] password, byte[] rgbSalt, string strHashName, int iterations) { }

	// RVA: 0x1D6AB30 Offset: 0x1D6AB30 VA: 0x1D6AB30
	public string get_HashName() { }

	// RVA: 0x1D6A948 Offset: 0x1D6A948 VA: 0x1D6A948
	public void set_HashName(string value) { }

	// RVA: 0x1D6AB38 Offset: 0x1D6AB38 VA: 0x1D6AB38
	public int get_IterationCount() { }

	// RVA: 0x1D6AA34 Offset: 0x1D6AA34 VA: 0x1D6AA34
	public void set_IterationCount(int value) { }

	// RVA: 0x1D6AB40 Offset: 0x1D6AB40 VA: 0x1D6AB40
	public byte[] get_Salt() { }

	// RVA: 0x1D6A814 Offset: 0x1D6A814 VA: 0x1D6A814
	public void set_Salt(byte[] value) { }

	// RVA: 0x1D6AC0C Offset: 0x1D6AC0C VA: 0x1D6AC0C
	public byte[] CryptDeriveKey(string algname, string alghashname, int keySize, byte[] rgbIV) { }

	[ObsoleteAttribute] // RVA: 0xBCD6A4 Offset: 0xBCD6A4 VA: 0xBCD6A4
	// RVA: 0x1D6ACE0 Offset: 0x1D6ACE0 VA: 0x1D6ACE0 Slot: 4
	public override byte[] GetBytes(int cb) { }

	// RVA: 0x1D6B0A0 Offset: 0x1D6B0A0 VA: 0x1D6B0A0 Slot: 5
	public override void Reset() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC960C Offset: 0xBC960C VA: 0xBC960C
public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 747
{
	// Fields
	protected int EffectiveKeySizeValue; // 0x50

	// Properties
	public virtual int EffectiveKeySize { get; set; }
	public override int KeySize { get; set; }

	// Methods

	// RVA: 0x1D6B1A8 Offset: 0x1D6B1A8 VA: 0x1D6B1A8
	protected void .ctor() { }

	// RVA: 0x1D6B348 Offset: 0x1D6B348 VA: 0x1D6B348
	public static RC2 Create() { }

	// RVA: 0x1D6B390 Offset: 0x1D6B390 VA: 0x1D6B390
	public static RC2 Create(string AlgName) { }

	// RVA: 0x1D6B484 Offset: 0x1D6B484 VA: 0x1D6B484 Slot: 28
	public virtual int get_EffectiveKeySize() { }

	// RVA: 0x1D6B49C Offset: 0x1D6B49C VA: 0x1D6B49C Slot: 29
	public virtual void set_EffectiveKeySize(int value) { }

	// RVA: 0x1D6B4A4 Offset: 0x1D6B4A4 VA: 0x1D6B4A4 Slot: 14
	public override int get_KeySize() { }

	// RVA: 0x1D6B4AC Offset: 0x1D6B4AC VA: 0x1D6B4AC Slot: 15
	public override void set_KeySize(int value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9620 Offset: 0xBC9620 VA: 0xBC9620
public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 748
{
	// Fields
	private bool _useSalt; // 0x54

	// Properties
	public override int EffectiveKeySize { get; set; }
	[MonoTODOAttribute] // RVA: 0xBCF28C Offset: 0xBCF28C VA: 0xBCF28C
	[ComVisibleAttribute] // RVA: 0xBCF28C Offset: 0xBCF28C VA: 0xBCF28C
	public bool UseSalt { get; set; }

	// Methods

	// RVA: 0x1D6B4D8 Offset: 0x1D6B4D8 VA: 0x1D6B4D8
	public void .ctor() { }

	// RVA: 0x1D6B4DC Offset: 0x1D6B4DC VA: 0x1D6B4DC Slot: 28
	public override int get_EffectiveKeySize() { }

	// RVA: 0x1D6B4F4 Offset: 0x1D6B4F4 VA: 0x1D6B4F4 Slot: 29
	public override void set_EffectiveKeySize(int value) { }

	// RVA: 0x1D6B5A8 Offset: 0x1D6B5A8 VA: 0x1D6B5A8 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x1D6BDBC Offset: 0x1D6BDBC VA: 0x1D6BDBC Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x1D6BE38 Offset: 0x1D6BE38 VA: 0x1D6BE38 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x1D6BE68 Offset: 0x1D6BE68 VA: 0x1D6BE68 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0x1D6BE98 Offset: 0x1D6BE98 VA: 0x1D6BE98
	public bool get_UseSalt() { }

	// RVA: 0x1D6BEA0 Offset: 0x1D6BEA0 VA: 0x1D6BEA0
	public void set_UseSalt(bool value) { }
}

// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform // TypeDefIndex: 749
{
	// Fields
	private ushort R0; // 0x58
	private ushort R1; // 0x5A
	private ushort R2; // 0x5C
	private ushort R3; // 0x5E
	private ushort[] K; // 0x60
	private int j; // 0x68
	private static readonly byte[] pitable; // 0x0

	// Methods

	// RVA: 0x1D6B624 Offset: 0x1D6B624 VA: 0x1D6B624
	public void .ctor(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x1D6BEAC Offset: 0x1D6BEAC VA: 0x1D6BEAC
	private static void .cctor() { }

	// RVA: 0x1D6BF28 Offset: 0x1D6BF28 VA: 0x1D6BF28 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9634 Offset: 0xBC9634 VA: 0xBC9634
public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 750
{
	// Methods

	// RVA: 0x1D6D16C Offset: 0x1D6D16C VA: 0x1D6D16C
	protected void .ctor() { }

	// RVA: 0x1D6D19C Offset: 0x1D6D19C VA: 0x1D6D19C
	public static RIPEMD160 Create() { }

	// RVA: 0x1D6D1E4 Offset: 0x1D6D1E4 VA: 0x1D6D1E4
	public static RIPEMD160 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9648 Offset: 0xBC9648 VA: 0xBC9648
public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 751
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private byte[] _ProcessingBuffer; // 0x28
	private uint[] _X; // 0x30
	private uint[] _HashValue; // 0x38
	private ulong _Length; // 0x40
	private int _ProcessingBufferCount; // 0x48

	// Methods

	// RVA: 0x1D6D2D8 Offset: 0x1D6D2D8 VA: 0x1D6D2D8
	public void .ctor() { }

	// RVA: 0x1D6D380 Offset: 0x1D6D380 VA: 0x1D6D380 Slot: 17
	public override void Initialize() { }

	// RVA: 0x1D6D4FC Offset: 0x1D6D4FC VA: 0x1D6D4FC Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x1D6D800 Offset: 0x1D6D800 VA: 0x1D6D800 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x1D6DB5C Offset: 0x1D6DB5C VA: 0x1D6DB5C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D6D614 Offset: 0x1D6D614 VA: 0x1D6D614
	private void ProcessBlock(byte[] buffer, int offset) { }

	// RVA: 0x1D6DBE0 Offset: 0x1D6DBE0 VA: 0x1D6DBE0
	private void Compress() { }

	// RVA: 0x1D6D970 Offset: 0x1D6D970 VA: 0x1D6D970
	private void CompressFinal(ulong length) { }

	// RVA: 0x1D7202C Offset: 0x1D7202C VA: 0x1D7202C
	private uint ROL(uint x, int n) { }

	// RVA: 0x1D7203C Offset: 0x1D7203C VA: 0x1D7203C
	private uint F(uint x, uint y, uint z) { }

	// RVA: 0x1D72048 Offset: 0x1D72048 VA: 0x1D72048
	private uint G(uint x, uint y, uint z) { }

	// RVA: 0x1D72058 Offset: 0x1D72058 VA: 0x1D72058
	private uint H(uint x, uint y, uint z) { }

	// RVA: 0x1D72064 Offset: 0x1D72064 VA: 0x1D72064
	private uint I(uint x, uint y, uint z) { }

	// RVA: 0x1D72074 Offset: 0x1D72074 VA: 0x1D72074
	private uint J(uint x, uint y, uint z) { }

	// RVA: 0x1D71D64 Offset: 0x1D71D64 VA: 0x1D71D64
	private void FF(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71DA0 Offset: 0x1D71DA0 VA: 0x1D71DA0
	private void GG(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71DEC Offset: 0x1D71DEC VA: 0x1D71DEC
	private void HH(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71E34 Offset: 0x1D71E34 VA: 0x1D71E34
	private void II(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71E80 Offset: 0x1D71E80 VA: 0x1D71E80
	private void JJ(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71FF0 Offset: 0x1D71FF0 VA: 0x1D71FF0
	private void FFF(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71FA4 Offset: 0x1D71FA4 VA: 0x1D71FA4
	private void GGG(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71F5C Offset: 0x1D71F5C VA: 0x1D71F5C
	private void HHH(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71F10 Offset: 0x1D71F10 VA: 0x1D71F10
	private void III(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }

	// RVA: 0x1D71EC8 Offset: 0x1D71EC8 VA: 0x1D71EC8
	private void JJJ(ref uint a, uint b, ref uint c, uint d, uint e, uint x, int s) { }
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 752
{
	// Fields
	private static object _lock; // 0x0
	private IntPtr _handle; // 0x10

	// Methods

	// RVA: 0x1D72080 Offset: 0x1D72080 VA: 0x1D72080
	public void .ctor() { }

	// RVA: 0x1D721B4 Offset: 0x1D721B4 VA: 0x1D721B4
	private static void .cctor() { }

	// RVA: 0x1D72108 Offset: 0x1D72108 VA: 0x1D72108
	private void Check() { }

	// RVA: 0x1D72228 Offset: 0x1D72228 VA: 0x1D72228
	private static bool RngOpen() { }

	// RVA: 0x1D72104 Offset: 0x1D72104 VA: 0x1D72104
	private static IntPtr RngInitialize(byte[] seed) { }

	// RVA: 0x1D7222C Offset: 0x1D7222C VA: 0x1D7222C
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data) { }

	// RVA: 0x1D72230 Offset: 0x1D72230 VA: 0x1D72230
	private static void RngClose(IntPtr handle) { }

	// RVA: 0x1D72234 Offset: 0x1D72234 VA: 0x1D72234 Slot: 4
	public override void GetBytes(byte[] data) { }

	// RVA: 0x1D723C8 Offset: 0x1D723C8 VA: 0x1D723C8 Slot: 5
	public override void GetNonZeroBytes(byte[] data) { }

	// RVA: 0x1D72584 Offset: 0x1D72584 VA: 0x1D72584 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC965C Offset: 0xBC965C VA: 0xBC965C
public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 753
{
	// Methods

	// RVA: 0x1D72660 Offset: 0x1D72660 VA: 0x1D72660
	protected void .ctor() { }

	// RVA: 0x1D72668 Offset: 0x1D72668 VA: 0x1D72668
	public static RSA Create() { }

	// RVA: 0x1D726B0 Offset: 0x1D726B0 VA: 0x1D726B0
	public static RSA Create(string algName) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract byte[] EncryptValue(byte[] rgb);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract byte[] DecryptValue(byte[] rgb);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract RSAParameters ExportParameters(bool includePrivateParameters);

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void ImportParameters(RSAParameters parameters);

	// RVA: 0x1D727A4 Offset: 0x1D727A4 VA: 0x1D727A4
	internal void ZeroizePrivateKey(RSAParameters parameters) { }

	// RVA: 0x1D72858 Offset: 0x1D72858 VA: 0x1D72858 Slot: 11
	public override void FromXmlString(string xmlString) { }

	// RVA: 0x1D72C94 Offset: 0x1D72C94 VA: 0x1D72C94 Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9670 Offset: 0xBC9670 VA: 0xBC9670
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 754
{
	// Fields
	private const int PROV_RSA_FULL = 1;
	private KeyPairPersistence store; // 0x20
	private bool persistKey; // 0x28
	private bool persisted; // 0x29
	private bool privateKeyExportable; // 0x2A
	private bool m_disposed; // 0x2B
	private RSAManaged rsa; // 0x30
	private static bool useMachineKeyStore; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBCB6B0 Offset: 0xBCB6B0 VA: 0xBCB6B0
	private static Dictionary<string, int> <>f__switch$map29; // 0x8

	// Properties
	public static bool UseMachineKeyStore { get; set; }
	public override string KeyExchangeAlgorithm { get; }
	public override int KeySize { get; }
	public bool PersistKeyInCsp { get; set; }
	[ComVisibleAttribute] // RVA: 0xBCF2DC Offset: 0xBCF2DC VA: 0xBCF2DC
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }
	[MonoTODOAttribute] // RVA: 0xBCF2F0 Offset: 0xBCF2F0 VA: 0xBCF2F0
	[ComVisibleAttribute] // RVA: 0xBCF2F0 Offset: 0xBCF2F0 VA: 0xBCF2F0
	public CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods

	// RVA: 0x1D7339C Offset: 0x1D7339C VA: 0x1D7339C
	public void .ctor() { }

	// RVA: 0x1D736D4 Offset: 0x1D736D4 VA: 0x1D736D4
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x1D73710 Offset: 0x1D73710 VA: 0x1D73710
	public void .ctor(int dwKeySize) { }

	// RVA: 0x1D7374C Offset: 0x1D7374C VA: 0x1D7374C
	public void .ctor(int dwKeySize, CspParameters parameters) { }

	// RVA: 0x1D73794 Offset: 0x1D73794 VA: 0x1D73794
	private static void .cctor() { }

	// RVA: 0x1D733D4 Offset: 0x1D733D4 VA: 0x1D733D4
	private void Common(int dwKeySize, CspParameters p) { }

	// RVA: 0x1D737B8 Offset: 0x1D737B8 VA: 0x1D737B8
	public static bool get_UseMachineKeyStore() { }

	// RVA: 0x1D73820 Offset: 0x1D73820 VA: 0x1D73820
	public static void set_UseMachineKeyStore(bool value) { }

	// RVA: 0x1D73890 Offset: 0x1D73890 VA: 0x1D73890 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1D73970 Offset: 0x1D73970 VA: 0x1D73970 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x1D73798 Offset: 0x1D73798 VA: 0x1D73798 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x1D739B8 Offset: 0x1D739B8 VA: 0x1D739B8
	public bool get_PersistKeyInCsp() { }

	// RVA: 0x1D739C0 Offset: 0x1D739C0 VA: 0x1D739C0
	public void set_PersistKeyInCsp(bool value) { }

	// RVA: 0x1D73A84 Offset: 0x1D73A84 VA: 0x1D73A84
	public bool get_PublicOnly() { }

	// RVA: 0x1D73AB4 Offset: 0x1D73AB4 VA: 0x1D73AB4 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x1D73AFC Offset: 0x1D73AFC VA: 0x1D73AFC
	public byte[] Decrypt(byte[] rgb, bool fOAEP) { }

	// RVA: 0x1D73C68 Offset: 0x1D73C68 VA: 0x1D73C68 Slot: 14
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x1D73D3C Offset: 0x1D73D3C VA: 0x1D73D3C
	public byte[] Encrypt(byte[] rgb, bool fOAEP) { }

	// RVA: 0x1D73E78 Offset: 0x1D73E78 VA: 0x1D73E78 Slot: 13
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x1D73EB4 Offset: 0x1D73EB4 VA: 0x1D73EB4 Slot: 15
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x1D73F7C Offset: 0x1D73F7C VA: 0x1D73F7C Slot: 16
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x1D73FF4 Offset: 0x1D73FF4 VA: 0x1D73FF4
	private HashAlgorithm GetHash(object halg) { }

	// RVA: 0x1D741C0 Offset: 0x1D741C0 VA: 0x1D741C0
	public byte[] SignData(byte[] buffer, object halg) { }

	// RVA: 0x1D7432C Offset: 0x1D7432C VA: 0x1D7432C
	public byte[] SignData(Stream inputStream, object halg) { }

	// RVA: 0x1D7426C Offset: 0x1D7426C VA: 0x1D7426C
	public byte[] SignData(byte[] buffer, int offset, int count, object halg) { }

	// RVA: 0x1D743D4 Offset: 0x1D743D4 VA: 0x1D743D4
	private string GetHashNameFromOID(string oid) { }

	// RVA: 0x1D74614 Offset: 0x1D74614 VA: 0x1D74614
	public byte[] SignHash(byte[] rgbHash, string str) { }

	// RVA: 0x1D74704 Offset: 0x1D74704 VA: 0x1D74704
	public bool VerifyData(byte[] buffer, object halg, byte[] signature) { }

	// RVA: 0x1D74824 Offset: 0x1D74824 VA: 0x1D74824
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature) { }

	// RVA: 0x1D73908 Offset: 0x1D73908 VA: 0x1D73908 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1D739D4 Offset: 0x1D739D4 VA: 0x1D739D4
	private void OnKeyGenerated(object sender, EventArgs e) { }

	// RVA: 0x1D74944 Offset: 0x1D74944 VA: 0x1D74944 Slot: 19
	public CspKeyContainerInfo get_CspKeyContainerInfo() { }

	[ComVisibleAttribute] // RVA: 0xBCD6DC Offset: 0xBCD6DC VA: 0xBCD6DC
	// RVA: 0x1D7494C Offset: 0x1D7494C VA: 0x1D7494C Slot: 17
	public byte[] ExportCspBlob(bool includePrivateParameters) { }

	[ComVisibleAttribute] // RVA: 0xBCD6F0 Offset: 0xBCD6F0 VA: 0xBCD6F0
	// RVA: 0x1D749B4 Offset: 0x1D749B4 VA: 0x1D749B4 Slot: 18
	public void ImportCspBlob(byte[] keyBlob) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9684 Offset: 0xBC9684 VA: 0xBC9684
public class RSAOAEPKeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 755
{
	// Fields
	private RSA rsa; // 0x10

	// Properties
	public override string Parameters { get; set; }

	// Methods

	// RVA: 0x1D74BB0 Offset: 0x1D74BB0 VA: 0x1D74BB0
	public void .ctor() { }

	// RVA: 0x1D73BF8 Offset: 0x1D73BF8 VA: 0x1D73BF8
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D74BB8 Offset: 0x1D74BB8 VA: 0x1D74BB8 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0x1D74BC0 Offset: 0x1D74BC0 VA: 0x1D74BC0 Slot: 5
	public override void set_Parameters(string value) { }

	// RVA: 0x1D74BC4 Offset: 0x1D74BC4 VA: 0x1D74BC4 Slot: 6
	public override byte[] DecryptKeyExchange(byte[] rgbData) { }

	// RVA: 0x1D74CFC Offset: 0x1D74CFC VA: 0x1D74CFC Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9698 Offset: 0xBC9698 VA: 0xBC9698
public class RSAOAEPKeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 756
