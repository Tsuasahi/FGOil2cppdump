
	// RVA: 0x16291D0 Offset: 0x16291D0 VA: 0x16291D0
	public AudioClip get_audioClip() { }

	// RVA: 0x1629238 Offset: 0x1629238 VA: 0x1629238
	public Texture get_texture() { }

	// RVA: 0x16292A0 Offset: 0x16292A0 VA: 0x16292A0
	public Texture2D get_textureNonReadable() { }

	// RVA: 0x1629308 Offset: 0x1629308 VA: 0x1629308
	public ThreadPriority get_threadPriprity() { }

	// RVA: 0x1629370 Offset: 0x1629370 VA: 0x1629370
	public void set_threadPriprity(ThreadPriority value) { }

	// RVA: 0x16293D8 Offset: 0x16293D8 VA: 0x16293D8 Slot: 12
	protected virtual void OnProgress(HTTPRequest request, int downloaded, int downloadLength) { }

	// RVA: 0x16293F0 Offset: 0x16293F0 VA: 0x16293F0 Slot: 13
	protected virtual void OnFinished(HTTPRequest requeset, HTTPResponse response) { }

	// RVA: 0x1629A4C Offset: 0x1629A4C VA: 0x1629A4C
	public static string EscapeURL(string s) { }

	// RVA: 0x1629A54 Offset: 0x1629A54 VA: 0x1629A54
	public static string EscapeURL(string s, Encoding encoding) { }

	// RVA: 0x1629A5C Offset: 0x1629A5C VA: 0x1629A5C
	public static string UnEscapeURL(string s) { }

	// RVA: 0x1629A64 Offset: 0x1629A64 VA: 0x1629A64
	public static string UnEscapeURL(string s, Encoding encoding) { }

	// RVA: 0x16295F0 Offset: 0x16295F0 VA: 0x16295F0
	protected Dictionary<string, string> RebuildResponseHeaders(HTTPResponse response, Dictionary<string, List<string>> headers) { }

	// RVA: 0x1629A6C Offset: 0x1629A6C VA: 0x1629A6C
	protected Encoding GetTextEncoding() { }

	// RVA: 0x1629D34 Offset: 0x1629D34 VA: 0x1629D34 Slot: 4
	public object get_Current() { }

	// RVA: 0x1629D3C Offset: 0x1629D3C VA: 0x1629D3C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1629D4C Offset: 0x1629D4C VA: 0x1629D4C Slot: 6
	public void Reset() { }

	// RVA: 0x1629DB4 Offset: 0x1629DB4 VA: 0x1629DB4 Slot: 14
	public virtual void Dispose() { }
}

// Namespace: 
public class AdManager : SingletonMonoBehaviour<AdManager> // TypeDefIndex: 6431
{
	// Fields
	public static readonly string StoneShopCategory; // 0x0
	public static readonly string GachaCategory; // 0x8
	[SerializeField] // RVA: 0xCC0568 Offset: 0xCC0568 VA: 0xCC0568
	private MetapsAnalyticsScript metaps; // 0x18
	private string PurchaseActionPrefix; // 0x20
	private bool IsInitialized; // 0x28
	public bool isInitialisedFirebase; // 0x29

	// Methods

	// RVA: 0x159D798 Offset: 0x159D798 VA: 0x159D798
	public void .ctor() { }

	// RVA: 0x159D7F8 Offset: 0x159D7F8 VA: 0x159D7F8
	public void Initialize() { }

	// RVA: 0x159D9DC Offset: 0x159D9DC VA: 0x159D9DC
	public void SetUserProfile(AdManager.ProfileKey key, string value) { }

	// RVA: 0x159DACC Offset: 0x159DACC VA: 0x159DACC
	public void DoEvent(string actionKey) { }

	// RVA: 0x159DB74 Offset: 0x159DB74 VA: 0x159DB74
	public void DoEvent(AdstoreAction action) { }

	// RVA: 0x159DD5C Offset: 0x159DD5C VA: 0x159DD5C
	public void DoPurchaseEvent(int actionId) { }

	// RVA: 0x159DDC0 Offset: 0x159DDC0 VA: 0x159DDC0
	public void TrackEvent(string category, string name) { }

	// RVA: 0x159DE64 Offset: 0x159DE64 VA: 0x159DE64
	public void TrackEvent(string category, string name, int value) { }

	// RVA: 0x159DF1C Offset: 0x159DF1C VA: 0x159DF1C
	public void TrackPurchase(int actionId, double price, string currency = "JPY") { }

	// RVA: 0x159E014 Offset: 0x159E014 VA: 0x159E014
	public void TrackSpend(string category, string name, int value) { }

	// RVA: 0x159D90C Offset: 0x159D90C VA: 0x159D90C
	public void StartFirebase() { }

	// RVA: 0x159E0CC Offset: 0x159E0CC VA: 0x159E0CC
	public void OnTokenReceived(object sender, TokenReceivedEventArgs token) { }

	// RVA: 0x159E0D0 Offset: 0x159E0D0 VA: 0x159E0D0
	public void OnMessageReceived(object sender, MessageReceivedEventArgs e) { }

	// RVA: 0x159E0D4 Offset: 0x159E0D4 VA: 0x159E0D4
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36968 Offset: 0xD36968 VA: 0xD36968
	// RVA: 0x159E148 Offset: 0x159E148 VA: 0x159E148
	private void <StartFirebase>m__0(Task<DependencyStatus> checkTask) { }
}

// Namespace: 
public enum AdManager.ProfileKey // TypeDefIndex: 6432
{
	// Fields
	public int value__; // 0x0
	public const AdManager.ProfileKey ORIGINAL_ID = 0;
	public const AdManager.ProfileKey LEVEL = 1;
	public const AdManager.ProfileKey FAVORITE_SVTID = 2;
}

// Namespace: 
public class AndroidPermissionManager // TypeDefIndex: 6433
{
	// Methods

	// RVA: 0x15AA17C Offset: 0x15AA17C VA: 0x15AA17C
	public void .ctor() { }

	// RVA: 0x15AA184 Offset: 0x15AA184 VA: 0x15AA184
	public static bool EnabledRuntimePermission() { }

	// RVA: 0x15AA35C Offset: 0x15AA35C VA: 0x15AA35C
	public static bool CheckPermission(string permissionName) { }

	// RVA: 0x15AA838 Offset: 0x15AA838 VA: 0x15AA838
	public static bool ShouldShowRequestPermissionRationale(string permissionName) { }

	// RVA: 0x15AAA64 Offset: 0x15AAA64 VA: 0x15AAA64
	public static void RequestPermission(string permissionName, string receiverName, string receiverFunctionName) { }
}

// Namespace: DelightWorks.Network
public class AssetLoadWWW : AbstractWWW // TypeDefIndex: 6434
{
	// Fields
	private const uint CrcSeed = 4294967295;
	private static readonly uint[] CrcTable; // 0x0
	private string path; // 0x38
	private FileStream fs; // 0x40
	private uint crc; // 0x48

	// Properties
	public override string text { get; }
	public override byte[] bytes { get; set; }
	public override uint crc32 { get; }

	// Methods

	// RVA: 0x162AD30 Offset: 0x162AD30 VA: 0x162AD30
	public void .ctor(string url, string path) { }

	// RVA: 0x162AEC4 Offset: 0x162AEC4 VA: 0x162AEC4 Slot: 8
	public override string get_text() { }

	// RVA: 0x162AF2C Offset: 0x162AF2C VA: 0x162AF2C Slot: 9
	public override byte[] get_bytes() { }

	// RVA: 0x162AF38 Offset: 0x162AF38 VA: 0x162AF38 Slot: 10
	protected override void set_bytes(byte[] value) { }

	// RVA: 0x162AFA0 Offset: 0x162AFA0 VA: 0x162AFA0 Slot: 11
	public override uint get_crc32() { }

	// RVA: 0x162AFA8 Offset: 0x162AFA8 VA: 0x162AFA8
	private void UpdateStream() { }

	// RVA: 0x162B18C Offset: 0x162B18C VA: 0x162B18C Slot: 13
	protected override void OnFinished(HTTPRequest requeset, HTTPResponse response) { }

	// RVA: 0x162B228 Offset: 0x162B228 VA: 0x162B228 Slot: 12
	protected override void OnProgress(HTTPRequest request, int downloaded, int downloadLength) { }

	// RVA: 0x162B240 Offset: 0x162B240 VA: 0x162B240 Slot: 14
	public override void Dispose() { }

	// RVA: 0x162B288 Offset: 0x162B288 VA: 0x162B288
	private static void .cctor() { }
}

// Namespace: 
public class AvalonNotificationManager : SingletonMonoBehaviour<AvalonNotificationManager> // TypeDefIndex: 6435
{
	// Fields
	protected const string AP_NOTIFICATION = "ap_max";
	protected const string RP_NOTIFICATION = "rp_max";
	protected const string FATIGUE_NOTIFICATION = "no_fatigue";
	protected const string HARVEST_NOTIFICATION = "no_harvest_{0}";

	// Methods

	// RVA: 0x147511C Offset: 0x147511C VA: 0x147511C
	public void .ctor() { }

	// RVA: 0x147516C Offset: 0x147516C VA: 0x147516C
	public void Initialize() { }

	// RVA: 0x1475174 Offset: 0x1475174 VA: 0x1475174
	public void SetRemotePushState(bool isSend) { }

	// RVA: 0x147517C Offset: 0x147517C VA: 0x147517C
	protected void OnApplicationPause(bool isPause) { }
}

// Namespace: 
public class AvalonSceneManager : SingletonMonoBehaviour<AvalonSceneManager> // TypeDefIndex: 6436
{
	// Fields
	public static readonly float DEFAULT_FADE_TIME; // 0x0
	[SerializeField] // RVA: 0xCC0578 Offset: 0xCC0578 VA: 0xCC0578
	protected SceneRootComponent targetRoot; // 0x18
	protected Stack<SceneTemp> scenestack; // 0x20
	protected SceneTemp prevscenetemp; // 0x28
	protected string firstSceneName; // 0x30
	protected object sendData; // 0x38
	protected AvalonSceneManager.FadeType fadeType; // 0x40
	protected bool isBusySceneChange; // 0x44
	protected PlayMakerGUI playMakerGUI; // 0x48

	// Methods

	// RVA: 0x147591C Offset: 0x147591C VA: 0x147591C
	public void .ctor() { }

	// RVA: 0x1475994 Offset: 0x1475994 VA: 0x1475994
	protected SceneRootComponent getTargetRoot(string scenenName) { }

	// RVA: 0x1475AEC Offset: 0x1475AEC VA: 0x1475AEC
	public SceneRootComponent getNowSceneRootComponent() { }

	// RVA: 0x1475AF4 Offset: 0x1475AF4 VA: 0x1475AF4
	public void reboot() { }

	// RVA: 0x1475AF8 Offset: 0x1475AF8 VA: 0x1475AF8
	protected void destroySceneObject() { }

	// RVA: 0x1475BAC Offset: 0x1475BAC VA: 0x1475BAC
	public void endInitialize(SceneRootComponent comp) { }

	// RVA: 0x1475BEC Offset: 0x1475BEC VA: 0x1475BEC
	public bool IsStackScene() { }

	// RVA: 0x1475C58 Offset: 0x1475C58 VA: 0x1475C58
	public string getNowSceneName() { }

	// RVA: 0x1475C6C Offset: 0x1475C6C VA: 0x1475C6C
	public string getStackSceneName() { }

	// RVA: 0x1475CE4 Offset: 0x1475CE4 VA: 0x1475CE4
	public bool checkNowScene(SceneList.Type type) { }

	// RVA: 0x1475DCC Offset: 0x1475DCC VA: 0x1475DCC
	public bool checkStackScene(SceneList.Type type) { }

	// RVA: 0x1475EC4 Offset: 0x1475EC4 VA: 0x1475EC4
	public bool checkLoadedScene(SceneList.Type type) { }

	// RVA: 0x1475F9C Offset: 0x1475F9C VA: 0x1475F9C
	public bool pushScene(SceneList.Type type, AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x14761F4 Offset: 0x14761F4 VA: 0x14761F4
	public bool popScene(AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x14762F4 Offset: 0x14762F4 VA: 0x14762F4
	public bool popSceneRefresh(AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x14761FC Offset: 0x14761FC VA: 0x14761FC
	private bool popScene(AvalonSceneManager.FadeType fade, object data, bool isRefresh) { }

	// RVA: 0x14762FC Offset: 0x14762FC VA: 0x14762FC
	public bool transitionScene(SceneList.Type type, AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x147639C Offset: 0x147639C VA: 0x147639C
	public bool transitionScene(SceneList.Type type, Action callback) { }

	// RVA: 0x1476518 Offset: 0x1476518 VA: 0x1476518
	public bool transitionSceneRefresh(SceneList.Type type, AvalonSceneManager.FadeType fade = 1, object data, bool fadeTimeSkip = False) { }

	// RVA: 0x14765BC Offset: 0x14765BC VA: 0x14765BC
	public bool changeScene(SceneList.Type type, AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x147665C Offset: 0x147665C VA: 0x147665C
	public bool transitionScene(string scenename, AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x1476680 Offset: 0x1476680 VA: 0x1476680
	public bool changeScene(string scenename, AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x147610C Offset: 0x147610C VA: 0x147610C
	protected bool changeScene(AvalonSceneManager.ChangeType changeType, string scenename, AvalonSceneManager.FadeType fade, object data, bool fadeTimeSkip = False) { }

	// RVA: 0x1476430 Offset: 0x1476430 VA: 0x1476430
	protected bool changeScene(AvalonSceneManager.ChangeType changeType, string scenename, AvalonSceneManager.FadeType fade, object data, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD36978 Offset: 0xD36978 VA: 0xD36978
	// RVA: 0x14766A4 Offset: 0x14766A4 VA: 0x14766A4
	private IEnumerator changeSceneCoroutine(AvalonSceneManager.ChangeType changeType, string scenename, bool fadeTimeSkip = False, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD36988 Offset: 0xD36988 VA: 0xD36988
	// RVA: 0x1476794 Offset: 0x1476794 VA: 0x1476794
	private IEnumerator changePrevSceneCoroutine(AvalonSceneManager.ChangeType changeType, string scenename, bool fadeTimeSkip = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD36998 Offset: 0xD36998 VA: 0xD36998
	// RVA: 0x147684C Offset: 0x147684C VA: 0x147684C
	private IEnumerator changeNextSceneCoroutine(AvalonSceneManager.ChangeType changeType, string scenename) { }

	[DebuggerHiddenAttribute] // RVA: 0xD369A8 Offset: 0xD369A8 VA: 0xD369A8
	// RVA: 0x1476900 Offset: 0x1476900 VA: 0x1476900
	private IEnumerator setupUI() { }

	// RVA: 0x1476964 Offset: 0x1476964 VA: 0x1476964
	public bool setTargetRootActive(bool flag) { }

	// RVA: 0x1476A18 Offset: 0x1476A18 VA: 0x1476A18
	public SceneRootComponent GetStackedRootComponent() { }

	// RVA: -1 Offset: -1
	public void DestroyAnySceneIfNeeded<T>(SceneList.Type sceneType, bool forceUnload) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CDA74 Offset: 0x21CDA74 VA: 0x21CDA74
	|-AvalonSceneManager.DestroyAnySceneIfNeeded<BattleRootComponent>
	|-AvalonSceneManager.DestroyAnySceneIfNeeded<object>
	*/

	// RVA: -1 Offset: -1
	public void UnloadScene<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CDC98 Offset: 0x21CDC98 VA: 0x21CDC98
	|-AvalonSceneManager.UnloadScene<BattleScriptRootComponent>
	|-AvalonSceneManager.UnloadScene<FollowerRootComponent>
	|-AvalonSceneManager.UnloadScene<PartyOrganizationRootComponent>
	|-AvalonSceneManager.UnloadScene<object>
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD369B8 Offset: 0xD369B8 VA: 0xD369B8
	// RVA: -1 Offset: -1
	public IEnumerator UnloadSceneAsync<T>(Action callback) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FA68DC Offset: 0x1FA68DC VA: 0x1FA68DC
	|-AvalonSceneManager.UnloadSceneAsync<object>
	|-AvalonSceneManager.UnloadSceneAsync<TerminalSceneComponent>
	*/

	// RVA: 0x1476A9C Offset: 0x1476A9C VA: 0x1476A9C
	private static void .cctor() { }
}

// Namespace: 
public enum AvalonSceneManager.FadeType // TypeDefIndex: 6437
{
	// Fields
	public int value__; // 0x0
	public const AvalonSceneManager.FadeType NONE = 0;
	public const AvalonSceneManager.FadeType BLACK = 1;
	public const AvalonSceneManager.FadeType WHITE = 2;
	public const AvalonSceneManager.FadeType DEFAULT = 1;
}

// Namespace: 
protected enum AvalonSceneManager.ChangeType // TypeDefIndex: 6438
{
	// Fields
	public int value__; // 0x0
	public const AvalonSceneManager.ChangeType RELEASE = 0;
	public const AvalonSceneManager.ChangeType CLEAR = 1;
	public const AvalonSceneManager.ChangeType TRANS = 2;
	public const AvalonSceneManager.ChangeType PUSH = 3;
	public const AvalonSceneManager.ChangeType POP = 4;
	public const AvalonSceneManager.ChangeType POP_RELEASE = 5;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE910 Offset: 0xCAE910 VA: 0xCAE910
private sealed class AvalonSceneManager.<changeSceneCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6439
{
	// Fields
	internal string scenename; // 0x10
	internal SceneList.Type <afterSceneType>__0; // 0x18
	internal AvalonSceneManager.ChangeType changeType; // 0x1C
	internal bool fadeTimeSkip; // 0x20
	internal WaitForEndOfFrame <wait>__1; // 0x28
	internal Action callback; // 0x30
	internal AvalonSceneManager $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45E74 Offset: 0xD45E74 VA: 0xD45E74
	// RVA: 0x147678C Offset: 0x147678C VA: 0x147678C
	public void .ctor() { }

	// RVA: 0x1477B5C Offset: 0x1477B5C VA: 0x1477B5C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45E84 Offset: 0xD45E84 VA: 0xD45E84
	// RVA: 0x1477FA4 Offset: 0x1477FA4 VA: 0x1477FA4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45E94 Offset: 0xD45E94 VA: 0xD45E94
	// RVA: 0x1477FAC Offset: 0x1477FAC VA: 0x1477FAC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45EA4 Offset: 0xD45EA4 VA: 0xD45EA4
	// RVA: 0x1477FB4 Offset: 0x1477FB4 VA: 0x1477FB4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45EB4 Offset: 0xD45EB4 VA: 0xD45EB4
	// RVA: 0x1477FC8 Offset: 0x1477FC8 VA: 0x1477FC8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE920 Offset: 0xCAE920 VA: 0xCAE920
private sealed class AvalonSceneManager.<changePrevSceneCoroutine>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6440
{
	// Fields
	internal float <duration>__1; // 0x10
	internal bool fadeTimeSkip; // 0x14
	internal AvalonSceneManager.ChangeType changeType; // 0x18
	internal AvalonSceneManager $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45EC4 Offset: 0xD45EC4 VA: 0xD45EC4
	// RVA: 0x1476844 Offset: 0x1476844 VA: 0x1476844
	public void .ctor() { }

	// RVA: 0x14774B4 Offset: 0x14774B4 VA: 0x14774B4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45ED4 Offset: 0xD45ED4 VA: 0xD45ED4
	// RVA: 0x1477AD0 Offset: 0x1477AD0 VA: 0x1477AD0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45EE4 Offset: 0xD45EE4 VA: 0xD45EE4
	// RVA: 0x1477AD8 Offset: 0x1477AD8 VA: 0x1477AD8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45EF4 Offset: 0xD45EF4 VA: 0xD45EF4
	// RVA: 0x1477AE0 Offset: 0x1477AE0 VA: 0x1477AE0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F04 Offset: 0xD45F04 VA: 0xD45F04
	// RVA: 0x1477AF4 Offset: 0x1477AF4 VA: 0x1477AF4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE930 Offset: 0xCAE930 VA: 0xCAE930
private sealed class AvalonSceneManager.<changeNextSceneCoroutine>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6441
{
	// Fields
	internal SceneRootComponent <newTargetRoot>__0; // 0x10
	internal string scenename; // 0x18
	internal AvalonSceneManager.ChangeType changeType; // 0x20
	internal Scene <newTargetScene>__1; // 0x24
	internal GameObject[] <tempRootObjects>__2; // 0x28
	internal GameObject[] $locvar0; // 0x30
	internal int $locvar1; // 0x38
	internal AvalonSceneManager $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45F14 Offset: 0xD45F14 VA: 0xD45F14
	// RVA: 0x14768F8 Offset: 0x14768F8 VA: 0x14768F8
	public void .ctor() { }

	// RVA: 0x1476AF4 Offset: 0x1476AF4 VA: 0x1476AF4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F24 Offset: 0xD45F24 VA: 0xD45F24
	// RVA: 0x1477428 Offset: 0x1477428 VA: 0x1477428 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F34 Offset: 0xD45F34 VA: 0xD45F34
	// RVA: 0x1477430 Offset: 0x1477430 VA: 0x1477430 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F44 Offset: 0xD45F44 VA: 0xD45F44
	// RVA: 0x1477438 Offset: 0x1477438 VA: 0x1477438 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F54 Offset: 0xD45F54 VA: 0xD45F54
	// RVA: 0x147744C Offset: 0x147744C VA: 0x147744C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE940 Offset: 0xCAE940 VA: 0xCAE940
private sealed class AvalonSceneManager.<setupUI>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6442
{
	// Fields
	internal int <loadParallelMax>__0; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24
	private AvalonSceneManager.<setupUI>c__Iterator3.<setupUI>c__AnonStorey5 $locvar0; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45F64 Offset: 0xD45F64 VA: 0xD45F64
	// RVA: 0x147695C Offset: 0x147695C VA: 0x147695C
	public void .ctor() { }

	// RVA: 0x1478030 Offset: 0x1478030 VA: 0x1478030 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F74 Offset: 0xD45F74 VA: 0xD45F74
	// RVA: 0x14783BC Offset: 0x14783BC VA: 0x14783BC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F84 Offset: 0xD45F84 VA: 0xD45F84
	// RVA: 0x14783C4 Offset: 0x14783C4 VA: 0x14783C4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45F94 Offset: 0xD45F94 VA: 0xD45F94
	// RVA: 0x14783CC Offset: 0x14783CC VA: 0x14783CC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45FA4 Offset: 0xD45FA4 VA: 0xD45FA4
	// RVA: 0x14783E0 Offset: 0x14783E0 VA: 0x14783E0 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class AvalonSceneManager.<setupUI>c__Iterator3.<setupUI>c__AnonStorey5 // TypeDefIndex: 6443
{
	// Fields
	internal bool loadEndTerminal; // 0x10
	internal bool loadEndCommonBG; // 0x11
	internal bool loadEndEffect; // 0x12

	// Methods

	// RVA: 0x14783B4 Offset: 0x14783B4 VA: 0x14783B4
	public void .ctor() { }

	// RVA: 0x1478448 Offset: 0x1478448 VA: 0x1478448
	internal void <>m__0() { }

	// RVA: 0x1478454 Offset: 0x1478454 VA: 0x1478454
	internal void <>m__1() { }

	// RVA: 0x1478460 Offset: 0x1478460 VA: 0x1478460
	internal void <>m__2() { }

	// RVA: 0x147846C Offset: 0x147846C VA: 0x147846C
	internal bool <>m__3() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE950 Offset: 0xCAE950 VA: 0xCAE950
private sealed class AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<T> : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6444
{
	// Fields
	internal int <n>__1; // 0x0
	internal Scene <tempScene>__2; // 0x0
	internal AsyncOperation <asyncOp>__3; // 0x0
	internal Action callback; // 0x0
	internal object $current; // 0x0
	internal bool $disposing; // 0x0
	internal int $PC; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45FB4 Offset: 0xD45FB4 VA: 0xD45FB4
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25169E4 Offset: 0x25169E4 VA: 0x25169E4
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 5
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2516A10 Offset: 0x2516A10 VA: 0x2516A10
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD45FC4 Offset: 0xD45FC4 VA: 0xD45FC4
	// RVA: -1 Offset: -1 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2516CA0 Offset: 0x2516CA0 VA: 0x2516CA0
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>.System.Collections.Generic.IEnumerator<object>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD45FD4 Offset: 0xD45FD4 VA: 0xD45FD4
	// RVA: -1 Offset: -1 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2516CA8 Offset: 0x2516CA8 VA: 0x2516CA8
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>.System.Collections.IEnumerator.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD45FE4 Offset: 0xD45FE4 VA: 0xD45FE4
	// RVA: -1 Offset: -1 Slot: 7
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2516CB0 Offset: 0x2516CB0 VA: 0x2516CB0
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD45FF4 Offset: 0xD45FF4 VA: 0xD45FF4
	// RVA: -1 Offset: -1 Slot: 6
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2516CC4 Offset: 0x2516CC4 VA: 0x2516CC4
	|-AvalonSceneManager.<UnloadSceneAsync>c__Iterator4<object>.Reset
	*/
}

// Namespace: 
public class BalanceConfig // TypeDefIndex: 6445
{
	// Fields
	public static int QpMax; // 0x0
	public static int ManaMax; // 0x4
	public static int RarePriMax; // 0x8
	public static int StoneMax; // 0xC
	public static int FriendPointMax; // 0x10
	public static int UserLevelMax; // 0x14
	public static int ServantLimitMax; // 0x18
	public static int SvtSkillListMax; // 0x1C
	public static int SvtPassiveSkillListMax; // 0x20
	public static int SvtEquipMax; // 0x24
	public static int SvtEquipSkillListMax; // 0x28
	public static int SvtCommandCardMax; // 0x2C
	public static int UserEquipSkillListMax; // 0x30
	public static int UserServantStorageMax; // 0x34
	public static int UserServantEquipStorageMax; // 0x38
	public static int SvtAppendPassiveSkillListMax; // 0x3C
	public static int UserItemMax; // 0x40
	public static int UserEventItemMax; // 0x44
	public static long UserPointEventMax; // 0x48
	public static long UserEventActivityPointMax; // 0x50
	public static long UserRaidDamagePointMax; // 0x58
	public static long UserSuperBossDamagePointMax; // 0x60
	public static int PresentBoxMax; // 0x68
	public static int PresentBoxCheckMax; // 0x6C
	public static int PresentBoxValidTime; // 0x70
	public static int PresentBoxNearMaxOffset; // 0x74
	public static long AllUserBoxGachaTotalMax; // 0x78
	public static int ServantFrameMax; // 0x80
	public static int ServantEquipFrameMax; // 0x84
	public static int CommandCodeFrameMax; // 0x88
	public static int DeckMax; // 0x8C
	public static int SupportDeckMax; // 0x90
	public static int DeckMemberMax; // 0x94
	public static int DeckMainMemberMax; // 0x98
	public static int SupportDeckMemberMax; // 0x9C
	public static int SupportMemberMax; // 0xA0
	public static int FixMainSupportDeckNum; // 0xA4
	public static int FixEventSupportDeckNum; // 0xA8
	public static int ServantFrameUseStone; // 0xAC
	public static int ServantEquipFrameUseStone; // 0xB0
	public static int ServantCombineMax; // 0xB4
	public static int UerGameActRecoverCost; // 0xB8
	public static int UerGameRpRecoverCost; // 0xBC
	public static int UerGameRpMax; // 0xC0
	public static int FollowerPointFriend; // 0xC4
	public static int FollowerPointNotFriend; // 0xC8
	public static int FollowerPointNpc; // 0xCC
	public static int RequestTopLoginResetTime1; // 0xD0
	public static int RequestTopLoginResetTime2; // 0xD4
	public static int RequestTopLoginDay; // 0xD8
	public static int RequestTopHomeExpirationDateSec; // 0xDC
	public static int DailyFreeGachaResetTime; // 0xE0
	public static long ServerTimeOverLimit; // 0xE8
	public static int ItemIdQp; // 0xF0
	public static int RequestTopHomeExpirationDateSecUpdateEventMap; // 0xF4
	public static int RequestRaidUpdateEventMap; // 0xF8
	public static int RaidDefeatedEffectTime; // 0xFC
	public static int CommandSpellMax; // 0x100
	public static int CommandSpellRecoverCost; // 0x104
	public static string UsePolicyVersion; // 0x108
	public static bool IsIOS_Examination; // 0x110
	public static int SerialCodeMenuDispFlg; // 0x114
	public static int UserGameActRecoverMenuDispFlg; // 0x118
	public static int StatusUpAdjustAtk; // 0x11C
	public static int StatusUpAdjustHp; // 0x120
	public static float SameClassMultiExp; // 0x124
	public static int SameClassExp; // 0x128
	public static int SpendApRecvItemNum; // 0x12C
	public static int ServantSellSelectMax; // 0x130
	public static int ServantWarehouseSelectMax; // 0x134
	public static int ServantIdJekyll; // 0x138
	public static int ServantIdHyde; // 0x13C
	public static int ServantIdSwimsuitMelt; // 0x140
	public static int ServantIdMashu1; // 0x144
	public static int ServantIdMashu2; // 0x148
	public static int ServantIdMission1; // 0x14C
	public static int TreasureDeviceIdMashu3; // 0x150
	public static int CostumeIdMashu; // 0x154
	public static int[] ServantIdsBirthdayBeforeValentine; // 0x158
	public static int[] ServantIdsIgnoreFormChange; // 0x160
	public static long VtReleaseAt; // 0x168
	public static int LvExceedItemId; // 0x170
	public static int LvExceedNeedItemNum; // 0x174
	public static int LvExceedDewDropItemId; // 0x178
	public static int itemIdForShop13; // 0x17C
	public static int BefFreeDrawNum; // 0x180
	public static int AftFreeDrawNum; // 0x184
	public static int DrawNumChangeTime; // 0x188
	public static int FollowerRefreshRestTime; // 0x18C
	public static int FesWarId; // 0x190
	public static int DefaultFontSize; // 0x194
	public static int NoneExpireTime; // 0x198
	public static int MstMissionAlertTime; // 0x19C
	public static int BpExpresssionType; // 0x1A0
	public static int MaxFriendHistoryNum; // 0x1A4
	public static int MaxBlackListNum; // 0x1A8
	public static int raceRewardRankMax; // 0x1AC
	public static int LocationRewardDlgColumn; // 0x1B0
	public static int CloseSecretTreasureDeviceQuestClear; // 0x1B4
	public static int CloseSecretTreasureDeviceSvtGet; // 0x1B8
	public static float ScenarioSpeedStep; // 0x1BC
	public static float ScenarioSpeedLow; // 0x1C0
	public static float ScenarioSpeedHigh; // 0x1C4
	public static float ScenarioSpeedDefault; // 0x1C8
	public static float ScenarioTextWaitStep; // 0x1CC
	public static float ScenarioTextWaitLow; // 0x1D0
	public static float ScenarioTextWaitHigh; // 0x1D4
	public static float ScenarioTextWaitDefaultCn; // 0x1D8
	public static float ScenarioTextWaitDefaultSt; // 0x1DC
	public static float ScenarioTextSpeedStep; // 0x1E0
	public static float ScenarioTextSpeedLow; // 0x1E4
	public static float ScenarioTextSpeedHigh; // 0x1E8
	public static float ScenarioTextSpeedDefault; // 0x1EC
	public static float ScenarioScrollSpeedStep; // 0x1F0
	public static float ScenarioScrollSpeedLow; // 0x1F4
	public static float ScenarioScrollSpeedHigh; // 0x1F8
	public static float ScenarioScrollSpeedDefault; // 0x1FC
	public static double ShopNewItemAddDays; // 0x200
	public static int PowerUpQuestWarId; // 0x208
	public static int AccountingInitializeTimeOut; // 0x20C
	public static int EquipGetEffectId; // 0x210
	public static readonly Color MaskColor; // 0x214
	public static int CommandCodeDetachingItemId; // 0x224
	public static float FloatAfterDecimalPointMax; // 0x228
	public static int FollowNum; // 0x22C
	public static int FollowFriendPoint; // 0x230
	public static int[] PresentBoxFilterSvtEquipMaterial; // 0x238
	public static int DisableFriendshipExceed; // 0x240
	public static int SupportListMax; // 0x244
	public static int EventDailyPointResetAt; // 0x248
	public static int FriendPointSummonQpWarning; // 0x24C
	public static int FriendShipExceedItemId; // 0x250
	public static int SkilExceedItemId; // 0x254
	public static int[] ReprintLastWarRaidEventIdList; // 0x258
	public static int PrologueQuestId; // 0x260
	public static int CommandCardParamUpMax; // 0x264
	public static int[] EventTowerFadeOutDelayTime; // 0x268
	public static float EventTowerFadeOutPlayTime; // 0x270
	public static int MaxFriendChocolateUse; // 0x274
	public static int FriendPointBoostItemEfffectId; // 0x278
	public static int MainInterludeWarId; // 0x27C
	public static int[] MainInterludeWarIdOnMaterial; // 0x280
	public static int[] EventBoardGameDiceButtonPostion; // 0x288
	public static int[] EventBoardGameMapIdList; // 0x290
	public static int EventBoardGameNextBoardQuestId; // 0x298
	public static int EventBoardGameNextRoundQuestId; // 0x29C
	public static int TitleFlowOld; // 0x2A0
	public static int StoryWarId; // 0x2A4
	public static string[] legacyAspectMovies; // 0x2A8
	public static int[] fullScreenNPChrs; // 0x2B0
	public static int[] fullScreenNPSeqIds; // 0x2B8
	public static int GachaDailyMaxDrawNumResetAt; // 0x2C0
	public static int MemoryDeckLimitByQuest; // 0x2C4
	[CompilerGeneratedAttribute] // RVA: 0xCC0588 Offset: 0xCC0588 VA: 0xCC0588
	private static Func<string, int> <>f__mg$cache0; // 0x2C8

	// Methods

	// RVA: 0x147C004 Offset: 0x147C004 VA: 0x147C004
	public void .ctor() { }

	// RVA: 0x147C00C Offset: 0x147C00C VA: 0x147C00C
	public static void Initialize() { }

	// RVA: 0x147E180 Offset: 0x147E180 VA: 0x147E180
	private static void .cctor() { }
}

// Namespace: 
public class BaseMonoBehaviour : MonoBehaviour // TypeDefIndex: 6446
{
	// Methods

	// RVA: 0x1480E34 Offset: 0x1480E34 VA: 0x1480E34
	public void .ctor() { }

	// RVA: 0x1482DDC Offset: 0x1482DDC VA: 0x1482DDC
	public GameObject createObject(GameObject prefab, Transform root, Transform pos) { }

	// RVA: 0x14830DC Offset: 0x14830DC VA: 0x14830DC
	public GameObject createObjectIfNotExist(GameObject existCheckObj, GameObject prefab, Transform root, Transform pos) { }

	// RVA: 0x1483190 Offset: 0x1483190 VA: 0x1483190
	public GameObject createObject(string resouceurl, Transform root, Transform pos) { }

	// RVA: 0x1483454 Offset: 0x1483454 VA: 0x1483454
	public static GameObject CreateObjectStatic(string resouceurl, Transform root, Transform pos) { }
}

// Namespace: DelightWorks.Network
public sealed class BestWWW : AbstractWWW // TypeDefIndex: 6447
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC0598 Offset: 0xCC0598 VA: 0xCC0598
	[DebuggerBrowsableAttribute] // RVA: 0xCC0598 Offset: 0xCC0598 VA: 0xCC0598
	private static BestWWWCertVerifyer <CertVerifyer>k__BackingField; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCC05D4 Offset: 0xCC05D4 VA: 0xCC05D4
	[DebuggerBrowsableAttribute] // RVA: 0xCC05D4 Offset: 0xCC05D4 VA: 0xCC05D4
	private byte[] <bytes>k__BackingField; // 0x38

	// Properties
	public static BestWWWCertVerifyer CertVerifyer { get; set; }
	public override string text { get; }
	public override byte[] bytes { get; set; }
	public override uint crc32 { get; }

	// Methods

	// RVA: 0x162B304 Offset: 0x162B304 VA: 0x162B304
	public void .ctor(string url) { }

	// RVA: 0x162B5C0 Offset: 0x162B5C0 VA: 0x162B5C0
	public void .ctor(string url, WWWForm form) { }

	// RVA: 0x162B614 Offset: 0x162B614 VA: 0x162B614
	public void .ctor(string url, byte[] postData) { }

	// RVA: 0x162B61C Offset: 0x162B61C VA: 0x162B61C
	public void .ctor(string url, byte[] postData, Dictionary<string, string> headers) { }

	[CompilerGeneratedAttribute] // RVA: 0xD369C8 Offset: 0xD369C8 VA: 0xD369C8
	// RVA: 0x162B570 Offset: 0x162B570 VA: 0x162B570
	public static BestWWWCertVerifyer get_CertVerifyer() { }

	[CompilerGeneratedAttribute] // RVA: 0xD369D8 Offset: 0xD369D8 VA: 0xD369D8
	// RVA: 0x162BA04 Offset: 0x162BA04 VA: 0x162BA04
	public static void set_CertVerifyer(BestWWWCertVerifyer value) { }

	// RVA: 0x162BA58 Offset: 0x162BA58 VA: 0x162BA58 Slot: 8
	public override string get_text() { }

	[CompilerGeneratedAttribute] // RVA: 0xD369E8 Offset: 0xD369E8 VA: 0xD369E8
	// RVA: 0x162BB58 Offset: 0x162BB58 VA: 0x162BB58 Slot: 9
	public override byte[] get_bytes() { }

	[CompilerGeneratedAttribute] // RVA: 0xD369F8 Offset: 0xD369F8 VA: 0xD369F8
	// RVA: 0x162BB60 Offset: 0x162BB60 VA: 0x162BB60 Slot: 10
	protected override void set_bytes(byte[] value) { }

	// RVA: 0x162BB68 Offset: 0x162BB68 VA: 0x162BB68 Slot: 11
	public override uint get_crc32() { }

	// RVA: 0x162BBE8 Offset: 0x162BBE8 VA: 0x162BBE8 Slot: 13
	protected override void OnFinished(HTTPRequest requeset, HTTPResponse response) { }

	// RVA: 0x162BC10 Offset: 0x162BC10 VA: 0x162BC10
	public void ExceptionLog() { }
}

// Namespace: 
public class BgmManager : SingletonMonoBehaviour<BgmManager> // TypeDefIndex: 6448
{
	// Fields
	public static readonly float DEFAULT_VOLUME; // 0x0
	public static readonly float LOW_VOLUME; // 0x4
	private static readonly string DEFAULT_MAIN_BGM_NAME; // 0x8
	private static readonly string COSMOS_IN_THE_LOSTBELT_BGM_NAME; // 0x10
	public static readonly int ADD_BIND_MAX; // 0x18
	private static bool isMute; // 0x1C
	private static float masterVolume; // 0x20
	private const int SubBgmPlayerMaxCount = 2;
	private List<string> addBindList; // 0x18
	private List<string> loadingBgmCueNameList; // 0x20
	private MainBgmPlayer mainBgmPlayer; // 0x28
	private JinglePlayer jinglePlayer; // 0x30
	private List<BgmPlayerBase> bgmPlayers; // 0x38
	private int enableCounter_KeepSubBgm; // 0x40
	private BgmPlayArgsGroup cacheArgsGroup; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCC0610 Offset: 0xCC0610 VA: 0xCC0610
	private static Action<BgmPlayerBase> <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCC0620 Offset: 0xCC0620 VA: 0xCC0620
	private static Action<BgmPlayerBase> <>f__am$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCC0630 Offset: 0xCC0630 VA: 0xCC0630
	private static Action<BgmPlayerBase> <>f__am$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCC0640 Offset: 0xCC0640 VA: 0xCC0640
	private static Func<SubBgmPlayArgs, string> <>f__am$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCC0650 Offset: 0xCC0650 VA: 0xCC0650
	private static Action<SubBgmPlayer> <>f__am$cache4; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCC0660 Offset: 0xCC0660 VA: 0xCC0660
	private static Func<SubBgmPlayer, bool> <>f__am$cache5; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCC0670 Offset: 0xCC0670 VA: 0xCC0670
	private static Func<GeneralBgmPlayer, bool> <>f__am$cache6; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCC0680 Offset: 0xCC0680 VA: 0xCC0680
	private static Action<GeneralBgmPlayer> <>f__am$cache7; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCC0690 Offset: 0xCC0690 VA: 0xCC0690
	private static Action<BgmPlayArgs> <>f__am$cache8; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCC06A0 Offset: 0xCC06A0 VA: 0xCC06A0
	private static Action<BgmPlayerBase> <>f__am$cache9; // 0x70

	// Properties
	public static bool IsBusy { get; }
	public string BgmName { get; }
	public static bool IsMute { get; }

	// Methods

	// RVA: 0x1EE6A08 Offset: 0x1EE6A08 VA: 0x1EE6A08
	public void .ctor() { }

	// RVA: 0x1EE6AC8 Offset: 0x1EE6AC8 VA: 0x1EE6AC8
	public static bool get_IsBusy() { }

	// RVA: 0x1EE6C38 Offset: 0x1EE6C38 VA: 0x1EE6C38
	public string get_BgmName() { }

	// RVA: 0x1EE6C6C Offset: 0x1EE6C6C VA: 0x1EE6C6C
	public static BgmPlayArgsGroup ExportPlayArgsGroup() { }

	// RVA: 0x1EE6D20 Offset: 0x1EE6D20 VA: 0x1EE6D20
	public static void Initialize() { }

	// RVA: 0x1EE6F50 Offset: 0x1EE6F50 VA: 0x1EE6F50
	public static AssetData.Type GetAssetType(string name) { }

	// RVA: 0x1EE7024 Offset: 0x1EE7024 VA: 0x1EE7024
	public static void Reset() { }

	// RVA: 0x1EE71DC Offset: 0x1EE71DC VA: 0x1EE71DC
	public static bool get_IsMute() { }

	// RVA: 0x1EE7244 Offset: 0x1EE7244 VA: 0x1EE7244
	public static void SetMute(bool isMute) { }

	// RVA: 0x1EE7424 Offset: 0x1EE7424 VA: 0x1EE7424
	public static float GetMasterVolume() { }

	// RVA: 0x1EE748C Offset: 0x1EE748C VA: 0x1EE748C
	public static void SetMasterVolume(float volume) { }

	// RVA: 0x1EE76A8 Offset: 0x1EE76A8 VA: 0x1EE76A8
	public static void ChangePlayerVolume(string bgmName, float volume) { }

	// RVA: 0x1EE7808 Offset: 0x1EE7808 VA: 0x1EE7808
	public static bool IsPlayBgm(string name) { }
