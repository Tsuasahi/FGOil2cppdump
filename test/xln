	private bool hashValueSet; // 0x28
	private int hashValue; // 0x2C

	// Properties
	public virtual X509CertificateStructure CertificateStructure { get; }
	public virtual bool IsValidNow { get; }
	public virtual int Version { get; }
	public virtual BigInteger SerialNumber { get; }
	public virtual X509Name IssuerDN { get; }
	public virtual X509Name SubjectDN { get; }
	public virtual DateTime NotBefore { get; }
	public virtual DateTime NotAfter { get; }
	public virtual string SigAlgName { get; }
	public virtual string SigAlgOid { get; }
	public virtual DerBitString IssuerUniqueID { get; }
	public virtual DerBitString SubjectUniqueID { get; }

	// Methods

	// RVA: 0x1F23430 Offset: 0x1F23430 VA: 0x1F23430
	protected void .ctor() { }

	// RVA: 0x1F23438 Offset: 0x1F23438 VA: 0x1F23438
	public void .ctor(X509CertificateStructure c) { }

	// RVA: 0x1F23844 Offset: 0x1F23844 VA: 0x1F23844 Slot: 13
	public virtual X509CertificateStructure get_CertificateStructure() { }

	// RVA: 0x1F2384C Offset: 0x1F2384C VA: 0x1F2384C Slot: 14
	public virtual bool get_IsValidNow() { }

	// RVA: 0x1F238D4 Offset: 0x1F238D4 VA: 0x1F238D4 Slot: 15
	public virtual bool IsValid(DateTime time) { }

	// RVA: 0x1F2396C Offset: 0x1F2396C VA: 0x1F2396C Slot: 16
	public virtual void CheckValidity() { }

	// RVA: 0x1F239F4 Offset: 0x1F239F4 VA: 0x1F239F4 Slot: 17
	public virtual void CheckValidity(DateTime time) { }

	// RVA: 0x1F23C04 Offset: 0x1F23C04 VA: 0x1F23C04 Slot: 18
	public virtual int get_Version() { }

	// RVA: 0x1F23C34 Offset: 0x1F23C34 VA: 0x1F23C34 Slot: 19
	public virtual BigInteger get_SerialNumber() { }

	// RVA: 0x1F23C7C Offset: 0x1F23C7C VA: 0x1F23C7C Slot: 20
	public virtual X509Name get_IssuerDN() { }

	// RVA: 0x1F23CAC Offset: 0x1F23CAC VA: 0x1F23CAC Slot: 21
	public virtual X509Name get_SubjectDN() { }

	// RVA: 0x1F23CDC Offset: 0x1F23CDC VA: 0x1F23CDC Slot: 22
	public virtual DateTime get_NotBefore() { }

	// RVA: 0x1F23D24 Offset: 0x1F23D24 VA: 0x1F23D24 Slot: 23
	public virtual DateTime get_NotAfter() { }

	// RVA: 0x1F23D6C Offset: 0x1F23D6C VA: 0x1F23D6C Slot: 24
	public virtual byte[] GetTbsCertificate() { }

	// RVA: 0x1F23DB4 Offset: 0x1F23DB4 VA: 0x1F23DB4 Slot: 25
	public virtual byte[] GetSignature() { }

	// RVA: 0x1F23DE4 Offset: 0x1F23DE4 VA: 0x1F23DE4 Slot: 26
	public virtual string get_SigAlgName() { }

	// RVA: 0x1F23E8C Offset: 0x1F23E8C VA: 0x1F23E8C Slot: 27
	public virtual string get_SigAlgOid() { }

	// RVA: 0x1F23EF0 Offset: 0x1F23EF0 VA: 0x1F23EF0 Slot: 28
	public virtual byte[] GetSigAlgParams() { }

	// RVA: 0x1F23FA0 Offset: 0x1F23FA0 VA: 0x1F23FA0 Slot: 29
	public virtual DerBitString get_IssuerUniqueID() { }

	// RVA: 0x1F23FE8 Offset: 0x1F23FE8 VA: 0x1F23FE8 Slot: 30
	public virtual DerBitString get_SubjectUniqueID() { }

	// RVA: 0x1F24030 Offset: 0x1F24030 VA: 0x1F24030 Slot: 31
	public virtual bool[] GetKeyUsage() { }

	// RVA: 0x1F240FC Offset: 0x1F240FC VA: 0x1F240FC Slot: 32
	public virtual IList GetExtendedKeyUsage() { }

	// RVA: 0x1F245C0 Offset: 0x1F245C0 VA: 0x1F245C0 Slot: 33
	public virtual int GetBasicConstraints() { }

	// RVA: 0x1F24658 Offset: 0x1F24658 VA: 0x1F24658 Slot: 34
	public virtual ICollection GetSubjectAlternativeNames() { }

	// RVA: 0x1F246B4 Offset: 0x1F246B4 VA: 0x1F246B4 Slot: 35
	public virtual ICollection GetIssuerAlternativeNames() { }

	// RVA: 0x1F24710 Offset: 0x1F24710 VA: 0x1F24710 Slot: 36
	protected virtual ICollection GetAlternativeNames(string oid) { }

	// RVA: 0x1F24A4C Offset: 0x1F24A4C VA: 0x1F24A4C Slot: 8
	protected override X509Extensions GetX509Extensions() { }

	// RVA: 0x1F24ACC Offset: 0x1F24ACC VA: 0x1F24ACC Slot: 37
	public virtual AsymmetricKeyParameter GetPublicKey() { }

	// RVA: 0x1F24B04 Offset: 0x1F24B04 VA: 0x1F24B04 Slot: 38
	public virtual byte[] GetEncoded() { }

	// RVA: 0x1F24B34 Offset: 0x1F24B34 VA: 0x1F24B34 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F24C10 Offset: 0x1F24C10 VA: 0x1F24C10 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F24CB4 Offset: 0x1F24CB4 VA: 0x1F24CB4 Slot: 3
	public override string ToString() { }

	// RVA: 0x1F25CD4 Offset: 0x1F25CD4 VA: 0x1F25CD4 Slot: 39
	public virtual void Verify(AsymmetricKeyParameter key) { }

	// RVA: 0x1F25D7C Offset: 0x1F25D7C VA: 0x1F25D7C Slot: 40
	public virtual void Verify(IVerifierFactoryProvider verifierProvider) { }

	// RVA: 0x1F25E74 Offset: 0x1F25E74 VA: 0x1F25E74 Slot: 41
	protected virtual void CheckSignature(IVerifierFactory verifier) { }

	// RVA: 0x1F2637C Offset: 0x1F2637C VA: 0x1F2637C
	private static bool IsAlgIDEqual(AlgorithmIdentifier id1, AlgorithmIdentifier id2) { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CertificateParser // TypeDefIndex: 5242
{
	// Fields
	private static readonly PemParser PemCertParser; // 0x0
	private Asn1Set sData; // 0x10
	private int sDataObjectCount; // 0x18
	private Stream currentStream; // 0x20

	// Methods

	// RVA: 0x1231058 Offset: 0x1231058 VA: 0x1231058
	public void .ctor() { }

	// RVA: 0x1231060 Offset: 0x1231060 VA: 0x1231060
	private X509Certificate ReadDerCertificate(Asn1InputStream dIn) { }

	// RVA: 0x1231314 Offset: 0x1231314 VA: 0x1231314
	private X509Certificate GetCertificate() { }

	// RVA: 0x1231428 Offset: 0x1231428 VA: 0x1231428
	private X509Certificate ReadPemCertificate(Stream inStream) { }

	// RVA: 0x12314E8 Offset: 0x12314E8 VA: 0x12314E8 Slot: 4
	protected virtual X509Certificate CreateX509Certificate(X509CertificateStructure c) { }

	// RVA: 0x123154C Offset: 0x123154C VA: 0x123154C
	public X509Certificate ReadCertificate(byte[] input) { }

	// RVA: 0x1231878 Offset: 0x1231878 VA: 0x1231878
	public ICollection ReadCertificates(byte[] input) { }

	// RVA: 0x12315C4 Offset: 0x12315C4 VA: 0x12315C4
	public X509Certificate ReadCertificate(Stream inStream) { }

	// RVA: 0x12318F0 Offset: 0x12318F0 VA: 0x12318F0
	public ICollection ReadCertificates(Stream inStream) { }

	// RVA: 0x1231A18 Offset: 0x1231A18 VA: 0x1231A18
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509Crl : X509ExtensionBase // TypeDefIndex: 5243
{
	// Fields
	private readonly CertificateList c; // 0x10
	private readonly string sigAlgName; // 0x18
	private readonly byte[] sigAlgParams; // 0x20
	private readonly bool isIndirect; // 0x28

	// Properties
	public virtual int Version { get; }
	public virtual X509Name IssuerDN { get; }
	public virtual DateTime ThisUpdate { get; }
	public virtual DateTimeObject NextUpdate { get; }
	public virtual string SigAlgName { get; }
	public virtual string SigAlgOid { get; }
	protected virtual bool IsIndirectCrl { get; }

	// Methods

	// RVA: 0x1231A90 Offset: 0x1231A90 VA: 0x1231A90
	public void .ctor(CertificateList c) { }

	// RVA: 0x12320A8 Offset: 0x12320A8 VA: 0x12320A8 Slot: 8
	protected override X509Extensions GetX509Extensions() { }

	// RVA: 0x1232128 Offset: 0x1232128 VA: 0x1232128 Slot: 13
	public virtual byte[] GetEncoded() { }

	// RVA: 0x1232250 Offset: 0x1232250 VA: 0x1232250 Slot: 14
	public virtual void Verify(AsymmetricKeyParameter publicKey) { }

	// RVA: 0x12322D0 Offset: 0x12322D0 VA: 0x12322D0 Slot: 15
	public virtual void Verify(IVerifierFactoryProvider verifierProvider) { }

	// RVA: 0x12323C8 Offset: 0x12323C8 VA: 0x12323C8 Slot: 16
	protected virtual void CheckSignature(IVerifierFactory verifier) { }

	// RVA: 0x12328D0 Offset: 0x12328D0 VA: 0x12328D0 Slot: 17
	public virtual int get_Version() { }

	// RVA: 0x1232900 Offset: 0x1232900 VA: 0x1232900 Slot: 18
	public virtual X509Name get_IssuerDN() { }

	// RVA: 0x1232930 Offset: 0x1232930 VA: 0x1232930 Slot: 19
	public virtual DateTime get_ThisUpdate() { }

	// RVA: 0x1232978 Offset: 0x1232978 VA: 0x1232978 Slot: 20
	public virtual DateTimeObject get_NextUpdate() { }

	// RVA: 0x1232A4C Offset: 0x1232A4C VA: 0x1232A4C
	private ISet LoadCrlEntries() { }

	// RVA: 0x1232EF8 Offset: 0x1232EF8 VA: 0x1232EF8 Slot: 21
	public virtual X509CrlEntry GetRevokedCertificate(BigInteger serialNumber) { }

	// RVA: 0x1233358 Offset: 0x1233358 VA: 0x1233358 Slot: 22
	public virtual ISet GetRevokedCertificates() { }

	// RVA: 0x123341C Offset: 0x123341C VA: 0x123341C Slot: 23
	public virtual byte[] GetTbsCertList() { }

	// RVA: 0x1233564 Offset: 0x1233564 VA: 0x1233564 Slot: 24
	public virtual byte[] GetSignature() { }

	// RVA: 0x1233594 Offset: 0x1233594 VA: 0x1233594 Slot: 25
	public virtual string get_SigAlgName() { }

	// RVA: 0x123359C Offset: 0x123359C VA: 0x123359C Slot: 26
	public virtual string get_SigAlgOid() { }

	// RVA: 0x1233600 Offset: 0x1233600 VA: 0x1233600 Slot: 27
	public virtual byte[] GetSigAlgParams() { }

	// RVA: 0x123360C Offset: 0x123360C VA: 0x123360C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x12336E8 Offset: 0x12336E8 VA: 0x12336E8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x123371C Offset: 0x123371C VA: 0x123371C Slot: 3
	public override string ToString() { }

	// RVA: 0x1234A64 Offset: 0x1234A64 VA: 0x1234A64 Slot: 28
	public virtual bool IsRevoked(X509Certificate cert) { }

	// RVA: 0x1234B74 Offset: 0x1234B74 VA: 0x1234B74 Slot: 29
	protected virtual bool get_IsIndirectCrl() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CrlEntry : X509ExtensionBase // TypeDefIndex: 5244
{
	// Fields
	private CrlEntry c; // 0x10
	private bool isIndirect; // 0x18
	private X509Name previousCertificateIssuer; // 0x20
	private X509Name certificateIssuer; // 0x28

	// Properties
	public BigInteger SerialNumber { get; }
	public DateTime RevocationDate { get; }
	public bool HasExtensions { get; }

	// Methods

	// RVA: 0x1234D14 Offset: 0x1234D14 VA: 0x1234D14
	public void .ctor(CrlEntry c) { }

	// RVA: 0x1232E9C Offset: 0x1232E9C VA: 0x1232E9C
	public void .ctor(CrlEntry c, bool isIndirect, X509Name previousCertificateIssuer) { }

	// RVA: 0x1234D4C Offset: 0x1234D4C VA: 0x1234D4C
	private X509Name loadCertificateIssuer() { }

	// RVA: 0x1232EF0 Offset: 0x1232EF0 VA: 0x1232EF0
	public X509Name GetCertificateIssuer() { }

	// RVA: 0x1234F7C Offset: 0x1234F7C VA: 0x1234F7C Slot: 8
	protected override X509Extensions GetX509Extensions() { }

	// RVA: 0x1234FAC Offset: 0x1234FAC VA: 0x1234FAC
	public byte[] GetEncoded() { }

	// RVA: 0x12350D4 Offset: 0x12350D4 VA: 0x12350D4
	public BigInteger get_SerialNumber() { }

	// RVA: 0x123511C Offset: 0x123511C VA: 0x123511C
	public DateTime get_RevocationDate() { }

	// RVA: 0x1235164 Offset: 0x1235164 VA: 0x1235164
	public bool get_HasExtensions() { }

	// RVA: 0x12351A0 Offset: 0x12351A0 VA: 0x12351A0 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CrlParser // TypeDefIndex: 5245
{
	// Fields
	private static readonly PemParser PemCrlParser; // 0x0
	private readonly bool lazyAsn1; // 0x10
	private Asn1Set sCrlData; // 0x18
	private int sCrlDataObjectCount; // 0x20
	private Stream currentCrlStream; // 0x28

	// Methods

	// RVA: 0x1235B7C Offset: 0x1235B7C VA: 0x1235B7C
	public void .ctor() { }

	// RVA: 0x1235BA4 Offset: 0x1235BA4 VA: 0x1235BA4
	public void .ctor(bool lazyAsn1) { }

	// RVA: 0x1235BD4 Offset: 0x1235BD4 VA: 0x1235BD4
	private X509Crl ReadPemCrl(Stream inStream) { }

	// RVA: 0x1235C94 Offset: 0x1235C94 VA: 0x1235C94
	private X509Crl ReadDerCrl(Asn1InputStream dIn) { }

	// RVA: 0x1235F48 Offset: 0x1235F48 VA: 0x1235F48
	private X509Crl GetCrl() { }

	// RVA: 0x1235FE8 Offset: 0x1235FE8 VA: 0x1235FE8 Slot: 4
	protected virtual X509Crl CreateX509Crl(CertificateList c) { }

	// RVA: 0x1236048 Offset: 0x1236048 VA: 0x1236048
	public X509Crl ReadCrl(byte[] input) { }

	// RVA: 0x12363E4 Offset: 0x12363E4 VA: 0x12363E4
	public ICollection ReadCrls(byte[] input) { }

	// RVA: 0x12360C0 Offset: 0x12360C0 VA: 0x12360C0
	public X509Crl ReadCrl(Stream inStream) { }

	// RVA: 0x123645C Offset: 0x123645C VA: 0x123645C
	public ICollection ReadCrls(Stream inStream) { }

	// RVA: 0x1236584 Offset: 0x1236584 VA: 0x1236584
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.X509
public abstract class X509ExtensionBase : IX509Extension // TypeDefIndex: 5246
{
	// Methods

	// RVA: 0x1231CE8 Offset: 0x1231CE8 VA: 0x1231CE8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract X509Extensions GetX509Extensions();

	// RVA: 0x12365FC Offset: 0x12365FC VA: 0x12365FC Slot: 9
	protected virtual ISet GetExtensionOids(bool critical) { }

	// RVA: 0x12369EC Offset: 0x12369EC VA: 0x12369EC Slot: 10
	public virtual ISet GetNonCriticalExtensionOids() { }

	// RVA: 0x12369FC Offset: 0x12369FC VA: 0x12369FC Slot: 11
	public virtual ISet GetCriticalExtensionOids() { }

	[ObsoleteAttribute] // RVA: 0xCC781C Offset: 0xCC781C VA: 0xCC781C
	// RVA: 0x1236A0C Offset: 0x1236A0C VA: 0x1236A0C Slot: 6
	public Asn1OctetString GetExtensionValue(string oid) { }

	// RVA: 0x1236A88 Offset: 0x1236A88 VA: 0x1236A88 Slot: 12
	public virtual Asn1OctetString GetExtensionValue(DerObjectIdentifier oid) { }
}

// Namespace: Org.BouncyCastle.X509
internal class X509SignatureUtilities // TypeDefIndex: 5247
{
	// Fields
	private static readonly Asn1Null derNull; // 0x0

	// Methods

	// RVA: 0x1236ADC Offset: 0x1236ADC VA: 0x1236ADC
	public void .ctor() { }

	// RVA: 0x1236AE4 Offset: 0x1236AE4 VA: 0x1236AE4
	internal static void SetSignatureParameters(ISigner signature, Asn1Encodable parameters) { }

	// RVA: 0x1231CF0 Offset: 0x1231CF0 VA: 0x1231CF0
	internal static string GetSignatureName(AlgorithmIdentifier sigAlgId) { }

	// RVA: 0x1236B7C Offset: 0x1236B7C VA: 0x1236B7C
	private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID) { }

	// RVA: 0x1236F58 Offset: 0x1236F58 VA: 0x1236F58
	private static void .cctor() { }
}

// Namespace: BestHTTP.Statistics
[FlagsAttribute] // RVA: 0xC24D70 Offset: 0xC24D70 VA: 0xC24D70
public enum StatisticsQueryFlags // TypeDefIndex: 5248
{
	// Fields
	public byte value__; // 0x0
	public const StatisticsQueryFlags Connections = 1;
	public const StatisticsQueryFlags Cache = 2;
	public const StatisticsQueryFlags Cookies = 4;
	public const StatisticsQueryFlags All = 255;
}

// Namespace: BestHTTP.Statistics
public struct GeneralStatistics // TypeDefIndex: 5249
{
	// Fields
	public StatisticsQueryFlags QueryFlags; // 0x0
	public int Connections; // 0x4
	public int ActiveConnections; // 0x8
	public int FreeConnections; // 0xC
	public int RecycledConnections; // 0x10
	public int RequestsInQueue; // 0x14
	public int CacheEntityCount; // 0x18
	public ulong CacheSize; // 0x20
	public int CookieCount; // 0x28
	public uint CookieJarSize; // 0x2C
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte16 // TypeDefIndex: 5250
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
	public byte b5; // 0x4
	public byte b6; // 0x5
	public byte b7; // 0x6
	public byte b8; // 0x7
	public byte b9; // 0x8
	public byte b10; // 0x9
	public byte b11; // 0xA
	public byte b12; // 0xB
	public byte b13; // 0xC
	public byte b14; // 0xD
	public byte b15; // 0xE
	public byte b16; // 0xF
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte4 // TypeDefIndex: 5251
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte8 // TypeDefIndex: 5252
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
	public byte b5; // 0x4
	public byte b6; // 0x5
	public byte b7; // 0x6
	public byte b8; // 0x7
}

// Namespace: CodeStage.AntiCheat.Common
internal class Constants // TypeDefIndex: 5253
{
	// Fields
	internal const string LOG_PREFIX = "[ACTk] ";

	// Methods

	// RVA: 0x1963350 Offset: 0x1963350 VA: 0x1963350
	public void .ctor() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC24D80 Offset: 0xC24D80 VA: 0xC24D80
public abstract class ActDetectorBase : MonoBehaviour // TypeDefIndex: 5254
{
	// Fields
	protected const string CONTAINER_NAME = "Anti-Cheat Toolkit Detectors";
	protected const string MENU_PATH = "Code Stage/Anti-Cheat Toolkit/";
	protected const string GAME_OBJECT_MENU_PATH = "GameObject/Create Other/Code Stage/Anti-Cheat Toolkit/";
	protected static GameObject detectorsContainer; // 0x0
	[TooltipAttribute] // RVA: 0xC4A400 Offset: 0xC4A400 VA: 0xC4A400
	public bool autoStart; // 0x18
	[TooltipAttribute] // RVA: 0xC4A438 Offset: 0xC4A438 VA: 0xC4A438
	public bool keepAlive; // 0x19
	[TooltipAttribute] // RVA: 0xC4A470 Offset: 0xC4A470 VA: 0xC4A470
	public bool autoDispose; // 0x1A
	[SerializeField] // RVA: 0xC4A4A8 Offset: 0xC4A4A8 VA: 0xC4A4A8
	protected UnityEvent detectionEvent; // 0x20
	protected UnityAction detectionAction; // 0x28
	[SerializeField] // RVA: 0xC4A4B8 Offset: 0xC4A4B8 VA: 0xC4A4B8
	protected bool detectionEventHasListener; // 0x30
	protected bool isRunning; // 0x31
	protected bool started; // 0x32

	// Methods

	// RVA: 0x1963358 Offset: 0x1963358 VA: 0x1963358
	protected void .ctor() { }

	// RVA: 0x1963370 Offset: 0x1963370 VA: 0x1963370
	private void Start() { }

	// RVA: 0x19634AC Offset: 0x19634AC VA: 0x19634AC
	private void OnEnable() { }

	// RVA: 0x196350C Offset: 0x196350C VA: 0x196350C
	private void OnDisable() { }

	// RVA: 0x1963524 Offset: 0x1963524 VA: 0x1963524
	private void OnApplicationQuit() { }

	// RVA: 0x1963530 Offset: 0x1963530 VA: 0x1963530 Slot: 4
	protected virtual void OnDestroy() { }

	// RVA: 0x1963698 Offset: 0x1963698 VA: 0x1963698 Slot: 5
	protected virtual bool Init(ActDetectorBase instance, string detectorName) { }

	// RVA: 0x19637C0 Offset: 0x19637C0 VA: 0x19637C0 Slot: 6
	protected virtual void DisposeInternal() { }

	// RVA: 0x1963828 Offset: 0x1963828 VA: 0x1963828 Slot: 7
	protected virtual bool DetectorHasAdditionalCallbacks() { }

	// RVA: 0x1963830 Offset: 0x1963830 VA: 0x1963830 Slot: 8
	internal virtual void OnCheatingDetected() { }

	// RVA: -1 Offset: -1 Slot: 9
	protected abstract void StartDetectionAutomatically();

	// RVA: -1 Offset: -1 Slot: 10
	protected abstract void StopDetectionInternal();

	// RVA: -1 Offset: -1 Slot: 11
	protected abstract void PauseDetector();

	// RVA: -1 Offset: -1 Slot: 12
	protected abstract void ResumeDetector();
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC24DB8 Offset: 0xC24DB8 VA: 0xC24DB8
public class InjectionDetector : ActDetectorBase // TypeDefIndex: 5255
{
	// Fields
	internal const string COMPONENT_NAME = "Injection Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Injection Detector: ";
	protected UnityAction<string> detectionActionWithArgument; // 0x38
	private static int instancesInScene; // 0x0
	private bool signaturesAreNotGenuine; // 0x40
	private InjectionDetector.AllowedAssembly[] allowedAssemblies; // 0x48
	private string[] hexTable; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC4A4C8 Offset: 0xC4A4C8 VA: 0xC4A4C8
	[DebuggerBrowsableAttribute] // RVA: 0xC4A4C8 Offset: 0xC4A4C8 VA: 0xC4A4C8
	private static InjectionDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static InjectionDetector Instance { get; set; }
	private static InjectionDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x196389C Offset: 0x196389C VA: 0x196389C
	private void .ctor() { }

	// RVA: 0x19638B4 Offset: 0x19638B4 VA: 0x19638B4
	public static void StartDetection() { }

	// RVA: 0x1963B4C Offset: 0x1963B4C VA: 0x1963B4C
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1963D3C Offset: 0x1963D3C VA: 0x1963D3C
	public static void StartDetection(UnityAction<string> callback) { }

	// RVA: 0x1963D74 Offset: 0x1963D74 VA: 0x1963D74
	public static void StopDetection() { }

	// RVA: 0x1963E78 Offset: 0x1963E78 VA: 0x1963E78
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7854 Offset: 0xCC7854 VA: 0xCC7854
	// RVA: 0x19639B8 Offset: 0x19639B8 VA: 0x19639B8
	public static InjectionDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7864 Offset: 0xCC7864 VA: 0xCC7864
	// RVA: 0x1963F7C Offset: 0x1963F7C VA: 0x1963F7C
	private static void set_Instance(InjectionDetector value) { }

	// RVA: 0x1963B84 Offset: 0x1963B84 VA: 0x1963B84
	private static InjectionDetector get_GetOrCreateInstance() { }

	// RVA: 0x1963FD0 Offset: 0x1963FD0 VA: 0x1963FD0
	private void Awake() { }

	// RVA: 0x19640F0 Offset: 0x19640F0 VA: 0x19640F0 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1964154 Offset: 0x1964154 VA: 0x1964154
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1964158 Offset: 0x1964158 VA: 0x1964158
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1963A08 Offset: 0x1963A08 VA: 0x1963A08
	private void StartDetectionInternal(UnityAction callback, UnityAction<string> callbackWithArgument) { }

	// RVA: 0x1964988 Offset: 0x1964988 VA: 0x1964988 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1964994 Offset: 0x1964994 VA: 0x1964994 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1964A34 Offset: 0x1964A34 VA: 0x1964A34 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1964B00 Offset: 0x1964B00 VA: 0x1964B00 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1964BB4 Offset: 0x1964BB4 VA: 0x1964BB4 Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x19647FC Offset: 0x19647FC VA: 0x19647FC
	private void OnCheatingDetected(string cause) { }

	// RVA: 0x1964CA0 Offset: 0x1964CA0 VA: 0x1964CA0
	private void OnNewAssemblyLoaded(object sender, AssemblyLoadEventArgs args) { }

	// RVA: 0x1964868 Offset: 0x1964868 VA: 0x1964868
	private bool FindInjectionInCurrentAssemblies(out string cause) { }

	// RVA: 0x1964D30 Offset: 0x1964D30 VA: 0x1964D30
	private bool AssemblyAllowed(Assembly ass) { }

	// RVA: 0x196424C Offset: 0x196424C VA: 0x196424C
	private void LoadAndParseAllowedAssemblies() { }

	// RVA: 0x1964EA8 Offset: 0x1964EA8 VA: 0x1964EA8
	private int GetAssemblyHash(Assembly ass) { }

	// RVA: 0x1965054 Offset: 0x1965054 VA: 0x1965054
	private string PublicKeyTokenToString(byte[] bytes) { }
}

// Namespace: 
private class InjectionDetector.AllowedAssembly // TypeDefIndex: 5256
{
	// Fields
	public readonly string name; // 0x10
	public readonly int[] hashes; // 0x18

	// Methods

	// RVA: 0x196501C Offset: 0x196501C VA: 0x196501C
	public void .ctor(string name, int[] hashes) { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC24DF0 Offset: 0xC24DF0 VA: 0xC24DF0
public class ObscuredCheatingDetector : ActDetectorBase // TypeDefIndex: 5257
{
	// Fields
	internal const string COMPONENT_NAME = "Obscured Cheating Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Obscured Cheating Detector: ";
	private static int instancesInScene; // 0x0
	[TooltipAttribute] // RVA: 0xC4A504 Offset: 0xC4A504 VA: 0xC4A504
	public float floatEpsilon; // 0x34
	[TooltipAttribute] // RVA: 0xC4A53C Offset: 0xC4A53C VA: 0xC4A53C
	public float vector2Epsilon; // 0x38
	[TooltipAttribute] // RVA: 0xC4A574 Offset: 0xC4A574 VA: 0xC4A574
	public float vector3Epsilon; // 0x3C
	[TooltipAttribute] // RVA: 0xC4A5AC Offset: 0xC4A5AC VA: 0xC4A5AC
	public float quaternionEpsilon; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC4A5E4 Offset: 0xC4A5E4 VA: 0xC4A5E4
	[DebuggerBrowsableAttribute] // RVA: 0xC4A5E4 Offset: 0xC4A5E4 VA: 0xC4A5E4
	private static ObscuredCheatingDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static ObscuredCheatingDetector Instance { get; set; }
	private static ObscuredCheatingDetector GetOrCreateInstance { get; }
	internal static bool IsRunning { get; }

	// Methods

	// RVA: 0x1965180 Offset: 0x1965180 VA: 0x1965180
	private void .ctor() { }

	// RVA: 0x19651A4 Offset: 0x19651A4 VA: 0x19651A4
	public static void StartDetection() { }

	// RVA: 0x196535C Offset: 0x196535C VA: 0x196535C
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1965548 Offset: 0x1965548 VA: 0x1965548
	public static void StopDetection() { }

	// RVA: 0x196564C Offset: 0x196564C VA: 0x196564C
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7874 Offset: 0xCC7874 VA: 0xCC7874
	// RVA: 0x19652A4 Offset: 0x19652A4 VA: 0x19652A4
	public static ObscuredCheatingDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7884 Offset: 0xCC7884 VA: 0xCC7884
	// RVA: 0x1965750 Offset: 0x1965750 VA: 0x1965750
	private static void set_Instance(ObscuredCheatingDetector value) { }

	// RVA: 0x1965390 Offset: 0x1965390 VA: 0x1965390
	private static ObscuredCheatingDetector get_GetOrCreateInstance() { }

	// RVA: 0x19657A4 Offset: 0x19657A4 VA: 0x19657A4
	internal static bool get_IsRunning() { }

	// RVA: 0x196580C Offset: 0x196580C VA: 0x196580C
	private void Awake() { }

	// RVA: 0x196592C Offset: 0x196592C VA: 0x196592C Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1965990 Offset: 0x1965990 VA: 0x1965990
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1965994 Offset: 0x1965994 VA: 0x1965994
	private void OnLevelLoadedCallback() { }

	// RVA: 0x19652F4 Offset: 0x19652F4 VA: 0x19652F4
	private void StartDetectionInternal(UnityAction callback) { }

	// RVA: 0x1965A88 Offset: 0x1965A88 VA: 0x1965A88 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1965A90 Offset: 0x1965A90 VA: 0x1965A90 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1965A98 Offset: 0x1965A98 VA: 0x1965A98 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1965AB4 Offset: 0x1965AB4 VA: 0x1965AB4 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1965AC8 Offset: 0x1965AC8 VA: 0x1965AC8 Slot: 6
	protected override void DisposeInternal() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC24E28 Offset: 0xC24E28 VA: 0xC24E28
public class SpeedHackDetector : ActDetectorBase // TypeDefIndex: 5258
{
	// Fields
	internal const string COMPONENT_NAME = "Speed Hack Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Speed Hack Detector: ";
	private const long TICKS_PER_SECOND = 10000000;
	private const int THRESHOLD = 5000000;
	private static int instancesInScene; // 0x0
	[TooltipAttribute] // RVA: 0xC4A620 Offset: 0xC4A620 VA: 0xC4A620
	public float interval; // 0x34
	[TooltipAttribute] // RVA: 0xC4A658 Offset: 0xC4A658 VA: 0xC4A658
	public byte maxFalsePositives; // 0x38
	[TooltipAttribute] // RVA: 0xC4A690 Offset: 0xC4A690 VA: 0xC4A690
	public int coolDown; // 0x3C
	private byte currentFalsePositives; // 0x40
	private int currentCooldownShots; // 0x44
	private long ticksOnStart; // 0x48
	private long vulnerableTicksOnStart; // 0x50
	private long prevTicks; // 0x58
	private long prevIntervalTicks; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC4A6C8 Offset: 0xC4A6C8 VA: 0xC4A6C8
	[DebuggerBrowsableAttribute] // RVA: 0xC4A6C8 Offset: 0xC4A6C8 VA: 0xC4A6C8
	private static SpeedHackDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static SpeedHackDetector Instance { get; set; }
	private static SpeedHackDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x1965BB4 Offset: 0x1965BB4 VA: 0x1965BB4
	private void .ctor() { }

	// RVA: 0x1965BE4 Offset: 0x1965BE4 VA: 0x1965BE4
	public static void StartDetection() { }

	// RVA: 0x1965E8C Offset: 0x1965E8C VA: 0x1965E8C
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1966078 Offset: 0x1966078 VA: 0x1966078
	public static void StartDetection(UnityAction callback, float interval) { }

	// RVA: 0x19660BC Offset: 0x19660BC VA: 0x19660BC
	public static void StartDetection(UnityAction callback, float interval, byte maxFalsePositives) { }

	// RVA: 0x1966110 Offset: 0x1966110 VA: 0x1966110
	public static void StartDetection(UnityAction callback, float interval, byte maxFalsePositives, int coolDown) { }

	// RVA: 0x196616C Offset: 0x196616C VA: 0x196616C
	public static void StopDetection() { }

	// RVA: 0x1966270 Offset: 0x1966270 VA: 0x1966270
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7894 Offset: 0xCC7894 VA: 0xCC7894
	// RVA: 0x1965D94 Offset: 0x1965D94 VA: 0x1965D94
	public static SpeedHackDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC78A4 Offset: 0xCC78A4 VA: 0xCC78A4
	// RVA: 0x1966374 Offset: 0x1966374 VA: 0x1966374
	private static void set_Instance(SpeedHackDetector value) { }

	// RVA: 0x1965EC0 Offset: 0x1965EC0 VA: 0x1965EC0
	private static SpeedHackDetector get_GetOrCreateInstance() { }

	// RVA: 0x19663C8 Offset: 0x19663C8 VA: 0x19663C8
	private void Awake() { }

	// RVA: 0x19664E8 Offset: 0x19664E8 VA: 0x19664E8 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x196654C Offset: 0x196654C VA: 0x196654C
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1966550 Offset: 0x1966550 VA: 0x1966550
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1966644 Offset: 0x1966644 VA: 0x1966644
	private void OnApplicationPause(bool pause) { }

	// RVA: 0x19666F4 Offset: 0x19666F4 VA: 0x19666F4
	private void Update() { }

	// RVA: 0x1965DE4 Offset: 0x1965DE4 VA: 0x1965DE4
	private void StartDetectionInternal(UnityAction callback, float checkInterval, byte falsePositives, int shotsTillCooldown) { }

	// RVA: 0x19668A4 Offset: 0x19668A4 VA: 0x19668A4 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x19668B8 Offset: 0x19668B8 VA: 0x19668B8 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x19668C0 Offset: 0x19668C0 VA: 0x19668C0 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x19668DC Offset: 0x19668DC VA: 0x19668DC Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x19668F0 Offset: 0x19668F0 VA: 0x19668F0 Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x1966650 Offset: 0x1966650 VA: 0x1966650
	private void ResetStartTicks() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC24E60 Offset: 0xC24E60 VA: 0xC24E60
public class WallHackDetector : ActDetectorBase // TypeDefIndex: 5259
{
	// Fields
	internal const string COMPONENT_NAME = "WallHack Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] WallHack Detector: ";
	private const string SERVICE_CONTAINER_NAME = "[WH Detector Service]";
	private const string WIREFRAME_SHADER_NAME = "Hidden/ACTk/WallHackTexture";
	private const int SHADER_TEXTURE_SIZE = 4;
	private const int RENDER_TEXTURE_SIZE = 4;
	private readonly Vector3 rigidPlayerVelocity; // 0x34
	private static int instancesInScene; // 0x0
	private readonly WaitForEndOfFrame waitForEndOfFrame; // 0x40
	[SerializeField] // RVA: 0xC4A704 Offset: 0xC4A704 VA: 0xC4A704
	[TooltipAttribute] // RVA: 0xC4A704 Offset: 0xC4A704 VA: 0xC4A704
	private bool checkRigidbody; // 0x48
	[SerializeField] // RVA: 0xC4A750 Offset: 0xC4A750 VA: 0xC4A750
	[TooltipAttribute] // RVA: 0xC4A750 Offset: 0xC4A750 VA: 0xC4A750
	private bool checkController; // 0x49
	[SerializeField] // RVA: 0xC4A79C Offset: 0xC4A79C VA: 0xC4A79C
	[TooltipAttribute] // RVA: 0xC4A79C Offset: 0xC4A79C VA: 0xC4A79C
	private bool checkWireframe; // 0x4A
	[SerializeField] // RVA: 0xC4A7E8 Offset: 0xC4A7E8 VA: 0xC4A7E8
	[TooltipAttribute] // RVA: 0xC4A7E8 Offset: 0xC4A7E8 VA: 0xC4A7E8
	private bool checkRaycast; // 0x4B
	[TooltipAttribute] // RVA: 0xC4A834 Offset: 0xC4A834 VA: 0xC4A834
	[RangeAttribute] // RVA: 0xC4A834 Offset: 0xC4A834 VA: 0xC4A834
	public int wireframeDelay; // 0x4C
	[TooltipAttribute] // RVA: 0xC4A88C Offset: 0xC4A88C VA: 0xC4A88C
	[RangeAttribute] // RVA: 0xC4A88C Offset: 0xC4A88C VA: 0xC4A88C
	public int raycastDelay; // 0x50
	[TooltipAttribute] // RVA: 0xC4A8E4 Offset: 0xC4A8E4 VA: 0xC4A8E4
	public Vector3 spawnPosition; // 0x54
	[TooltipAttribute] // RVA: 0xC4A91C Offset: 0xC4A91C VA: 0xC4A91C
	public byte maxFalsePositives; // 0x60
	private GameObject serviceContainer; // 0x68
	private GameObject solidWall; // 0x70
	private GameObject thinWall; // 0x78
	private Camera wfCamera; // 0x80
	private MeshRenderer foregroundRenderer; // 0x88
	private MeshRenderer backgroundRenderer; // 0x90
	private Color wfColor1; // 0x98
	private Color wfColor2; // 0xA8
	private Shader wfShader; // 0xB8
	private Material wfMaterial; // 0xC0
	private Texture2D shaderTexture; // 0xC8
	private Texture2D targetTexture; // 0xD0
	private RenderTexture renderTexture; // 0xD8
	private int whLayer; // 0xE0
	private int raycastMask; // 0xE4
	private Rigidbody rigidPlayer; // 0xE8
	private CharacterController charControllerPlayer; // 0xF0
	private float charControllerVelocity; // 0xF8
	private byte rigidbodyDetections; // 0xFC
	private byte controllerDetections; // 0xFD
	private byte wireframeDetections; // 0xFE
	private byte raycastDetections; // 0xFF
	private bool wireframeDetected; // 0x100
	[CompilerGeneratedAttribute] // RVA: 0xC4A954 Offset: 0xC4A954 VA: 0xC4A954
	[DebuggerBrowsableAttribute] // RVA: 0xC4A954 Offset: 0xC4A954 VA: 0xC4A954
	private static WallHackDetector <Instance>k__BackingField; // 0x8

	// Properties
	public bool CheckRigidbody { get; set; }
	public bool CheckController { get; set; }
	public bool CheckWireframe { get; set; }
	public bool CheckRaycast { get; set; }
	public static WallHackDetector Instance { get; set; }
	private static WallHackDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x19669DC Offset: 0x19669DC VA: 0x19669DC
	private void .ctor() { }

	// RVA: 0x1966AD4 Offset: 0x1966AD4 VA: 0x1966AD4
	public bool get_CheckRigidbody() { }

	// RVA: 0x1966ADC Offset: 0x1966ADC VA: 0x1966ADC
	public void set_CheckRigidbody(bool value) { }

	// RVA: 0x1968538 Offset: 0x1968538 VA: 0x1968538
	public bool get_CheckController() { }

	// RVA: 0x1968540 Offset: 0x1968540 VA: 0x1968540
	public void set_CheckController(bool value) { }

	// RVA: 0x1968818 Offset: 0x1968818 VA: 0x1968818
	public bool get_CheckWireframe() { }

	// RVA: 0x1968820 Offset: 0x1968820 VA: 0x1968820
	public void set_CheckWireframe(bool value) { }

	// RVA: 0x19689CC Offset: 0x19689CC VA: 0x19689CC
	public bool get_CheckRaycast() { }

	// RVA: 0x19689D4 Offset: 0x19689D4 VA: 0x19689D4
	public void set_CheckRaycast(bool value) { }

	// RVA: 0x1968B6C Offset: 0x1968B6C VA: 0x1968B6C
	public static void StartDetection() { }

	// RVA: 0x1968E04 Offset: 0x1968E04 VA: 0x1968E04
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1968FF4 Offset: 0x1968FF4 VA: 0x1968FF4
	public static void StartDetection(UnityAction callback, Vector3 spawnPosition) { }

	// RVA: 0x1969050 Offset: 0x1969050 VA: 0x1969050
	public static void StartDetection(UnityAction callback, Vector3 spawnPosition, byte maxFalsePositives) { }

	// RVA: 0x19690BC Offset: 0x19690BC VA: 0x19690BC
	public static void StopDetection() { }

	// RVA: 0x19691C0 Offset: 0x19691C0 VA: 0x19691C0
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC78B4 Offset: 0xCC78B4 VA: 0xCC78B4
	// RVA: 0x1968CF0 Offset: 0x1968CF0 VA: 0x1968CF0
	public static WallHackDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC78C4 Offset: 0xCC78C4 VA: 0xCC78C4
	// RVA: 0x19692C4 Offset: 0x19692C4 VA: 0x19692C4
	private static void set_Instance(WallHackDetector value) { }

	// RVA: 0x1968E3C Offset: 0x1968E3C VA: 0x1968E3C
	private static WallHackDetector get_GetOrCreateInstance() { }
