	protected virtual void CheckSignature(IVerifierFactory verifier) { }

	// RVA: 0x23AB674 Offset: 0x23AB674 VA: 0x23AB674
	private static bool IsAlgIDEqual(AlgorithmIdentifier id1, AlgorithmIdentifier id2) { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CertificateParser // TypeDefIndex: 5242
{
	// Fields
	private static readonly PemParser PemCertParser; // 0x0
	private Asn1Set sData; // 0x10
	private int sDataObjectCount; // 0x18
	private Stream currentStream; // 0x20

	// Methods

	// RVA: 0x178EB38 Offset: 0x178EB38 VA: 0x178EB38
	public void .ctor() { }

	// RVA: 0x178EB40 Offset: 0x178EB40 VA: 0x178EB40
	private X509Certificate ReadDerCertificate(Asn1InputStream dIn) { }

	// RVA: 0x178EDF4 Offset: 0x178EDF4 VA: 0x178EDF4
	private X509Certificate GetCertificate() { }

	// RVA: 0x178EF08 Offset: 0x178EF08 VA: 0x178EF08
	private X509Certificate ReadPemCertificate(Stream inStream) { }

	// RVA: 0x178EFC8 Offset: 0x178EFC8 VA: 0x178EFC8 Slot: 4
	protected virtual X509Certificate CreateX509Certificate(X509CertificateStructure c) { }

	// RVA: 0x178F02C Offset: 0x178F02C VA: 0x178F02C
	public X509Certificate ReadCertificate(byte[] input) { }

	// RVA: 0x178F358 Offset: 0x178F358 VA: 0x178F358
	public ICollection ReadCertificates(byte[] input) { }

	// RVA: 0x178F0A4 Offset: 0x178F0A4 VA: 0x178F0A4
	public X509Certificate ReadCertificate(Stream inStream) { }

	// RVA: 0x178F3D0 Offset: 0x178F3D0 VA: 0x178F3D0
	public ICollection ReadCertificates(Stream inStream) { }

	// RVA: 0x178F4F8 Offset: 0x178F4F8 VA: 0x178F4F8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509Crl : X509ExtensionBase // TypeDefIndex: 5243
{
	// Fields
	private readonly CertificateList c; // 0x10
	private readonly string sigAlgName; // 0x18
	private readonly byte[] sigAlgParams; // 0x20
	private readonly bool isIndirect; // 0x28

	// Properties
	public virtual int Version { get; }
	public virtual X509Name IssuerDN { get; }
	public virtual DateTime ThisUpdate { get; }
	public virtual DateTimeObject NextUpdate { get; }
	public virtual string SigAlgName { get; }
	public virtual string SigAlgOid { get; }
	protected virtual bool IsIndirectCrl { get; }

	// Methods

	// RVA: 0x178F570 Offset: 0x178F570 VA: 0x178F570
	public void .ctor(CertificateList c) { }

	// RVA: 0x178FB88 Offset: 0x178FB88 VA: 0x178FB88 Slot: 8
	protected override X509Extensions GetX509Extensions() { }

	// RVA: 0x178FC08 Offset: 0x178FC08 VA: 0x178FC08 Slot: 13
	public virtual byte[] GetEncoded() { }

	// RVA: 0x178FD30 Offset: 0x178FD30 VA: 0x178FD30 Slot: 14
	public virtual void Verify(AsymmetricKeyParameter publicKey) { }

	// RVA: 0x178FDB0 Offset: 0x178FDB0 VA: 0x178FDB0 Slot: 15
	public virtual void Verify(IVerifierFactoryProvider verifierProvider) { }

	// RVA: 0x178FEA8 Offset: 0x178FEA8 VA: 0x178FEA8 Slot: 16
	protected virtual void CheckSignature(IVerifierFactory verifier) { }

	// RVA: 0x17903B0 Offset: 0x17903B0 VA: 0x17903B0 Slot: 17
	public virtual int get_Version() { }

	// RVA: 0x17903E0 Offset: 0x17903E0 VA: 0x17903E0 Slot: 18
	public virtual X509Name get_IssuerDN() { }

	// RVA: 0x1790410 Offset: 0x1790410 VA: 0x1790410 Slot: 19
	public virtual DateTime get_ThisUpdate() { }

	// RVA: 0x1790458 Offset: 0x1790458 VA: 0x1790458 Slot: 20
	public virtual DateTimeObject get_NextUpdate() { }

	// RVA: 0x179052C Offset: 0x179052C VA: 0x179052C
	private ISet LoadCrlEntries() { }

	// RVA: 0x17909D8 Offset: 0x17909D8 VA: 0x17909D8 Slot: 21
	public virtual X509CrlEntry GetRevokedCertificate(BigInteger serialNumber) { }

	// RVA: 0x1790E38 Offset: 0x1790E38 VA: 0x1790E38 Slot: 22
	public virtual ISet GetRevokedCertificates() { }

	// RVA: 0x1790EFC Offset: 0x1790EFC VA: 0x1790EFC Slot: 23
	public virtual byte[] GetTbsCertList() { }

	// RVA: 0x1791044 Offset: 0x1791044 VA: 0x1791044 Slot: 24
	public virtual byte[] GetSignature() { }

	// RVA: 0x1791074 Offset: 0x1791074 VA: 0x1791074 Slot: 25
	public virtual string get_SigAlgName() { }

	// RVA: 0x179107C Offset: 0x179107C VA: 0x179107C Slot: 26
	public virtual string get_SigAlgOid() { }

	// RVA: 0x17910E0 Offset: 0x17910E0 VA: 0x17910E0 Slot: 27
	public virtual byte[] GetSigAlgParams() { }

	// RVA: 0x17910EC Offset: 0x17910EC VA: 0x17910EC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x17911C8 Offset: 0x17911C8 VA: 0x17911C8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x17911FC Offset: 0x17911FC VA: 0x17911FC Slot: 3
	public override string ToString() { }

	// RVA: 0x1792544 Offset: 0x1792544 VA: 0x1792544 Slot: 28
	public virtual bool IsRevoked(X509Certificate cert) { }

	// RVA: 0x1792654 Offset: 0x1792654 VA: 0x1792654 Slot: 29
	protected virtual bool get_IsIndirectCrl() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CrlEntry : X509ExtensionBase // TypeDefIndex: 5244
{
	// Fields
	private CrlEntry c; // 0x10
	private bool isIndirect; // 0x18
	private X509Name previousCertificateIssuer; // 0x20
	private X509Name certificateIssuer; // 0x28

	// Properties
	public BigInteger SerialNumber { get; }
	public DateTime RevocationDate { get; }
	public bool HasExtensions { get; }

	// Methods

	// RVA: 0x17927F4 Offset: 0x17927F4 VA: 0x17927F4
	public void .ctor(CrlEntry c) { }

	// RVA: 0x179097C Offset: 0x179097C VA: 0x179097C
	public void .ctor(CrlEntry c, bool isIndirect, X509Name previousCertificateIssuer) { }

	// RVA: 0x179282C Offset: 0x179282C VA: 0x179282C
	private X509Name loadCertificateIssuer() { }

	// RVA: 0x17909D0 Offset: 0x17909D0 VA: 0x17909D0
	public X509Name GetCertificateIssuer() { }

	// RVA: 0x1792A5C Offset: 0x1792A5C VA: 0x1792A5C Slot: 8
	protected override X509Extensions GetX509Extensions() { }

	// RVA: 0x1792A8C Offset: 0x1792A8C VA: 0x1792A8C
	public byte[] GetEncoded() { }

	// RVA: 0x1792BB4 Offset: 0x1792BB4 VA: 0x1792BB4
	public BigInteger get_SerialNumber() { }

	// RVA: 0x1792BFC Offset: 0x1792BFC VA: 0x1792BFC
	public DateTime get_RevocationDate() { }

	// RVA: 0x1792C44 Offset: 0x1792C44 VA: 0x1792C44
	public bool get_HasExtensions() { }

	// RVA: 0x1792C80 Offset: 0x1792C80 VA: 0x1792C80 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.X509
public class X509CrlParser // TypeDefIndex: 5245
{
	// Fields
	private static readonly PemParser PemCrlParser; // 0x0
	private readonly bool lazyAsn1; // 0x10
	private Asn1Set sCrlData; // 0x18
	private int sCrlDataObjectCount; // 0x20
	private Stream currentCrlStream; // 0x28

	// Methods

	// RVA: 0x179365C Offset: 0x179365C VA: 0x179365C
	public void .ctor() { }

	// RVA: 0x1793684 Offset: 0x1793684 VA: 0x1793684
	public void .ctor(bool lazyAsn1) { }

	// RVA: 0x17936B4 Offset: 0x17936B4 VA: 0x17936B4
	private X509Crl ReadPemCrl(Stream inStream) { }

	// RVA: 0x1793774 Offset: 0x1793774 VA: 0x1793774
	private X509Crl ReadDerCrl(Asn1InputStream dIn) { }

	// RVA: 0x1793A28 Offset: 0x1793A28 VA: 0x1793A28
	private X509Crl GetCrl() { }

	// RVA: 0x1793AC8 Offset: 0x1793AC8 VA: 0x1793AC8 Slot: 4
	protected virtual X509Crl CreateX509Crl(CertificateList c) { }

	// RVA: 0x1793B28 Offset: 0x1793B28 VA: 0x1793B28
	public X509Crl ReadCrl(byte[] input) { }

	// RVA: 0x1793EC4 Offset: 0x1793EC4 VA: 0x1793EC4
	public ICollection ReadCrls(byte[] input) { }

	// RVA: 0x1793BA0 Offset: 0x1793BA0 VA: 0x1793BA0
	public X509Crl ReadCrl(Stream inStream) { }

	// RVA: 0x1793F3C Offset: 0x1793F3C VA: 0x1793F3C
	public ICollection ReadCrls(Stream inStream) { }

	// RVA: 0x1794064 Offset: 0x1794064 VA: 0x1794064
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.X509
public abstract class X509ExtensionBase : IX509Extension // TypeDefIndex: 5246
{
	// Methods

	// RVA: 0x178F7C8 Offset: 0x178F7C8 VA: 0x178F7C8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract X509Extensions GetX509Extensions();

	// RVA: 0x17940DC Offset: 0x17940DC VA: 0x17940DC Slot: 9
	protected virtual ISet GetExtensionOids(bool critical) { }

	// RVA: 0x17944CC Offset: 0x17944CC VA: 0x17944CC Slot: 10
	public virtual ISet GetNonCriticalExtensionOids() { }

	// RVA: 0x17944DC Offset: 0x17944DC VA: 0x17944DC Slot: 11
	public virtual ISet GetCriticalExtensionOids() { }

	[ObsoleteAttribute] // RVA: 0xD34EF0 Offset: 0xD34EF0 VA: 0xD34EF0
	// RVA: 0x17944EC Offset: 0x17944EC VA: 0x17944EC Slot: 6
	public Asn1OctetString GetExtensionValue(string oid) { }

	// RVA: 0x1794568 Offset: 0x1794568 VA: 0x1794568 Slot: 12
	public virtual Asn1OctetString GetExtensionValue(DerObjectIdentifier oid) { }
}

// Namespace: Org.BouncyCastle.X509
internal class X509SignatureUtilities // TypeDefIndex: 5247
{
	// Fields
	private static readonly Asn1Null derNull; // 0x0

	// Methods

	// RVA: 0x17945BC Offset: 0x17945BC VA: 0x17945BC
	public void .ctor() { }

	// RVA: 0x17945C4 Offset: 0x17945C4 VA: 0x17945C4
	internal static void SetSignatureParameters(ISigner signature, Asn1Encodable parameters) { }

	// RVA: 0x178F7D0 Offset: 0x178F7D0 VA: 0x178F7D0
	internal static string GetSignatureName(AlgorithmIdentifier sigAlgId) { }

	// RVA: 0x179465C Offset: 0x179465C VA: 0x179465C
	private static string GetDigestAlgName(DerObjectIdentifier digestAlgOID) { }

	// RVA: 0x1794A38 Offset: 0x1794A38 VA: 0x1794A38
	private static void .cctor() { }
}

// Namespace: BestHTTP.Statistics
[FlagsAttribute] // RVA: 0xC90E98 Offset: 0xC90E98 VA: 0xC90E98
public enum StatisticsQueryFlags // TypeDefIndex: 5248
{
	// Fields
	public byte value__; // 0x0
	public const StatisticsQueryFlags Connections = 1;
	public const StatisticsQueryFlags Cache = 2;
	public const StatisticsQueryFlags Cookies = 4;
	public const StatisticsQueryFlags All = 255;
}

// Namespace: BestHTTP.Statistics
public struct GeneralStatistics // TypeDefIndex: 5249
{
	// Fields
	public StatisticsQueryFlags QueryFlags; // 0x0
	public int Connections; // 0x4
	public int ActiveConnections; // 0x8
	public int FreeConnections; // 0xC
	public int RecycledConnections; // 0x10
	public int RequestsInQueue; // 0x14
	public int CacheEntityCount; // 0x18
	public ulong CacheSize; // 0x20
	public int CookieCount; // 0x28
	public uint CookieJarSize; // 0x2C
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte16 // TypeDefIndex: 5250
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
	public byte b5; // 0x4
	public byte b6; // 0x5
	public byte b7; // 0x6
	public byte b8; // 0x7
	public byte b9; // 0x8
	public byte b10; // 0x9
	public byte b11; // 0xA
	public byte b12; // 0xB
	public byte b13; // 0xC
	public byte b14; // 0xD
	public byte b15; // 0xE
	public byte b16; // 0xF
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte4 // TypeDefIndex: 5251
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
}

// Namespace: CodeStage.AntiCheat.Common
[Serializable]
public struct ACTkByte8 // TypeDefIndex: 5252
{
	// Fields
	public byte b1; // 0x0
	public byte b2; // 0x1
	public byte b3; // 0x2
	public byte b4; // 0x3
	public byte b5; // 0x4
	public byte b6; // 0x5
	public byte b7; // 0x6
	public byte b8; // 0x7
}

// Namespace: CodeStage.AntiCheat.Common
internal class Constants // TypeDefIndex: 5253
{
	// Fields
	internal const string LOG_PREFIX = "[ACTk] ";

	// Methods

	// RVA: 0x1F2E1B8 Offset: 0x1F2E1B8 VA: 0x1F2E1B8
	public void .ctor() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC90EA8 Offset: 0xC90EA8 VA: 0xC90EA8
public abstract class ActDetectorBase : MonoBehaviour // TypeDefIndex: 5254
{
	// Fields
	protected const string CONTAINER_NAME = "Anti-Cheat Toolkit Detectors";
	protected const string MENU_PATH = "Code Stage/Anti-Cheat Toolkit/";
	protected const string GAME_OBJECT_MENU_PATH = "GameObject/Create Other/Code Stage/Anti-Cheat Toolkit/";
	protected static GameObject detectorsContainer; // 0x0
	[TooltipAttribute] // RVA: 0xCB648C Offset: 0xCB648C VA: 0xCB648C
	public bool autoStart; // 0x18
	[TooltipAttribute] // RVA: 0xCB64C4 Offset: 0xCB64C4 VA: 0xCB64C4
	public bool keepAlive; // 0x19
	[TooltipAttribute] // RVA: 0xCB64FC Offset: 0xCB64FC VA: 0xCB64FC
	public bool autoDispose; // 0x1A
	[SerializeField] // RVA: 0xCB6534 Offset: 0xCB6534 VA: 0xCB6534
	protected UnityEvent detectionEvent; // 0x20
	protected UnityAction detectionAction; // 0x28
	[SerializeField] // RVA: 0xCB6544 Offset: 0xCB6544 VA: 0xCB6544
	protected bool detectionEventHasListener; // 0x30
	protected bool isRunning; // 0x31
	protected bool started; // 0x32

	// Methods

	// RVA: 0x1F2E1C0 Offset: 0x1F2E1C0 VA: 0x1F2E1C0
	protected void .ctor() { }

	// RVA: 0x1F2E1D8 Offset: 0x1F2E1D8 VA: 0x1F2E1D8
	private void Start() { }

	// RVA: 0x1F2E314 Offset: 0x1F2E314 VA: 0x1F2E314
	private void OnEnable() { }

	// RVA: 0x1F2E374 Offset: 0x1F2E374 VA: 0x1F2E374
	private void OnDisable() { }

	// RVA: 0x1F2E38C Offset: 0x1F2E38C VA: 0x1F2E38C
	private void OnApplicationQuit() { }

	// RVA: 0x1F2E398 Offset: 0x1F2E398 VA: 0x1F2E398 Slot: 4
	protected virtual void OnDestroy() { }

	// RVA: 0x1F2E500 Offset: 0x1F2E500 VA: 0x1F2E500 Slot: 5
	protected virtual bool Init(ActDetectorBase instance, string detectorName) { }

	// RVA: 0x1F2E628 Offset: 0x1F2E628 VA: 0x1F2E628 Slot: 6
	protected virtual void DisposeInternal() { }

	// RVA: 0x1F2E690 Offset: 0x1F2E690 VA: 0x1F2E690 Slot: 7
	protected virtual bool DetectorHasAdditionalCallbacks() { }

	// RVA: 0x1F2E698 Offset: 0x1F2E698 VA: 0x1F2E698 Slot: 8
	internal virtual void OnCheatingDetected() { }

	// RVA: -1 Offset: -1 Slot: 9
	protected abstract void StartDetectionAutomatically();

	// RVA: -1 Offset: -1 Slot: 10
	protected abstract void StopDetectionInternal();

	// RVA: -1 Offset: -1 Slot: 11
	protected abstract void PauseDetector();

	// RVA: -1 Offset: -1 Slot: 12
	protected abstract void ResumeDetector();
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC90EE0 Offset: 0xC90EE0 VA: 0xC90EE0
public class InjectionDetector : ActDetectorBase // TypeDefIndex: 5255
{
	// Fields
	internal const string COMPONENT_NAME = "Injection Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Injection Detector: ";
	protected UnityAction<string> detectionActionWithArgument; // 0x38
	private static int instancesInScene; // 0x0
	private bool signaturesAreNotGenuine; // 0x40
	private InjectionDetector.AllowedAssembly[] allowedAssemblies; // 0x48
	private string[] hexTable; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCB6554 Offset: 0xCB6554 VA: 0xCB6554
	[DebuggerBrowsableAttribute] // RVA: 0xCB6554 Offset: 0xCB6554 VA: 0xCB6554
	private static InjectionDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static InjectionDetector Instance { get; set; }
	private static InjectionDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x1F2E704 Offset: 0x1F2E704 VA: 0x1F2E704
	private void .ctor() { }

	// RVA: 0x1F2E71C Offset: 0x1F2E71C VA: 0x1F2E71C
	public static void StartDetection() { }

	// RVA: 0x1F2E9B4 Offset: 0x1F2E9B4 VA: 0x1F2E9B4
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1F2EBA4 Offset: 0x1F2EBA4 VA: 0x1F2EBA4
	public static void StartDetection(UnityAction<string> callback) { }

	// RVA: 0x1F2EBDC Offset: 0x1F2EBDC VA: 0x1F2EBDC
	public static void StopDetection() { }

	// RVA: 0x1F2ECE0 Offset: 0x1F2ECE0 VA: 0x1F2ECE0
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F28 Offset: 0xD34F28 VA: 0xD34F28
	// RVA: 0x1F2E820 Offset: 0x1F2E820 VA: 0x1F2E820
	public static InjectionDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F38 Offset: 0xD34F38 VA: 0xD34F38
	// RVA: 0x1F2EDE4 Offset: 0x1F2EDE4 VA: 0x1F2EDE4
	private static void set_Instance(InjectionDetector value) { }

	// RVA: 0x1F2E9EC Offset: 0x1F2E9EC VA: 0x1F2E9EC
	private static InjectionDetector get_GetOrCreateInstance() { }

	// RVA: 0x1F2EE38 Offset: 0x1F2EE38 VA: 0x1F2EE38
	private void Awake() { }

	// RVA: 0x1F2EF58 Offset: 0x1F2EF58 VA: 0x1F2EF58 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1F2EFBC Offset: 0x1F2EFBC VA: 0x1F2EFBC
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1F2EFC0 Offset: 0x1F2EFC0 VA: 0x1F2EFC0
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1F2E870 Offset: 0x1F2E870 VA: 0x1F2E870
	private void StartDetectionInternal(UnityAction callback, UnityAction<string> callbackWithArgument) { }

	// RVA: 0x1F2F7F0 Offset: 0x1F2F7F0 VA: 0x1F2F7F0 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1F2F7FC Offset: 0x1F2F7FC VA: 0x1F2F7FC Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1F2F89C Offset: 0x1F2F89C VA: 0x1F2F89C Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1F2F968 Offset: 0x1F2F968 VA: 0x1F2F968 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1F2FA1C Offset: 0x1F2FA1C VA: 0x1F2FA1C Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x1F2F664 Offset: 0x1F2F664 VA: 0x1F2F664
	private void OnCheatingDetected(string cause) { }

	// RVA: 0x1F2FB08 Offset: 0x1F2FB08 VA: 0x1F2FB08
	private void OnNewAssemblyLoaded(object sender, AssemblyLoadEventArgs args) { }

	// RVA: 0x1F2F6D0 Offset: 0x1F2F6D0 VA: 0x1F2F6D0
	private bool FindInjectionInCurrentAssemblies(out string cause) { }

	// RVA: 0x1F2FB98 Offset: 0x1F2FB98 VA: 0x1F2FB98
	private bool AssemblyAllowed(Assembly ass) { }

	// RVA: 0x1F2F0B4 Offset: 0x1F2F0B4 VA: 0x1F2F0B4
	private void LoadAndParseAllowedAssemblies() { }

	// RVA: 0x1F2FD10 Offset: 0x1F2FD10 VA: 0x1F2FD10
	private int GetAssemblyHash(Assembly ass) { }

	// RVA: 0x1F2FEBC Offset: 0x1F2FEBC VA: 0x1F2FEBC
	private string PublicKeyTokenToString(byte[] bytes) { }
}

// Namespace: 
private class InjectionDetector.AllowedAssembly // TypeDefIndex: 5256
{
	// Fields
	public readonly string name; // 0x10
	public readonly int[] hashes; // 0x18

	// Methods

	// RVA: 0x1F2FE84 Offset: 0x1F2FE84 VA: 0x1F2FE84
	public void .ctor(string name, int[] hashes) { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC90F18 Offset: 0xC90F18 VA: 0xC90F18
public class ObscuredCheatingDetector : ActDetectorBase // TypeDefIndex: 5257
{
	// Fields
	internal const string COMPONENT_NAME = "Obscured Cheating Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Obscured Cheating Detector: ";
	private static int instancesInScene; // 0x0
	[TooltipAttribute] // RVA: 0xCB6590 Offset: 0xCB6590 VA: 0xCB6590
	public float floatEpsilon; // 0x34
	[TooltipAttribute] // RVA: 0xCB65C8 Offset: 0xCB65C8 VA: 0xCB65C8
	public float vector2Epsilon; // 0x38
	[TooltipAttribute] // RVA: 0xCB6600 Offset: 0xCB6600 VA: 0xCB6600
	public float vector3Epsilon; // 0x3C
	[TooltipAttribute] // RVA: 0xCB6638 Offset: 0xCB6638 VA: 0xCB6638
	public float quaternionEpsilon; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCB6670 Offset: 0xCB6670 VA: 0xCB6670
	[DebuggerBrowsableAttribute] // RVA: 0xCB6670 Offset: 0xCB6670 VA: 0xCB6670
	private static ObscuredCheatingDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static ObscuredCheatingDetector Instance { get; set; }
	private static ObscuredCheatingDetector GetOrCreateInstance { get; }
	internal static bool IsRunning { get; }

	// Methods

	// RVA: 0x1F2FFE8 Offset: 0x1F2FFE8 VA: 0x1F2FFE8
	private void .ctor() { }

	// RVA: 0x1F3000C Offset: 0x1F3000C VA: 0x1F3000C
	public static void StartDetection() { }

	// RVA: 0x1F301C4 Offset: 0x1F301C4 VA: 0x1F301C4
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1F303B0 Offset: 0x1F303B0 VA: 0x1F303B0
	public static void StopDetection() { }

	// RVA: 0x1F304B4 Offset: 0x1F304B4 VA: 0x1F304B4
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F48 Offset: 0xD34F48 VA: 0xD34F48
	// RVA: 0x1F3010C Offset: 0x1F3010C VA: 0x1F3010C
	public static ObscuredCheatingDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F58 Offset: 0xD34F58 VA: 0xD34F58
	// RVA: 0x1F305B8 Offset: 0x1F305B8 VA: 0x1F305B8
	private static void set_Instance(ObscuredCheatingDetector value) { }

	// RVA: 0x1F301F8 Offset: 0x1F301F8 VA: 0x1F301F8
	private static ObscuredCheatingDetector get_GetOrCreateInstance() { }

	// RVA: 0x1F3060C Offset: 0x1F3060C VA: 0x1F3060C
	internal static bool get_IsRunning() { }

	// RVA: 0x1F30674 Offset: 0x1F30674 VA: 0x1F30674
	private void Awake() { }

	// RVA: 0x1F30794 Offset: 0x1F30794 VA: 0x1F30794 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1F307F8 Offset: 0x1F307F8 VA: 0x1F307F8
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1F307FC Offset: 0x1F307FC VA: 0x1F307FC
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1F3015C Offset: 0x1F3015C VA: 0x1F3015C
	private void StartDetectionInternal(UnityAction callback) { }

	// RVA: 0x1F308F0 Offset: 0x1F308F0 VA: 0x1F308F0 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1F308F8 Offset: 0x1F308F8 VA: 0x1F308F8 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1F30900 Offset: 0x1F30900 VA: 0x1F30900 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1F3091C Offset: 0x1F3091C VA: 0x1F3091C Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1F30930 Offset: 0x1F30930 VA: 0x1F30930 Slot: 6
	protected override void DisposeInternal() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC90F50 Offset: 0xC90F50 VA: 0xC90F50
public class SpeedHackDetector : ActDetectorBase // TypeDefIndex: 5258
{
	// Fields
	internal const string COMPONENT_NAME = "Speed Hack Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] Speed Hack Detector: ";
	private const long TICKS_PER_SECOND = 10000000;
	private const int THRESHOLD = 5000000;
	private static int instancesInScene; // 0x0
	[TooltipAttribute] // RVA: 0xCB66AC Offset: 0xCB66AC VA: 0xCB66AC
	public float interval; // 0x34
	[TooltipAttribute] // RVA: 0xCB66E4 Offset: 0xCB66E4 VA: 0xCB66E4
	public byte maxFalsePositives; // 0x38
	[TooltipAttribute] // RVA: 0xCB671C Offset: 0xCB671C VA: 0xCB671C
	public int coolDown; // 0x3C
	private byte currentFalsePositives; // 0x40
	private int currentCooldownShots; // 0x44
	private long ticksOnStart; // 0x48
	private long vulnerableTicksOnStart; // 0x50
	private long prevTicks; // 0x58
	private long prevIntervalTicks; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCB6754 Offset: 0xCB6754 VA: 0xCB6754
	[DebuggerBrowsableAttribute] // RVA: 0xCB6754 Offset: 0xCB6754 VA: 0xCB6754
	private static SpeedHackDetector <Instance>k__BackingField; // 0x8

	// Properties
	public static SpeedHackDetector Instance { get; set; }
	private static SpeedHackDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x1F30A1C Offset: 0x1F30A1C VA: 0x1F30A1C
	private void .ctor() { }

	// RVA: 0x1F30A4C Offset: 0x1F30A4C VA: 0x1F30A4C
	public static void StartDetection() { }

	// RVA: 0x1F30CF4 Offset: 0x1F30CF4 VA: 0x1F30CF4
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1F30EE0 Offset: 0x1F30EE0 VA: 0x1F30EE0
	public static void StartDetection(UnityAction callback, float interval) { }

	// RVA: 0x1F30F24 Offset: 0x1F30F24 VA: 0x1F30F24
	public static void StartDetection(UnityAction callback, float interval, byte maxFalsePositives) { }

	// RVA: 0x1F30F78 Offset: 0x1F30F78 VA: 0x1F30F78
	public static void StartDetection(UnityAction callback, float interval, byte maxFalsePositives, int coolDown) { }

	// RVA: 0x1F30FD4 Offset: 0x1F30FD4 VA: 0x1F30FD4
	public static void StopDetection() { }

	// RVA: 0x1F310D8 Offset: 0x1F310D8 VA: 0x1F310D8
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F68 Offset: 0xD34F68 VA: 0xD34F68
	// RVA: 0x1F30BFC Offset: 0x1F30BFC VA: 0x1F30BFC
	public static SpeedHackDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F78 Offset: 0xD34F78 VA: 0xD34F78
	// RVA: 0x1F311DC Offset: 0x1F311DC VA: 0x1F311DC
	private static void set_Instance(SpeedHackDetector value) { }

	// RVA: 0x1F30D28 Offset: 0x1F30D28 VA: 0x1F30D28
	private static SpeedHackDetector get_GetOrCreateInstance() { }

	// RVA: 0x1F31230 Offset: 0x1F31230 VA: 0x1F31230
	private void Awake() { }

	// RVA: 0x1F31350 Offset: 0x1F31350 VA: 0x1F31350 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1F313B4 Offset: 0x1F313B4 VA: 0x1F313B4
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1F313B8 Offset: 0x1F313B8 VA: 0x1F313B8
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1F314AC Offset: 0x1F314AC VA: 0x1F314AC
	private void OnApplicationPause(bool pause) { }

	// RVA: 0x1F3155C Offset: 0x1F3155C VA: 0x1F3155C
	private void Update() { }

	// RVA: 0x1F30C4C Offset: 0x1F30C4C VA: 0x1F30C4C
	private void StartDetectionInternal(UnityAction callback, float checkInterval, byte falsePositives, int shotsTillCooldown) { }

	// RVA: 0x1F3170C Offset: 0x1F3170C VA: 0x1F3170C Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1F31720 Offset: 0x1F31720 VA: 0x1F31720 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1F31728 Offset: 0x1F31728 VA: 0x1F31728 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1F31744 Offset: 0x1F31744 VA: 0x1F31744 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1F31758 Offset: 0x1F31758 VA: 0x1F31758 Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x1F314B8 Offset: 0x1F314B8 VA: 0x1F314B8
	private void ResetStartTicks() { }
}

// Namespace: CodeStage.AntiCheat.Detectors
[AddComponentMenu] // RVA: 0xC90F88 Offset: 0xC90F88 VA: 0xC90F88
public class WallHackDetector : ActDetectorBase // TypeDefIndex: 5259
{
	// Fields
	internal const string COMPONENT_NAME = "WallHack Detector";
	internal const string FINAL_LOG_PREFIX = "[ACTk] WallHack Detector: ";
	private const string SERVICE_CONTAINER_NAME = "[WH Detector Service]";
	private const string WIREFRAME_SHADER_NAME = "Hidden/ACTk/WallHackTexture";
	private const int SHADER_TEXTURE_SIZE = 4;
	private const int RENDER_TEXTURE_SIZE = 4;
	private readonly Vector3 rigidPlayerVelocity; // 0x34
	private static int instancesInScene; // 0x0
	private readonly WaitForEndOfFrame waitForEndOfFrame; // 0x40
	[SerializeField] // RVA: 0xCB6790 Offset: 0xCB6790 VA: 0xCB6790
	[TooltipAttribute] // RVA: 0xCB6790 Offset: 0xCB6790 VA: 0xCB6790
	private bool checkRigidbody; // 0x48
	[SerializeField] // RVA: 0xCB67DC Offset: 0xCB67DC VA: 0xCB67DC
	[TooltipAttribute] // RVA: 0xCB67DC Offset: 0xCB67DC VA: 0xCB67DC
	private bool checkController; // 0x49
	[SerializeField] // RVA: 0xCB6828 Offset: 0xCB6828 VA: 0xCB6828
	[TooltipAttribute] // RVA: 0xCB6828 Offset: 0xCB6828 VA: 0xCB6828
	private bool checkWireframe; // 0x4A
	[SerializeField] // RVA: 0xCB6874 Offset: 0xCB6874 VA: 0xCB6874
	[TooltipAttribute] // RVA: 0xCB6874 Offset: 0xCB6874 VA: 0xCB6874
	private bool checkRaycast; // 0x4B
	[TooltipAttribute] // RVA: 0xCB68C0 Offset: 0xCB68C0 VA: 0xCB68C0
	[RangeAttribute] // RVA: 0xCB68C0 Offset: 0xCB68C0 VA: 0xCB68C0
	public int wireframeDelay; // 0x4C
	[TooltipAttribute] // RVA: 0xCB6918 Offset: 0xCB6918 VA: 0xCB6918
	[RangeAttribute] // RVA: 0xCB6918 Offset: 0xCB6918 VA: 0xCB6918
	public int raycastDelay; // 0x50
	[TooltipAttribute] // RVA: 0xCB6970 Offset: 0xCB6970 VA: 0xCB6970
	public Vector3 spawnPosition; // 0x54
	[TooltipAttribute] // RVA: 0xCB69A8 Offset: 0xCB69A8 VA: 0xCB69A8
	public byte maxFalsePositives; // 0x60
	private GameObject serviceContainer; // 0x68
	private GameObject solidWall; // 0x70
	private GameObject thinWall; // 0x78
	private Camera wfCamera; // 0x80
	private MeshRenderer foregroundRenderer; // 0x88
	private MeshRenderer backgroundRenderer; // 0x90
	private Color wfColor1; // 0x98
	private Color wfColor2; // 0xA8
	private Shader wfShader; // 0xB8
	private Material wfMaterial; // 0xC0
	private Texture2D shaderTexture; // 0xC8
	private Texture2D targetTexture; // 0xD0
	private RenderTexture renderTexture; // 0xD8
	private int whLayer; // 0xE0
	private int raycastMask; // 0xE4
	private Rigidbody rigidPlayer; // 0xE8
	private CharacterController charControllerPlayer; // 0xF0
	private float charControllerVelocity; // 0xF8
	private byte rigidbodyDetections; // 0xFC
	private byte controllerDetections; // 0xFD
	private byte wireframeDetections; // 0xFE
	private byte raycastDetections; // 0xFF
	private bool wireframeDetected; // 0x100
	[CompilerGeneratedAttribute] // RVA: 0xCB69E0 Offset: 0xCB69E0 VA: 0xCB69E0
	[DebuggerBrowsableAttribute] // RVA: 0xCB69E0 Offset: 0xCB69E0 VA: 0xCB69E0
	private static WallHackDetector <Instance>k__BackingField; // 0x8

	// Properties
	public bool CheckRigidbody { get; set; }
	public bool CheckController { get; set; }
	public bool CheckWireframe { get; set; }
	public bool CheckRaycast { get; set; }
	public static WallHackDetector Instance { get; set; }
	private static WallHackDetector GetOrCreateInstance { get; }

	// Methods

	// RVA: 0x1F31844 Offset: 0x1F31844 VA: 0x1F31844
	private void .ctor() { }

	// RVA: 0x1F3193C Offset: 0x1F3193C VA: 0x1F3193C
	public bool get_CheckRigidbody() { }

	// RVA: 0x1F31944 Offset: 0x1F31944 VA: 0x1F31944
	public void set_CheckRigidbody(bool value) { }

	// RVA: 0x1F333A0 Offset: 0x1F333A0 VA: 0x1F333A0
	public bool get_CheckController() { }

	// RVA: 0x1F333A8 Offset: 0x1F333A8 VA: 0x1F333A8
	public void set_CheckController(bool value) { }

	// RVA: 0x1F33680 Offset: 0x1F33680 VA: 0x1F33680
	public bool get_CheckWireframe() { }

	// RVA: 0x1F33688 Offset: 0x1F33688 VA: 0x1F33688
	public void set_CheckWireframe(bool value) { }

	// RVA: 0x1F33834 Offset: 0x1F33834 VA: 0x1F33834
	public bool get_CheckRaycast() { }

	// RVA: 0x1F3383C Offset: 0x1F3383C VA: 0x1F3383C
	public void set_CheckRaycast(bool value) { }

	// RVA: 0x1F339D4 Offset: 0x1F339D4 VA: 0x1F339D4
	public static void StartDetection() { }

	// RVA: 0x1F33C6C Offset: 0x1F33C6C VA: 0x1F33C6C
	public static void StartDetection(UnityAction callback) { }

	// RVA: 0x1F33E5C Offset: 0x1F33E5C VA: 0x1F33E5C
	public static void StartDetection(UnityAction callback, Vector3 spawnPosition) { }

	// RVA: 0x1F33EB8 Offset: 0x1F33EB8 VA: 0x1F33EB8
	public static void StartDetection(UnityAction callback, Vector3 spawnPosition, byte maxFalsePositives) { }

	// RVA: 0x1F33F24 Offset: 0x1F33F24 VA: 0x1F33F24
	public static void StopDetection() { }

	// RVA: 0x1F34028 Offset: 0x1F34028 VA: 0x1F34028
	public static void Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F88 Offset: 0xD34F88 VA: 0xD34F88
	// RVA: 0x1F33B58 Offset: 0x1F33B58 VA: 0x1F33B58
	public static WallHackDetector get_Instance() { }

	[CompilerGeneratedAttribute] // RVA: 0xD34F98 Offset: 0xD34F98 VA: 0xD34F98
	// RVA: 0x1F3412C Offset: 0x1F3412C VA: 0x1F3412C
	private static void set_Instance(WallHackDetector value) { }

	// RVA: 0x1F33CA4 Offset: 0x1F33CA4 VA: 0x1F33CA4
	private static WallHackDetector get_GetOrCreateInstance() { }

	// RVA: 0x1F34180 Offset: 0x1F34180 VA: 0x1F34180
	private void Awake() { }

	// RVA: 0x1F342A0 Offset: 0x1F342A0 VA: 0x1F342A0 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x1F34430 Offset: 0x1F34430 VA: 0x1F34430
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x1F34434 Offset: 0x1F34434 VA: 0x1F34434
	private void OnLevelLoadedCallback() { }

	// RVA: 0x1F34528 Offset: 0x1F34528 VA: 0x1F34528
	private void FixedUpdate() { }

	// RVA: 0x1F3467C Offset: 0x1F3467C VA: 0x1F3467C
	private void Update() { }

	// RVA: 0x1F33BA8 Offset: 0x1F33BA8 VA: 0x1F33BA8
	private void StartDetectionInternal(UnityAction callback, Vector3 servicePosition, byte falsePositivesInRow) { }

	// RVA: 0x1F34848 Offset: 0x1F34848 VA: 0x1F34848 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x1F3485C Offset: 0x1F3485C VA: 0x1F3485C Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1F348AC Offset: 0x1F348AC VA: 0x1F348AC Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1F34928 Offset: 0x1F34928 VA: 0x1F34928 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1F34964 Offset: 0x1F34964 VA: 0x1F34964 Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x1F31A0C Offset: 0x1F31A0C VA: 0x1F31A0C
	private void UpdateServiceContainer() { }

	[DebuggerHiddenAttribute] // RVA: 0xD34FA8 Offset: 0xD34FA8 VA: 0xD34FA8
	// RVA: 0x1F347D8 Offset: 0x1F347D8 VA: 0x1F347D8
	private IEnumerator InitDetector() { }

	// RVA: 0x1F3302C Offset: 0x1F3302C VA: 0x1F3302C
	private void StartRigidModule() { }

	// RVA: 0x1F33470 Offset: 0x1F33470 VA: 0x1F33470
	private void StartControllerModule() { }

	// RVA: 0x1F33750 Offset: 0x1F33750 VA: 0x1F33750
	private void StartWireframeModule() { }

	// RVA: 0x1F35054 Offset: 0x1F35054 VA: 0x1F35054
	private void ShootWireframeModule() { }

	[DebuggerHiddenAttribute] // RVA: 0xD34FB8 Offset: 0xD34FB8 VA: 0xD34FB8
	// RVA: 0x1F350C8 Offset: 0x1F350C8 VA: 0x1F350C8
	private IEnumerator CaptureFrame() { }

	// RVA: 0x1F33904 Offset: 0x1F33904 VA: 0x1F33904
	private void StartRaycastModule() { }

	// RVA: 0x1F35140 Offset: 0x1F35140 VA: 0x1F35140
	private void ShootRaycastModule() { }

	// RVA: 0x1F332AC Offset: 0x1F332AC VA: 0x1F332AC
	private void StopRigidModule() { }

	// RVA: 0x1F335F4 Offset: 0x1F335F4 VA: 0x1F335F4
	private void StopControllerModule() { }

	// RVA: 0x1F337E0 Offset: 0x1F337E0 VA: 0x1F337E0
	private void StopWireframeModule() { }

	// RVA: 0x1F33980 Offset: 0x1F33980 VA: 0x1F33980
	private void StopRaycastModule() { }

	// RVA: 0x1F34BF8 Offset: 0x1F34BF8 VA: 0x1F34BF8
	private void InitRigidModule() { }

	// RVA: 0x1F34E98 Offset: 0x1F34E98 VA: 0x1F34E98
	private void InitControllerModule() { }

	// RVA: 0x1F34B30 Offset: 0x1F34B30 VA: 0x1F34B30
	private void UninitRigidModule() { }

	// RVA: 0x1F34DD0 Offset: 0x1F34DD0 VA: 0x1F34DD0
	private void UninitControllerModule() { }

	// RVA: 0x1F34620 Offset: 0x1F34620 VA: 0x1F34620
	private bool Detect() { }

	// RVA: 0x1F34A50 Offset: 0x1F34A50 VA: 0x1F34A50
	private static Color32 GenerateColor() { }

	// RVA: 0x1F34ACC Offset: 0x1F34ACC VA: 0x1F34ACC
	private static bool ColorsSimilar(Color32 c1, Color32 c2, int tolerance) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCADA30 Offset: 0xCADA30 VA: 0xCADA30
private sealed class WallHackDetector.<InitDetector>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5260
{
	// Fields
	internal WallHackDetector $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD44F54 Offset: 0xD44F54 VA: 0xD44F54
	// RVA: 0x1F34B28 Offset: 0x1F34B28 VA: 0x1F34B28
	public void .ctor() { }

	// RVA: 0x1F35B54 Offset: 0x1F35B54 VA: 0x1F35B54 Slot: 5
	public bool MoveNext() { }
