	// Methods

	// RVA: 0x1560CF0 Offset: 0x1560CF0 VA: 0x1560CF0
	public void .ctor() { }

	// RVA: 0x1560E10 Offset: 0x1560E10 VA: 0x1560E10 Slot: 6
	public virtual void setData(BattleServantData data) { }

	// RVA: 0x156246C Offset: 0x156246C VA: 0x156246C
	public BattleServantData getData() { }

	// RVA: 0x1562474 Offset: 0x1562474 VA: 0x1562474
	public void setPerf(BattlePerformance inperf) { }

	// RVA: 0x156247C Offset: 0x156247C VA: 0x156247C
	public bool isNone() { }

	// RVA: 0x156248C Offset: 0x156248C VA: 0x156248C
	public void OnClick() { }

	// RVA: 0x1562574 Offset: 0x1562574 VA: 0x1562574
	public void playStartShowServant() { }

	// RVA: 0x1562578 Offset: 0x1562578 VA: 0x1562578
	public void playSelectServant() { }

	// RVA: 0x1562730 Offset: 0x1562730 VA: 0x1562730
	public void playCloseSelectServant() { }

	// RVA: 0x156280C Offset: 0x156280C VA: 0x156280C
	public void playEndShowServant() { }

	// RVA: 0x15628E8 Offset: 0x15628E8 VA: 0x15628E8
	public void setCloseMode() { }

	// RVA: 0x1562E78 Offset: 0x1562E78 VA: 0x1562E78
	public void setOpenMode() { }

	// RVA: 0x15638D4 Offset: 0x15638D4 VA: 0x15638D4
	public void setVisible(bool flg) { }

	// RVA: 0x1562654 Offset: 0x1562654 VA: 0x1562654
	public void setTouch(bool flg) { }

	// RVA: 0x15639B8 Offset: 0x15639B8 VA: 0x15639B8
	public bool checkId(int Id) { }

	// RVA: 0x1562DD0 Offset: 0x1562DD0 VA: 0x1562DD0
	public void setSkillFlash(bool flg) { }

	// RVA: 0x15639D8 Offset: 0x15639D8 VA: 0x15639D8 Slot: 7
	public virtual void SetEnemyParamPosition(BaseEnemyParamPosData paramPosData) { }

	// RVA: 0x1563AF0 Offset: 0x1563AF0 VA: 0x1563AF0
	public void updateNp(BattleServantData svtdata) { }

	// RVA: 0x1563BF0 Offset: 0x1563BF0 VA: 0x1563BF0 Slot: 4
	public void updateNp(BattleServantData svtdata, int[] npArray, int index) { }

	// RVA: 0x1563D28 Offset: 0x1563D28 VA: 0x1563D28
	public void updateTDGauge(BattleServantData svtData) { }

	// RVA: 0x1563E4C Offset: 0x1563E4C VA: 0x1563E4C Slot: 8
	public virtual void changeHp(BattleServantData svtdata) { }

	// RVA: 0x1564388 Offset: 0x1564388 VA: 0x1564388
	public void updateHpbar(int now, int max) { }

	// RVA: 0x1563F1C Offset: 0x1563F1C VA: 0x1563F1C
	public void updateHplabel(int now, int max, bool isDispBreak = True) { }

	// RVA: 0x15644B8 Offset: 0x15644B8 VA: 0x15644B8
	public void setClassIcon() { }

	// RVA: 0x15645A8 Offset: 0x15645A8 VA: 0x15645A8
	public void setRoleTyoe() { }

	// RVA: 0x15647D0 Offset: 0x15647D0 VA: 0x15647D0
	public void playAttackEffect() { }

	// RVA: 0x15649A4 Offset: 0x15649A4 VA: 0x15649A4
	public void fixUpdateStatus() { }

	// RVA: 0x1560F00 Offset: 0x1560F00 VA: 0x1560F00
	public void initUpdateView(int notUpdateFlag = 0) { }

	// RVA: 0x1564B54 Offset: 0x1564B54 VA: 0x1564B54
	public void UpdateStatusByTransform() { }

	// RVA: 0x156194C Offset: 0x156194C VA: 0x156194C
	public void updateView() { }

	// RVA: 0x15649AC Offset: 0x15649AC VA: 0x15649AC
	public void setAtlas() { }

	// RVA: 0x15635BC Offset: 0x15635BC VA: 0x15635BC
	public void updateSkillIcon(bool flg = False) { }

	// RVA: 0x1565A04 Offset: 0x1565A04 VA: 0x1565A04
	public void callSkillIcon() { }

	// RVA: 0x1561C04 Offset: 0x1561C04 VA: 0x1561C04
	public void UpdateSkillRankUpEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE678 Offset: 0xCCE678 VA: 0xCCE678
	// RVA: 0x1565C50 Offset: 0x1565C50 VA: 0x1565C50
	private IEnumerator coroutineUpdateSkillRankUpEffect() { }

	// RVA: 0x1565BD0 Offset: 0x1565BD0 VA: 0x1565BD0
	public void DeleteSkillRankUpEffect() { }

	// RVA: 0x1563854 Offset: 0x1563854 VA: 0x1563854
	public void RemoveEffectClearRankUpBuff() { }

	// RVA: 0x1565DC8 Offset: 0x1565DC8 VA: 0x1565DC8
	public void clickSkillIcon(BattleSkillInfoData skillInfo, bool isLongTap) { }

	// RVA: 0x1565EA0 Offset: 0x1565EA0 VA: 0x1565EA0 Slot: 5
	public void updateBuffIconList(BattleServantData svtData, bool doAuraUpdate) { }

	// RVA: 0x1566050 Offset: 0x1566050 VA: 0x1566050
	public void updateBuffIconSelf() { }

	// RVA: 0x1564FEC Offset: 0x1564FEC VA: 0x1564FEC
	public void updateBuffIcon(BattleBuffData buffData) { }

	// RVA: 0x15663E4 Offset: 0x15663E4 VA: 0x15663E4
	public void onClickEnemyTarget() { }

	// RVA: 0x1566510 Offset: 0x1566510 VA: 0x1566510
	public void onLongPressEnemyTarget() { }

	// RVA: 0x1561C4C Offset: 0x1561C4C VA: 0x1561C4C
	public void setTargetMark(int uniqueId, bool isTargetLock = False) { }

	// RVA: 0x156656C Offset: 0x156656C VA: 0x156656C
	public void playShiftEffectBefore() { }

	// RVA: 0x1566618 Offset: 0x1566618 VA: 0x1566618
	public void playShiftEffect() { }

	// RVA: 0x15666C4 Offset: 0x15666C4 VA: 0x15666C4
	public void PlayShiftEffectGeneral(int index, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1566780 Offset: 0x1566780 VA: 0x1566780
	public void PlayUpShiftEffect(int index, float delayTime, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1566924 Offset: 0x1566924 VA: 0x1566924
	public void PlayDownShiftEffect(int index, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1566A08 Offset: 0x1566A08 VA: 0x1566A08
	public void UpdateShiftChange(int curGaugeIndex) { }

	// RVA: 0x1566ABC Offset: 0x1566ABC VA: 0x1566ABC
	public void InitNextTdGauge() { }

	// RVA: 0x1566BC4 Offset: 0x1566BC4 VA: 0x1566BC4
	public void UpdateShiftGaugeChangeHp(int fromHp, int toHp, int maxHp, float time, BasePlayShiftGauge playShiftGauge) { }

	// RVA: 0x1566F0C Offset: 0x1566F0C VA: 0x1566F0C
	private void OnUpdateShiftGaugeChangeHp(int nowHp) { }

	// RVA: 0x156700C Offset: 0x156700C VA: 0x156700C
	private void OnCompleteShiftGaugeChangeHp(BasePlayShiftGauge playShiftGauge) { }

	// RVA: 0x1567048 Offset: 0x1567048 VA: 0x1567048
	public void shiftUpdateStatus() { }

	// RVA: 0x156764C Offset: 0x156764C VA: 0x156764C
	public void changeUpdateStatus() { }

	// RVA: 0x15676D8 Offset: 0x15676D8 VA: 0x15676D8
	public void updateShiftHplabel(int nowHp) { }

	// RVA: 0x156772C Offset: 0x156772C VA: 0x156772C
	public void playAddition() { }

	// RVA: 0x15677CC Offset: 0x15677CC VA: 0x15677CC
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE688 Offset: 0xCCE688 VA: 0xCCE688
	// RVA: 0x1567874 Offset: 0x1567874 VA: 0x1567874
	private IEnumerator showSideEffectList() { }

	// RVA: 0x15678EC Offset: 0x15678EC VA: 0x15678EC
	private void popBuffLabel(BattleActionData.BuffData buffData) { }

	// RVA: 0x15682D0 Offset: 0x15682D0 VA: 0x15682D0
	public void clearBuffIconList() { }

	// RVA: 0x15668F8 Offset: 0x15668F8 VA: 0x15668F8
	public void DelayCoroutine(float waitTime, BattleCallBackBase callBack) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE698 Offset: 0xCCE698 VA: 0xCCE698
	// RVA: 0x1568370 Offset: 0x1568370 VA: 0x1568370
	private IEnumerator DelayMethod(float waitTime, BattleCallBackBase callBack) { }

	// RVA: 0x1564BAC Offset: 0x1564BAC VA: 0x1564BAC
	private void UpdateStatusFace() { }

	// RVA: 0x1564CB4 Offset: 0x1564CB4 VA: 0x1564CB4
	private void UpdateNameLabel() { }

	// RVA: 0x1564D7C Offset: 0x1564D7C VA: 0x1564D7C
	private void UpdateShortNameLabel() { }

	// RVA: 0x156840C Offset: 0x156840C VA: 0x156840C
	private static void .cctor() { }
}

// Namespace: 
private enum BattleServantParamComponent.WINDOW_MODE // TypeDefIndex: 9334
{
	// Fields
	public int value__; // 0x0
	public const BattleServantParamComponent.WINDOW_MODE NONE = 0;
	public const BattleServantParamComponent.WINDOW_MODE INIT = 1;
	public const BattleServantParamComponent.WINDOW_MODE OPEN = 2;
	public const BattleServantParamComponent.WINDOW_MODE CLOSE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444A4 Offset: 0xC444A4 VA: 0xC444A4
private sealed class BattleServantParamComponent.<coroutineUpdateSkillRankUpEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9335
{
	// Fields
	internal bool <isUpdate>__0; // 0x10
	internal BattleServantSkillIConComponent[] $locvar0; // 0x18
	internal int $locvar1; // 0x20
	internal BattleServantParamComponent $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBD10 Offset: 0xCDBD10 VA: 0xCDBD10
	// RVA: 0x1565CC0 Offset: 0x1565CC0 VA: 0x1565CC0
	public void .ctor() { }

	// RVA: 0x15685D8 Offset: 0x15685D8 VA: 0x15685D8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD20 Offset: 0xCDBD20 VA: 0xCDBD20
	// RVA: 0x1568984 Offset: 0x1568984 VA: 0x1568984 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD30 Offset: 0xCDBD30 VA: 0xCDBD30
	// RVA: 0x156898C Offset: 0x156898C VA: 0x156898C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD40 Offset: 0xCDBD40 VA: 0xCDBD40
	// RVA: 0x1568994 Offset: 0x1568994 VA: 0x1568994 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD50 Offset: 0xCDBD50 VA: 0xCDBD50
	// RVA: 0x15689A8 Offset: 0x15689A8 VA: 0x15689A8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444B4 Offset: 0xC444B4 VA: 0xC444B4
private sealed class BattleServantParamComponent.<showSideEffectList>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9336
{
	// Fields
	internal BattleActionData.BuffData <param>__1; // 0x10
	internal BattleServantParamComponent $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBD60 Offset: 0xCDBD60 VA: 0xCDBD60
	// RVA: 0x15678E4 Offset: 0x15678E4 VA: 0x15678E4
	public void .ctor() { }

	// RVA: 0x1568A10 Offset: 0x1568A10 VA: 0x1568A10 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD70 Offset: 0xCDBD70 VA: 0xCDBD70
	// RVA: 0x1568C28 Offset: 0x1568C28 VA: 0x1568C28 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD80 Offset: 0xCDBD80 VA: 0xCDBD80
	// RVA: 0x1568C30 Offset: 0x1568C30 VA: 0x1568C30 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD90 Offset: 0xCDBD90 VA: 0xCDBD90
	// RVA: 0x1568C38 Offset: 0x1568C38 VA: 0x1568C38 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBDA0 Offset: 0xCDBDA0 VA: 0xCDBDA0
	// RVA: 0x1568C4C Offset: 0x1568C4C VA: 0x1568C4C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444C4 Offset: 0xC444C4 VA: 0xC444C4
private sealed class BattleServantParamComponent.<DelayMethod>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9337
{
	// Fields
	internal float waitTime; // 0x10
	internal BattleCallBackBase callBack; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBDB0 Offset: 0xCDBDB0 VA: 0xCDBDB0
	// RVA: 0x1568404 Offset: 0x1568404 VA: 0x1568404
	public void .ctor() { }

	// RVA: 0x1568460 Offset: 0x1568460 VA: 0x1568460 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBDC0 Offset: 0xCDBDC0 VA: 0xCDBDC0
	// RVA: 0x156854C Offset: 0x156854C VA: 0x156854C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBDD0 Offset: 0xCDBDD0 VA: 0xCDBDD0
	// RVA: 0x1568554 Offset: 0x1568554 VA: 0x1568554 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBDE0 Offset: 0xCDBDE0 VA: 0xCDBDE0
	// RVA: 0x156855C Offset: 0x156855C VA: 0x156855C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBDF0 Offset: 0xCDBDF0 VA: 0xCDBDF0
	// RVA: 0x1568570 Offset: 0x1568570 VA: 0x1568570 Slot: 6
	public void Reset() { }
}

// Namespace: 
public interface IEventMessageRecieve : IEventSystemHandler // TypeDefIndex: 9338
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void updateNp(BattleServantData svtdata, int[] npArray, int index);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void updateBuffIconList(BattleServantData svtdata, bool doAuraUpdate);
}

// Namespace: 
public class BattleServantRaidParamComponent : BattleServantParamComponent // TypeDefIndex: 9339
{
	// Fields
	public BattleHpGaugeBarComponent raidhpGauge; // 0x158
	public UILabel raidhplabel; // 0x160
	public UISprite raidDownNormalSprite; // 0x168
	public UISprite raidDownLastSprite; // 0x170
	public UISprite raidDownEndSprite; // 0x178
	public BattleServantChangeBarComponent changeGauge; // 0x180
	public UILabel stateLabel; // 0x188
	private BattleRaidInfo newinfo; // 0x190
	private BattleRaidInfo previnfo; // 0x198
	private bool flgUpdate; // 0x1A0
	private int hpBarType; // 0x1A4
	private bool isDefeatCount; // 0x1A8
	private bool isJumbleRaid; // 0x1A9
	private string hpformat; // 0x1B0

	// Properties
	private string RaidHPFormat { get; }

	// Methods

	// RVA: 0x1568CB4 Offset: 0x1568CB4 VA: 0x1568CB4
	public void .ctor() { }

	// RVA: 0x1568D18 Offset: 0x1568D18 VA: 0x1568D18
	private string get_RaidHPFormat() { }

	// RVA: 0x1568EA0 Offset: 0x1568EA0 VA: 0x1568EA0 Slot: 6
	public override void setData(BattleServantData data) { }

	// RVA: 0x1569544 Offset: 0x1569544 VA: 0x1569544
	public void setTypeDefeatCount(bool flg) { }

	// RVA: 0x1569550 Offset: 0x1569550 VA: 0x1569550
	public void setTypeJumbleRaid(bool flg) { }

	// RVA: 0x156955C Offset: 0x156955C VA: 0x156955C
	public void setSplitHp(long[] split, long maxhp) { }

	// RVA: 0x15695A4 Offset: 0x15695A4 VA: 0x15695A4
	public void updateRaidInfo(BattleRaidInfo info, bool fixUpdate = False) { }

	// RVA: 0x1569638 Offset: 0x1569638 VA: 0x1569638
	public bool checkRaidUpdateHp() { }

	// RVA: 0x1569624 Offset: 0x1569624 VA: 0x1569624
	public void updateRaidHp() { }

	// RVA: 0x1569998 Offset: 0x1569998 VA: 0x1569998 Slot: 8
	public override void changeHp(BattleServantData svtData) { }

	// RVA: 0x1569640 Offset: 0x1569640 VA: 0x1569640
	public void updateRaidHpBase(BattleServantData svtData) { }

	// RVA: 0x1569C10 Offset: 0x1569C10 VA: 0x1569C10
	public void updateRaidHpbar(long now, long max) { }

	// RVA: 0x15699C4 Offset: 0x15699C4 VA: 0x15699C4
	public void setRaidDownMessage() { }

	// RVA: 0x15692D4 Offset: 0x15692D4 VA: 0x15692D4
	public void updateStateString() { }

	// RVA: 0x1569D0C Offset: 0x1569D0C VA: 0x1569D0C
	public long getTurnSituationParam() { }
}

// Namespace: 
public class BattleServantShowBuffComponent : BaseMonoBehaviour // TypeDefIndex: 9340
{
	// Fields
	public GameObject IconClone; // 0x18
	public int maxCount; // 0x20
	public int maxLine; // 0x24
	public Transform listTr; // 0x28
	public Vector2 addPos; // 0x30
	private List<GameObject> objList; // 0x38
	private BattleBuffData.ShowBuffData[] datalist; // 0x40

	// Methods

	// RVA: 0x1569D38 Offset: 0x1569D38 VA: 0x1569D38
	public void .ctor() { }

	// RVA: 0x1566064 Offset: 0x1566064 VA: 0x1566064
	public void setBuffList(BattleBuffData.ShowBuffData[] buffList) { }

	// RVA: 0x1569F5C Offset: 0x1569F5C VA: 0x1569F5C
	private void CreateBuffObj(int index) { }

	// RVA: 0x1569DB0 Offset: 0x1569DB0 VA: 0x1569DB0
	private void HideBuffObject() { }

	// RVA: 0x156A0A4 Offset: 0x156A0A4 VA: 0x156A0A4
	private bool UpdateBuff(int index) { }

	// RVA: 0x156A2A8 Offset: 0x156A2A8 VA: 0x156A2A8
	private void NewBuff(int index) { }

	// RVA: 0x15662E0 Offset: 0x15662E0 VA: 0x15662E0
	public void UpdateActiveBuffList() { }

	// RVA: 0x156A440 Offset: 0x156A440 VA: 0x156A440
	private void UpdatePosition(GameObject obj, int index) { }
}

// Namespace: 
public class BattleServantSkillIConComponent : BaseMonoBehaviour // TypeDefIndex: 9341
{
	// Fields
	public GameObject root; // 0x18
	public GameObject target; // 0x20
	public BattleServantSkillIConComponent.SHOW_TYPE showType; // 0x28
	public UISprite skillIcon; // 0x30
	public UILabel turnNoLabel; // 0x38
	public UISprite turnNoLabelBase; // 0x40
	public GameObject flashIcon; // 0x48
	public UISprite noActSprite; // 0x50
	protected BattleSkillInfoData skillInfo; // 0x58
	private bool flashFlg; // 0x60
	public GameObject rankupRoot; // 0x68
	private CommonEffectComponent rankupEffect; // 0x70
	private UISprite rankupSprite; // 0x78
	public GameObject useCondRoot; // 0x80
	private UISprite useCondItemIcon; // 0x88
	private UILabel useCondItemCountLabel; // 0x90
	private const int USE_COND_ITEM_COUNT_MAX_WIDTH = 32;
	private UIAtlas defaultNoActAtlas; // 0x98
	private bool isNoSkillSprite; // 0xA0
	private bool isTweenReverse; // 0xA1
	private int tweenNoActTurn; // 0xA4
	private int tweenNoSkillTurn; // 0xA8
	public float changeTimeSealSprite; // 0xAC
	private bool isTweenSealSkillSelect; // 0xB0

	// Methods

	// RVA: 0x156A4E8 Offset: 0x156A4E8 VA: 0x156A4E8
	public void .ctor() { }

	// RVA: 0x15659B8 Offset: 0x15659B8 VA: 0x15659B8
	public void setNoSkill(int val = 0) { }

	// RVA: 0x156A500 Offset: 0x156A500 VA: 0x156A500
	public void setCollider(bool flg) { }

	// RVA: 0x15655B0 Offset: 0x15655B0 VA: 0x15655B0
	public void SetSkillInfo(BattleSkillInfoData skillInfo, bool isActSkill = True, int sealSkillTurn = 0, int noActTurn = 0, bool IsSealSkillSelect = False) { }

	// RVA: 0x156A6DC Offset: 0x156A6DC VA: 0x156A6DC
	public void setSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x156B298 Offset: 0x156B298 VA: 0x156B298
	public void setTurnLabel(int turn) { }

	// RVA: 0x156AC18 Offset: 0x156AC18 VA: 0x156AC18
	public void startChangeSealActSprite(int noActTurn, int sealSkillTurn, bool IsSealSkillSelect) { }

	// RVA: 0x156BC14 Offset: 0x156BC14 VA: 0x156BC14
	public void updateSealActSpriteValues(float value) { }

	// RVA: 0x156BE10 Offset: 0x156BE10 VA: 0x156BE10
	public void completeSealActSpriteValues() { }

	// RVA: 0x156AB90 Offset: 0x156AB90 VA: 0x156AB90
	public void stopSealActSprite() { }

	// RVA: 0x15639CC Offset: 0x15639CC VA: 0x15639CC
	public void setflashFlg(bool flg) { }

	// RVA: 0x156A8AC Offset: 0x156A8AC VA: 0x156A8AC
	public void updateFlashSkill() { }

	// RVA: 0x156A988 Offset: 0x156A988 VA: 0x156A988
	public void changeTurnCount(int turn) { }

	// RVA: 0x156BF4C Offset: 0x156BF4C VA: 0x156BF4C Slot: 4
	public virtual void OnLongTapIcon() { }

	// RVA: 0x156C138 Offset: 0x156C138 VA: 0x156C138 Slot: 5
	public virtual void OnClickIcon() { }

	// RVA: 0x156BFD8 Offset: 0x156BFD8 VA: 0x156BFD8
	private void ClickSkillIconFunc(bool isLong) { }

	// RVA: 0x1565B30 Offset: 0x1565B30 VA: 0x1565B30
	public void showChageEffect() { }

	// RVA: 0x15687EC Offset: 0x15687EC VA: 0x15687EC
	public bool UpdateSkillRankUpEffect() { }

	// RVA: 0x1565CC8 Offset: 0x1565CC8 VA: 0x1565CC8
	public void DeleteRankUpEffect() { }

	// RVA: 0x156C1C4 Offset: 0x156C1C4 VA: 0x156C1C4
	public bool PlayRankUpEffect(string resPath, GameObject root, bool isSkip) { }

	// RVA: 0x1565D94 Offset: 0x1565D94 VA: 0x1565D94
	public void RemoveEffectClearRankUpBuff() { }

	// RVA: 0x156C338 Offset: 0x156C338 VA: 0x156C338
	public BattleRankUpSkillInfoData.RankUpState GetRankUpState() { }

	// RVA: 0x156B410 Offset: 0x156B410 VA: 0x156B410
	public void UpdateRankUpEffectState() { }

	// RVA: 0x156B598 Offset: 0x156B598 VA: 0x156B598
	private void SetUseCond() { }
}

// Namespace: 
public enum BattleServantSkillIConComponent.SHOW_TYPE // TypeDefIndex: 9342
{
	// Fields
	public int value__; // 0x0
	public const BattleServantSkillIConComponent.SHOW_TYPE NONE = 0;
	public const BattleServantSkillIConComponent.SHOW_TYPE NOMAL = 1;
	public const BattleServantSkillIConComponent.SHOW_TYPE NOTOUCH = 2;
}

// Namespace: 
public class BattleServantSuperBossParamComponent : BattleServantParamComponent // TypeDefIndex: 9343
{
	// Fields
	public BattleHpGaugeBarComponent superbosshpGauge; // 0x158
	public UILabel superBosshplabel; // 0x160
	public BattleServantChangeBarComponent changeGauge; // 0x168
	public UILabel stateLabel; // 0x170
	private BattleSuperBossInfo newinfo; // 0x178
	private BattleSuperBossInfo previnfo; // 0x180
	private bool flgUpdate; // 0x188
	private string hpformat; // 0x190

	// Properties
	private string SuperBossHPFormat { get; }

	// Methods

	// RVA: 0x156C594 Offset: 0x156C594 VA: 0x156C594
	public void .ctor() { }

	// RVA: 0x156C5F8 Offset: 0x156C5F8 VA: 0x156C5F8
	private string get_SuperBossHPFormat() { }

	// RVA: 0x156C678 Offset: 0x156C678 VA: 0x156C678 Slot: 6
	public override void setData(BattleServantData data) { }

	// RVA: 0x156CAE8 Offset: 0x156CAE8 VA: 0x156CAE8
	public void setSplitHp(long[] split, long maxhp) { }

	// RVA: 0x156CB30 Offset: 0x156CB30 VA: 0x156CB30
	public void updateSuperBossInfo(BattleSuperBossInfo info, bool fixUpdate = False) { }

	// RVA: 0x156CBA8 Offset: 0x156CBA8 VA: 0x156CBA8
	public void updateSuperBossHp() { }

	// RVA: 0x156CF38 Offset: 0x156CF38 VA: 0x156CF38 Slot: 8
	public override void changeHp(BattleServantData svtData) { }

	// RVA: 0x156CCC8 Offset: 0x156CCC8 VA: 0x156CCC8
	public long getNowHp(BattleServantData svtData) { }

	// RVA: 0x156CE3C Offset: 0x156CE3C VA: 0x156CE3C
	public void updateSuperBossHpbar(long now, long max) { }

	// RVA: 0x156CDD8 Offset: 0x156CDD8 VA: 0x156CDD8
	public void setDownMessage() { }

	// RVA: 0x156C898 Offset: 0x156C898 VA: 0x156C898
	public void updateStateString() { }
}

// Namespace: 
public class BattleSkillConfComponent : BattleWindowComponent // TypeDefIndex: 9344
{
	// Fields
	public GameObject target; // 0x48
	public UILabel skillNameLabel; // 0x50
	private ServantSkillStrengthStatus skillStrengthStatus; // 0x58
	public UILabel skillConfLabel; // 0x60
	public UILabel skillChargeLabel; // 0x68
	public BattleServantSkillIConComponent skillIcon; // 0x70
	public GameObject okButton; // 0x78
	public GameObject cancelButton; // 0x80
	public GameObject closeButton; // 0x88
	private bool isPlayedSe; // 0x90
	private BattleSkillInfoData skillInfo; // 0x98
	private bool isPlaySkill; // 0xA0
	public UIScrollView scrollView; // 0xA8
	public GameObject noCondRoot; // 0xB0
	public UILabel useCondSkillConfLabel; // 0xB8
	public UIScrollView useCondScrollView; // 0xC0
	public GameObject useCondRoot; // 0xC8
	public UISprite useCondItemLess; // 0xD0
	public UISprite useCondItemIcon; // 0xD8
	public UILabel useCondItemCount; // 0xE0
	public UISprite useCondItemConsume; // 0xE8
	public UILabel useCondItemConsumeCount; // 0xF0
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DETAIL_LABEL_DEFAULT_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8
	private const int USE_COND_ITEM_COUNT_MAX_WIDTH = 40;
	private BattleData data; // 0xF8

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x156E640 Offset: 0x156E640 VA: 0x156E640
	public void .ctor() { }

	// RVA: 0x156E660 Offset: 0x156E660 VA: 0x156E660
	public void setInit(BattleData data) { }

	// RVA: 0x156E6F8 Offset: 0x156E6F8 VA: 0x156E6F8
	public void SetSkillConf(BattleSkillInfoData skillInfo, bool cancelOk = True, bool isSetMinSize = True) { }

	// RVA: 0x156FCC8 Offset: 0x156FCC8 VA: 0x156FCC8
	public void onClickCancel() { }

	// RVA: 0x156FE30 Offset: 0x156FE30 VA: 0x156FE30
	public void onClickOK() { }

	// RVA: 0x156F5A0 Offset: 0x156F5A0 VA: 0x156F5A0
	private void SetUseCond() { }

	// RVA: 0x1570064 Offset: 0x1570064 VA: 0x1570064
	public void OnClick() { }

	// RVA: 0x1570068 Offset: 0x1570068 VA: 0x1570068
	public void ToEnableLabelCollider() { }

	// RVA: 0x157016C Offset: 0x157016C VA: 0x157016C Slot: 13
	public override void CompClose() { }

	// RVA: 0x1570204 Offset: 0x1570204 VA: 0x1570204 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x157024C Offset: 0x157024C VA: 0x157024C
	private static void .cctor() { }
}

// Namespace: 
public class BattleSyncTransformComponent : MonoBehaviour // TypeDefIndex: 9345
{
	// Fields
	[SerializeField] // RVA: 0xC6687C Offset: 0xC6687C VA: 0xC6687C
	protected BattleSyncTransformComponent.SyncData syncData; // 0x18
	protected Transform targetObj; // 0x20

	// Properties
	public bool IsNotExecSync { get; }

	// Methods

	// RVA: 0x15722D8 Offset: 0x15722D8 VA: 0x15722D8
	public void .ctor() { }

	// RVA: 0x1572348 Offset: 0x1572348 VA: 0x1572348
	public bool get_IsNotExecSync() { }

	// RVA: 0x157237C Offset: 0x157237C VA: 0x157237C
	public BattleSyncTransformComponent SetTarget(Transform target, BattleSyncTransformComponent syncSetting) { }

	// RVA: 0x15723B8 Offset: 0x15723B8 VA: 0x15723B8
	protected void SyncTarget() { }

	// RVA: 0x15728A8 Offset: 0x15728A8 VA: 0x15728A8
	private void LateUpdate() { }
}

// Namespace: 
public enum BattleSyncTransformComponent.SyncTargetType // TypeDefIndex: 9346
{
	// Fields
	public int value__; // 0x0
	public const BattleSyncTransformComponent.SyncTargetType None = 0;
	public const BattleSyncTransformComponent.SyncTargetType POS = 1;
	public const BattleSyncTransformComponent.SyncTargetType ROTATION = 2;
	public const BattleSyncTransformComponent.SyncTargetType POS_ROTATION = 3;
	public const BattleSyncTransformComponent.SyncTargetType SCALE = 4;
	public const BattleSyncTransformComponent.SyncTargetType POS_SCALE = 5;
	public const BattleSyncTransformComponent.SyncTargetType ROTATION_SCALE = 6;
	public const BattleSyncTransformComponent.SyncTargetType ALL = 7;
}

// Namespace: 
public enum BattleSyncTransformComponent.SyncParamType // TypeDefIndex: 9347
{
	// Fields
	public int value__; // 0x0
	public const BattleSyncTransformComponent.SyncParamType POSITION = 1;
	public const BattleSyncTransformComponent.SyncParamType ROTATION = 2;
	public const BattleSyncTransformComponent.SyncParamType SCALE = 4;
}

// Namespace: 
[Serializable]
public class BattleSyncTransformComponent.SyncData // TypeDefIndex: 9348
{
	// Fields
	public BattleSyncTransformComponent.SyncTargetType syncType; // 0x10
	public Vector3 positionDiff; // 0x14
	public Vector3 rotationDiff; // 0x20
	public Vector3 scaleDiff; // 0x2C

	// Methods

	// RVA: 0x1572340 Offset: 0x1572340 VA: 0x1572340
	public void .ctor() { }

	// RVA: 0x1572640 Offset: 0x1572640 VA: 0x1572640
	public bool IsSyncParam(BattleSyncTransformComponent.SyncParamType paramType) { }

	// RVA: 0x1572650 Offset: 0x1572650 VA: 0x1572650
	public Vector3 GetFixPosition(Vector3 position) { }

	// RVA: 0x15726F8 Offset: 0x15726F8 VA: 0x15726F8
	public Quaternion GetFixRotation(Quaternion rotation) { }

	// RVA: 0x1572800 Offset: 0x1572800 VA: 0x1572800
	public Vector3 GetFixScale(Vector3 scale) { }
}

// Namespace: 
public class BattleTDConfWIndowComponent : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9349
{
	// Fields
	public UILabel nameLabel; // 0x50
	public UILabel rubyLabel; // 0x58
	public UILabel lvLabel; // 0x60
	public UILabel maxParLbal; // 0x68
	public UILabel confLabel; // 0x70
	public UIScrollView scrollView; // 0x78
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DEFAULT_LABEL_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x15728AC Offset: 0x15728AC VA: 0x15728AC
	public void .ctor() { }

	// RVA: 0x15728CC Offset: 0x15728CC VA: 0x15728CC
	public void setData(int tdId, int lv, string overwriteTDName, string overwriteTDRuby) { }

	// RVA: 0x1572CB8 Offset: 0x1572CB8 VA: 0x1572CB8 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x1572D00 Offset: 0x1572D00 VA: 0x1572D00
	private static void .cctor() { }
}

// Namespace: 
public class BattleValueButtonComponent : MonoBehaviour // TypeDefIndex: 9350
{
	// Fields
	public GameObject target; // 0x18
	public string sendmessage; // 0x20
	public int val; // 0x28

	// Methods

	// RVA: 0x1574588 Offset: 0x1574588 VA: 0x1574588
	public void .ctor() { }

	// RVA: 0x1574590 Offset: 0x1574590 VA: 0x1574590
	public void OnClickTarget() { }
}

// Namespace: 
public class BattleViewBufflistComponent : BaseMonoBehaviour // TypeDefIndex: 9351
{
	// Fields
	public Transform listRoot; // 0x18
	public GameObject barObject; // 0x20
	public GameObject prefabBuffObject; // 0x28
	public UILabel nothingLabel; // 0x30
	[SerializeField] // RVA: 0xC6688C Offset: 0xC6688C VA: 0xC6688C
	private BattleViewBufflistComponent.NameInfo nameInfo; // 0x38
	public float height; // 0x48
	public UIScrollView uiScrollView; // 0x50
	private List<GameObject> objList; // 0x58

	// Methods

	// RVA: 0x1574654 Offset: 0x1574654 VA: 0x1574654
	public void .ctor() { }

	// RVA: 0x15746CC Offset: 0x15746CC VA: 0x15746CC
	public void setBuffList(BattleBuffData.ShowBuffData[] buffList) { }

	// RVA: 0x1574AE4 Offset: 0x1574AE4 VA: 0x1574AE4
	public void setHide() { }

	// RVA: 0x1574B54 Offset: 0x1574B54 VA: 0x1574B54
	public void setShow() { }

	// RVA: 0x1574BE0 Offset: 0x1574BE0 VA: 0x1574BE0
	public void setClassIcon(BattleServantData data) { }
}

// Namespace: 
[Serializable]
public struct BattleViewBufflistComponent.NameInfo // TypeDefIndex: 9352
{
	// Fields
	public UILabel nameLabel; // 0x0
	public ServantClassIconComponent servantClassIconComponent; // 0x8
}

// Namespace: 
public class BattleViewItemlistComponent : BaseMonoBehaviour // TypeDefIndex: 9353
{
	// Fields
	public Transform listRoot; // 0x18
	public GameObject prefabResultItem; // 0x20
	public UILabel notgetLabel; // 0x28
	public string noItemLabelKey; // 0x30
	public float width; // 0x38
	public float height; // 0x3C
	public UISprite TitleSpr; // 0x40
	public UIPanel ScrollViewPanel; // 0x48
	public UIScrollBar ScrollBar; // 0x50
	public UISprite rewardSpr; // 0x58
	private int colmax; // 0x60
	private int boostEventItemManaCount; // 0x64
	protected static readonly int defaultColumnMax; // 0x0
	private List<GameObject> itemObjectList; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC6689C Offset: 0xC6689C VA: 0xC6689C
	[DebuggerBrowsableAttribute] // RVA: 0xC6689C Offset: 0xC6689C VA: 0xC6689C
	private QuestRewardInfo[] <rewardInfos>k__BackingField; // 0x70

	// Properties
	public QuestRewardInfo[] rewardInfos { get; set; }

	// Methods

	// RVA: 0x1574D24 Offset: 0x1574D24 VA: 0x1574D24
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE6A8 Offset: 0xCCE6A8 VA: 0xCCE6A8
	// RVA: 0x1574DB4 Offset: 0x1574DB4 VA: 0x1574DB4
	public QuestRewardInfo[] get_rewardInfos() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE6B8 Offset: 0xCCE6B8 VA: 0xCCE6B8
	// RVA: 0x1574DBC Offset: 0x1574DBC VA: 0x1574DBC
	private void set_rewardInfos(QuestRewardInfo[] value) { }

	// RVA: 0x1574DC4 Offset: 0x1574DC4 VA: 0x1574DC4
	public void setListDataCustomColumn(BattleDropItem[] itemlist, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x157550C Offset: 0x157550C VA: 0x157550C
	public void setEventResultCount(int boostEventItemManaCount, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x1575518 Offset: 0x1575518 VA: 0x1575518
	public void setListDataCustomColumn(BattleDropItem[] itemlist, int eventId, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x1574E74 Offset: 0x1574E74 VA: 0x1574E74
	private void setListData(BattleDropItem[] itemlist, int eventId, BattleViewItemlistComponent.BattleDropItemComponentSetAction setAction, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x15759CC Offset: 0x15759CC VA: 0x15759CC
	private void SetBattleDropItemComponent(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId = -1) { }

	// RVA: 0x1575A3C Offset: 0x1575A3C VA: 0x1575A3C
	private void SetBattleDropItemComponentEx(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId) { }

	// RVA: 0x1575AC0 Offset: 0x1575AC0 VA: 0x1575AC0
	private int CalcPossessionNum(BattleDropItem battleDropItem, int eventId) { }

	// RVA: 0x1575C5C Offset: 0x1575C5C VA: 0x1575C5C
	public int compareItemId(long userId, BattleDropItem battleDropItem) { }

	// RVA: 0x1575D14 Offset: 0x1575D14 VA: 0x1575D14
	public int getUserItemNum(long userId, BattleDropItem battleDropItem, int questClearItemSubtraction = 0) { }

	// RVA: 0x1575E64 Offset: 0x1575E64 VA: 0x1575E64
	public void setHide() { }

	// RVA: 0x1575F1C Offset: 0x1575F1C VA: 0x1575F1C
	public void setShow() { }

	// RVA: 0x1575FD4 Offset: 0x1575FD4 VA: 0x1575FD4
	public void ClearObj() { }

	// RVA: 0x15760D4 Offset: 0x15760D4 VA: 0x15760D4
	public void SwitchShowNumMode(bool isShowPossessionNum) { }

	// RVA: 0x15761E0 Offset: 0x15761E0 VA: 0x15761E0
	public void DefaultLayoutScrollView() { }

	// RVA: 0x157679C Offset: 0x157679C VA: 0x157679C
	public void ChangeLayoutScrollView() { }

	// RVA: 0x1576D5C Offset: 0x1576D5C VA: 0x1576D5C
	private static void .cctor() { }
}

// Namespace: 
private sealed class BattleViewItemlistComponent.BattleDropItemComponentSetAction : MulticastDelegate // TypeDefIndex: 9354
{
	// Methods

	// RVA: 0x1574E64 Offset: 0x1574E64 VA: 0x1574E64
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15755BC Offset: 0x15755BC VA: 0x15755BC Slot: 11
	public virtual void Invoke(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId) { }

	// RVA: 0x1576DB0 Offset: 0x1576DB0 VA: 0x1576DB0 Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId, AsyncCallback _callback, object object) { }

	// RVA: 0x1576E60 Offset: 0x1576E60 VA: 0x1576E60 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleWindowOuterClickComponent : BaseMonoBehaviour // TypeDefIndex: 9355
{
	// Fields
	protected BattleWindowOuterClickComponent.OuterClickCall clickCallBack; // 0x18

	// Methods

	// RVA: 0x1578488 Offset: 0x1578488 VA: 0x1578488
	public void .ctor() { }

	// RVA: 0x1578490 Offset: 0x1578490 VA: 0x1578490
	public void setClickCallBack(BattleWindowOuterClickComponent.OuterClickCall call) { }

	// RVA: 0x1578498 Offset: 0x1578498 VA: 0x1578498
	public void OnClick() { }
}

// Namespace: 
