	public void OnClick() { }

	// RVA: 0x1B6A070 Offset: 0x1B6A070 VA: 0x1B6A070 Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x1B6A230 Offset: 0x1B6A230 VA: 0x1B6A230 Slot: 5
	protected override void set_closeBtnObject(GameObject value) { }

	// RVA: 0x1B6A238 Offset: 0x1B6A238 VA: 0x1B6A238
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC9C Offset: 0xD3BC9C VA: 0xD3BC9C
	// RVA: 0x1B6A28C Offset: 0x1B6A28C VA: 0x1B6A28C
	private static int <InitializeCommandSpell>m__0(CommandSpellEntity a, CommandSpellEntity b) { }
}

// Namespace: 
public enum CommandSpellWindowComponent.MODE // TypeDefIndex: 9334
{
	// Fields
	public int value__; // 0x0
	public const CommandSpellWindowComponent.MODE NO_BATTLE = 0;
	public const CommandSpellWindowComponent.MODE BATTLE = 1;
}

// Namespace: 
public sealed class CommandSpellWindowComponent.CloseButtonCallBack : MulticastDelegate // TypeDefIndex: 9335
{
	// Methods

	// RVA: 0x1B6A2D0 Offset: 0x1B6A2D0 VA: 0x1B6A2D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B68F20 Offset: 0x1B68F20 VA: 0x1B68F20 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1B6A2E0 Offset: 0x1B6A2E0 VA: 0x1B6A2E0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1B6A314 Offset: 0x1B6A314 VA: 0x1B6A314 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class CommandSpellWindowComponent.UseCommandSpellCallBack : MulticastDelegate // TypeDefIndex: 9336
{
	// Methods

	// RVA: 0x1B6A320 Offset: 0x1B6A320 VA: 0x1B6A320
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B69D94 Offset: 0x1B69D94 VA: 0x1B69D94 Slot: 11
	public virtual void Invoke(int commandSpellId) { }

	// RVA: 0x1B6A330 Offset: 0x1B6A330 VA: 0x1B6A330 Slot: 12
	public virtual IAsyncResult BeginInvoke(int commandSpellId, AsyncCallback callback, object object) { }

	// RVA: 0x1B6A3BC Offset: 0x1B6A3BC VA: 0x1B6A3BC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class FieldMotionManager // TypeDefIndex: 9337
{
	// Fields
	private BattleFieldMotionComponent[] fieldMotionArray; // 0x10
	private const int UNIQUE_MOTION_IDX = 1;
	private BattleFieldMotionComponent defUniqueFieldMotion; // 0x18
	private BattleFieldMotionComponent[] retentionFieldMotionArray; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD35E0 Offset: 0xCD35E0 VA: 0xCD35E0
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD35F0 Offset: 0xCD35F0 VA: 0xCD35F0
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD3600 Offset: 0xCD3600 VA: 0xCD3600
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD3610 Offset: 0xCD3610 VA: 0xCD3610
	private static Func<BattleFieldMotionComponent, Transform> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD3620 Offset: 0xCD3620 VA: 0xCD3620
	private static Func<BattleFieldMotionComponent, Transform> <>f__am$cache4; // 0x20

	// Methods

	// RVA: 0x18FC10C Offset: 0x18FC10C VA: 0x18FC10C
	public void .ctor(BattleFieldMotionComponent[] fieldMotions, BattlePerformance perf) { }

	// RVA: 0x18FC280 Offset: 0x18FC280 VA: 0x18FC280
	public BattleFieldMotionComponent[] GetFieldMotionArray() { }

	// RVA: 0x18FC288 Offset: 0x18FC288 VA: 0x18FC288
	public void SwitchUniqueFieldMotion(bool isDisable) { }

	// RVA: 0x18FC3F4 Offset: 0x18FC3F4 VA: 0x18FC3F4
	public bool IsStep() { }

	// RVA: -1 Offset: -1
	public void SetVariables<T>(string variableName, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CFCAC Offset: 0x21CFCAC VA: 0x21CFCAC
	|-FieldMotionManager.SetVariables<bool>
	|
	|-RVA: 0x21D0268 Offset: 0x21D0268 VA: 0x21D0268
	|-FieldMotionManager.SetVariables<int>
	|
	|-RVA: 0x21D0820 Offset: 0x21D0820 VA: 0x21D0820
	|-FieldMotionManager.SetVariables<object>
	|-FieldMotionManager.SetVariables<string>
	|-FieldMotionManager.SetVariables<GameObject>
	*/

	// RVA: 0x18FC530 Offset: 0x18FC530 VA: 0x18FC530
	public void SetTacticBg(bool flg) { }

	// RVA: 0x18FC668 Offset: 0x18FC668 VA: 0x18FC668
	public GameObject GetPlayerStage() { }

	// RVA: 0x18FC774 Offset: 0x18FC774 VA: 0x18FC774
	public GameObject GetEnemyStage() { }

	// RVA: 0x18FC880 Offset: 0x18FC880 VA: 0x18FC880
	public GameObject GetGameObject(string name) { }

	// RVA: 0x18FC98C Offset: 0x18FC98C VA: 0x18FC98C
	public Transform GetTransform(FieldMotionManager.GET_TYPE type, int index = -1) { }

	// RVA: 0x18FCBB8 Offset: 0x18FCBB8 VA: 0x18FCBB8
	public Transform GetTargetTransform(FieldMotionManager.GET_TYPE type, int index = -1) { }

	// RVA: 0x18FCCE0 Offset: 0x18FCCE0 VA: 0x18FCCE0
	public void PlayBattleAction(BattleActionData nowAction) { }

	// RVA: 0x18FCF08 Offset: 0x18FCF08 VA: 0x18FCF08
	public void SendEvent(string str) { }

	// RVA: 0x18FD0A0 Offset: 0x18FD0A0 VA: 0x18FD0A0
	public void SendEvent2ActiveFM(string str) { }

	// RVA: 0x18FD234 Offset: 0x18FD234 VA: 0x18FD234
	public void SetActiveMotion(BattleActionData nowAction, bool active) { }

	// RVA: -1 Offset: -1
	private T FindLastNotNullObject<T>(Func<BattleFieldMotionComponent, T> getObjectFunc) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218DED4 Offset: 0x218DED4 VA: 0x218DED4
	|-FieldMotionManager.FindLastNotNullObject<object>
	|-FieldMotionManager.FindLastNotNullObject<GameObject>
	|-FieldMotionManager.FindLastNotNullObject<Transform>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xD3BCAC Offset: 0xD3BCAC VA: 0xD3BCAC
	// RVA: 0x18FD3F0 Offset: 0x18FD3F0 VA: 0x18FD3F0
	private static GameObject <SetTacticBg>m__0(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BCBC Offset: 0xD3BCBC VA: 0xD3BCBC
	// RVA: 0x18FD418 Offset: 0x18FD418 VA: 0x18FD418
	private static GameObject <GetPlayerStage>m__1(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BCCC Offset: 0xD3BCCC VA: 0xD3BCCC
	// RVA: 0x18FD440 Offset: 0x18FD440 VA: 0x18FD440
	private static GameObject <GetEnemyStage>m__2(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BCDC Offset: 0xD3BCDC VA: 0xD3BCDC
	// RVA: 0x18FD468 Offset: 0x18FD468 VA: 0x18FD468
	private static Transform <GetTransform>m__3(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BCEC Offset: 0xD3BCEC VA: 0xD3BCEC
	// RVA: 0x18FD494 Offset: 0x18FD494 VA: 0x18FD494
	private static Transform <GetTransform>m__4(BattleFieldMotionComponent comp) { }
}

// Namespace: 
public enum FieldMotionManager.GET_TYPE // TypeDefIndex: 9338
{
	// Fields
	public int value__; // 0x0
	public const FieldMotionManager.GET_TYPE ENEMY_POP_POINT = 0;
	public const FieldMotionManager.GET_TYPE POP_ENEMY = 1;
	public const FieldMotionManager.GET_TYPE PLAYER_POP_POINT = 2;
	public const FieldMotionManager.GET_TYPE POP_PLAYER = 3;
	public const FieldMotionManager.GET_TYPE PLAYER_TACTICAL = 4;
	public const FieldMotionManager.GET_TYPE ENEMY_TACTOCAL = 5;
	public const FieldMotionManager.GET_TYPE NPC_BATTLE = 6;
	public const FieldMotionManager.GET_TYPE NPC_TACTICAL = 7;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0570 Offset: 0xCB0570 VA: 0xCB0570
private sealed class FieldMotionManager.<GetGameObject>c__AnonStorey0 // TypeDefIndex: 9339
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0x18FC984 Offset: 0x18FC984 VA: 0x18FC984
	public void .ctor() { }

	// RVA: 0x18FD4C0 Offset: 0x18FD4C0 VA: 0x18FD4C0
	internal GameObject <>m__0(BattleFieldMotionComponent comp) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0580 Offset: 0xCB0580 VA: 0xCB0580
private sealed class FieldMotionManager.<GetTransform>c__AnonStorey1 // TypeDefIndex: 9340
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x18FCBB0 Offset: 0x18FCBB0 VA: 0x18FCBB0
	public void .ctor() { }

	// RVA: 0x18FD53C Offset: 0x18FD53C VA: 0x18FD53C
	internal Transform <>m__0(BattleFieldMotionComponent comp) { }

	// RVA: 0x18FD574 Offset: 0x18FD574 VA: 0x18FD574
	internal Transform <>m__1(BattleFieldMotionComponent comp) { }

	// RVA: 0x18FD5AC Offset: 0x18FD5AC VA: 0x18FD5AC
	internal Transform <>m__2(BattleFieldMotionComponent comp) { }

	// RVA: 0x18FD5E4 Offset: 0x18FD5E4 VA: 0x18FD5E4
	internal Transform <>m__3(BattleFieldMotionComponent comp) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0590 Offset: 0xCB0590 VA: 0xCB0590
private sealed class FieldMotionManager.<GetTargetTransform>c__AnonStorey2 // TypeDefIndex: 9341
{
	// Fields
	internal FieldMotionManager.GET_TYPE type; // 0x10
	internal int index; // 0x14

	// Methods

	// RVA: 0x18FCCD8 Offset: 0x18FCCD8 VA: 0x18FCCD8
	public void .ctor() { }

	// RVA: 0x18FD4F8 Offset: 0x18FD4F8 VA: 0x18FD4F8
	internal Transform <>m__0(BattleFieldMotionComponent comp) { }
}

// Namespace: 
public class TrackingMoveCtCComponent : MonoBehaviour // TypeDefIndex: 9342
{
	// Fields
	public Camera before; // 0x18
	public Camera after; // 0x20
	public GameObject targetObject; // 0x28
	public Vector3 addpos; // 0x30
	private bool updateFlg; // 0x3C

	// Methods

	// RVA: 0x1E071DC Offset: 0x1E071DC VA: 0x1E071DC
	public void .ctor() { }

	// RVA: 0x1E07254 Offset: 0x1E07254 VA: 0x1E07254
	public void Set(Camera a, Camera b, GameObject c, Vector3 d) { }

	// RVA: 0x1E07268 Offset: 0x1E07268 VA: 0x1E07268
	public void startAct() { }

	// RVA: 0x1E074A4 Offset: 0x1E074A4 VA: 0x1E074A4
	public void stopAct() { }

	// RVA: 0x1E074AC Offset: 0x1E074AC VA: 0x1E074AC
	private void Update() { }

	// RVA: 0x1E07274 Offset: 0x1E07274 VA: 0x1E07274
	private void upDatePos() { }
}

// Namespace: 
public class PlayerFieldStatus : BattleFieldStatus // TypeDefIndex: 9343
{
	// Methods

	// RVA: 0x1BD482C Offset: 0x1BD482C VA: 0x1BD482C
	public void .ctor() { }

	// RVA: 0x1BD4834 Offset: 0x1BD4834 VA: 0x1BD4834 Slot: 6
	public override double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkparams) { }
}

// Namespace: 
public class BattleResultBondsComponent : BaseMonoBehaviour // TypeDefIndex: 9344
{
	// Fields
	private static readonly float SVT_GAP_5; // 0x0
	private static readonly float SVT_GAP_6; // 0x4
	private static readonly int CONF_LABEL_MAX_WIDTH; // 0x8
	private static readonly int CONF_SERVANT_COIN_PLUS_HEIGHT; // 0xC
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public BattleResultBondsIconComponent[] collects; // 0x30
	public UserServantCollectionEntity[] oldCollections; // 0x38
	public BattleFriendshipRewardInfo[] rewardInfos; // 0x40
	public GameObject upRoot; // 0x48
	public SimpleAnimation levelUpSimpleAnim; // 0x50
	public Animation levelUpAnim; // 0x58
	public Transform figureRoot; // 0x60
	public GetSvts[] getJoinSvtList; // 0x68
	public BattleWindowComponent confwindow; // 0x70
	public BattleResultMasterUpStatusComponent lvComp; // 0x78
	public UISprite confSprite; // 0x80
	public Transform confRoot; // 0x88
	public List<GameObject> conflist; // 0x90
	public GameObject confPrefab; // 0x98
	public UILabel rankupConfLabel; // 0xA0
	private bool openBoundsFlg; // 0xA8
	private bool updateFlg; // 0xA9
	private SePlayer MeterSePlayer; // 0xB0
	private AssetData resultAssetData; // 0xB8
	private List<UIUnityRenderer> effectUIList; // 0xC0
	private BattleFriendshipRewardInfo[] showList; // 0xC8
	private int showIndex; // 0xD0
	private float tempSaveTimeScale; // 0xD4
	private bool bondsCountUp; // 0xD8
	private int baseFriendshipExp; // 0xDC
	private int colIndex; // 0xE0
	private UIStandFigureR standfigure; // 0xE8
	private BattleResultBondsIconComponent openCollect; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xCD3630 Offset: 0xCD3630 VA: 0xCD3630
	private static Func<BattleResultBondsIconComponent, bool> <>f__am$cache0; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD3640 Offset: 0xCD3640 VA: 0xCD3640
	private static Action <>f__am$cache1; // 0x18

	// Methods

	// RVA: 0x16D0F88 Offset: 0x16D0F88 VA: 0x16D0F88
	public void .ctor() { }

	// RVA: 0x16D1000 Offset: 0x16D1000 VA: 0x16D1000
	public void Init() { }

	// RVA: 0x16D1154 Offset: 0x16D1154 VA: 0x16D1154
	public void setResultData(DeckData myDeck, UserServantCollectionEntity[] oldCollects, BattleFriendshipRewardInfo[] inRewardInfos, int followerType, AssetData resultAsset, BattleUserServantData[] usrSvts, int baseFriendshipExp, GetSvts[] getJoinSvts) { }

	// RVA: 0x16D1AC8 Offset: 0x16D1AC8 VA: 0x16D1AC8
	public long getUsetSvtId(DeckData deck, int index) { }

	// RVA: 0x16D1A30 Offset: 0x16D1A30 VA: 0x16D1A30
	public UserServantCollectionEntity getServantCollection(UserServantCollectionEntity[] collects, int svtId) { }

	// RVA: 0x16D1B7C Offset: 0x16D1B7C VA: 0x16D1B7C
	public void Open() { }

	// RVA: 0x16D1D50 Offset: 0x16D1D50 VA: 0x16D1D50
	public void OpenEnd() { }

	// RVA: 0x16D21FC Offset: 0x16D21FC VA: 0x16D21FC
	public void finishUpdateValue() { }

	// RVA: 0x16D2394 Offset: 0x16D2394 VA: 0x16D2394
	public void UpdateValue(float val) { }

	// RVA: 0x16D2440 Offset: 0x16D2440 VA: 0x16D2440
	public bool isCollectsSvt() { }

	// RVA: 0x16D2474 Offset: 0x16D2474 VA: 0x16D2474
	public void checkBondsUp() { }

	// RVA: 0x16D2E70 Offset: 0x16D2E70 VA: 0x16D2E70
	public void CheckFormalJoin(BattleResultBondsIconComponent collect) { }

	// RVA: 0x16D319C Offset: 0x16D319C VA: 0x16D319C
	public void addConfObject(string text, float posY, int iconImageId = -1, bool isCoin = False, bool isSaintGraph = False) { }

	// RVA: 0x16D35B4 Offset: 0x16D35B4 VA: 0x16D35B4
	private void CreateRewardEffect(AssetData data, UISprite targetIcon, string effectName) { }

	// RVA: 0x16D3868 Offset: 0x16D3868 VA: 0x16D3868
	public void endMoveFigure() { }

	// RVA: 0x16D4410 Offset: 0x16D4410 VA: 0x16D4410
	public void openedBondUp() { }

	// RVA: 0x16D44A0 Offset: 0x16D44A0 VA: 0x16D44A0
	public void checkShow() { }

	// RVA: 0x16D466C Offset: 0x16D466C VA: 0x16D466C
	public void closeBondUp() { }

	// RVA: 0x16D484C Offset: 0x16D484C VA: 0x16D484C
	public void endCloseBondUp() { }

	// RVA: 0x16D48B0 Offset: 0x16D48B0 VA: 0x16D48B0
	public void Close() { }

	// RVA: 0x16D4944 Offset: 0x16D4944 VA: 0x16D4944
	public void endClose() { }

	// RVA: 0x16D4A84 Offset: 0x16D4A84 VA: 0x16D4A84
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BCFC Offset: 0xD3BCFC VA: 0xD3BCFC
	// RVA: 0x16D4B04 Offset: 0x16D4B04 VA: 0x16D4B04
	private static bool <Open>m__0(BattleResultBondsIconComponent col) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BD0C Offset: 0xD3BD0C VA: 0xD3BD0C
	// RVA: 0x16D4B30 Offset: 0x16D4B30 VA: 0x16D4B30
	private static void <CheckFormalJoin>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BD1C Offset: 0xD3BD1C VA: 0xD3BD1C
	// RVA: 0x16D4B34 Offset: 0x16D4B34 VA: 0x16D4B34
	private void <checkShow>m__2() { }
}

// Namespace: 
public class BattleResultBondsIconComponent : MonoBehaviour // TypeDefIndex: 9345
{
	// Fields
	public GameObject root; // 0x18
	public GameObject rootNot; // 0x20
	public ServantFaceIconComponent faceIcon; // 0x28
	public FriendshipGaugeSelector gaugeSelector; // 0x30
	public UILabel atlabel; // 0x38
	public UISprite maxSprite; // 0x40
	public GameObject levelUpObject; // 0x48
	public UILabel bonuslabel; // 0x50
	private IFriendshipGauge gaugeComponent; // 0x58
	private bool isUse; // 0x60
	private bool isHeroine; // 0x61
	private long userId; // 0x68
	private int svtId; // 0x70
	private long userSvtId; // 0x78
	private int svtLimit; // 0x80
	private int svtLv; // 0x84
	private int friendshipId; // 0x88
	private int friendship; // 0x8C
	private int friendshipRank; // 0x90
	private int maxLimitCount; // 0x94
	private int nextFriendShipRank; // 0x98
	private int nextFriendship; // 0x9C
	private int baseFriendshipExp; // 0xA0
	private readonly int nosupportFontSize; // 0xA4
	private float friendshipLabelArea; // 0xA8
	private readonly float supportLabelWidth; // 0xAC
	private readonly float nosupportLabelWidth; // 0xB0
	private readonly float parenthesisAjust; // 0xB4
	private readonly float friendshipLabelSpace; // 0xB8
	private bool isMax; // 0xBC
	private int maxFriendShipRank; // 0xC0

	// Methods

	// RVA: 0x16958CC Offset: 0x16958CC VA: 0x16958CC
	public void .ctor() { }

	// RVA: 0x16958F8 Offset: 0x16958F8 VA: 0x16958F8
	public long getUserId() { }

	// RVA: 0x1695900 Offset: 0x1695900 VA: 0x1695900
	public int getSvtId() { }

	// RVA: 0x1695908 Offset: 0x1695908 VA: 0x1695908
	public long getUserSvtId() { }

	// RVA: 0x1695910 Offset: 0x1695910 VA: 0x1695910
	public int getSvtLimitCount() { }

	// RVA: 0x1695918 Offset: 0x1695918 VA: 0x1695918
	public int getLv() { }

	// RVA: 0x1695920 Offset: 0x1695920 VA: 0x1695920
	public int getPrevFriendShipRank() { }

	// RVA: 0x1695928 Offset: 0x1695928 VA: 0x1695928
	public int getNextFriendShipRank() { }

	// RVA: 0x1695930 Offset: 0x1695930 VA: 0x1695930
	public int getMaxLimitCount() { }

	// RVA: 0x1695938 Offset: 0x1695938 VA: 0x1695938
	public bool IsUse() { }

	// RVA: 0x1695940 Offset: 0x1695940 VA: 0x1695940
	public void setServantData(UserServantCollectionEntity userSvtCol, UserServantEntity userSvtEnt, int iconLimitCnt, int baseFriendshipExp, bool isNoFollower, int afterLimitCnt) { }

	// RVA: 0x1695E64 Offset: 0x1695E64 VA: 0x1695E64
	public bool setNextServantData(UserServantCollectionEntity userSvtCol) { }

	// RVA: 0x1696080 Offset: 0x1696080 VA: 0x1696080
	public void setHeroine() { }

	// RVA: 0x169608C Offset: 0x169608C VA: 0x169608C
	public bool changeGauge(float val) { }

	// RVA: 0x16964E4 Offset: 0x16964E4 VA: 0x16964E4
	public bool isChangeRank() { }

	// RVA: 0x1696508 Offset: 0x1696508 VA: 0x1696508
	private int CalcBonusExp() { }

	// RVA: 0x169651C Offset: 0x169651C VA: 0x169651C
	public void LayoutFriendshipValue() { }

	// RVA: 0x1696AE4 Offset: 0x1696AE4 VA: 0x1696AE4
	public void ClearFaceAtlas() { }
}

// Namespace: 
public class BattleResultComponent : BaseMonoBehaviour // TypeDefIndex: 9346
{
	// Fields
	public GameObject endtargetObject; // 0x18
	public PlayMakerFSM fsm; // 0x20
	public GameObject obj_basebg; // 0x28
	public GameObject obj_fronttouch; // 0x30
	public BattleResultBondsComponent bondsResult; // 0x38
	public BattleResultExpComponent expResult; // 0x40
	public BattleResultItemComponent itemResult; // 0x48
	public BattleResultFriendComponent friendResult; // 0x50
	public BattleResultEventItemComponent eventItemResult; // 0x58
	public BattleResultEventDamageItemComponent eventDamageItemResult; // 0x60
	public GameObject FriendIconPrefab; // 0x68
	public UISprite resultSprite; // 0x70
	public BattleRetryConfirmComponent battleRetryConfirmComponent; // 0x78
	private ServantRewardAction ServantRewardActionComp; // 0x80
	private string eventEndTitle; // 0x88
	private string eventEndMessage; // 0x90
	private BattleResultComponent.resultData battleResult; // 0x98
	private BattleEventTutorial eventTutorial; // 0xA0
	private const string FREE_SHOP_ID_KEY = "freeShopIds";
	private const string RETURN_RARE_PRI_SHOP_ID_KEY = "returnRarePriShopIds";
	[CompilerGeneratedAttribute] // RVA: 0xCD3650 Offset: 0xCD3650 VA: 0xCD3650
	private static Converter<int, string> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD3660 Offset: 0xCD3660 VA: 0xCD3660
	private static Converter<int, string> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1696B14 Offset: 0x1696B14 VA: 0x1696B14
	public void .ctor() { }

	// RVA: 0x1696B1C Offset: 0x1696B1C VA: 0x1696B1C
	public BattleResultComponent.resultData getBattleResult() { }

	// RVA: 0x1696B24 Offset: 0x1696B24 VA: 0x1696B24
	public void Init(Action releasePerformanceObject) { }

	// RVA: 0x16979C8 Offset: 0x16979C8 VA: 0x16979C8
	public void StartResult(GameObject target, string endEvent, BattlePerformance perf) { }

	// RVA: 0x1697B38 Offset: 0x1697B38 VA: 0x1697B38
	public void checkStart() { }

	// RVA: 0x1697B9C Offset: 0x1697B9C VA: 0x1697B9C
	public void setTouch(bool flg) { }

	// RVA: 0x1697BD4 Offset: 0x1697BD4 VA: 0x1697BD4
	public void setBg(bool flg) { }

	// RVA: 0x1697C0C Offset: 0x1697C0C VA: 0x1697C0C
	public void Set(string jsonstr, BattleEventTutorial tutorial, AssetData resultAsset, int[] viewGroupIds, BattleData bData) { }

	// RVA: 0x169A964 Offset: 0x169A964 VA: 0x169A964
	public void OpenTutorial() { }

	// RVA: 0x169AB8C Offset: 0x169AB8C VA: 0x169AB8C
	public void OpenBonds() { }

	// RVA: 0x169ABE8 Offset: 0x169ABE8 VA: 0x169ABE8
	public void OpenExp() { }

	// RVA: 0x169B20C Offset: 0x169B20C VA: 0x169B20C
	public void OpenItems() { }

	// RVA: 0x169B4B8 Offset: 0x169B4B8 VA: 0x169B4B8
	public void endCloseEndEventMessage(bool flg) { }

	// RVA: 0x169B518 Offset: 0x169B518 VA: 0x169B518
	public void OpenFriend() { }

	// RVA: 0x169B82C Offset: 0x169B82C VA: 0x169B82C
	public void OpenEventItems() { }

	// RVA: 0x169BBD4 Offset: 0x169BBD4 VA: 0x169BBD4
	public void CheckRestItem() { }

	// RVA: 0x169BC68 Offset: 0x169BC68 VA: 0x169BC68
	public void OpenEventDamageItems() { }

	// RVA: 0x169BE28 Offset: 0x169BE28 VA: 0x169BE28
	public void checkNew(int resultType) { }

	// RVA: 0x169C20C Offset: 0x169C20C VA: 0x169C20C
	public void endNewView() { }

	// RVA: 0x169C270 Offset: 0x169C270 VA: 0x169C270
	public void showServantRewardAction(long userSvtId, Gift.Type type) { }

	// RVA: 0x169C414 Offset: 0x169C414 VA: 0x169C414
	public void openNewServantView(long userSvtId, bool isNew, bool isDoEffect, Action action) { }

	// RVA: 0x169C76C Offset: 0x169C76C VA: 0x169C76C
	public void openNewCommandCodeView(long userCommandCodeId, Action action) { }

	// RVA: 0x169C8D8 Offset: 0x169C8D8 VA: 0x169C8D8
	public void openTouchWait() { }

	// RVA: 0x169C8E0 Offset: 0x169C8E0 VA: 0x169C8E0
	public void EndResult() { }

	// RVA: 0x169CB2C Offset: 0x169CB2C VA: 0x169CB2C
	public void OpenRetryQuest() { }

	// RVA: 0x169E2CC Offset: 0x169E2CC VA: 0x169E2CC
	public void EndRetryConfirmDialog(bool isDecide, int boostId = 0) { }

	// RVA: 0x169E368 Offset: 0x169E368 VA: 0x169E368
	public void OpenFollowerSceneForRetry(int boostId = 0) { }

	// RVA: 0x169E6A0 Offset: 0x169E6A0 VA: 0x169E6A0
	public void PushFollowerScene(int boostId = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BD2C Offset: 0xD3BD2C VA: 0xD3BD2C
	// RVA: 0x169E834 Offset: 0x169E834 VA: 0x169E834
	private static string <Set>m__0(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BD3C Offset: 0xD3BD3C VA: 0xD3BD3C
	// RVA: 0x169E85C Offset: 0x169E85C VA: 0x169E85C
	private static string <Set>m__1(int x) { }
}

// Namespace: 
public class BattleResultComponent.resultData // TypeDefIndex: 9347
{
	// Fields
	public int battleId; // 0x10
	public int eventId; // 0x14
	public string eventEndTitle; // 0x18
	public string eventEndMessage; // 0x20
	public int phaseClearQp; // 0x28
	public int originalPhaseClearQp; // 0x2C
	public int firstClearRewardQp; // 0x30
	public int panelEventPoint; // 0x34
	public DeckData myDeck; // 0x38
	public UserServantEntity[] oldUserSvt; // 0x40
	public UserEquipEntity[] oldUserEquip; // 0x48
	public UserEventEntity[] oldUserEvent; // 0x50
	public UserGameEntity[] oldUserGame; // 0x58
	public UserQuestEntity[] oldUserQuest; // 0x60
	public UserEventPointEntity[] oldUserEventPoint; // 0x68
	public UserServantCollectionEntity[] oldUserSvtCollection; // 0x70
	public QuestRewardInfo[] rewardInfos; // 0x78
	public QuestRewardInfo[] resultQuestPhaseRewardInfos; // 0x80
	public MasterLvRewardInfo[] masterLvRewardInfos; // 0x88
	public BattleDropItem[] resultDropInfos; // 0x90
	public BattleDropItem[] resultEventRewardInfos; // 0x98
	public BattleDropItem[] resultDamageRewardInfos; // 0xA0
	public BattleDropItem[] resultAfterEventRewardInfos; // 0xA8
	public BattleDropItem[] resultEventPanelRewardInfos; // 0xB0
	public EventPointWinReward[] eventPointWinReward; // 0xB8
	public EventRaceBoostInfo raceResult; // 0xC0
	public CostumeReleaseAnnounce[] costumeReleaseAnnounce; // 0xC8
	public CostumeReleaseAnnounce[] costumeGetAnnounce; // 0xD0
	public EventTowerReward[] eventTowerReward; // 0xD8
	public QuestRewardInfo[] resultEventTowerRewardInfos; // 0xE0
	public QuestRewardInfo[] resultBoostItemRewardInfos; // 0xE8
	public QuestRewardInfo[] resultEventBoardGameTokenRewardInfos; // 0xF0
	public WarClearReward[] warClearReward; // 0xF8
	public long followerId; // 0x100
	public int followerType; // 0x108
	public int followerStatus; // 0x10C
	public int followerClassId; // 0x110
	public BattleFriendshipRewardInfo[] friendshipRewardInfos; // 0x118
	public long addDamagePoint; // 0x120
	public int resultDispFlag; // 0x128
	public int[] disableResultDispTypes; // 0x130
	public int battleResult; // 0x138
	public int eventPointBoostRate; // 0x13C
	public DropUpInfo[] dropUpInfos; // 0x140
	public int[] freeShopIds; // 0x148
	public int[] returnRarePriShopIds; // 0x150
	public string tutorialMessage; // 0x158
	public UserSuperBossEntity[] oldUserEventSuperBoss; // 0x160
	public int eventActivityPointAddFlag; // 0x168
	public EventConquestInfo[] eventConquestInfos; // 0x170
	public bool isTrialQuestNewRecord; // 0x178
	public int friendshipExpBase; // 0x17C
	public GetSvts[] getJoinSvts; // 0x180
	public bool isEffectDisappearBanner; // 0x188
	public LimitImageAnnounce[] limitImageAnnounces; // 0x190

	// Methods

	// RVA: 0x169E9F0 Offset: 0x169E9F0 VA: 0x169E9F0
	public void .ctor() { }

	// RVA: 0x1698D20 Offset: 0x1698D20 VA: 0x1698D20
	public bool isWin() { }

	// RVA: 0x169A8A8 Offset: 0x169A8A8 VA: 0x169A8A8
	public bool checkResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x169A898 Offset: 0x169A898 VA: 0x169A898
	public void enableResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x1698D40 Offset: 0x1698D40 VA: 0x1698D40
	public void disableResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x1698D30 Offset: 0x1698D30 VA: 0x1698D30
	public void setDefaultDispFlag() { }

	// RVA: 0x1697B30 Offset: 0x1697B30 VA: 0x1697B30
	public void clearAllDispFlag() { }

	// RVA: 0x169A8B8 Offset: 0x169A8B8 VA: 0x169A8B8
	public bool IsGetJoinSvtsEffect() { }
}

// Namespace: 
public enum BattleResultComponent.resultData.ResultDispFlagEnum // TypeDefIndex: 9348
{
	// Fields
	public int value__; // 0x0
	public const BattleResultComponent.resultData.ResultDispFlagEnum BONDS = 1;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EXP = 2;
	public const BattleResultComponent.resultData.ResultDispFlagEnum ITEM = 4;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EVENT_ITEM = 8;
	public const BattleResultComponent.resultData.ResultDispFlagEnum DAMAGE_ITEM = 16;
	public const BattleResultComponent.resultData.ResultDispFlagEnum FRIEND = 32;
	public const BattleResultComponent.resultData.ResultDispFlagEnum TUTORIAL = 64;
	public const BattleResultComponent.resultData.ResultDispFlagEnum FRIEND_POINT = 128;
	public const BattleResultComponent.resultData.ResultDispFlagEnum SUPER_BOSS = 256;
	public const BattleResultComponent.resultData.ResultDispFlagEnum NO_DAMAGE_ITEM = 512;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EVENT_POINT_RESULT = 1024;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RETRY_QUEST = 2048;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_6 = 4096;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_7 = 8192;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_8 = 16384;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_9 = 32768;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB05A0 Offset: 0xCB05A0 VA: 0xCB05A0
private sealed class BattleResultComponent.<checkNew>c__AnonStorey0 // TypeDefIndex: 9349
{
	// Fields
	internal BattleDropItem newDrop; // 0x10
	internal BattleResultComponent $this; // 0x18

	// Methods

	// RVA: 0x169C084 Offset: 0x169C084 VA: 0x169C084
	public void .ctor() { }

	// RVA: 0x169E884 Offset: 0x169E884 VA: 0x169E884
	internal void <>m__0() { }
}

// Namespace: 
public class BattleResultEventDamageItemComponent : BattleResultEventItemComponent // TypeDefIndex: 9350
{
	// Fields
	private static readonly string DAMAGE_POINT_REWARD_AT_LOCALE_KEY; // 0x0
	private static readonly string DAMAGE_POINT_REWARD_TITLE_NAME; // 0x8
	private static readonly string DAMAGE_POINT_REWARD_SPRITE_NAME; // 0x10
	protected UserEventRaidMaster usrEvent; // 0xF0

	// Methods

	// RVA: 0x169E9F8 Offset: 0x169E9F8 VA: 0x169E9F8
	public void .ctor() { }

	// RVA: 0x169EABC Offset: 0x169EABC VA: 0x169EABC
	private bool hasEventDamage() { }

	// RVA: 0x169BDF8 Offset: 0x169BDF8 VA: 0x169BDF8
	public bool isDraw() { }

	// RVA: 0x169EAEC Offset: 0x169EAEC VA: 0x169EAEC Slot: 4
	public override void setResultData(BattleDropItem[] drop, int eventId, QuestRewardInfo[] resultBoostItemRewardInfos, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x169F5DC Offset: 0x169F5DC VA: 0x169F5DC Slot: 6
	protected override void SetTitleSprite(int currentGroup) { }

	// RVA: 0x169F774 Offset: 0x169F774 VA: 0x169F774
	private static void .cctor() { }
}

// Namespace: 
public class BattleResultEventItemComponent : MonoBehaviour // TypeDefIndex: 9351
{
	// Fields
	private static readonly string EVENT_POINT_REWARD_AT; // 0x0
	private static readonly string EVENT_POINT_REWARD_TITLE_NAME; // 0x8
	private static readonly string EVENT_POINT_REWARD_BG_NAME; // 0x10
	private static readonly string EVENT_POINT_BG_TITLE_NAME; // 0x18
	private static readonly int TITLE_AT_LABEL_MAX_WIDTH; // 0x20
	private static readonly int NEXT_ITEM_LABEL_MAX_WIDTH; // 0x24
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public BattleViewItemlistComponent itemWindow; // 0x30
	public GameObject touchNextRoot; // 0x38
	public UILabel titleConfLabel; // 0x40
	public UILabel titleAtLabel; // 0x48
	public UILabel titleNextItemLabel; // 0x50
	public UILabel atLabel; // 0x58
	public UILabel nextItemLabel; // 0x60
	public UISprite eventPointAtSprite; // 0x68
	public UISprite eventIconSprite; // 0x70
	public ItemDetailInfoComponent itemDialog; // 0x78
	protected List<BattleDropItem> newDroplist; // 0x80
	public int itemColumnCount; // 0x88
	public UISprite titleSp; // 0x90
	public UISprite bgSp; // 0x98
	protected int currentEventId; // 0xA0
	protected int currentGroupIndex; // 0xA4
	private List<BattleResultEventItemComponent.EventDropItemInfo> dropInfoList; // 0xA8
	public UIButton showModeChangeButton; // 0xB0
	public UILabel showModeChangeButtonLabel; // 0xB8
	public Color[] showModeChanButtonLabelEffectColors; // 0xC0
	private bool isShowPossessionNum; // 0xC8
	private long tmp_userSvtId; // 0xD0
	private int tmp_itemId; // 0xD8
	private long tmp_commandCodeId; // 0xE0
	private long tmp_eventPointBuffId; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xCD3670 Offset: 0xCD3670 VA: 0xCD3670
	private static Predicate<BattleDropItem> <>f__am$cache0; // 0x28

	// Methods

	// RVA: 0x169EA5C Offset: 0x169EA5C VA: 0x169EA5C
	public void .ctor() { }

	// RVA: 0x1697288 Offset: 0x1697288 VA: 0x1697288
	public void Init() { }

	// RVA: 0x169B958 Offset: 0x169B958 VA: 0x169B958
	public bool isGetItems() { }

	// RVA: 0x169C14C Offset: 0x169C14C VA: 0x169C14C
	public BattleDropItem getNewDrop() { }

	// RVA: 0x169BA18 Offset: 0x169BA18 VA: 0x169BA18
	public void Open() { }

	// RVA: 0x169F9B0 Offset: 0x169F9B0 VA: 0x169F9B0
	public void endOpen() { }

	// RVA: 0x169FA30 Offset: 0x169FA30 VA: 0x169FA30
	protected void SetItemWindow(BattleDropItem[] itemArray, int boostItemManaCount, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x169F510 Offset: 0x169F510 VA: 0x169F510
	protected void SetItemWindow(BattleDropItem[] itemArray) { }

	// RVA: 0x169FA94 Offset: 0x169FA94 VA: 0x169FA94 Slot: 4
	public virtual void setResultData(BattleDropItem[] drop, int eventId, QuestRewardInfo[] resultBoostItemRewardInfos, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x169FDF4 Offset: 0x169FDF4 VA: 0x169FDF4
	protected void SetUi(int eventId) { }

	// RVA: 0x16A0590 Offset: 0x16A0590 VA: 0x16A0590
	private string SearchEventGroupPointAtSprite(int eventId, int groupId) { }

	// RVA: 0x16A07E8 Offset: 0x16A07E8 VA: 0x16A07E8
	protected void SetNextItemLabel(long userEventPoint, EventRewardEntity eventRewardENt) { }

	// RVA: 0x169F178 Offset: 0x169F178 VA: 0x169F178
	protected void createDropInfo(BattleDropItem[] drop) { }

	// RVA: 0x16A0AA8 Offset: 0x16A0AA8 VA: 0x16A0AA8 Slot: 5
	protected virtual void SetBgSprite(int imageId) { }

	// RVA: 0x16A0C4C Offset: 0x16A0C4C VA: 0x16A0C4C Slot: 6
	protected virtual void SetTitleSprite(int currentGroup) { }

	// RVA: 0x16A0E8C Offset: 0x16A0E8C VA: 0x16A0E8C
	public void setShowConf(BattleDropItem item) { }

	// RVA: 0x16A0F64 Offset: 0x16A0F64 VA: 0x16A0F64
	public void setShowServantConf(long userSvtId) { }

	// RVA: 0x16A1134 Offset: 0x16A1134 VA: 0x16A1134
	public void showServantDialog() { }

	// RVA: 0x16A11E8 Offset: 0x16A11E8 VA: 0x16A11E8
	public void DialogCallBack(bool flg) { }

	// RVA: 0x16A128C Offset: 0x16A128C VA: 0x16A128C
	public void EndCloseDialogCallBack() { }

	// RVA: 0x16A0FD8 Offset: 0x16A0FD8 VA: 0x16A0FD8
	public void setShowItemConf(int itemId) { }

	// RVA: 0x16A12F0 Offset: 0x16A12F0 VA: 0x16A12F0
	public void showItemDialog() { }

	// RVA: 0x16A13EC Offset: 0x16A13EC VA: 0x16A13EC
	public void itemDialogCallBack(bool flg) { }

	// RVA: 0x16A14A8 Offset: 0x16A14A8 VA: 0x16A14A8
	public void endItemDialogCallBack() { }

	// RVA: 0x16A104C Offset: 0x16A104C VA: 0x16A104C
	public void setShowCommandCodeConf(long commandCodeId) { }

	// RVA: 0x16A150C Offset: 0x16A150C VA: 0x16A150C
	public void showCommandCodeDialog() { }

	// RVA: 0x16A1618 Offset: 0x16A1618 VA: 0x16A1618
	public void commandCodeDialogCallBack(bool flg) { }

	// RVA: 0x16A16BC Offset: 0x16A16BC VA: 0x16A16BC
	public void endCommandCodeDialogCallBack() { }

	// RVA: 0x16A10C0 Offset: 0x16A10C0 VA: 0x16A10C0
	public void setShowEventPointBuffConf(long eventPointBuffId) { }

	// RVA: 0x16A1720 Offset: 0x16A1720 VA: 0x16A1720
	public void showEventPointBuffDialog() { }

	// RVA: 0x16A183C Offset: 0x16A183C VA: 0x16A183C
	public void eventPointBuffDialogCallBack(bool flg) { }

	// RVA: 0x16A18F8 Offset: 0x16A18F8 VA: 0x16A18F8
	public void endEventPointBuffDialogCallBack() { }

	// RVA: 0x16A195C Offset: 0x16A195C VA: 0x16A195C
	public void Close() { }

	// RVA: 0x16A1A78 Offset: 0x16A1A78 VA: 0x16A1A78
	public void endClose() { }

	// RVA: 0x16A1ADC Offset: 0x16A1ADC VA: 0x16A1ADC
	public void CheckNextGroup() { }

	// RVA: 0x16A1C34 Offset: 0x16A1C34 VA: 0x16A1C34
	public void OnClickSwitchShowMode() { }

	// RVA: 0x169F7FC Offset: 0x169F7FC VA: 0x169F7FC
	private void UpdateShowModeChangeButton() { }

	// RVA: 0x169F8F4 Offset: 0x169F8F4 VA: 0x169F8F4
	private void SetCondensedScale() { }

	// RVA: 0x16A1CD8 Offset: 0x16A1CD8 VA: 0x16A1CD8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BD4C Offset: 0xD3BD4C VA: 0xD3BD4C
	// RVA: 0x16A1D8C Offset: 0x16A1D8C VA: 0x16A1D8C
	private static bool <createDropInfo>m__0(BattleDropItem s) { }
}

// Namespace: 
public struct BattleResultEventItemComponent.EventDropItemInfo // TypeDefIndex: 9352
{
	// Fields
	public List<BattleDropItem> itemList; // 0x0
	public int itemCount; // 0x8
	public List<BattleDropItem> newDroplist; // 0x10
	public int groupId; // 0x18
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB05B0 Offset: 0xCB05B0 VA: 0xCB05B0
private sealed class BattleResultEventItemComponent.<createDropInfo>c__AnonStorey0 // TypeDefIndex: 9353
{
	// Fields
	internal BattleDropItem[] drop; // 0x10

	// Methods

	// RVA: 0x16A0A98 Offset: 0x16A0A98 VA: 0x16A0A98
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB05C0 Offset: 0xCB05C0 VA: 0xCB05C0
private sealed class BattleResultEventItemComponent.<createDropInfo>c__AnonStorey1 // TypeDefIndex: 9354
{
	// Fields
	internal int i; // 0x10
	internal BattleResultEventItemComponent.<createDropInfo>c__AnonStorey0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x16A0AA0 Offset: 0x16A0AA0 VA: 0x16A0AA0
	public void .ctor() { }

	// RVA: 0x16A1DE8 Offset: 0x16A1DE8 VA: 0x16A1DE8
	internal bool <>m__0(BattleResultEventItemComponent.EventDropItemInfo d) { }

	// RVA: 0x16A1E70 Offset: 0x16A1E70 VA: 0x16A1E70
	internal bool <>m__1(BattleDropItem item) { }
}

// Namespace: 
public class BattleResultEventItemGroupComponent : MonoBehaviour // TypeDefIndex: 9355
{
	// Fields
	[SerializeField] // RVA: 0xCD3680 Offset: 0xCD3680 VA: 0xCD3680
	private UILabel getQpLabel; // 0x18
