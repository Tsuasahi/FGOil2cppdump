	// RVA: 0x23D61E4 Offset: 0x23D61E4 VA: 0x23D61E4
	private static long packIntoLong(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0) { }

	// RVA: 0x23D61D0 Offset: 0x23D61D0 VA: 0x23D61D0
	private static int maskWithReductionPolynomial(int input) { }

	// RVA: 0x23D6944 Offset: 0x23D6944 VA: 0x23D6944 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x23D698C Offset: 0x23D698C VA: 0x23D698C Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x23D6994 Offset: 0x23D6994 VA: 0x23D6994 Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D6C00 Offset: 0x23D6C00 VA: 0x23D6C00 Slot: 10
	public void Reset() { }

	// RVA: 0x23D6D18 Offset: 0x23D6D18 VA: 0x23D6D18
	private void processFilledBuffer() { }

	// RVA: 0x23D6E38 Offset: 0x23D6E38 VA: 0x23D6E38
	private static long bytesToLongFromBuffer(byte[] buffer, int startPos) { }

	// RVA: 0x23D6B7C Offset: 0x23D6B7C VA: 0x23D6B7C
	private static void convertLongToByteArray(long inputLong, byte[] outputArray, int offSet) { }

	// RVA: 0x23D6FFC Offset: 0x23D6FFC VA: 0x23D6FFC
	private void processBlock() { }

	// RVA: 0x23D7F08 Offset: 0x23D7F08 VA: 0x23D7F08 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x23D7F9C Offset: 0x23D7F9C VA: 0x23D7F9C
	private void increment() { }

	// RVA: 0x23D80F8 Offset: 0x23D80F8 VA: 0x23D80F8 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x23D6A78 Offset: 0x23D6A78 VA: 0x23D6A78
	private void finish() { }

	// RVA: 0x23D8184 Offset: 0x23D8184 VA: 0x23D8184
	private byte[] copyBitLength() { }

	// RVA: 0x23D8270 Offset: 0x23D8270 VA: 0x23D8270 Slot: 6
	public int GetByteLength() { }

	// RVA: 0x23D8278 Offset: 0x23D8278 VA: 0x23D8278 Slot: 11
	public IMemoable Copy() { }

	// RVA: 0x23D66FC Offset: 0x23D66FC VA: 0x23D66FC Slot: 12
	public void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.EC
public sealed class CustomNamedCurves // TypeDefIndex: 4658
{
	// Fields
	private static readonly IDictionary nameToCurve; // 0x0
	private static readonly IDictionary nameToOid; // 0x8
	private static readonly IDictionary oidToCurve; // 0x10
	private static readonly IDictionary oidToName; // 0x18
	private static readonly IList names; // 0x20

	// Properties
	public static IEnumerable Names { get; }

	// Methods

	// RVA: 0x23D82D8 Offset: 0x23D82D8 VA: 0x23D82D8
	private void .ctor() { }

	// RVA: 0x23D82E0 Offset: 0x23D82E0 VA: 0x23D82E0
	private static void .cctor() { }

	// RVA: 0x23D9614 Offset: 0x23D9614 VA: 0x23D9614
	private static BigInteger FromHex(string hex) { }

	// RVA: 0x23D96B0 Offset: 0x23D96B0 VA: 0x23D96B0
	private static ECCurve ConfigureCurve(ECCurve curve) { }

	// RVA: 0x23D96B4 Offset: 0x23D96B4 VA: 0x23D96B4
	private static ECCurve ConfigureCurveGlv(ECCurve c, GlvTypeBParameters p) { }

	// RVA: 0x23D8E98 Offset: 0x23D8E98 VA: 0x23D8E98
	private static void DefineCurve(string name, X9ECParametersHolder holder) { }

	// RVA: 0x23D9044 Offset: 0x23D9044 VA: 0x23D9044
	private static void DefineCurveWithOid(string name, DerObjectIdentifier oid, X9ECParametersHolder holder) { }

	// RVA: 0x23D9388 Offset: 0x23D9388 VA: 0x23D9388
	private static void DefineCurveAlias(string name, DerObjectIdentifier oid) { }

	// RVA: 0x23D9778 Offset: 0x23D9778 VA: 0x23D9778
	public static X9ECParameters GetByName(string name) { }

	// RVA: 0x23D9930 Offset: 0x23D9930 VA: 0x23D9930
	public static X9ECParameters GetByOid(DerObjectIdentifier oid) { }

	// RVA: 0x23D9AB4 Offset: 0x23D9AB4 VA: 0x23D9AB4
	public static DerObjectIdentifier GetOid(string name) { }

	// RVA: 0x23D9C58 Offset: 0x23D9C58 VA: 0x23D9C58
	public static string GetName(DerObjectIdentifier oid) { }

	// RVA: 0x23D9DAC Offset: 0x23D9DAC VA: 0x23D9DAC
	public static IEnumerable get_Names() { }
}

// Namespace: 
internal class CustomNamedCurves.Curve25519Holder : X9ECParametersHolder // TypeDefIndex: 4659
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23D9E38 Offset: 0x23D9E38 VA: 0x23D9E38
	private void .ctor() { }

	// RVA: 0x23D9E40 Offset: 0x23D9E40 VA: 0x23D9E40 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23D9FA8 Offset: 0x23D9FA8 VA: 0x23D9FA8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP128R1Holder : X9ECParametersHolder // TypeDefIndex: 4660
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DA00C Offset: 0x23DA00C VA: 0x23DA00C
	private void .ctor() { }

	// RVA: 0x23DA014 Offset: 0x23DA014 VA: 0x23DA014 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DA198 Offset: 0x23DA198 VA: 0x23DA198
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP160K1Holder : X9ECParametersHolder // TypeDefIndex: 4661
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DA1FC Offset: 0x23DA1FC VA: 0x23DA1FC
	private void .ctor() { }

	// RVA: 0x23DA204 Offset: 0x23DA204 VA: 0x23DA204 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DA658 Offset: 0x23DA658 VA: 0x23DA658
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP160R1Holder : X9ECParametersHolder // TypeDefIndex: 4662
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DA6BC Offset: 0x23DA6BC VA: 0x23DA6BC
	private void .ctor() { }

	// RVA: 0x23DA6C4 Offset: 0x23DA6C4 VA: 0x23DA6C4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DA848 Offset: 0x23DA848 VA: 0x23DA848
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP160R2Holder : X9ECParametersHolder // TypeDefIndex: 4663
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DA8AC Offset: 0x23DA8AC VA: 0x23DA8AC
	private void .ctor() { }

	// RVA: 0x23DA8B4 Offset: 0x23DA8B4 VA: 0x23DA8B4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DAA38 Offset: 0x23DAA38 VA: 0x23DAA38
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP192K1Holder : X9ECParametersHolder // TypeDefIndex: 4664
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DAA9C Offset: 0x23DAA9C VA: 0x23DAA9C
	private void .ctor() { }

	// RVA: 0x23DAAA4 Offset: 0x23DAAA4 VA: 0x23DAAA4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DAEF8 Offset: 0x23DAEF8 VA: 0x23DAEF8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP192R1Holder : X9ECParametersHolder // TypeDefIndex: 4665
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DAF5C Offset: 0x23DAF5C VA: 0x23DAF5C
	private void .ctor() { }

	// RVA: 0x23DAF64 Offset: 0x23DAF64 VA: 0x23DAF64 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DB0E8 Offset: 0x23DB0E8 VA: 0x23DB0E8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP224K1Holder : X9ECParametersHolder // TypeDefIndex: 4666
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DB14C Offset: 0x23DB14C VA: 0x23DB14C
	private void .ctor() { }

	// RVA: 0x23DB154 Offset: 0x23DB154 VA: 0x23DB154 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DB5A8 Offset: 0x23DB5A8 VA: 0x23DB5A8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP224R1Holder : X9ECParametersHolder // TypeDefIndex: 4667
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DB60C Offset: 0x23DB60C VA: 0x23DB60C
	private void .ctor() { }

	// RVA: 0x23DB614 Offset: 0x23DB614 VA: 0x23DB614 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DB798 Offset: 0x23DB798 VA: 0x23DB798
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP256K1Holder : X9ECParametersHolder // TypeDefIndex: 4668
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DB7FC Offset: 0x23DB7FC VA: 0x23DB7FC
	private void .ctor() { }

	// RVA: 0x23DB804 Offset: 0x23DB804 VA: 0x23DB804 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DBC58 Offset: 0x23DBC58 VA: 0x23DBC58
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP256R1Holder : X9ECParametersHolder // TypeDefIndex: 4669
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DBCBC Offset: 0x23DBCBC VA: 0x23DBCBC
	private void .ctor() { }

	// RVA: 0x23DBCC4 Offset: 0x23DBCC4 VA: 0x23DBCC4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DBE48 Offset: 0x23DBE48 VA: 0x23DBE48
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP384R1Holder : X9ECParametersHolder // TypeDefIndex: 4670
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DBEAC Offset: 0x23DBEAC VA: 0x23DBEAC
	private void .ctor() { }

	// RVA: 0x23DBEB4 Offset: 0x23DBEB4 VA: 0x23DBEB4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC038 Offset: 0x23DC038 VA: 0x23DC038
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecP521R1Holder : X9ECParametersHolder // TypeDefIndex: 4671
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DC09C Offset: 0x23DC09C VA: 0x23DC09C
	private void .ctor() { }

	// RVA: 0x23DC0A4 Offset: 0x23DC0A4 VA: 0x23DC0A4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC228 Offset: 0x23DC228 VA: 0x23DC228
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT113R1Holder : X9ECParametersHolder // TypeDefIndex: 4672
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DC28C Offset: 0x23DC28C VA: 0x23DC28C
	private void .ctor() { }

	// RVA: 0x23DC294 Offset: 0x23DC294 VA: 0x23DC294 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC418 Offset: 0x23DC418 VA: 0x23DC418
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT113R2Holder : X9ECParametersHolder // TypeDefIndex: 4673
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DC47C Offset: 0x23DC47C VA: 0x23DC47C
	private void .ctor() { }

	// RVA: 0x23DC484 Offset: 0x23DC484 VA: 0x23DC484 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC608 Offset: 0x23DC608 VA: 0x23DC608
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT131R1Holder : X9ECParametersHolder // TypeDefIndex: 4674
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DC66C Offset: 0x23DC66C VA: 0x23DC66C
	private void .ctor() { }

	// RVA: 0x23DC674 Offset: 0x23DC674 VA: 0x23DC674 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC7F8 Offset: 0x23DC7F8 VA: 0x23DC7F8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT131R2Holder : X9ECParametersHolder // TypeDefIndex: 4675
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DC85C Offset: 0x23DC85C VA: 0x23DC85C
	private void .ctor() { }

	// RVA: 0x23DC864 Offset: 0x23DC864 VA: 0x23DC864 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DC9E8 Offset: 0x23DC9E8 VA: 0x23DC9E8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT163K1Holder : X9ECParametersHolder // TypeDefIndex: 4676
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DCA4C Offset: 0x23DCA4C VA: 0x23DCA4C
	private void .ctor() { }

	// RVA: 0x23DCA54 Offset: 0x23DCA54 VA: 0x23DCA54 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DCBBC Offset: 0x23DCBBC VA: 0x23DCBBC
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT163R1Holder : X9ECParametersHolder // TypeDefIndex: 4677
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DCC20 Offset: 0x23DCC20 VA: 0x23DCC20
	private void .ctor() { }

	// RVA: 0x23DCC28 Offset: 0x23DCC28 VA: 0x23DCC28 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DCDAC Offset: 0x23DCDAC VA: 0x23DCDAC
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT163R2Holder : X9ECParametersHolder // TypeDefIndex: 4678
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DCE10 Offset: 0x23DCE10 VA: 0x23DCE10
	private void .ctor() { }

	// RVA: 0x23DCE18 Offset: 0x23DCE18 VA: 0x23DCE18 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DCF9C Offset: 0x23DCF9C VA: 0x23DCF9C
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT193R1Holder : X9ECParametersHolder // TypeDefIndex: 4679
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD000 Offset: 0x23DD000 VA: 0x23DD000
	private void .ctor() { }

	// RVA: 0x23DD008 Offset: 0x23DD008 VA: 0x23DD008 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DD18C Offset: 0x23DD18C VA: 0x23DD18C
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT193R2Holder : X9ECParametersHolder // TypeDefIndex: 4680
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD1F0 Offset: 0x23DD1F0 VA: 0x23DD1F0
	private void .ctor() { }

	// RVA: 0x23DD1F8 Offset: 0x23DD1F8 VA: 0x23DD1F8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DD37C Offset: 0x23DD37C VA: 0x23DD37C
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT233K1Holder : X9ECParametersHolder // TypeDefIndex: 4681
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD3E0 Offset: 0x23DD3E0 VA: 0x23DD3E0
	private void .ctor() { }

	// RVA: 0x23DD3E8 Offset: 0x23DD3E8 VA: 0x23DD3E8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DD550 Offset: 0x23DD550 VA: 0x23DD550
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT233R1Holder : X9ECParametersHolder // TypeDefIndex: 4682
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD5B4 Offset: 0x23DD5B4 VA: 0x23DD5B4
	private void .ctor() { }

	// RVA: 0x23DD5BC Offset: 0x23DD5BC VA: 0x23DD5BC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DD740 Offset: 0x23DD740 VA: 0x23DD740
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT239K1Holder : X9ECParametersHolder // TypeDefIndex: 4683
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD7A4 Offset: 0x23DD7A4 VA: 0x23DD7A4
	private void .ctor() { }

	// RVA: 0x23DD7AC Offset: 0x23DD7AC VA: 0x23DD7AC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DD914 Offset: 0x23DD914 VA: 0x23DD914
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT283K1Holder : X9ECParametersHolder // TypeDefIndex: 4684
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DD978 Offset: 0x23DD978 VA: 0x23DD978
	private void .ctor() { }

	// RVA: 0x23DD980 Offset: 0x23DD980 VA: 0x23DD980 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DDAE8 Offset: 0x23DDAE8 VA: 0x23DDAE8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT283R1Holder : X9ECParametersHolder // TypeDefIndex: 4685
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DDB4C Offset: 0x23DDB4C VA: 0x23DDB4C
	private void .ctor() { }

	// RVA: 0x23DDB54 Offset: 0x23DDB54 VA: 0x23DDB54 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DDCD8 Offset: 0x23DDCD8 VA: 0x23DDCD8
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT409K1Holder : X9ECParametersHolder // TypeDefIndex: 4686
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DDD3C Offset: 0x23DDD3C VA: 0x23DDD3C
	private void .ctor() { }

	// RVA: 0x23DDD44 Offset: 0x23DDD44 VA: 0x23DDD44 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DDEAC Offset: 0x23DDEAC VA: 0x23DDEAC
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT409R1Holder : X9ECParametersHolder // TypeDefIndex: 4687
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DDF10 Offset: 0x23DDF10 VA: 0x23DDF10
	private void .ctor() { }

	// RVA: 0x23DDF18 Offset: 0x23DDF18 VA: 0x23DDF18 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DE09C Offset: 0x23DE09C VA: 0x23DE09C
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT571K1Holder : X9ECParametersHolder // TypeDefIndex: 4688
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DE100 Offset: 0x23DE100 VA: 0x23DE100
	private void .ctor() { }

	// RVA: 0x23DE108 Offset: 0x23DE108 VA: 0x23DE108 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DE270 Offset: 0x23DE270 VA: 0x23DE270
	private static void .cctor() { }
}

// Namespace: 
internal class CustomNamedCurves.SecT571R1Holder : X9ECParametersHolder // TypeDefIndex: 4689
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23DE2D4 Offset: 0x23DE2D4 VA: 0x23DE2D4
	private void .ctor() { }

	// RVA: 0x23DE2DC Offset: 0x23DE2DC VA: 0x23DE2DC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23DE460 Offset: 0x23DE460 VA: 0x23DE460
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Encodings
public class ISO9796d1Encoding : IAsymmetricBlockCipher // TypeDefIndex: 4690
{
	// Fields
	private static readonly BigInteger Sixteen; // 0x0
	private static readonly BigInteger Six; // 0x8
	private static readonly byte[] shadows; // 0x10
	private static readonly byte[] inverse; // 0x18
	private readonly IAsymmetricBlockCipher engine; // 0x10
	private bool forEncryption; // 0x18
	private int bitSize; // 0x1C
	private int padBits; // 0x20
	private BigInteger modulus; // 0x28

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x23DE4C4 Offset: 0x23DE4C4 VA: 0x23DE4C4
	public void .ctor(IAsymmetricBlockCipher cipher) { }

	// RVA: 0x23DE4F0 Offset: 0x23DE4F0 VA: 0x23DE4F0 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x23DE5E4 Offset: 0x23DE5E4 VA: 0x23DE5E4
	public IAsymmetricBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x23DE5EC Offset: 0x23DE5EC VA: 0x23DE5EC Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23DE7DC Offset: 0x23DE7DC VA: 0x23DE7DC Slot: 6
	public int GetInputBlockSize() { }

	// RVA: 0x23DE8B4 Offset: 0x23DE8B4 VA: 0x23DE8B4 Slot: 7
	public int GetOutputBlockSize() { }

	// RVA: 0x23DE98C Offset: 0x23DE98C VA: 0x23DE98C
	public void SetPadBits(int padBits) { }

	// RVA: 0x23DEA28 Offset: 0x23DEA28 VA: 0x23DEA28
	public int GetPadBits() { }

	// RVA: 0x23DEA30 Offset: 0x23DEA30 VA: 0x23DEA30 Slot: 8
	public byte[] ProcessBlock(byte[] input, int inOff, int length) { }

	// RVA: 0x23DEA40 Offset: 0x23DEA40 VA: 0x23DEA40
	private byte[] EncodeBlock(byte[] input, int inOff, int inLen) { }

	// RVA: 0x23DEED8 Offset: 0x23DEED8 VA: 0x23DEED8
	private byte[] DecodeBlock(byte[] input, int inOff, int inLen) { }

	// RVA: 0x23DF640 Offset: 0x23DF640 VA: 0x23DF640
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Encodings
public class OaepEncoding : IAsymmetricBlockCipher // TypeDefIndex: 4691
{
	// Fields
	private byte[] defHash; // 0x10
	private IDigest hash; // 0x18
	private IDigest mgf1Hash; // 0x20
	private IAsymmetricBlockCipher engine; // 0x28
	private SecureRandom random; // 0x30
	private bool forEncryption; // 0x38

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x23DF744 Offset: 0x23DF744 VA: 0x23DF744
	public void .ctor(IAsymmetricBlockCipher cipher) { }

	// RVA: 0x23DF7CC Offset: 0x23DF7CC VA: 0x23DF7CC
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest hash) { }

	// RVA: 0x23DF7BC Offset: 0x23DF7BC VA: 0x23DF7BC
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest hash, byte[] encodingParams) { }

	// RVA: 0x23DF7D8 Offset: 0x23DF7D8 VA: 0x23DF7D8
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest hash, IDigest mgf1Hash, byte[] encodingParams) { }

	// RVA: 0x23DF9E0 Offset: 0x23DF9E0 VA: 0x23DF9E0
	public IAsymmetricBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x23DF9E8 Offset: 0x23DF9E8 VA: 0x23DF9E8 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x23DFADC Offset: 0x23DFADC VA: 0x23DFADC Slot: 5
	public void Init(bool forEncryption, ICipherParameters param) { }

	// RVA: 0x23DFC2C Offset: 0x23DFC2C VA: 0x23DFC2C Slot: 6
	public int GetInputBlockSize() { }

	// RVA: 0x23DFD14 Offset: 0x23DFD14 VA: 0x23DFD14 Slot: 7
	public int GetOutputBlockSize() { }

	// RVA: 0x23DFDFC Offset: 0x23DFDFC VA: 0x23DFDFC Slot: 8
	public byte[] ProcessBlock(byte[] inBytes, int inOff, int inLen) { }

	// RVA: 0x23DFE0C Offset: 0x23DFE0C VA: 0x23DFE0C
	private byte[] EncodeBlock(byte[] inBytes, int inOff, int inLen) { }

	// RVA: 0x23E0210 Offset: 0x23E0210 VA: 0x23E0210
	private byte[] DecodeBlock(byte[] inBytes, int inOff, int inLen) { }

	// RVA: 0x23E0E70 Offset: 0x23E0E70 VA: 0x23E0E70
	private void ItoOSP(int i, byte[] sp) { }

	// RVA: 0x23E08D0 Offset: 0x23E08D0 VA: 0x23E08D0
	private byte[] maskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length) { }
}

// Namespace: Org.BouncyCastle.Crypto.Encodings
public class Pkcs1Encoding : IAsymmetricBlockCipher // TypeDefIndex: 4692
{
	// Fields
	public const string StrictLengthEnabledProperty = "Org.BouncyCastle.Pkcs1.Strict";
	private const int HeaderLength = 10;
	private static readonly bool[] strictLengthEnabled; // 0x0
	private SecureRandom random; // 0x10
	private IAsymmetricBlockCipher engine; // 0x18
	private bool forEncryption; // 0x20
	private bool forPrivateKey; // 0x21
	private bool useStrictLength; // 0x22
	private int pLen; // 0x24
	private byte[] fallback; // 0x28

	// Properties
	public static bool StrictLengthEnabled { get; set; }
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x23E0F24 Offset: 0x23E0F24 VA: 0x23E0F24
	private static void .cctor() { }

	// RVA: 0x23E101C Offset: 0x23E101C VA: 0x23E101C
	public void .ctor(IAsymmetricBlockCipher cipher) { }

	// RVA: 0x23E113C Offset: 0x23E113C VA: 0x23E113C
	public void .ctor(IAsymmetricBlockCipher cipher, int pLen) { }

	// RVA: 0x23E11D4 Offset: 0x23E11D4 VA: 0x23E11D4
	public void .ctor(IAsymmetricBlockCipher cipher, byte[] fallback) { }

	// RVA: 0x23E10AC Offset: 0x23E10AC VA: 0x23E10AC
	public static bool get_StrictLengthEnabled() { }

	// RVA: 0x23E1280 Offset: 0x23E1280 VA: 0x23E1280
	public static void set_StrictLengthEnabled(bool value) { }

	// RVA: 0x23E1318 Offset: 0x23E1318 VA: 0x23E1318
	public IAsymmetricBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x23E1320 Offset: 0x23E1320 VA: 0x23E1320 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x23E1414 Offset: 0x23E1414 VA: 0x23E1414 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23E161C Offset: 0x23E161C VA: 0x23E161C Slot: 6
	public int GetInputBlockSize() { }

	// RVA: 0x23E16E8 Offset: 0x23E16E8 VA: 0x23E16E8 Slot: 7
	public int GetOutputBlockSize() { }

	// RVA: 0x23E17B4 Offset: 0x23E17B4 VA: 0x23E17B4 Slot: 8
	public byte[] ProcessBlock(byte[] input, int inOff, int length) { }

	// RVA: 0x23E17C4 Offset: 0x23E17C4 VA: 0x23E17C4
	private byte[] EncodeBlock(byte[] input, int inOff, int inLen) { }

	// RVA: 0x23E1EC0 Offset: 0x23E1EC0 VA: 0x23E1EC0
	private static int CheckPkcs1Encoding(byte[] encoded, int pLen) { }

	// RVA: 0x23E1FD8 Offset: 0x23E1FD8 VA: 0x23E1FD8
	private byte[] DecodeBlockOrRandom(byte[] input, int inOff, int inLen) { }

	// RVA: 0x23E1B74 Offset: 0x23E1B74 VA: 0x23E1B74
	private byte[] DecodeBlock(byte[] input, int inOff, int inLen) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class AesEngine : IBlockCipher // TypeDefIndex: 4693
{
	// Fields
	private static readonly byte[] S; // 0x0
	private static readonly byte[] Si; // 0x8
	private static readonly byte[] rcon; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] Tinv0; // 0x20
	private const uint m1 = 2155905152;
	private const uint m2 = 2139062143;
	private const uint m3 = 27;
	private const uint m4 = 3233857728;
	private const uint m5 = 1061109567;
	private int ROUNDS; // 0x10
	private uint[][] WorkingKey; // 0x18
	private uint C0; // 0x20
	private uint C1; // 0x24
	private uint C2; // 0x28
	private uint C3; // 0x2C
	private bool forEncryption; // 0x30
	private const int BLOCK_SIZE = 16;

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23E2360 Offset: 0x23E2360 VA: 0x23E2360
	public void .ctor() { }

	// RVA: 0x23E2368 Offset: 0x23E2368 VA: 0x23E2368
	private static uint Shift(uint r, int shift) { }

	// RVA: 0x23E2374 Offset: 0x23E2374 VA: 0x23E2374
	private static uint FFmulX(uint x) { }

	// RVA: 0x23E2394 Offset: 0x23E2394 VA: 0x23E2394
	private static uint FFmulX2(uint x) { }

	// RVA: 0x23E23B0 Offset: 0x23E23B0 VA: 0x23E23B0
	private static uint Inv_Mcol(uint x) { }

	// RVA: 0x23E2458 Offset: 0x23E2458 VA: 0x23E2458
	private static uint SubWord(uint x) { }

	// RVA: 0x23E25D8 Offset: 0x23E25D8 VA: 0x23E25D8
	private uint[][] GenerateWorkingKey(byte[] key, bool forEncryption) { }

	// RVA: 0x23E3DCC Offset: 0x23E3DCC VA: 0x23E3DCC Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23E3F2C Offset: 0x23E3F2C VA: 0x23E3F2C Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x23E3F74 Offset: 0x23E3F74 VA: 0x23E3F74 Slot: 12
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x23E3F7C Offset: 0x23E3F7C VA: 0x23E3F7C Slot: 13
	public virtual int GetBlockSize() { }

	// RVA: 0x23E3F84 Offset: 0x23E3F84 VA: 0x23E3F84 Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x23E7264 Offset: 0x23E7264 VA: 0x23E7264 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x23E40B0 Offset: 0x23E40B0 VA: 0x23E40B0
	private void UnPackBlock(byte[] bytes, int off) { }

	// RVA: 0x23E71F4 Offset: 0x23E71F4 VA: 0x23E71F4
	private void PackBlock(byte[] bytes, int off) { }

	// RVA: 0x23E412C Offset: 0x23E412C VA: 0x23E412C
	private void EncryptBlock(uint[][] KW) { }

	// RVA: 0x23E59A4 Offset: 0x23E59A4 VA: 0x23E59A4
	private void DecryptBlock(uint[][] KW) { }

	// RVA: 0x23E7268 Offset: 0x23E7268 VA: 0x23E7268
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class AesFastEngine : IBlockCipher // TypeDefIndex: 4694
{
	// Fields
	private static readonly byte[] S; // 0x0
	private static readonly byte[] Si; // 0x8
	private static readonly byte[] rcon; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] T1; // 0x20
	private static readonly uint[] T2; // 0x28
	private static readonly uint[] T3; // 0x30
	private static readonly uint[] Tinv0; // 0x38
	private static readonly uint[] Tinv1; // 0x40
	private static readonly uint[] Tinv2; // 0x48
	private static readonly uint[] Tinv3; // 0x50
	private const uint m1 = 2155905152;
	private const uint m2 = 2139062143;
	private const uint m3 = 27;
	private const uint m4 = 3233857728;
	private const uint m5 = 1061109567;
	private int ROUNDS; // 0x10
	private uint[][] WorkingKey; // 0x18
	private uint C0; // 0x20
	private uint C1; // 0x24
	private uint C2; // 0x28
	private uint C3; // 0x2C
	private bool forEncryption; // 0x30
	private const int BLOCK_SIZE = 16;

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23E73B4 Offset: 0x23E73B4 VA: 0x23E73B4
	public void .ctor() { }

	// RVA: 0x23E73BC Offset: 0x23E73BC VA: 0x23E73BC
	private static uint Shift(uint r, int shift) { }

	// RVA: 0x23E73C8 Offset: 0x23E73C8 VA: 0x23E73C8
	private static uint FFmulX(uint x) { }

	// RVA: 0x23E73E8 Offset: 0x23E73E8 VA: 0x23E73E8
	private static uint FFmulX2(uint x) { }

	// RVA: 0x23E7404 Offset: 0x23E7404 VA: 0x23E7404
	private static uint Inv_Mcol(uint x) { }

	// RVA: 0x23E74AC Offset: 0x23E74AC VA: 0x23E74AC
	private static uint SubWord(uint x) { }

	// RVA: 0x23E762C Offset: 0x23E762C VA: 0x23E762C
	private uint[][] GenerateWorkingKey(byte[] key, bool forEncryption) { }

	// RVA: 0x23E8E20 Offset: 0x23E8E20 VA: 0x23E8E20 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23E8F80 Offset: 0x23E8F80 VA: 0x23E8F80 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x23E8FC8 Offset: 0x23E8FC8 VA: 0x23E8FC8 Slot: 12
