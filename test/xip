	public abstract void set_ObjectType(Type value);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object get_RawValue();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void set_RawValue(object value);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract bool TestTypeConstraint(VariableType variableType, Type objectType);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void SafeAssign(object val);
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class NamedVariable : INameable, INamedVariable, IComparable // TypeDefIndex: 3366
{
	// Fields
	[SerializeField] // RVA: 0xC847E4 Offset: 0xC847E4 VA: 0xC847E4
	private bool useVariable; // 0x10
	[SerializeField] // RVA: 0xC847F4 Offset: 0xC847F4 VA: 0xC847F4
	private string name; // 0x18
	[SerializeField] // RVA: 0xC84804 Offset: 0xC84804 VA: 0xC84804
	private string tooltip; // 0x20
	[SerializeField] // RVA: 0xC84814 Offset: 0xC84814 VA: 0xC84814
	private bool showInInspector; // 0x28
	[SerializeField] // RVA: 0xC84824 Offset: 0xC84824 VA: 0xC84824
	private bool networkSync; // 0x29
	protected object obj; // 0x30

	// Properties
	public NamedVariable CastVariable { get; set; }
	public string Name { get; set; }
	public virtual VariableType VariableType { get; }
	public virtual Type ObjectType { get; set; }
	public virtual VariableType TypeConstraint { get; }
	public virtual object RawValue { get; set; }
	public string Tooltip { get; set; }
	public bool UseVariable { get; set; }
	public bool ShowInInspector { get; set; }
	public bool NetworkSync { get; set; }
	public bool IsNone { get; }
	public bool UsesVariable { get; }

	// Methods

	// RVA: 0xFC82D0 Offset: 0xFC82D0 VA: 0xFC82D0
	public NamedVariable get_CastVariable() { }

	// RVA: 0xFC4FFC Offset: 0xFC4FFC VA: 0xFC4FFC
	public void set_CastVariable(NamedVariable value) { }

	// RVA: 0xFBCC78 Offset: 0xFBCC78 VA: 0xFBCC78 Slot: 5
	public string get_Name() { }

	// RVA: 0xFC8FAC Offset: 0xFC8FAC VA: 0xFC8FAC
	public void set_Name(string value) { }

	// RVA: 0xFC8FB4 Offset: 0xFC8FB4 VA: 0xFC8FB4 Slot: 22
	public virtual VariableType get_VariableType() { }

	// RVA: 0xFC9098 Offset: 0xFC9098 VA: 0xFC9098 Slot: 23
	public virtual Type get_ObjectType() { }

	// RVA: 0xFC90A0 Offset: 0xFC90A0 VA: 0xFC90A0 Slot: 24
	public virtual void set_ObjectType(Type value) { }

	// RVA: 0xFC90A4 Offset: 0xFC90A4 VA: 0xFC90A4 Slot: 25
	public virtual VariableType get_TypeConstraint() { }

	// RVA: 0xFC90B4 Offset: 0xFC90B4 VA: 0xFC90B4 Slot: 26
	public virtual void set_RawValue(object value) { }

	// RVA: 0xFC911C Offset: 0xFC911C VA: 0xFC911C Slot: 27
	public virtual object get_RawValue() { }

	// RVA: 0xFC9184 Offset: 0xFC9184 VA: 0xFC9184
	public string get_Tooltip() { }

	// RVA: 0xFC918C Offset: 0xFC918C VA: 0xFC918C
	public void set_Tooltip(string value) { }

	// RVA: 0xFC9194 Offset: 0xFC9194 VA: 0xFC9194 Slot: 6
	public bool get_UseVariable() { }

	// RVA: 0xFC919C Offset: 0xFC919C VA: 0xFC919C Slot: 7
	public void set_UseVariable(bool value) { }

	// RVA: 0xFC2820 Offset: 0xFC2820 VA: 0xFC2820
	public bool get_ShowInInspector() { }

	// RVA: 0xFC91A8 Offset: 0xFC91A8 VA: 0xFC91A8
	public void set_ShowInInspector(bool value) { }

	// RVA: 0xFC91B4 Offset: 0xFC91B4 VA: 0xFC91B4 Slot: 9
	public bool get_NetworkSync() { }

	// RVA: 0xFC91BC Offset: 0xFC91BC VA: 0xFC91BC Slot: 10
	public void set_NetworkSync(bool value) { }

	// RVA: 0xFC91C8 Offset: 0xFC91C8 VA: 0xFC91C8
	public static bool IsNullOrNone(NamedVariable variable) { }

	// RVA: 0xFC91D8 Offset: 0xFC91D8 VA: 0xFC91D8 Slot: 11
	public bool get_IsNone() { }

	// RVA: 0xFC925C Offset: 0xFC925C VA: 0xFC925C Slot: 8
	public bool get_UsesVariable() { }

	// RVA: 0xFC80A8 Offset: 0xFC80A8 VA: 0xFC80A8
	public void .ctor() { }

	// RVA: 0xFBCC80 Offset: 0xFBCC80 VA: 0xFBCC80
	public void .ctor(string name) { }

	// RVA: 0xFC810C Offset: 0xFC810C VA: 0xFC810C
	public void .ctor(NamedVariable source) { }

	// RVA: 0xFC92DC Offset: 0xFC92DC VA: 0xFC92DC Slot: 28
	public virtual void Init() { }

	// RVA: 0xFC92E0 Offset: 0xFC92E0 VA: 0xFC92E0 Slot: 29
	public virtual bool TestTypeConstraint(VariableType variableType, Type objectType) { }

	// RVA: 0xFC9324 Offset: 0xFC9324 VA: 0xFC9324 Slot: 30
	public virtual void SafeAssign(object val) { }

	// RVA: 0xFC938C Offset: 0xFC938C VA: 0xFC938C Slot: 31
	public virtual NamedVariable Clone() { }

	// RVA: 0xFC93F4 Offset: 0xFC93F4 VA: 0xFC93F4 Slot: 12
	public string GetDisplayName() { }

	// RVA: 0xFC9478 Offset: 0xFC9478 VA: 0xFC9478 Slot: 32
	public virtual float ToFloat() { }

	// RVA: 0xFC9480 Offset: 0xFC9480 VA: 0xFC9480 Slot: 33
	public virtual int ToInt() { }

	// RVA: 0xFC9488 Offset: 0xFC9488 VA: 0xFC9488 Slot: 34
	public virtual void Clear() { }

	// RVA: 0xFC94F0 Offset: 0xFC94F0 VA: 0xFC94F0 Slot: 21
	public int CompareTo(object obj) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class ActionData // TypeDefIndex: 3367
{
	// Fields
	private const string autoNameString = "~AutoName";
	private static readonly Dictionary<string, Type> ActionTypeLookup; // 0x0
	public static readonly Dictionary<Type, FieldInfo[]> ActionFieldsLookup; // 0x8
	public static readonly Dictionary<Type, int> ActionHashCodeLookup; // 0x10
	private static bool resaveActionData; // 0x18
	private static readonly List<int> UsedIndices; // 0x20
	private static readonly List<FieldInfo> InitFields; // 0x28
	[SerializeField] // RVA: 0xC84834 Offset: 0xC84834 VA: 0xC84834
	private List<string> actionNames; // 0x10
	[SerializeField] // RVA: 0xC84844 Offset: 0xC84844 VA: 0xC84844
	private List<string> customNames; // 0x18
	[SerializeField] // RVA: 0xC84854 Offset: 0xC84854 VA: 0xC84854
	private List<bool> actionEnabled; // 0x20
	[SerializeField] // RVA: 0xC84864 Offset: 0xC84864 VA: 0xC84864
	private List<bool> actionIsOpen; // 0x28
	[SerializeField] // RVA: 0xC84874 Offset: 0xC84874 VA: 0xC84874
	private List<int> actionStartIndex; // 0x30
	[SerializeField] // RVA: 0xC84884 Offset: 0xC84884 VA: 0xC84884
	private List<int> actionHashCodes; // 0x38
	[SerializeField] // RVA: 0xC84894 Offset: 0xC84894 VA: 0xC84894
	private List<Object> unityObjectParams; // 0x40
	[SerializeField] // RVA: 0xC848A4 Offset: 0xC848A4 VA: 0xC848A4
	private List<FsmGameObject> fsmGameObjectParams; // 0x48
	[SerializeField] // RVA: 0xC848B4 Offset: 0xC848B4 VA: 0xC848B4
	private List<FsmOwnerDefault> fsmOwnerDefaultParams; // 0x50
	[SerializeField] // RVA: 0xC848C4 Offset: 0xC848C4 VA: 0xC848C4
	private List<FsmAnimationCurve> animationCurveParams; // 0x58
	[SerializeField] // RVA: 0xC848D4 Offset: 0xC848D4 VA: 0xC848D4
	private List<FunctionCall> functionCallParams; // 0x60
	[SerializeField] // RVA: 0xC848E4 Offset: 0xC848E4 VA: 0xC848E4
	private List<FsmTemplateControl> fsmTemplateControlParams; // 0x68
	[SerializeField] // RVA: 0xC848F4 Offset: 0xC848F4 VA: 0xC848F4
	private List<FsmEventTarget> fsmEventTargetParams; // 0x70
	[SerializeField] // RVA: 0xC84904 Offset: 0xC84904 VA: 0xC84904
	private List<FsmProperty> fsmPropertyParams; // 0x78
	[SerializeField] // RVA: 0xC84914 Offset: 0xC84914 VA: 0xC84914
	private List<LayoutOption> layoutOptionParams; // 0x80
	[SerializeField] // RVA: 0xC84924 Offset: 0xC84924 VA: 0xC84924
	private List<FsmString> fsmStringParams; // 0x88
	[SerializeField] // RVA: 0xC84934 Offset: 0xC84934 VA: 0xC84934
	private List<FsmObject> fsmObjectParams; // 0x90
	[SerializeField] // RVA: 0xC84944 Offset: 0xC84944 VA: 0xC84944
	private List<FsmVar> fsmVarParams; // 0x98
	[SerializeField] // RVA: 0xC84954 Offset: 0xC84954 VA: 0xC84954
	private List<FsmArray> fsmArrayParams; // 0xA0
	[SerializeField] // RVA: 0xC84964 Offset: 0xC84964 VA: 0xC84964
	private List<FsmEnum> fsmEnumParams; // 0xA8
	[SerializeField] // RVA: 0xC84974 Offset: 0xC84974 VA: 0xC84974
	private List<FsmFloat> fsmFloatParams; // 0xB0
	[SerializeField] // RVA: 0xC84984 Offset: 0xC84984 VA: 0xC84984
	private List<FsmInt> fsmIntParams; // 0xB8
	[SerializeField] // RVA: 0xC84994 Offset: 0xC84994 VA: 0xC84994
	private List<FsmBool> fsmBoolParams; // 0xC0
	[SerializeField] // RVA: 0xC849A4 Offset: 0xC849A4 VA: 0xC849A4
	private List<FsmVector2> fsmVector2Params; // 0xC8
	[SerializeField] // RVA: 0xC849B4 Offset: 0xC849B4 VA: 0xC849B4
	private List<FsmVector3> fsmVector3Params; // 0xD0
	[SerializeField] // RVA: 0xC849C4 Offset: 0xC849C4 VA: 0xC849C4
	private List<FsmColor> fsmColorParams; // 0xD8
	[SerializeField] // RVA: 0xC849D4 Offset: 0xC849D4 VA: 0xC849D4
	private List<FsmRect> fsmRectParams; // 0xE0
	[SerializeField] // RVA: 0xC849E4 Offset: 0xC849E4 VA: 0xC849E4
	private List<FsmQuaternion> fsmQuaternionParams; // 0xE8
	[SerializeField] // RVA: 0xC849F4 Offset: 0xC849F4 VA: 0xC849F4
	private List<string> stringParams; // 0xF0
	[SerializeField] // RVA: 0xC84A04 Offset: 0xC84A04 VA: 0xC84A04
	private List<byte> byteData; // 0xF8
	private byte[] byteDataAsArray; // 0x100
	[SerializeField] // RVA: 0xC84A14 Offset: 0xC84A14 VA: 0xC84A14
	private List<int> arrayParamSizes; // 0x108
	[SerializeField] // RVA: 0xC84A24 Offset: 0xC84A24 VA: 0xC84A24
	private List<string> arrayParamTypes; // 0x110
	[SerializeField] // RVA: 0xC84A34 Offset: 0xC84A34 VA: 0xC84A34
	private List<int> customTypeSizes; // 0x118
	[SerializeField] // RVA: 0xC84A44 Offset: 0xC84A44 VA: 0xC84A44
	private List<string> customTypeNames; // 0x120
	[SerializeField] // RVA: 0xC84A54 Offset: 0xC84A54 VA: 0xC84A54
	private List<ParamDataType> paramDataType; // 0x128
	[SerializeField] // RVA: 0xC84A64 Offset: 0xC84A64 VA: 0xC84A64
	private List<string> paramName; // 0x130
	[SerializeField] // RVA: 0xC84A74 Offset: 0xC84A74 VA: 0xC84A74
	private List<int> paramDataPos; // 0x138
	[SerializeField] // RVA: 0xC84A84 Offset: 0xC84A84 VA: 0xC84A84
	private List<int> paramByteDataSize; // 0x140
	private int nextParamIndex; // 0x148
	private const int MUST_BE_LESS_THAN = 100000000;

	// Properties
	public int ActionCount { get; }
	public List<string> ActionNames { get; }

	// Methods

	// RVA: 0xE188D4 Offset: 0xE188D4 VA: 0xE188D4
	public int get_ActionCount() { }

	// RVA: 0xE18934 Offset: 0xE18934 VA: 0xE18934
	public List<string> get_ActionNames() { }

	// RVA: 0xE1893C Offset: 0xE1893C VA: 0xE1893C
	public ActionData Copy() { }

	// RVA: 0xE19D7C Offset: 0xE19D7C VA: 0xE19D7C
	private List<string> CopyStringParams() { }

	// RVA: 0xE1905C Offset: 0xE1905C VA: 0xE1905C
	private List<FsmFloat> CopyFsmFloatParams() { }

	// RVA: 0xE19200 Offset: 0xE19200 VA: 0xE19200
	private List<FsmInt> CopyFsmIntParams() { }

	// RVA: 0xE193A4 Offset: 0xE193A4 VA: 0xE193A4
	private List<FsmBool> CopyFsmBoolParams() { }

	// RVA: 0xE196EC Offset: 0xE196EC VA: 0xE196EC
	private List<FsmVector2> CopyFsmVector2Params() { }

	// RVA: 0xE19890 Offset: 0xE19890 VA: 0xE19890
	private List<FsmVector3> CopyFsmVector3Params() { }

	// RVA: 0xE19548 Offset: 0xE19548 VA: 0xE19548
	private List<FsmColor> CopyFsmColorParams() { }

	// RVA: 0xE19A34 Offset: 0xE19A34 VA: 0xE19A34
	private List<FsmRect> CopyFsmRectParams() { }

	// RVA: 0xE19BD8 Offset: 0xE19BD8 VA: 0xE19BD8
	private List<FsmQuaternion> CopyFsmQuaternionParams() { }

	// RVA: 0xE19DF8 Offset: 0xE19DF8 VA: 0xE19DF8
	private List<FsmString> CopyFsmStringParams() { }

	// RVA: 0xE19F9C Offset: 0xE19F9C VA: 0xE19F9C
	private List<FsmObject> CopyFsmObjectParams() { }

	// RVA: 0xE1A140 Offset: 0xE1A140 VA: 0xE1A140
	private List<FsmGameObject> CopyFsmGameObjectParams() { }

	// RVA: 0xE1A2E4 Offset: 0xE1A2E4 VA: 0xE1A2E4
	private List<FsmOwnerDefault> CopyFsmOwnerDefaultParams() { }

	// RVA: 0xE1A488 Offset: 0xE1A488 VA: 0xE1A488
	private List<FsmAnimationCurve> CopyAnimationCurveParams() { }

	// RVA: 0xE1A73C Offset: 0xE1A73C VA: 0xE1A73C
	private List<FunctionCall> CopyFunctionCallParams() { }

	// RVA: 0xE1A8E0 Offset: 0xE1A8E0 VA: 0xE1A8E0
	private List<FsmTemplateControl> CopyFsmTemplateControlParams() { }

	// RVA: 0xE1AA84 Offset: 0xE1AA84 VA: 0xE1AA84
	private List<FsmVar> CopyFsmVarParams() { }

	// RVA: 0xE1AC28 Offset: 0xE1AC28 VA: 0xE1AC28
	private List<FsmArray> CopyFsmArrayParams() { }

	// RVA: 0xE1ADCC Offset: 0xE1ADCC VA: 0xE1ADCC
	private List<FsmEnum> CopyFsmEnumParams() { }

	// RVA: 0xE1AF70 Offset: 0xE1AF70 VA: 0xE1AF70
	private List<FsmProperty> CopyFsmPropertyParams() { }

	// RVA: 0xE1B114 Offset: 0xE1B114 VA: 0xE1B114
	private List<FsmEventTarget> CopyFsmEventTargetParams() { }

	// RVA: 0xE1B2B8 Offset: 0xE1B2B8 VA: 0xE1B2B8
	private List<LayoutOption> CopyLayoutOptionParams() { }

	// RVA: 0xE1B45C Offset: 0xE1B45C VA: 0xE1B45C
	private void ClearActionData() { }

	// RVA: 0xE1B61C Offset: 0xE1B61C VA: 0xE1B61C
	public static Type GetActionType(string actionName) { }

	// RVA: 0xE1B74C Offset: 0xE1B74C VA: 0xE1B74C
	public static FieldInfo[] GetFields(Type actionType) { }

	// RVA: 0xE1B87C Offset: 0xE1B87C VA: 0xE1B87C
	private static int GetActionTypeHashCode(Type actionType) { }

	// RVA: 0xE1BA78 Offset: 0xE1BA78 VA: 0xE1BA78
	private static int GetStableHash(string s) { }

	// RVA: 0xE1BB8C Offset: 0xE1BB8C VA: 0xE1BB8C
	public FsmStateAction[] LoadActions(FsmState state) { }

	// RVA: 0xE1CE14 Offset: 0xE1CE14 VA: 0xE1CE14
	public FsmStateAction CreateAction(FsmState state, int actionIndex) { }

	// RVA: 0xE1BDE0 Offset: 0xE1BDE0 VA: 0xE1BDE0
	public FsmStateAction CreateAction(ActionData.Context context, int actionIndex) { }

	// RVA: 0xE1D708 Offset: 0xE1D708 VA: 0xE1D708
	private void LoadActionField(Fsm fsm, object obj, FieldInfo field, int paramIndex) { }

	// RVA: 0xE2200C Offset: 0xE2200C VA: 0xE2200C
	private void LoadArrayElement(Fsm fsm, Array field, Type fieldType, int elementIndex, int paramIndex) { }

	// RVA: 0xE1CF78 Offset: 0xE1CF78 VA: 0xE1CF78
	public static void LogError(ActionData.Context context, string error) { }

	// RVA: 0xE1D084 Offset: 0xE1D084 VA: 0xE1D084
	private static void LogInfo(ActionData.Context context, string info) { }

	// RVA: 0xE1ED6C Offset: 0xE1ED6C VA: 0xE1ED6C
	private FsmFloat GetFsmFloat(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1EFD8 Offset: 0xE1EFD8 VA: 0xE1EFD8
	private FsmInt GetFsmInt(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1F19C Offset: 0xE1F19C VA: 0xE1F19C
	private FsmBool GetFsmBool(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1F360 Offset: 0xE1F360 VA: 0xE1F360
	private FsmVector2 GetFsmVector2(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1F524 Offset: 0xE1F524 VA: 0xE1F524
	private FsmVector3 GetFsmVector3(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1FA70 Offset: 0xE1FA70 VA: 0xE1FA70
	private FsmColor GetFsmColor(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1F6E8 Offset: 0xE1F6E8 VA: 0xE1F6E8
	private FsmRect GetFsmRect(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1F8AC Offset: 0xE1F8AC VA: 0xE1F8AC
	private FsmQuaternion GetFsmQuaternion(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1EC20 Offset: 0xE1EC20 VA: 0xE1EC20
	private FsmGameObject GetFsmGameObject(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20890 Offset: 0xE20890 VA: 0xE20890
	private FsmTemplateControl GetFsmTemplateControl(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20AF0 Offset: 0xE20AF0 VA: 0xE20AF0
	private FsmVar GetFsmVar(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20DA8 Offset: 0xE20DA8 VA: 0xE20DA8
	private FsmArray GetFsmArray(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20C44 Offset: 0xE20C44 VA: 0xE20C44
	private FsmEnum GetFsmEnum(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20048 Offset: 0xE20048 VA: 0xE20048
	private FunctionCall GetFunctionCall(Fsm fsm, int paramIndex) { }

	// RVA: 0xE20F0C Offset: 0xE20F0C VA: 0xE20F0C
	private FsmProperty GetFsmProperty(Fsm fsm, int paramIndex) { }

	// RVA: 0xE21864 Offset: 0xE21864 VA: 0xE21864
	private FsmEventTarget GetFsmEventTarget(Fsm fsm, int paramIndex) { }

	// RVA: 0xE21B7C Offset: 0xE21B7C VA: 0xE21B7C
	private LayoutOption GetLayoutOption(Fsm fsm, int paramIndex) { }

	// RVA: 0xE21D64 Offset: 0xE21D64 VA: 0xE21D64
	private FsmOwnerDefault GetFsmOwnerDefault(Fsm fsm, int paramIndex) { }

	// RVA: 0xE21EC8 Offset: 0xE21EC8 VA: 0xE21EC8
	private FsmString GetFsmString(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1FC34 Offset: 0xE1FC34 VA: 0xE1FC34
	private FsmObject GetFsmObject(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1FD78 Offset: 0xE1FD78 VA: 0xE1FD78
	private FsmMaterial GetFsmMaterial(Fsm fsm, int paramIndex) { }

	// RVA: 0xE1FEE0 Offset: 0xE1FEE0 VA: 0xE1FEE0
	private FsmTexture GetFsmTexture(Fsm fsm, int paramIndex) { }

	// RVA: 0xE239E4 Offset: 0xE239E4 VA: 0xE239E4
	public bool UsesDataVersion2() { }

	// RVA: 0xE1CEB8 Offset: 0xE1CEB8 VA: 0xE1CEB8
	private static string TryFixActionName(string actionName) { }

	// RVA: 0xE1D1A4 Offset: 0xE1D1A4 VA: 0xE1D1A4
	private FsmStateAction TryRecoverAction(ActionData.Context context, Type actionType, FsmStateAction action, int actionIndex) { }

	// RVA: 0xE23B8C Offset: 0xE23B8C VA: 0xE23B8C
	private FieldInfo FindField(Type actionType, int paramIndex) { }

	// RVA: 0xE23E7C Offset: 0xE23E7C VA: 0xE23E7C
	private static FieldInfo FindField(Type actionType, string name) { }

	// RVA: 0xE23FF8 Offset: 0xE23FF8 VA: 0xE23FF8
	private bool TryConvertParameter(ActionData.Context context, FsmStateAction action, FieldInfo field, int paramIndex) { }

	// RVA: 0xE26954 Offset: 0xE26954 VA: 0xE26954
	private bool TryConvertArrayElement(Fsm fsm, Array field, ParamDataType originalParamType, ParamDataType currentParamType, int elementIndex, int paramIndex) { }

	// RVA: 0xE26B40 Offset: 0xE26B40 VA: 0xE26B40
	private object ConvertType(Fsm fsm, ParamDataType originalParamType, ParamDataType currentParamType, int paramIndex) { }

	// RVA: 0xE1CD6C Offset: 0xE1CD6C VA: 0xE1CD6C
	public void SaveActions(FsmState state, FsmStateAction[] actions) { }

	// RVA: 0xE27738 Offset: 0xE27738 VA: 0xE27738
	private void SaveAction(Fsm fsm, FsmStateAction action) { }

	// RVA: 0xE27A7C Offset: 0xE27A7C VA: 0xE27A7C
	private void SaveActionField(Fsm fsm, Type fieldType, object obj) { }

	// RVA: 0xE2AD10 Offset: 0xE2AD10 VA: 0xE2AD10
	private void AddByteData(ICollection<byte> bytes) { }

	// RVA: 0xE2AE94 Offset: 0xE2AE94 VA: 0xE2AE94
	private void SaveString(string str) { }

	// RVA: 0xE25F08 Offset: 0xE25F08 VA: 0xE25F08
	private static ParamDataType GetParamDataType(Type type) { }

	// RVA: 0xE18EAC Offset: 0xE18EAC VA: 0xE18EAC
	public void .ctor() { }

	// RVA: 0xE2AFE8 Offset: 0xE2AFE8 VA: 0xE2AFE8
	private static void .cctor() { }
}

// Namespace: 
public class ActionData.Context // TypeDefIndex: 3368
{
	// Fields
	public Fsm currentFsm; // 0x10
	public FsmState currentState; // 0x18
	public FsmStateAction currentAction; // 0x20
	public int currentActionIndex; // 0x28
	public string currentParameter; // 0x30

	// Methods

	// RVA: 0xE1BDD8 Offset: 0xE1BDD8 VA: 0xE1BDD8
	public void .ctor() { }
}

// Namespace: HutongGames.PlayMaker
public enum ParamDataType // TypeDefIndex: 3369
{
	// Fields
	public int value__; // 0x0
	public const ParamDataType Integer = 0;
	public const ParamDataType Boolean = 1;
	public const ParamDataType Float = 2;
	public const ParamDataType String = 3;
	public const ParamDataType Color = 4;
	public const ParamDataType ObjectReference = 5;
	public const ParamDataType LayerMask = 6;
	public const ParamDataType Enum = 7;
	public const ParamDataType Vector2 = 8;
	public const ParamDataType Vector3 = 9;
	public const ParamDataType Vector4 = 10;
	public const ParamDataType Rect = 11;
	public const ParamDataType Array = 12;
	public const ParamDataType Character = 13;
	public const ParamDataType AnimationCurve = 14;
	public const ParamDataType FsmFloat = 15;
	public const ParamDataType FsmInt = 16;
	public const ParamDataType FsmBool = 17;
	public const ParamDataType FsmString = 18;
	public const ParamDataType FsmGameObject = 19;
	public const ParamDataType FsmOwnerDefault = 20;
	public const ParamDataType FunctionCall = 21;
	public const ParamDataType FsmAnimationCurve = 22;
	public const ParamDataType FsmEvent = 23;
	public const ParamDataType FsmObject = 24;
	public const ParamDataType FsmColor = 25;
	public const ParamDataType Unsupported = 26;
	public const ParamDataType GameObject = 27;
	public const ParamDataType FsmVector3 = 28;
	public const ParamDataType LayoutOption = 29;
	public const ParamDataType FsmRect = 30;
	public const ParamDataType FsmEventTarget = 31;
	public const ParamDataType FsmMaterial = 32;
	public const ParamDataType FsmTexture = 33;
	public const ParamDataType Quaternion = 34;
	public const ParamDataType FsmQuaternion = 35;
	public const ParamDataType FsmProperty = 36;
	public const ParamDataType FsmVector2 = 37;
	public const ParamDataType FsmTemplateControl = 38;
	public const ParamDataType FsmVar = 39;
	public const ParamDataType CustomClass = 40;
	public const ParamDataType FsmArray = 41;
	public const ParamDataType FsmEnum = 42;
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class Fsm : INameable, IComparable // TypeDefIndex: 3370
{
	// Fields
	public const int CurrentDataVersion = 2;
	public const int DefaultMaxLoops = 1000;
	private MethodInfo updateHelperSetDirty; // 0x10
	private const string StartStateName = "State 1";
	public static FsmEventData EventData; // 0x0
	private static Color debugLookAtColor; // 0x8
	private static Color debugRaycastColor; // 0x18
	[SerializeField] // RVA: 0xC84A94 Offset: 0xC84A94 VA: 0xC84A94
	private int dataVersion; // 0x18
	private MonoBehaviour owner; // 0x20
	[SerializeField] // RVA: 0xC84AA4 Offset: 0xC84AA4 VA: 0xC84AA4
	private FsmTemplate usedInTemplate; // 0x28
	[SerializeField] // RVA: 0xC84AB4 Offset: 0xC84AB4 VA: 0xC84AB4
	private string name; // 0x30
	[SerializeField] // RVA: 0xC84AC4 Offset: 0xC84AC4 VA: 0xC84AC4
	private string startState; // 0x38
	[SerializeField] // RVA: 0xC84AD4 Offset: 0xC84AD4 VA: 0xC84AD4
	private FsmState[] states; // 0x40
	[SerializeField] // RVA: 0xC84AE4 Offset: 0xC84AE4 VA: 0xC84AE4
	private FsmEvent[] events; // 0x48
	[SerializeField] // RVA: 0xC84AF4 Offset: 0xC84AF4 VA: 0xC84AF4
	private FsmTransition[] globalTransitions; // 0x50
	[SerializeField] // RVA: 0xC84B04 Offset: 0xC84B04 VA: 0xC84B04
	private FsmVariables variables; // 0x58
	[SerializeField] // RVA: 0xC84B14 Offset: 0xC84B14 VA: 0xC84B14
	[TextAreaAttribute] // RVA: 0xC84B14 Offset: 0xC84B14 VA: 0xC84B14
	private string description; // 0x60
	[SerializeField] // RVA: 0xC84B54 Offset: 0xC84B54 VA: 0xC84B54
	private string docUrl; // 0x68
	[SerializeField] // RVA: 0xC84B64 Offset: 0xC84B64 VA: 0xC84B64
	private bool showStateLabel; // 0x70
	[SerializeField] // RVA: 0xC84B74 Offset: 0xC84B74 VA: 0xC84B74
	private int maxLoopCount; // 0x74
	[SerializeField] // RVA: 0xC84B84 Offset: 0xC84B84 VA: 0xC84B84
	private string watermark; // 0x78
	[SerializeField] // RVA: 0xC84B94 Offset: 0xC84B94 VA: 0xC84B94
	private string password; // 0x80
	[SerializeField] // RVA: 0xC84BA4 Offset: 0xC84BA4 VA: 0xC84BA4
	private bool locked; // 0x88
	[SerializeField] // RVA: 0xC84BB4 Offset: 0xC84BB4 VA: 0xC84BB4
	private bool manualUpdate; // 0x89
	[SerializeField] // RVA: 0xC84BC4 Offset: 0xC84BC4 VA: 0xC84BC4
	private bool keepDelayedEventsOnStateExit; // 0x8A
	[SerializeField] // RVA: 0xC84BD4 Offset: 0xC84BD4 VA: 0xC84BD4
	private bool preprocessed; // 0x8B
	private Fsm host; // 0x90
	private Fsm rootFsm; // 0x98
	private List<Fsm> subFsmList; // 0xA0
	public bool setDirty; // 0xA8
	private bool activeStateEntered; // 0xA9
	public List<FsmEvent> ExposedEvents; // 0xB0
	private FsmLog myLog; // 0xB8
	public bool RestartOnEnable; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xC84BE4 Offset: 0xC84BE4 VA: 0xC84BE4
	private bool <Started>k__BackingField; // 0xC1
	public bool EnableDebugFlow; // 0xC2
	public bool EnableBreakpoints; // 0xC3
	public bool StepFrame; // 0xC4
	private readonly List<DelayedEvent> delayedEvents; // 0xC8
	private readonly List<DelayedEvent> updateEvents; // 0xD0
	private readonly List<DelayedEvent> removeEvents; // 0xD8
	[SerializeField] // RVA: 0xC84BF4 Offset: 0xC84BF4 VA: 0xC84BF4
	private Fsm.EditorFlags editorFlags; // 0xE0
	[CompilerGeneratedAttribute] // RVA: 0xC84C04 Offset: 0xC84C04 VA: 0xC84C04
	private FsmEventTarget <EventTarget>k__BackingField; // 0xE8
	private bool initialized; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xC84C14 Offset: 0xC84C14 VA: 0xC84C14
	private bool <Finished>k__BackingField; // 0xF1
	[SerializeField] // RVA: 0xC84C24 Offset: 0xC84C24 VA: 0xC84C24
	private string activeStateName; // 0xF8
	private FsmState activeState; // 0x100
	private FsmState switchToState; // 0x108
	private FsmState previousActiveState; // 0x110
	[CompilerGeneratedAttribute] // RVA: 0xC84C34 Offset: 0xC84C34 VA: 0xC84C34
	private FsmTransition <LastTransition>k__BackingField; // 0x118
	public Action<FsmState> StateChanged; // 0x120
	[CompilerGeneratedAttribute] // RVA: 0xC84C44 Offset: 0xC84C44 VA: 0xC84C44
	private bool <IsModifiedPrefabInstance>k__BackingField; // 0x128
	[ObsoleteAttribute] // RVA: 0xC84C54 Offset: 0xC84C54 VA: 0xC84C54
	public static readonly Color[] StateColors; // 0x28
	private FsmState editState; // 0x130
	[CompilerGeneratedAttribute] // RVA: 0xC84C8C Offset: 0xC84C8C VA: 0xC84C8C
	private static GameObject <LastClickedObject>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC84C9C Offset: 0xC84C9C VA: 0xC84C9C
	private static bool <BreakpointsEnabled>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC84CAC Offset: 0xC84CAC VA: 0xC84CAC
	private static bool <HitBreakpoint>k__BackingField; // 0x39
	[CompilerGeneratedAttribute] // RVA: 0xC84CBC Offset: 0xC84CBC VA: 0xC84CBC
	private static Fsm <BreakAtFsm>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC84CCC Offset: 0xC84CCC VA: 0xC84CCC
	private static FsmState <BreakAtState>k__BackingField; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC84CDC Offset: 0xC84CDC VA: 0xC84CDC
	private static bool <IsBreak>k__BackingField; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC84CEC Offset: 0xC84CEC VA: 0xC84CEC
	private static bool <IsErrorBreak>k__BackingField; // 0x51
	[CompilerGeneratedAttribute] // RVA: 0xC84CFC Offset: 0xC84CFC VA: 0xC84CFC
	private static string <LastError>k__BackingField; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC84D0C Offset: 0xC84D0C VA: 0xC84D0C
	private static bool <StepToStateChange>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC84D1C Offset: 0xC84D1C VA: 0xC84D1C
	private static Fsm <StepFsm>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC84D2C Offset: 0xC84D2C VA: 0xC84D2C
	private bool <SwitchedState>k__BackingField; // 0x138
	[SerializeField] // RVA: 0xC84D3C Offset: 0xC84D3C VA: 0xC84D3C
	private bool mouseEvents; // 0x139
	[SerializeField] // RVA: 0xC84D4C Offset: 0xC84D4C VA: 0xC84D4C
	private bool handleLevelLoaded; // 0x13A
	[SerializeField] // RVA: 0xC84D5C Offset: 0xC84D5C VA: 0xC84D5C
	private bool handleTriggerEnter2D; // 0x13B
	[SerializeField] // RVA: 0xC84D6C Offset: 0xC84D6C VA: 0xC84D6C
	private bool handleTriggerExit2D; // 0x13C
	[SerializeField] // RVA: 0xC84D7C Offset: 0xC84D7C VA: 0xC84D7C
	private bool handleTriggerStay2D; // 0x13D
	[SerializeField] // RVA: 0xC84D8C Offset: 0xC84D8C VA: 0xC84D8C
	private bool handleCollisionEnter2D; // 0x13E
	[SerializeField] // RVA: 0xC84D9C Offset: 0xC84D9C VA: 0xC84D9C
	private bool handleCollisionExit2D; // 0x13F
	[SerializeField] // RVA: 0xC84DAC Offset: 0xC84DAC VA: 0xC84DAC
	private bool handleCollisionStay2D; // 0x140
	[SerializeField] // RVA: 0xC84DBC Offset: 0xC84DBC VA: 0xC84DBC
	private bool handleTriggerEnter; // 0x141
	[SerializeField] // RVA: 0xC84DCC Offset: 0xC84DCC VA: 0xC84DCC
	private bool handleTriggerExit; // 0x142
	[SerializeField] // RVA: 0xC84DDC Offset: 0xC84DDC VA: 0xC84DDC
	private bool handleTriggerStay; // 0x143
	[SerializeField] // RVA: 0xC84DEC Offset: 0xC84DEC VA: 0xC84DEC
	private bool handleCollisionEnter; // 0x144
	[SerializeField] // RVA: 0xC84DFC Offset: 0xC84DFC VA: 0xC84DFC
	private bool handleCollisionExit; // 0x145
	[SerializeField] // RVA: 0xC84E0C Offset: 0xC84E0C VA: 0xC84E0C
	private bool handleCollisionStay; // 0x146
	[SerializeField] // RVA: 0xC84E1C Offset: 0xC84E1C VA: 0xC84E1C
	private bool handleParticleCollision; // 0x147
	[SerializeField] // RVA: 0xC84E2C Offset: 0xC84E2C VA: 0xC84E2C
	private bool handleControllerColliderHit; // 0x148
	[SerializeField] // RVA: 0xC84E3C Offset: 0xC84E3C VA: 0xC84E3C
	private bool handleJointBreak; // 0x149
	[SerializeField] // RVA: 0xC84E4C Offset: 0xC84E4C VA: 0xC84E4C
	private bool handleJointBreak2D; // 0x14A
	[SerializeField] // RVA: 0xC84E5C Offset: 0xC84E5C VA: 0xC84E5C
	private bool handleOnGUI; // 0x14B
	[SerializeField] // RVA: 0xC84E6C Offset: 0xC84E6C VA: 0xC84E6C
	private bool handleFixedUpdate; // 0x14C
	[SerializeField] // RVA: 0xC84E7C Offset: 0xC84E7C VA: 0xC84E7C
	private bool handleLateUpdate; // 0x14D
	[SerializeField] // RVA: 0xC84E8C Offset: 0xC84E8C VA: 0xC84E8C
	private bool handleApplicationEvents; // 0x14E
	[SerializeField] // RVA: 0xC84E9C Offset: 0xC84E9C VA: 0xC84E9C
	private UiEvents handleUiEvents; // 0x150
	[SerializeField] // RVA: 0xC84EAC Offset: 0xC84EAC VA: 0xC84EAC
	private bool handleLegacyNetworking; // 0x154
	[CompilerGeneratedAttribute] // RVA: 0xC84EBC Offset: 0xC84EBC VA: 0xC84EBC
	private Collision <CollisionInfo>k__BackingField; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC84ECC Offset: 0xC84ECC VA: 0xC84ECC
	private Collider <TriggerCollider>k__BackingField; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xC84EDC Offset: 0xC84EDC VA: 0xC84EDC
	private Collision2D <Collision2DInfo>k__BackingField; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xC84EEC Offset: 0xC84EEC VA: 0xC84EEC
	private Collider2D <TriggerCollider2D>k__BackingField; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xC84EFC Offset: 0xC84EFC VA: 0xC84EFC
	private float <JointBreakForce>k__BackingField; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xC84F0C Offset: 0xC84F0C VA: 0xC84F0C
	private Joint2D <BrokenJoint2D>k__BackingField; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xC84F1C Offset: 0xC84F1C VA: 0xC84F1C
	private GameObject <ParticleCollisionGO>k__BackingField; // 0x188
	[CompilerGeneratedAttribute] // RVA: 0xC84F2C Offset: 0xC84F2C VA: 0xC84F2C
	private string <TriggerName>k__BackingField; // 0x190
	[CompilerGeneratedAttribute] // RVA: 0xC84F3C Offset: 0xC84F3C VA: 0xC84F3C
	private string <CollisionName>k__BackingField; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xC84F4C Offset: 0xC84F4C VA: 0xC84F4C
	private string <Trigger2dName>k__BackingField; // 0x1A0
	[CompilerGeneratedAttribute] // RVA: 0xC84F5C Offset: 0xC84F5C VA: 0xC84F5C
	private string <Collision2dName>k__BackingField; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xC84F6C Offset: 0xC84F6C VA: 0xC84F6C
	private ControllerColliderHit <ControllerCollider>k__BackingField; // 0x1B0
	[CompilerGeneratedAttribute] // RVA: 0xC84F7C Offset: 0xC84F7C VA: 0xC84F7C
	private RaycastHit <RaycastHitInfo>k__BackingField; // 0x1B8
	private static Dictionary<Fsm, RaycastHit2D> lastRaycastHit2DInfoLUT; // 0x70
	[SerializeField] // RVA: 0xC84F8C Offset: 0xC84F8C VA: 0xC84F8C
	private bool handleAnimatorMove; // 0x1E4
	[SerializeField] // RVA: 0xC84F9C Offset: 0xC84F9C VA: 0xC84F9C
	private bool handleAnimatorIK; // 0x1E5
	private static readonly FsmEventTarget targetSelf; // 0x78

	// Properties
	public static List<Fsm> FsmList { get; }
	public static List<Fsm> SortedFsmList { get; }
	private MethodInfo UpdateHelperSetDirty { get; }
	public bool ManualUpdate { get; set; }
	public bool KeepDelayedEventsOnStateExit { get; set; }
	public bool Preprocessed { get; set; }
	public Fsm Host { get; set; }
	public string Password { get; }
	public bool Locked { get; }
	public FsmTemplate Template { get; }
	public bool IsSubFsm { get; }
	public Fsm RootFsm { get; }
	public List<Fsm> SubFsmList { get; }
	public bool Started { get; set; }
	public List<DelayedEvent> DelayedEvents { get; }
	public int DataVersion { get; set; }
	public MonoBehaviour Owner { get; set; }
	public bool NameIsExpanded { get; set; }
	public bool ControlsIsExpanded { get; set; }
	public bool DebugIsExpanded { get; set; }
	public bool ExperimentalIsExpanded { get; set; }
	public string Name { get; set; }
	public FsmTemplate UsedInTemplate { get; set; }
	public string StartState { get; set; }
	public FsmState[] States { get; set; }
	public FsmEvent[] Events { get; set; }
	public FsmTransition[] GlobalTransitions { get; set; }
	public FsmVariables Variables { get; set; }
	public FsmEventTarget EventTarget { get; set; }
	public bool Initialized { get; }
	public bool Active { get; }
	public bool Finished { get; set; }
	public bool IsSwitchingState { get; }
	public FsmState ActiveState { get; set; }
	public string ActiveStateName { get; }
	public FsmState PreviousActiveState { get; set; }
	public FsmTransition LastTransition { get; set; }
	public int MaxLoopCount { get; }
	public int MaxLoopCountOverride { get; set; }
	public string OwnerName { get; }
	public string OwnerDebugName { get; }
	public GameObject GameObject { get; }
	public string GameObjectName { get; }
	public Object OwnerObject { get; }
	public PlayMakerFSM FsmComponent { get; }
	public FsmLog MyLog { get; }
	public bool IsModifiedPrefabInstance { get; set; }
	public string Description { get; set; }
	public string Watermark { get; set; }
	public bool ShowStateLabel { get; set; }
	public static Color DebugLookAtColor { get; set; }
	public static Color DebugRaycastColor { get; set; }
	private string GuiLabel { get; }
	public string DocUrl { get; set; }
	public FsmState EditState { get; set; }
	public static GameObject LastClickedObject { get; set; }
	public static bool BreakpointsEnabled { get; set; }
	public static bool HitBreakpoint { get; set; }
	public static Fsm BreakAtFsm { get; set; }
	public static FsmState BreakAtState { get; set; }
	public static bool IsBreak { get; set; }
	public static bool IsErrorBreak { get; set; }
	public static string LastError { get; set; }
	public static bool StepToStateChange { get; set; }
	public static Fsm StepFsm { get; set; }
	public bool SwitchedState { get; set; }
	public bool MouseEvents { get; set; }
	public bool HandleLevelLoaded { get; set; }
	public bool HandleTriggerEnter2D { get; set; }
	public bool HandleTriggerExit2D { get; set; }
	public bool HandleTriggerStay2D { get; set; }
	public bool HandleCollisionEnter2D { get; set; }
	public bool HandleCollisionExit2D { get; set; }
	public bool HandleCollisionStay2D { get; set; }
	public bool HandleTriggerEnter { get; set; }
	public bool HandleTriggerExit { get; set; }
	public bool HandleTriggerStay { get; set; }
	public bool HandleCollisionEnter { get; set; }
	public bool HandleCollisionExit { get; set; }
	public bool HandleCollisionStay { get; set; }
	public bool HandleParticleCollision { get; set; }
	public bool HandleControllerColliderHit { get; set; }
	public bool HandleJointBreak { get; set; }
	public bool HandleJointBreak2D { get; set; }
	public bool HandleOnGUI { get; set; }
	public bool HandleFixedUpdate { get; set; }
	public bool HandleLateUpdate { get; set; }
	public bool HandleApplicationEvents { get; set; }
	public UiEvents HandleUiEvents { get; set; }
	public bool HandleLegacyNetworking { get; set; }
	public Collision CollisionInfo { get; set; }
	public Collider TriggerCollider { get; set; }
	public Collision2D Collision2DInfo { get; set; }
	public Collider2D TriggerCollider2D { get; set; }
	public float JointBreakForce { get; set; }
	public Joint2D BrokenJoint2D { get; set; }
	public GameObject ParticleCollisionGO { get; set; }
	public GameObject CollisionGO { get; }
	public GameObject Collision2dGO { get; }
	public GameObject TriggerGO { get; }
	public GameObject Trigger2dGO { get; }
	public string TriggerName { get; set; }
	public string CollisionName { get; set; }
	public string Trigger2dName { get; set; }
	public string Collision2dName { get; set; }
	public ControllerColliderHit ControllerCollider { get; set; }
	public RaycastHit RaycastHitInfo { get; set; }
	public bool HandleAnimatorMove { get; set; }
	public bool HandleAnimatorIK { get; set; }

	// Methods

	// RVA: 0xE2C938 Offset: 0xE2C938 VA: 0xE2C938
	public static List<Fsm> get_FsmList() { }

	// RVA: 0xE2CB34 Offset: 0xE2CB34 VA: 0xE2CB34
	public static List<Fsm> get_SortedFsmList() { }

	// RVA: 0xE2CBB8 Offset: 0xE2CBB8 VA: 0xE2CBB8
	private MethodInfo get_UpdateHelperSetDirty() { }

	// RVA: 0xE2CC5C Offset: 0xE2CC5C VA: 0xE2CC5C
	public bool get_ManualUpdate() { }

	// RVA: 0xE2CC64 Offset: 0xE2CC64 VA: 0xE2CC64
	public void set_ManualUpdate(bool value) { }

	// RVA: 0xE2CC70 Offset: 0xE2CC70 VA: 0xE2CC70
	public bool get_KeepDelayedEventsOnStateExit() { }

	// RVA: 0xE2CC78 Offset: 0xE2CC78 VA: 0xE2CC78
	public void set_KeepDelayedEventsOnStateExit(bool value) { }

	// RVA: 0xE2CC84 Offset: 0xE2CC84 VA: 0xE2CC84
	public bool get_Preprocessed() { }

	// RVA: 0xE2CC8C Offset: 0xE2CC8C VA: 0xE2CC8C
	public void set_Preprocessed(bool value) { }

	// RVA: 0xE2CC98 Offset: 0xE2CC98 VA: 0xE2CC98
	public Fsm get_Host() { }

	// RVA: 0xE2CCA0 Offset: 0xE2CCA0 VA: 0xE2CCA0
	private void set_Host(Fsm value) { }

	// RVA: 0xE2CCA8 Offset: 0xE2CCA8 VA: 0xE2CCA8
	public string get_Password() { }

	// RVA: 0xE2CCB0 Offset: 0xE2CCB0 VA: 0xE2CCB0
	public bool get_Locked() { }

	// RVA: 0xE2CCB8 Offset: 0xE2CCB8 VA: 0xE2CCB8
	public void Lock(string pass) { }

	// RVA: 0xE2CCD4 Offset: 0xE2CCD4 VA: 0xE2CCD4
	public void Unlock(string pass) { }

	// RVA: 0xE2CD88 Offset: 0xE2CD88 VA: 0xE2CD88
	public FsmTemplate get_Template() { }

	// RVA: 0xE2CF20 Offset: 0xE2CF20 VA: 0xE2CF20
	public bool get_IsSubFsm() { }

	// RVA: 0xE2CF30 Offset: 0xE2CF30 VA: 0xE2CF30
	public Fsm get_RootFsm() { }

	// RVA: 0xE2CF84 Offset: 0xE2CF84 VA: 0xE2CF84
	public List<Fsm> get_SubFsmList() { }

	[CompilerGeneratedAttribute] // RVA: 0xC85B14 Offset: 0xC85B14 VA: 0xC85B14
	// RVA: 0xE2CFF8 Offset: 0xE2CFF8 VA: 0xE2CFF8
	public bool get_Started() { }

	[CompilerGeneratedAttribute] // RVA: 0xC85B24 Offset: 0xC85B24 VA: 0xC85B24
	// RVA: 0xE2D000 Offset: 0xE2D000 VA: 0xE2D000
	private void set_Started(bool value) { }

	// RVA: 0xE2D00C Offset: 0xE2D00C VA: 0xE2D00C
	public List<DelayedEvent> get_DelayedEvents() { }

	// RVA: 0xE2D014 Offset: 0xE2D014 VA: 0xE2D014
	public void KillDelayedEvents() { }

	// RVA: 0xE1ED64 Offset: 0xE1ED64 VA: 0xE1ED64
	public int get_DataVersion() { }

	// RVA: 0xE2D074 Offset: 0xE2D074 VA: 0xE2D074
	public void set_DataVersion(int value) { }

	// RVA: 0xE23390 Offset: 0xE23390 VA: 0xE23390
	public MonoBehaviour get_Owner() { }

	// RVA: 0xE2D07C Offset: 0xE2D07C VA: 0xE2D07C
	public void set_Owner(MonoBehaviour value) { }

	// RVA: 0xE2D084 Offset: 0xE2D084 VA: 0xE2D084
	public bool get_NameIsExpanded() { }

	// RVA: 0xE2D090 Offset: 0xE2D090 VA: 0xE2D090
	public void set_NameIsExpanded(bool value) { }

	// RVA: 0xE2D0AC Offset: 0xE2D0AC VA: 0xE2D0AC
	public bool get_ControlsIsExpanded() { }

	// RVA: 0xE2D0B8 Offset: 0xE2D0B8 VA: 0xE2D0B8
	public void set_ControlsIsExpanded(bool value) { }

	// RVA: 0xE2D0D4 Offset: 0xE2D0D4 VA: 0xE2D0D4
	public bool get_DebugIsExpanded() { }

	// RVA: 0xE2D0E0 Offset: 0xE2D0E0 VA: 0xE2D0E0
	public void set_DebugIsExpanded(bool value) { }

	// RVA: 0xE2D0FC Offset: 0xE2D0FC VA: 0xE2D0FC
	public bool get_ExperimentalIsExpanded() { }

	// RVA: 0xE2D108 Offset: 0xE2D108 VA: 0xE2D108
	public void set_ExperimentalIsExpanded(bool value) { }

	// RVA: 0xE2D124 Offset: 0xE2D124 VA: 0xE2D124 Slot: 4
	public string get_Name() { }

	// RVA: 0xE2D12C Offset: 0xE2D12C VA: 0xE2D12C
	public void set_Name(string value) { }

	// RVA: 0xE2D134 Offset: 0xE2D134 VA: 0xE2D134
	public FsmTemplate get_UsedInTemplate() { }

	// RVA: 0xE179FC Offset: 0xE179FC VA: 0xE179FC
	public void set_UsedInTemplate(FsmTemplate value) { }

	// RVA: 0xE2D13C Offset: 0xE2D13C VA: 0xE2D13C
	public string get_StartState() { }

	// RVA: 0xE2D144 Offset: 0xE2D144 VA: 0xE2D144
	public void set_StartState(string value) { }

	// RVA: 0xE2D14C Offset: 0xE2D14C VA: 0xE2D14C
	public FsmState[] get_States() { }

	// RVA: 0xE2D154 Offset: 0xE2D154 VA: 0xE2D154
	public void set_States(FsmState[] value) { }

	// RVA: 0xE2D15C Offset: 0xE2D15C VA: 0xE2D15C
	public FsmEvent[] get_Events() { }

	// RVA: 0xE2D164 Offset: 0xE2D164 VA: 0xE2D164
	public void set_Events(FsmEvent[] value) { }

	// RVA: 0xE2D16C Offset: 0xE2D16C VA: 0xE2D16C
	public FsmTransition[] get_GlobalTransitions() { }

	// RVA: 0xE2D174 Offset: 0xE2D174 VA: 0xE2D174
	public void set_GlobalTransitions(FsmTransition[] value) { }

	// RVA: 0xE2388C Offset: 0xE2388C VA: 0xE2388C
	public FsmVariables get_Variables() { }

	// RVA: 0xE2D17C Offset: 0xE2D17C VA: 0xE2D17C
	public void set_Variables(FsmVariables value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC85B34 Offset: 0xC85B34 VA: 0xC85B34
	// RVA: 0xE2D184 Offset: 0xE2D184 VA: 0xE2D184
	public FsmEventTarget get_EventTarget() { }

	[CompilerGeneratedAttribute] // RVA: 0xC85B44 Offset: 0xC85B44 VA: 0xC85B44
	// RVA: 0xE2D18C Offset: 0xE2D18C VA: 0xE2D18C
	public void set_EventTarget(FsmEventTarget value) { }

	// RVA: 0xE2D194 Offset: 0xE2D194 VA: 0xE2D194
	public bool get_Initialized() { }

