
	// RVA: 0x20BE43C Offset: 0x20BE43C VA: 0x20BE43C Slot: 3
	public override string ToString() { }

	// RVA: 0x20BE448 Offset: 0x20BE448 VA: 0x20BE448
	public static FsmVector2 op_Implicit(Vector2 value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmVector3 : NamedVariable // TypeDefIndex: 3363
{
	// Fields
	[SerializeField] // RVA: 0xC186AC Offset: 0xC186AC VA: 0xC186AC
	private Vector3 value; // 0x38

	// Properties
	public Vector3 Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0x20B8A58 Offset: 0x20B8A58 VA: 0x20B8A58
	public Vector3 get_Value() { }

	// RVA: 0x20B8B1C Offset: 0x20B8B1C VA: 0x20B8B1C
	public void set_Value(Vector3 value) { }

	// RVA: 0x20BE574 Offset: 0x20BE574 VA: 0x20BE574 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0x20BE5E0 Offset: 0x20BE5E0 VA: 0x20BE5E0 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0x20BE650 Offset: 0x20BE650 VA: 0x20BE650
	public void .ctor() { }

	// RVA: 0x20BC0F8 Offset: 0x20BC0F8 VA: 0x20BC0F8
	public void .ctor(string name) { }

	// RVA: 0x20B6A50 Offset: 0x20B6A50 VA: 0x20B6A50
	public void .ctor(FsmVector3 source) { }

	// RVA: 0x20BE654 Offset: 0x20BE654 VA: 0x20BE654 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0x20BE6C8 Offset: 0x20BE6C8 VA: 0x20BE6C8 Slot: 34
	public override void Clear() { }

	// RVA: 0x20BE6D4 Offset: 0x20BE6D4 VA: 0x20BE6D4 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0x20BE6DC Offset: 0x20BE6DC VA: 0x20BE6DC Slot: 3
	public override string ToString() { }

	// RVA: 0x20BE70C Offset: 0x20BE70C VA: 0x20BE70C
	public static FsmVector3 op_Implicit(Vector3 value) { }
}

// Namespace: HutongGames.PlayMaker
public interface INameable // TypeDefIndex: 3364
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();
}

// Namespace: HutongGames.PlayMaker
public interface INamedVariable // TypeDefIndex: 3365
{
	// Properties
	public abstract string Name { get; }
	public abstract bool UseVariable { get; set; }
	public abstract bool UsesVariable { get; }
	public abstract bool NetworkSync { get; set; }
	public abstract bool IsNone { get; }
	public abstract VariableType VariableType { get; }
	public abstract VariableType TypeConstraint { get; }
	public abstract Type ObjectType { get; set; }
	public abstract object RawValue { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_UseVariable();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_UseVariable(bool value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_UsesVariable();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_NetworkSync();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_NetworkSync(bool value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsNone();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string GetDisplayName();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract VariableType get_VariableType();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract VariableType get_TypeConstraint();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract Type get_ObjectType();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void set_ObjectType(Type value);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object get_RawValue();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void set_RawValue(object value);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract bool TestTypeConstraint(VariableType variableType, Type objectType);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void SafeAssign(object val);
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class NamedVariable : INameable, INamedVariable, IComparable // TypeDefIndex: 3366
{
	// Fields
	[SerializeField] // RVA: 0xC186BC Offset: 0xC186BC VA: 0xC186BC
	private bool useVariable; // 0x10
	[SerializeField] // RVA: 0xC186CC Offset: 0xC186CC VA: 0xC186CC
	private string name; // 0x18
	[SerializeField] // RVA: 0xC186DC Offset: 0xC186DC VA: 0xC186DC
	private string tooltip; // 0x20
	[SerializeField] // RVA: 0xC186EC Offset: 0xC186EC VA: 0xC186EC
	private bool showInInspector; // 0x28
	[SerializeField] // RVA: 0xC186FC Offset: 0xC186FC VA: 0xC186FC
	private bool networkSync; // 0x29
	protected object obj; // 0x30

	// Properties
	public NamedVariable CastVariable { get; set; }
	public string Name { get; set; }
	public virtual VariableType VariableType { get; }
	public virtual Type ObjectType { get; set; }
	public virtual VariableType TypeConstraint { get; }
	public virtual object RawValue { get; set; }
	public string Tooltip { get; set; }
	public bool UseVariable { get; set; }
	public bool ShowInInspector { get; set; }
	public bool NetworkSync { get; set; }
	public bool IsNone { get; }
	public bool UsesVariable { get; }

	// Methods

	// RVA: 0x20BE4F0 Offset: 0x20BE4F0 VA: 0x20BE4F0
	public NamedVariable get_CastVariable() { }

	// RVA: 0x20BB21C Offset: 0x20BB21C VA: 0x20BB21C
	public void set_CastVariable(NamedVariable value) { }

	// RVA: 0x20B2E98 Offset: 0x20B2E98 VA: 0x20B2E98 Slot: 5
	public string get_Name() { }

	// RVA: 0x20BF1CC Offset: 0x20BF1CC VA: 0x20BF1CC
	public void set_Name(string value) { }

	// RVA: 0x20BF1D4 Offset: 0x20BF1D4 VA: 0x20BF1D4 Slot: 22
	public virtual VariableType get_VariableType() { }

	// RVA: 0x20BF2B8 Offset: 0x20BF2B8 VA: 0x20BF2B8 Slot: 23
	public virtual Type get_ObjectType() { }

	// RVA: 0x20BF2C0 Offset: 0x20BF2C0 VA: 0x20BF2C0 Slot: 24
	public virtual void set_ObjectType(Type value) { }

	// RVA: 0x20BF2C4 Offset: 0x20BF2C4 VA: 0x20BF2C4 Slot: 25
	public virtual VariableType get_TypeConstraint() { }

	// RVA: 0x20BF2D4 Offset: 0x20BF2D4 VA: 0x20BF2D4 Slot: 26
	public virtual void set_RawValue(object value) { }

	// RVA: 0x20BF33C Offset: 0x20BF33C VA: 0x20BF33C Slot: 27
	public virtual object get_RawValue() { }

	// RVA: 0x20BF3A4 Offset: 0x20BF3A4 VA: 0x20BF3A4
	public string get_Tooltip() { }

	// RVA: 0x20BF3AC Offset: 0x20BF3AC VA: 0x20BF3AC
	public void set_Tooltip(string value) { }

	// RVA: 0x20BF3B4 Offset: 0x20BF3B4 VA: 0x20BF3B4 Slot: 6
	public bool get_UseVariable() { }

	// RVA: 0x20BF3BC Offset: 0x20BF3BC VA: 0x20BF3BC Slot: 7
	public void set_UseVariable(bool value) { }

	// RVA: 0x20B8A40 Offset: 0x20B8A40 VA: 0x20B8A40
	public bool get_ShowInInspector() { }

	// RVA: 0x20BF3C8 Offset: 0x20BF3C8 VA: 0x20BF3C8
	public void set_ShowInInspector(bool value) { }

	// RVA: 0x20BF3D4 Offset: 0x20BF3D4 VA: 0x20BF3D4 Slot: 9
	public bool get_NetworkSync() { }

	// RVA: 0x20BF3DC Offset: 0x20BF3DC VA: 0x20BF3DC Slot: 10
	public void set_NetworkSync(bool value) { }

	// RVA: 0x20BF3E8 Offset: 0x20BF3E8 VA: 0x20BF3E8
	public static bool IsNullOrNone(NamedVariable variable) { }

	// RVA: 0x20BF3F8 Offset: 0x20BF3F8 VA: 0x20BF3F8 Slot: 11
	public bool get_IsNone() { }

	// RVA: 0x20BF47C Offset: 0x20BF47C VA: 0x20BF47C Slot: 8
	public bool get_UsesVariable() { }

	// RVA: 0x20BE2C8 Offset: 0x20BE2C8 VA: 0x20BE2C8
	public void .ctor() { }

	// RVA: 0x20B2EA0 Offset: 0x20B2EA0 VA: 0x20B2EA0
	public void .ctor(string name) { }

	// RVA: 0x20BE32C Offset: 0x20BE32C VA: 0x20BE32C
	public void .ctor(NamedVariable source) { }

	// RVA: 0x20BF4FC Offset: 0x20BF4FC VA: 0x20BF4FC Slot: 28
	public virtual void Init() { }

	// RVA: 0x20BF500 Offset: 0x20BF500 VA: 0x20BF500 Slot: 29
	public virtual bool TestTypeConstraint(VariableType variableType, Type objectType) { }

	// RVA: 0x20BF544 Offset: 0x20BF544 VA: 0x20BF544 Slot: 30
	public virtual void SafeAssign(object val) { }

	// RVA: 0x20BF5AC Offset: 0x20BF5AC VA: 0x20BF5AC Slot: 31
	public virtual NamedVariable Clone() { }

	// RVA: 0x20BF614 Offset: 0x20BF614 VA: 0x20BF614 Slot: 12
	public string GetDisplayName() { }

	// RVA: 0x20BF698 Offset: 0x20BF698 VA: 0x20BF698 Slot: 32
	public virtual float ToFloat() { }

	// RVA: 0x20BF6A0 Offset: 0x20BF6A0 VA: 0x20BF6A0 Slot: 33
	public virtual int ToInt() { }

	// RVA: 0x20BF6A8 Offset: 0x20BF6A8 VA: 0x20BF6A8 Slot: 34
	public virtual void Clear() { }

	// RVA: 0x20BF710 Offset: 0x20BF710 VA: 0x20BF710 Slot: 21
	public int CompareTo(object obj) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class ActionData // TypeDefIndex: 3367
{
	// Fields
	private const string autoNameString = "~AutoName";
	private static readonly Dictionary<string, Type> ActionTypeLookup; // 0x0
	public static readonly Dictionary<Type, FieldInfo[]> ActionFieldsLookup; // 0x8
	public static readonly Dictionary<Type, int> ActionHashCodeLookup; // 0x10
	private static bool resaveActionData; // 0x18
	private static readonly List<int> UsedIndices; // 0x20
	private static readonly List<FieldInfo> InitFields; // 0x28
	[SerializeField] // RVA: 0xC1870C Offset: 0xC1870C VA: 0xC1870C
	private List<string> actionNames; // 0x10
	[SerializeField] // RVA: 0xC1871C Offset: 0xC1871C VA: 0xC1871C
	private List<string> customNames; // 0x18
	[SerializeField] // RVA: 0xC1872C Offset: 0xC1872C VA: 0xC1872C
	private List<bool> actionEnabled; // 0x20
	[SerializeField] // RVA: 0xC1873C Offset: 0xC1873C VA: 0xC1873C
	private List<bool> actionIsOpen; // 0x28
	[SerializeField] // RVA: 0xC1874C Offset: 0xC1874C VA: 0xC1874C
	private List<int> actionStartIndex; // 0x30
	[SerializeField] // RVA: 0xC1875C Offset: 0xC1875C VA: 0xC1875C
	private List<int> actionHashCodes; // 0x38
	[SerializeField] // RVA: 0xC1876C Offset: 0xC1876C VA: 0xC1876C
	private List<Object> unityObjectParams; // 0x40
	[SerializeField] // RVA: 0xC1877C Offset: 0xC1877C VA: 0xC1877C
	private List<FsmGameObject> fsmGameObjectParams; // 0x48
	[SerializeField] // RVA: 0xC1878C Offset: 0xC1878C VA: 0xC1878C
	private List<FsmOwnerDefault> fsmOwnerDefaultParams; // 0x50
	[SerializeField] // RVA: 0xC1879C Offset: 0xC1879C VA: 0xC1879C
	private List<FsmAnimationCurve> animationCurveParams; // 0x58
	[SerializeField] // RVA: 0xC187AC Offset: 0xC187AC VA: 0xC187AC
	private List<FunctionCall> functionCallParams; // 0x60
	[SerializeField] // RVA: 0xC187BC Offset: 0xC187BC VA: 0xC187BC
	private List<FsmTemplateControl> fsmTemplateControlParams; // 0x68
	[SerializeField] // RVA: 0xC187CC Offset: 0xC187CC VA: 0xC187CC
	private List<FsmEventTarget> fsmEventTargetParams; // 0x70
	[SerializeField] // RVA: 0xC187DC Offset: 0xC187DC VA: 0xC187DC
	private List<FsmProperty> fsmPropertyParams; // 0x78
	[SerializeField] // RVA: 0xC187EC Offset: 0xC187EC VA: 0xC187EC
	private List<LayoutOption> layoutOptionParams; // 0x80
	[SerializeField] // RVA: 0xC187FC Offset: 0xC187FC VA: 0xC187FC
	private List<FsmString> fsmStringParams; // 0x88
	[SerializeField] // RVA: 0xC1880C Offset: 0xC1880C VA: 0xC1880C
	private List<FsmObject> fsmObjectParams; // 0x90
	[SerializeField] // RVA: 0xC1881C Offset: 0xC1881C VA: 0xC1881C
	private List<FsmVar> fsmVarParams; // 0x98
	[SerializeField] // RVA: 0xC1882C Offset: 0xC1882C VA: 0xC1882C
	private List<FsmArray> fsmArrayParams; // 0xA0
	[SerializeField] // RVA: 0xC1883C Offset: 0xC1883C VA: 0xC1883C
	private List<FsmEnum> fsmEnumParams; // 0xA8
	[SerializeField] // RVA: 0xC1884C Offset: 0xC1884C VA: 0xC1884C
	private List<FsmFloat> fsmFloatParams; // 0xB0
	[SerializeField] // RVA: 0xC1885C Offset: 0xC1885C VA: 0xC1885C
	private List<FsmInt> fsmIntParams; // 0xB8
	[SerializeField] // RVA: 0xC1886C Offset: 0xC1886C VA: 0xC1886C
	private List<FsmBool> fsmBoolParams; // 0xC0
	[SerializeField] // RVA: 0xC1887C Offset: 0xC1887C VA: 0xC1887C
	private List<FsmVector2> fsmVector2Params; // 0xC8
	[SerializeField] // RVA: 0xC1888C Offset: 0xC1888C VA: 0xC1888C
	private List<FsmVector3> fsmVector3Params; // 0xD0
	[SerializeField] // RVA: 0xC1889C Offset: 0xC1889C VA: 0xC1889C
	private List<FsmColor> fsmColorParams; // 0xD8
	[SerializeField] // RVA: 0xC188AC Offset: 0xC188AC VA: 0xC188AC
	private List<FsmRect> fsmRectParams; // 0xE0
	[SerializeField] // RVA: 0xC188BC Offset: 0xC188BC VA: 0xC188BC
	private List<FsmQuaternion> fsmQuaternionParams; // 0xE8
	[SerializeField] // RVA: 0xC188CC Offset: 0xC188CC VA: 0xC188CC
	private List<string> stringParams; // 0xF0
	[SerializeField] // RVA: 0xC188DC Offset: 0xC188DC VA: 0xC188DC
	private List<byte> byteData; // 0xF8
	private byte[] byteDataAsArray; // 0x100
	[SerializeField] // RVA: 0xC188EC Offset: 0xC188EC VA: 0xC188EC
	private List<int> arrayParamSizes; // 0x108
	[SerializeField] // RVA: 0xC188FC Offset: 0xC188FC VA: 0xC188FC
	private List<string> arrayParamTypes; // 0x110
	[SerializeField] // RVA: 0xC1890C Offset: 0xC1890C VA: 0xC1890C
	private List<int> customTypeSizes; // 0x118
	[SerializeField] // RVA: 0xC1891C Offset: 0xC1891C VA: 0xC1891C
	private List<string> customTypeNames; // 0x120
	[SerializeField] // RVA: 0xC1892C Offset: 0xC1892C VA: 0xC1892C
	private List<ParamDataType> paramDataType; // 0x128
	[SerializeField] // RVA: 0xC1893C Offset: 0xC1893C VA: 0xC1893C
	private List<string> paramName; // 0x130
	[SerializeField] // RVA: 0xC1894C Offset: 0xC1894C VA: 0xC1894C
	private List<int> paramDataPos; // 0x138
	[SerializeField] // RVA: 0xC1895C Offset: 0xC1895C VA: 0xC1895C
	private List<int> paramByteDataSize; // 0x140
	private int nextParamIndex; // 0x148
	private const int MUST_BE_LESS_THAN = 100000000;

	// Properties
	public int ActionCount { get; }
	public List<string> ActionNames { get; }

	// Methods

	// RVA: 0x1D44F74 Offset: 0x1D44F74 VA: 0x1D44F74
	public int get_ActionCount() { }

	// RVA: 0x1D44FD4 Offset: 0x1D44FD4 VA: 0x1D44FD4
	public List<string> get_ActionNames() { }

	// RVA: 0x1D44FDC Offset: 0x1D44FDC VA: 0x1D44FDC
	public ActionData Copy() { }

	// RVA: 0x1D4641C Offset: 0x1D4641C VA: 0x1D4641C
	private List<string> CopyStringParams() { }

	// RVA: 0x1D456FC Offset: 0x1D456FC VA: 0x1D456FC
	private List<FsmFloat> CopyFsmFloatParams() { }

	// RVA: 0x1D458A0 Offset: 0x1D458A0 VA: 0x1D458A0
	private List<FsmInt> CopyFsmIntParams() { }

	// RVA: 0x1D45A44 Offset: 0x1D45A44 VA: 0x1D45A44
	private List<FsmBool> CopyFsmBoolParams() { }

	// RVA: 0x1D45D8C Offset: 0x1D45D8C VA: 0x1D45D8C
	private List<FsmVector2> CopyFsmVector2Params() { }

	// RVA: 0x1D45F30 Offset: 0x1D45F30 VA: 0x1D45F30
	private List<FsmVector3> CopyFsmVector3Params() { }

	// RVA: 0x1D45BE8 Offset: 0x1D45BE8 VA: 0x1D45BE8
	private List<FsmColor> CopyFsmColorParams() { }

	// RVA: 0x1D460D4 Offset: 0x1D460D4 VA: 0x1D460D4
	private List<FsmRect> CopyFsmRectParams() { }

	// RVA: 0x1D46278 Offset: 0x1D46278 VA: 0x1D46278
	private List<FsmQuaternion> CopyFsmQuaternionParams() { }

	// RVA: 0x1D46498 Offset: 0x1D46498 VA: 0x1D46498
	private List<FsmString> CopyFsmStringParams() { }

	// RVA: 0x1D4663C Offset: 0x1D4663C VA: 0x1D4663C
	private List<FsmObject> CopyFsmObjectParams() { }

	// RVA: 0x1D467E0 Offset: 0x1D467E0 VA: 0x1D467E0
	private List<FsmGameObject> CopyFsmGameObjectParams() { }

	// RVA: 0x1D46984 Offset: 0x1D46984 VA: 0x1D46984
	private List<FsmOwnerDefault> CopyFsmOwnerDefaultParams() { }

	// RVA: 0x1D46B28 Offset: 0x1D46B28 VA: 0x1D46B28
	private List<FsmAnimationCurve> CopyAnimationCurveParams() { }

	// RVA: 0x1D46DDC Offset: 0x1D46DDC VA: 0x1D46DDC
	private List<FunctionCall> CopyFunctionCallParams() { }

	// RVA: 0x1D46F80 Offset: 0x1D46F80 VA: 0x1D46F80
	private List<FsmTemplateControl> CopyFsmTemplateControlParams() { }

	// RVA: 0x1D47124 Offset: 0x1D47124 VA: 0x1D47124
	private List<FsmVar> CopyFsmVarParams() { }

	// RVA: 0x1D472C8 Offset: 0x1D472C8 VA: 0x1D472C8
	private List<FsmArray> CopyFsmArrayParams() { }

	// RVA: 0x1D4746C Offset: 0x1D4746C VA: 0x1D4746C
	private List<FsmEnum> CopyFsmEnumParams() { }

	// RVA: 0x1D47610 Offset: 0x1D47610 VA: 0x1D47610
	private List<FsmProperty> CopyFsmPropertyParams() { }

	// RVA: 0x1D477B4 Offset: 0x1D477B4 VA: 0x1D477B4
	private List<FsmEventTarget> CopyFsmEventTargetParams() { }

	// RVA: 0x1D47958 Offset: 0x1D47958 VA: 0x1D47958
	private List<LayoutOption> CopyLayoutOptionParams() { }

	// RVA: 0x1D47AFC Offset: 0x1D47AFC VA: 0x1D47AFC
	private void ClearActionData() { }

	// RVA: 0x1D47CBC Offset: 0x1D47CBC VA: 0x1D47CBC
	public static Type GetActionType(string actionName) { }

	// RVA: 0x1D47DEC Offset: 0x1D47DEC VA: 0x1D47DEC
	public static FieldInfo[] GetFields(Type actionType) { }

	// RVA: 0x1D47F1C Offset: 0x1D47F1C VA: 0x1D47F1C
	private static int GetActionTypeHashCode(Type actionType) { }

	// RVA: 0x1D48118 Offset: 0x1D48118 VA: 0x1D48118
	private static int GetStableHash(string s) { }

	// RVA: 0x1D4822C Offset: 0x1D4822C VA: 0x1D4822C
	public FsmStateAction[] LoadActions(FsmState state) { }

	// RVA: 0x1D494B4 Offset: 0x1D494B4 VA: 0x1D494B4
	public FsmStateAction CreateAction(FsmState state, int actionIndex) { }

	// RVA: 0x1D48480 Offset: 0x1D48480 VA: 0x1D48480
	public FsmStateAction CreateAction(ActionData.Context context, int actionIndex) { }

	// RVA: 0x1D49DA8 Offset: 0x1D49DA8 VA: 0x1D49DA8
	private void LoadActionField(Fsm fsm, object obj, FieldInfo field, int paramIndex) { }

	// RVA: 0x1D4E6AC Offset: 0x1D4E6AC VA: 0x1D4E6AC
	private void LoadArrayElement(Fsm fsm, Array field, Type fieldType, int elementIndex, int paramIndex) { }

	// RVA: 0x1D49618 Offset: 0x1D49618 VA: 0x1D49618
	public static void LogError(ActionData.Context context, string error) { }

	// RVA: 0x1D49724 Offset: 0x1D49724 VA: 0x1D49724
	private static void LogInfo(ActionData.Context context, string info) { }

	// RVA: 0x1D4B40C Offset: 0x1D4B40C VA: 0x1D4B40C
	private FsmFloat GetFsmFloat(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4B678 Offset: 0x1D4B678 VA: 0x1D4B678
	private FsmInt GetFsmInt(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4B83C Offset: 0x1D4B83C VA: 0x1D4B83C
	private FsmBool GetFsmBool(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4BA00 Offset: 0x1D4BA00 VA: 0x1D4BA00
	private FsmVector2 GetFsmVector2(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4BBC4 Offset: 0x1D4BBC4 VA: 0x1D4BBC4
	private FsmVector3 GetFsmVector3(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4C110 Offset: 0x1D4C110 VA: 0x1D4C110
	private FsmColor GetFsmColor(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4BD88 Offset: 0x1D4BD88 VA: 0x1D4BD88
	private FsmRect GetFsmRect(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4BF4C Offset: 0x1D4BF4C VA: 0x1D4BF4C
	private FsmQuaternion GetFsmQuaternion(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4B2C0 Offset: 0x1D4B2C0 VA: 0x1D4B2C0
	private FsmGameObject GetFsmGameObject(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4CF30 Offset: 0x1D4CF30 VA: 0x1D4CF30
	private FsmTemplateControl GetFsmTemplateControl(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4D190 Offset: 0x1D4D190 VA: 0x1D4D190
	private FsmVar GetFsmVar(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4D448 Offset: 0x1D4D448 VA: 0x1D4D448
	private FsmArray GetFsmArray(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4D2E4 Offset: 0x1D4D2E4 VA: 0x1D4D2E4
	private FsmEnum GetFsmEnum(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4C6E8 Offset: 0x1D4C6E8 VA: 0x1D4C6E8
	private FunctionCall GetFunctionCall(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4D5AC Offset: 0x1D4D5AC VA: 0x1D4D5AC
	private FsmProperty GetFsmProperty(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4DF04 Offset: 0x1D4DF04 VA: 0x1D4DF04
	private FsmEventTarget GetFsmEventTarget(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4E21C Offset: 0x1D4E21C VA: 0x1D4E21C
	private LayoutOption GetLayoutOption(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4E404 Offset: 0x1D4E404 VA: 0x1D4E404
	private FsmOwnerDefault GetFsmOwnerDefault(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4E568 Offset: 0x1D4E568 VA: 0x1D4E568
	private FsmString GetFsmString(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4C2D4 Offset: 0x1D4C2D4 VA: 0x1D4C2D4
	private FsmObject GetFsmObject(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4C418 Offset: 0x1D4C418 VA: 0x1D4C418
	private FsmMaterial GetFsmMaterial(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D4C580 Offset: 0x1D4C580 VA: 0x1D4C580
	private FsmTexture GetFsmTexture(Fsm fsm, int paramIndex) { }

	// RVA: 0x1D50084 Offset: 0x1D50084 VA: 0x1D50084
	public bool UsesDataVersion2() { }

	// RVA: 0x1D49558 Offset: 0x1D49558 VA: 0x1D49558
	private static string TryFixActionName(string actionName) { }

	// RVA: 0x1D49844 Offset: 0x1D49844 VA: 0x1D49844
	private FsmStateAction TryRecoverAction(ActionData.Context context, Type actionType, FsmStateAction action, int actionIndex) { }

	// RVA: 0x1D5022C Offset: 0x1D5022C VA: 0x1D5022C
	private FieldInfo FindField(Type actionType, int paramIndex) { }

	// RVA: 0x1D5051C Offset: 0x1D5051C VA: 0x1D5051C
	private static FieldInfo FindField(Type actionType, string name) { }

	// RVA: 0x1D50698 Offset: 0x1D50698 VA: 0x1D50698
	private bool TryConvertParameter(ActionData.Context context, FsmStateAction action, FieldInfo field, int paramIndex) { }

	// RVA: 0x1D52FF4 Offset: 0x1D52FF4 VA: 0x1D52FF4
	private bool TryConvertArrayElement(Fsm fsm, Array field, ParamDataType originalParamType, ParamDataType currentParamType, int elementIndex, int paramIndex) { }

	// RVA: 0x1D531E0 Offset: 0x1D531E0 VA: 0x1D531E0
	private object ConvertType(Fsm fsm, ParamDataType originalParamType, ParamDataType currentParamType, int paramIndex) { }

	// RVA: 0x1D4940C Offset: 0x1D4940C VA: 0x1D4940C
	public void SaveActions(FsmState state, FsmStateAction[] actions) { }

	// RVA: 0x1D53DD8 Offset: 0x1D53DD8 VA: 0x1D53DD8
	private void SaveAction(Fsm fsm, FsmStateAction action) { }

	// RVA: 0x1D5411C Offset: 0x1D5411C VA: 0x1D5411C
	private void SaveActionField(Fsm fsm, Type fieldType, object obj) { }

	// RVA: 0x1D573B0 Offset: 0x1D573B0 VA: 0x1D573B0
	private void AddByteData(ICollection<byte> bytes) { }

	// RVA: 0x1D57534 Offset: 0x1D57534 VA: 0x1D57534
	private void SaveString(string str) { }

	// RVA: 0x1D525A8 Offset: 0x1D525A8 VA: 0x1D525A8
	private static ParamDataType GetParamDataType(Type type) { }

	// RVA: 0x1D4554C Offset: 0x1D4554C VA: 0x1D4554C
	public void .ctor() { }

	// RVA: 0x1D57688 Offset: 0x1D57688 VA: 0x1D57688
	private static void .cctor() { }
}

// Namespace: 
public class ActionData.Context // TypeDefIndex: 3368
{
	// Fields
	public Fsm currentFsm; // 0x10
	public FsmState currentState; // 0x18
	public FsmStateAction currentAction; // 0x20
	public int currentActionIndex; // 0x28
	public string currentParameter; // 0x30

	// Methods

	// RVA: 0x1D48478 Offset: 0x1D48478 VA: 0x1D48478
	public void .ctor() { }
}

// Namespace: HutongGames.PlayMaker
public enum ParamDataType // TypeDefIndex: 3369
{
	// Fields
	public int value__; // 0x0
	public const ParamDataType Integer = 0;
	public const ParamDataType Boolean = 1;
	public const ParamDataType Float = 2;
	public const ParamDataType String = 3;
	public const ParamDataType Color = 4;
	public const ParamDataType ObjectReference = 5;
	public const ParamDataType LayerMask = 6;
	public const ParamDataType Enum = 7;
	public const ParamDataType Vector2 = 8;
	public const ParamDataType Vector3 = 9;
	public const ParamDataType Vector4 = 10;
	public const ParamDataType Rect = 11;
	public const ParamDataType Array = 12;
	public const ParamDataType Character = 13;
	public const ParamDataType AnimationCurve = 14;
	public const ParamDataType FsmFloat = 15;
	public const ParamDataType FsmInt = 16;
	public const ParamDataType FsmBool = 17;
	public const ParamDataType FsmString = 18;
	public const ParamDataType FsmGameObject = 19;
	public const ParamDataType FsmOwnerDefault = 20;
	public const ParamDataType FunctionCall = 21;
	public const ParamDataType FsmAnimationCurve = 22;
	public const ParamDataType FsmEvent = 23;
	public const ParamDataType FsmObject = 24;
	public const ParamDataType FsmColor = 25;
	public const ParamDataType Unsupported = 26;
	public const ParamDataType GameObject = 27;
	public const ParamDataType FsmVector3 = 28;
	public const ParamDataType LayoutOption = 29;
	public const ParamDataType FsmRect = 30;
	public const ParamDataType FsmEventTarget = 31;
	public const ParamDataType FsmMaterial = 32;
	public const ParamDataType FsmTexture = 33;
	public const ParamDataType Quaternion = 34;
	public const ParamDataType FsmQuaternion = 35;
	public const ParamDataType FsmProperty = 36;
	public const ParamDataType FsmVector2 = 37;
	public const ParamDataType FsmTemplateControl = 38;
	public const ParamDataType FsmVar = 39;
	public const ParamDataType CustomClass = 40;
	public const ParamDataType FsmArray = 41;
	public const ParamDataType FsmEnum = 42;
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class Fsm : INameable, IComparable // TypeDefIndex: 3370
{
	// Fields
	public const int CurrentDataVersion = 2;
	public const int DefaultMaxLoops = 1000;
	private MethodInfo updateHelperSetDirty; // 0x10
	private const string StartStateName = "State 1";
	public static FsmEventData EventData; // 0x0
	private static Color debugLookAtColor; // 0x8
	private static Color debugRaycastColor; // 0x18
	[SerializeField] // RVA: 0xC1896C Offset: 0xC1896C VA: 0xC1896C
	private int dataVersion; // 0x18
	private MonoBehaviour owner; // 0x20
	[SerializeField] // RVA: 0xC1897C Offset: 0xC1897C VA: 0xC1897C
	private FsmTemplate usedInTemplate; // 0x28
	[SerializeField] // RVA: 0xC1898C Offset: 0xC1898C VA: 0xC1898C
	private string name; // 0x30
	[SerializeField] // RVA: 0xC1899C Offset: 0xC1899C VA: 0xC1899C
	private string startState; // 0x38
	[SerializeField] // RVA: 0xC189AC Offset: 0xC189AC VA: 0xC189AC
	private FsmState[] states; // 0x40
	[SerializeField] // RVA: 0xC189BC Offset: 0xC189BC VA: 0xC189BC
	private FsmEvent[] events; // 0x48
	[SerializeField] // RVA: 0xC189CC Offset: 0xC189CC VA: 0xC189CC
	private FsmTransition[] globalTransitions; // 0x50
	[SerializeField] // RVA: 0xC189DC Offset: 0xC189DC VA: 0xC189DC
	private FsmVariables variables; // 0x58
	[SerializeField] // RVA: 0xC189EC Offset: 0xC189EC VA: 0xC189EC
	[TextAreaAttribute] // RVA: 0xC189EC Offset: 0xC189EC VA: 0xC189EC
	private string description; // 0x60
	[SerializeField] // RVA: 0xC18A2C Offset: 0xC18A2C VA: 0xC18A2C
	private string docUrl; // 0x68
	[SerializeField] // RVA: 0xC18A3C Offset: 0xC18A3C VA: 0xC18A3C
	private bool showStateLabel; // 0x70
	[SerializeField] // RVA: 0xC18A4C Offset: 0xC18A4C VA: 0xC18A4C
	private int maxLoopCount; // 0x74
	[SerializeField] // RVA: 0xC18A5C Offset: 0xC18A5C VA: 0xC18A5C
	private string watermark; // 0x78
	[SerializeField] // RVA: 0xC18A6C Offset: 0xC18A6C VA: 0xC18A6C
	private string password; // 0x80
	[SerializeField] // RVA: 0xC18A7C Offset: 0xC18A7C VA: 0xC18A7C
	private bool locked; // 0x88
	[SerializeField] // RVA: 0xC18A8C Offset: 0xC18A8C VA: 0xC18A8C
	private bool manualUpdate; // 0x89
	[SerializeField] // RVA: 0xC18A9C Offset: 0xC18A9C VA: 0xC18A9C
	private bool keepDelayedEventsOnStateExit; // 0x8A
	[SerializeField] // RVA: 0xC18AAC Offset: 0xC18AAC VA: 0xC18AAC
	private bool preprocessed; // 0x8B
	private Fsm host; // 0x90
	private Fsm rootFsm; // 0x98
	private List<Fsm> subFsmList; // 0xA0
	public bool setDirty; // 0xA8
	private bool activeStateEntered; // 0xA9
	public List<FsmEvent> ExposedEvents; // 0xB0
	private FsmLog myLog; // 0xB8
	public bool RestartOnEnable; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xC18ABC Offset: 0xC18ABC VA: 0xC18ABC
	private bool <Started>k__BackingField; // 0xC1
	public bool EnableDebugFlow; // 0xC2
	public bool EnableBreakpoints; // 0xC3
	public bool StepFrame; // 0xC4
	private readonly List<DelayedEvent> delayedEvents; // 0xC8
	private readonly List<DelayedEvent> updateEvents; // 0xD0
	private readonly List<DelayedEvent> removeEvents; // 0xD8
	[SerializeField] // RVA: 0xC18ACC Offset: 0xC18ACC VA: 0xC18ACC
	private Fsm.EditorFlags editorFlags; // 0xE0
	[CompilerGeneratedAttribute] // RVA: 0xC18ADC Offset: 0xC18ADC VA: 0xC18ADC
	private FsmEventTarget <EventTarget>k__BackingField; // 0xE8
	private bool initialized; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xC18AEC Offset: 0xC18AEC VA: 0xC18AEC
	private bool <Finished>k__BackingField; // 0xF1
	[SerializeField] // RVA: 0xC18AFC Offset: 0xC18AFC VA: 0xC18AFC
	private string activeStateName; // 0xF8
	private FsmState activeState; // 0x100
	private FsmState switchToState; // 0x108
	private FsmState previousActiveState; // 0x110
	[CompilerGeneratedAttribute] // RVA: 0xC18B0C Offset: 0xC18B0C VA: 0xC18B0C
	private FsmTransition <LastTransition>k__BackingField; // 0x118
	public Action<FsmState> StateChanged; // 0x120
	[CompilerGeneratedAttribute] // RVA: 0xC18B1C Offset: 0xC18B1C VA: 0xC18B1C
	private bool <IsModifiedPrefabInstance>k__BackingField; // 0x128
	[ObsoleteAttribute] // RVA: 0xC18B2C Offset: 0xC18B2C VA: 0xC18B2C
	public static readonly Color[] StateColors; // 0x28
	private FsmState editState; // 0x130
	[CompilerGeneratedAttribute] // RVA: 0xC18B64 Offset: 0xC18B64 VA: 0xC18B64
	private static GameObject <LastClickedObject>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC18B74 Offset: 0xC18B74 VA: 0xC18B74
	private static bool <BreakpointsEnabled>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC18B84 Offset: 0xC18B84 VA: 0xC18B84
	private static bool <HitBreakpoint>k__BackingField; // 0x39
	[CompilerGeneratedAttribute] // RVA: 0xC18B94 Offset: 0xC18B94 VA: 0xC18B94
	private static Fsm <BreakAtFsm>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC18BA4 Offset: 0xC18BA4 VA: 0xC18BA4
	private static FsmState <BreakAtState>k__BackingField; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC18BB4 Offset: 0xC18BB4 VA: 0xC18BB4
	private static bool <IsBreak>k__BackingField; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC18BC4 Offset: 0xC18BC4 VA: 0xC18BC4
	private static bool <IsErrorBreak>k__BackingField; // 0x51
	[CompilerGeneratedAttribute] // RVA: 0xC18BD4 Offset: 0xC18BD4 VA: 0xC18BD4
	private static string <LastError>k__BackingField; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC18BE4 Offset: 0xC18BE4 VA: 0xC18BE4
	private static bool <StepToStateChange>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC18BF4 Offset: 0xC18BF4 VA: 0xC18BF4
	private static Fsm <StepFsm>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC18C04 Offset: 0xC18C04 VA: 0xC18C04
	private bool <SwitchedState>k__BackingField; // 0x138
	[SerializeField] // RVA: 0xC18C14 Offset: 0xC18C14 VA: 0xC18C14
	private bool mouseEvents; // 0x139
	[SerializeField] // RVA: 0xC18C24 Offset: 0xC18C24 VA: 0xC18C24
	private bool handleLevelLoaded; // 0x13A
	[SerializeField] // RVA: 0xC18C34 Offset: 0xC18C34 VA: 0xC18C34
	private bool handleTriggerEnter2D; // 0x13B
	[SerializeField] // RVA: 0xC18C44 Offset: 0xC18C44 VA: 0xC18C44
	private bool handleTriggerExit2D; // 0x13C
	[SerializeField] // RVA: 0xC18C54 Offset: 0xC18C54 VA: 0xC18C54
	private bool handleTriggerStay2D; // 0x13D
	[SerializeField] // RVA: 0xC18C64 Offset: 0xC18C64 VA: 0xC18C64
	private bool handleCollisionEnter2D; // 0x13E
	[SerializeField] // RVA: 0xC18C74 Offset: 0xC18C74 VA: 0xC18C74
	private bool handleCollisionExit2D; // 0x13F
	[SerializeField] // RVA: 0xC18C84 Offset: 0xC18C84 VA: 0xC18C84
	private bool handleCollisionStay2D; // 0x140
	[SerializeField] // RVA: 0xC18C94 Offset: 0xC18C94 VA: 0xC18C94
	private bool handleTriggerEnter; // 0x141
	[SerializeField] // RVA: 0xC18CA4 Offset: 0xC18CA4 VA: 0xC18CA4
	private bool handleTriggerExit; // 0x142
	[SerializeField] // RVA: 0xC18CB4 Offset: 0xC18CB4 VA: 0xC18CB4
	private bool handleTriggerStay; // 0x143
	[SerializeField] // RVA: 0xC18CC4 Offset: 0xC18CC4 VA: 0xC18CC4
	private bool handleCollisionEnter; // 0x144
	[SerializeField] // RVA: 0xC18CD4 Offset: 0xC18CD4 VA: 0xC18CD4
	private bool handleCollisionExit; // 0x145
	[SerializeField] // RVA: 0xC18CE4 Offset: 0xC18CE4 VA: 0xC18CE4
	private bool handleCollisionStay; // 0x146
	[SerializeField] // RVA: 0xC18CF4 Offset: 0xC18CF4 VA: 0xC18CF4
	private bool handleParticleCollision; // 0x147
	[SerializeField] // RVA: 0xC18D04 Offset: 0xC18D04 VA: 0xC18D04
	private bool handleControllerColliderHit; // 0x148
	[SerializeField] // RVA: 0xC18D14 Offset: 0xC18D14 VA: 0xC18D14
	private bool handleJointBreak; // 0x149
	[SerializeField] // RVA: 0xC18D24 Offset: 0xC18D24 VA: 0xC18D24
	private bool handleJointBreak2D; // 0x14A
	[SerializeField] // RVA: 0xC18D34 Offset: 0xC18D34 VA: 0xC18D34
	private bool handleOnGUI; // 0x14B
	[SerializeField] // RVA: 0xC18D44 Offset: 0xC18D44 VA: 0xC18D44
	private bool handleFixedUpdate; // 0x14C
	[SerializeField] // RVA: 0xC18D54 Offset: 0xC18D54 VA: 0xC18D54
	private bool handleLateUpdate; // 0x14D
	[SerializeField] // RVA: 0xC18D64 Offset: 0xC18D64 VA: 0xC18D64
	private bool handleApplicationEvents; // 0x14E
	[SerializeField] // RVA: 0xC18D74 Offset: 0xC18D74 VA: 0xC18D74
	private UiEvents handleUiEvents; // 0x150
	[SerializeField] // RVA: 0xC18D84 Offset: 0xC18D84 VA: 0xC18D84
	private bool handleLegacyNetworking; // 0x154
	[CompilerGeneratedAttribute] // RVA: 0xC18D94 Offset: 0xC18D94 VA: 0xC18D94
	private Collision <CollisionInfo>k__BackingField; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC18DA4 Offset: 0xC18DA4 VA: 0xC18DA4
	private Collider <TriggerCollider>k__BackingField; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xC18DB4 Offset: 0xC18DB4 VA: 0xC18DB4
	private Collision2D <Collision2DInfo>k__BackingField; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xC18DC4 Offset: 0xC18DC4 VA: 0xC18DC4
	private Collider2D <TriggerCollider2D>k__BackingField; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xC18DD4 Offset: 0xC18DD4 VA: 0xC18DD4
	private float <JointBreakForce>k__BackingField; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xC18DE4 Offset: 0xC18DE4 VA: 0xC18DE4
	private Joint2D <BrokenJoint2D>k__BackingField; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xC18DF4 Offset: 0xC18DF4 VA: 0xC18DF4
	private GameObject <ParticleCollisionGO>k__BackingField; // 0x188
	[CompilerGeneratedAttribute] // RVA: 0xC18E04 Offset: 0xC18E04 VA: 0xC18E04
	private string <TriggerName>k__BackingField; // 0x190
	[CompilerGeneratedAttribute] // RVA: 0xC18E14 Offset: 0xC18E14 VA: 0xC18E14
	private string <CollisionName>k__BackingField; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xC18E24 Offset: 0xC18E24 VA: 0xC18E24
	private string <Trigger2dName>k__BackingField; // 0x1A0
	[CompilerGeneratedAttribute] // RVA: 0xC18E34 Offset: 0xC18E34 VA: 0xC18E34
	private string <Collision2dName>k__BackingField; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xC18E44 Offset: 0xC18E44 VA: 0xC18E44
	private ControllerColliderHit <ControllerCollider>k__BackingField; // 0x1B0
	[CompilerGeneratedAttribute] // RVA: 0xC18E54 Offset: 0xC18E54 VA: 0xC18E54
	private RaycastHit <RaycastHitInfo>k__BackingField; // 0x1B8
	private static Dictionary<Fsm, RaycastHit2D> lastRaycastHit2DInfoLUT; // 0x70
	[SerializeField] // RVA: 0xC18E64 Offset: 0xC18E64 VA: 0xC18E64
	private bool handleAnimatorMove; // 0x1E4
	[SerializeField] // RVA: 0xC18E74 Offset: 0xC18E74 VA: 0xC18E74
	private bool handleAnimatorIK; // 0x1E5
	private static readonly FsmEventTarget targetSelf; // 0x78

	// Properties
	public static List<Fsm> FsmList { get; }
	public static List<Fsm> SortedFsmList { get; }
	private MethodInfo UpdateHelperSetDirty { get; }
	public bool ManualUpdate { get; set; }
	public bool KeepDelayedEventsOnStateExit { get; set; }
	public bool Preprocessed { get; set; }
	public Fsm Host { get; set; }
	public string Password { get; }
	public bool Locked { get; }
	public FsmTemplate Template { get; }
	public bool IsSubFsm { get; }
	public Fsm RootFsm { get; }
	public List<Fsm> SubFsmList { get; }
	public bool Started { get; set; }
	public List<DelayedEvent> DelayedEvents { get; }
	public int DataVersion { get; set; }
	public MonoBehaviour Owner { get; set; }
	public bool NameIsExpanded { get; set; }
	public bool ControlsIsExpanded { get; set; }
	public bool DebugIsExpanded { get; set; }
	public bool ExperimentalIsExpanded { get; set; }
	public string Name { get; set; }
	public FsmTemplate UsedInTemplate { get; set; }
	public string StartState { get; set; }
	public FsmState[] States { get; set; }
	public FsmEvent[] Events { get; set; }
	public FsmTransition[] GlobalTransitions { get; set; }
	public FsmVariables Variables { get; set; }
	public FsmEventTarget EventTarget { get; set; }
	public bool Initialized { get; }
	public bool Active { get; }
	public bool Finished { get; set; }
	public bool IsSwitchingState { get; }
	public FsmState ActiveState { get; set; }
	public string ActiveStateName { get; }
	public FsmState PreviousActiveState { get; set; }
	public FsmTransition LastTransition { get; set; }
	public int MaxLoopCount { get; }
	public int MaxLoopCountOverride { get; set; }
	public string OwnerName { get; }
	public string OwnerDebugName { get; }
	public GameObject GameObject { get; }
	public string GameObjectName { get; }
	public Object OwnerObject { get; }
	public PlayMakerFSM FsmComponent { get; }
	public FsmLog MyLog { get; }
	public bool IsModifiedPrefabInstance { get; set; }
	public string Description { get; set; }
	public string Watermark { get; set; }
	public bool ShowStateLabel { get; set; }
	public static Color DebugLookAtColor { get; set; }
	public static Color DebugRaycastColor { get; set; }
	private string GuiLabel { get; }
	public string DocUrl { get; set; }
	public FsmState EditState { get; set; }
	public static GameObject LastClickedObject { get; set; }
	public static bool BreakpointsEnabled { get; set; }
	public static bool HitBreakpoint { get; set; }
	public static Fsm BreakAtFsm { get; set; }
	public static FsmState BreakAtState { get; set; }
	public static bool IsBreak { get; set; }
	public static bool IsErrorBreak { get; set; }
	public static string LastError { get; set; }
	public static bool StepToStateChange { get; set; }
	public static Fsm StepFsm { get; set; }
	public bool SwitchedState { get; set; }
	public bool MouseEvents { get; set; }
	public bool HandleLevelLoaded { get; set; }
	public bool HandleTriggerEnter2D { get; set; }
	public bool HandleTriggerExit2D { get; set; }
	public bool HandleTriggerStay2D { get; set; }
	public bool HandleCollisionEnter2D { get; set; }
	public bool HandleCollisionExit2D { get; set; }
	public bool HandleCollisionStay2D { get; set; }
	public bool HandleTriggerEnter { get; set; }
	public bool HandleTriggerExit { get; set; }
	public bool HandleTriggerStay { get; set; }
	public bool HandleCollisionEnter { get; set; }
	public bool HandleCollisionExit { get; set; }
	public bool HandleCollisionStay { get; set; }
	public bool HandleParticleCollision { get; set; }
	public bool HandleControllerColliderHit { get; set; }
	public bool HandleJointBreak { get; set; }
	public bool HandleJointBreak2D { get; set; }
	public bool HandleOnGUI { get; set; }
	public bool HandleFixedUpdate { get; set; }
	public bool HandleLateUpdate { get; set; }
	public bool HandleApplicationEvents { get; set; }
	public UiEvents HandleUiEvents { get; set; }
	public bool HandleLegacyNetworking { get; set; }
	public Collision CollisionInfo { get; set; }
	public Collider TriggerCollider { get; set; }
	public Collision2D Collision2DInfo { get; set; }
	public Collider2D TriggerCollider2D { get; set; }
	public float JointBreakForce { get; set; }
	public Joint2D BrokenJoint2D { get; set; }
	public GameObject ParticleCollisionGO { get; set; }
	public GameObject CollisionGO { get; }
	public GameObject Collision2dGO { get; }
	public GameObject TriggerGO { get; }
	public GameObject Trigger2dGO { get; }
	public string TriggerName { get; set; }
	public string CollisionName { get; set; }
	public string Trigger2dName { get; set; }
	public string Collision2dName { get; set; }
	public ControllerColliderHit ControllerCollider { get; set; }
	public RaycastHit RaycastHitInfo { get; set; }
	public bool HandleAnimatorMove { get; set; }
	public bool HandleAnimatorIK { get; set; }

	// Methods

	// RVA: 0x1D58FD8 Offset: 0x1D58FD8 VA: 0x1D58FD8
	public static List<Fsm> get_FsmList() { }

	// RVA: 0x1D591D4 Offset: 0x1D591D4 VA: 0x1D591D4
	public static List<Fsm> get_SortedFsmList() { }

	// RVA: 0x1D59258 Offset: 0x1D59258 VA: 0x1D59258
	private MethodInfo get_UpdateHelperSetDirty() { }

	// RVA: 0x1D592FC Offset: 0x1D592FC VA: 0x1D592FC
	public bool get_ManualUpdate() { }

	// RVA: 0x1D59304 Offset: 0x1D59304 VA: 0x1D59304
	public void set_ManualUpdate(bool value) { }

	// RVA: 0x1D59310 Offset: 0x1D59310 VA: 0x1D59310
	public bool get_KeepDelayedEventsOnStateExit() { }

	// RVA: 0x1D59318 Offset: 0x1D59318 VA: 0x1D59318
	public void set_KeepDelayedEventsOnStateExit(bool value) { }

	// RVA: 0x1D59324 Offset: 0x1D59324 VA: 0x1D59324
	public bool get_Preprocessed() { }

	// RVA: 0x1D5932C Offset: 0x1D5932C VA: 0x1D5932C
	public void set_Preprocessed(bool value) { }

	// RVA: 0x1D59338 Offset: 0x1D59338 VA: 0x1D59338
	public Fsm get_Host() { }

	// RVA: 0x1D59340 Offset: 0x1D59340 VA: 0x1D59340
	private void set_Host(Fsm value) { }

	// RVA: 0x1D59348 Offset: 0x1D59348 VA: 0x1D59348
	public string get_Password() { }

	// RVA: 0x1D59350 Offset: 0x1D59350 VA: 0x1D59350
	public bool get_Locked() { }
