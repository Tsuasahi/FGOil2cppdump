
	// RVA: 0x1E8BAB4 Offset: 0x1E8BAB4 VA: 0x1E8BAB4
	internal static string DecryptStringValue(string key, string encryptedInput, string defaultValue) { }

	// RVA: 0x1E8BC58 Offset: 0x1E8BC58 VA: 0x1E8BC58
	public static void SetFloat(string key, float value) { }

	// RVA: 0x1E8BD94 Offset: 0x1E8BD94 VA: 0x1E8BD94
	public static float GetFloat(string key) { }

	// RVA: 0x1E8BDFC Offset: 0x1E8BDFC VA: 0x1E8BDFC
	public static float GetFloat(string key, float defaultValue) { }

	// RVA: 0x1E8BCE8 Offset: 0x1E8BCE8 VA: 0x1E8BCE8
	internal static string EncryptFloatValue(string key, float value) { }

	// RVA: 0x1E8BFA8 Offset: 0x1E8BFA8 VA: 0x1E8BFA8
	internal static float DecryptFloatValue(string key, string encryptedInput, float defaultValue) { }

	// RVA: 0x1E8C134 Offset: 0x1E8C134 VA: 0x1E8C134
	public static void SetDouble(string key, double value) { }

	// RVA: 0x1E8C270 Offset: 0x1E8C270 VA: 0x1E8C270
	public static double GetDouble(string key) { }

	// RVA: 0x1E8C2D8 Offset: 0x1E8C2D8 VA: 0x1E8C2D8
	public static double GetDouble(string key, double defaultValue) { }

	// RVA: 0x1E8C1C4 Offset: 0x1E8C1C4 VA: 0x1E8C1C4
	private static string EncryptDoubleValue(string key, double value) { }

	// RVA: 0x1E8C3E0 Offset: 0x1E8C3E0 VA: 0x1E8C3E0
	private static double DecryptDoubleValue(string key, string encryptedInput, double defaultValue) { }

	// RVA: 0x1E8C56C Offset: 0x1E8C56C VA: 0x1E8C56C
	public static void SetLong(string key, long value) { }

	// RVA: 0x1E8C6A8 Offset: 0x1E8C6A8 VA: 0x1E8C6A8
	public static long GetLong(string key) { }

	// RVA: 0x1E8C710 Offset: 0x1E8C710 VA: 0x1E8C710
	public static long GetLong(string key, long defaultValue) { }

	// RVA: 0x1E8C5FC Offset: 0x1E8C5FC VA: 0x1E8C5FC
	private static string EncryptLongValue(string key, long value) { }

	// RVA: 0x1E8C80C Offset: 0x1E8C80C VA: 0x1E8C80C
	private static long DecryptLongValue(string key, string encryptedInput, long defaultValue) { }

	// RVA: 0x1E8C998 Offset: 0x1E8C998 VA: 0x1E8C998
	public static void SetBool(string key, bool value) { }

	// RVA: 0x1E8CAD4 Offset: 0x1E8CAD4 VA: 0x1E8CAD4
	public static bool GetBool(string key) { }

	// RVA: 0x1E8CB3C Offset: 0x1E8CB3C VA: 0x1E8CB3C
	public static bool GetBool(string key, bool defaultValue) { }

	// RVA: 0x1E8CA28 Offset: 0x1E8CA28 VA: 0x1E8CA28
	private static string EncryptBoolValue(string key, bool value) { }

	// RVA: 0x1E8CC38 Offset: 0x1E8CC38 VA: 0x1E8CC38
	private static bool DecryptBoolValue(string key, string encryptedInput, bool defaultValue) { }

	// RVA: 0x1E8CDD0 Offset: 0x1E8CDD0 VA: 0x1E8CDD0
	public static void SetByteArray(string key, byte[] value) { }

	// RVA: 0x1E8CED8 Offset: 0x1E8CED8 VA: 0x1E8CED8
	public static byte[] GetByteArray(string key) { }

	// RVA: 0x1E8CF44 Offset: 0x1E8CF44 VA: 0x1E8CF44
	public static byte[] GetByteArray(string key, byte defaultValue, int defaultLength) { }

	// RVA: 0x1E8CE60 Offset: 0x1E8CE60 VA: 0x1E8CE60
	private static string EncryptByteArrayValue(string key, byte[] value) { }

	// RVA: 0x1E8D12C Offset: 0x1E8D12C VA: 0x1E8D12C
	private static byte[] DecryptByteArrayValue(string key, string encryptedInput, byte defaultValue, int defaultLength) { }

	// RVA: 0x1E8D070 Offset: 0x1E8D070 VA: 0x1E8D070
	private static byte[] ConstructByteArray(byte value, int length) { }

	// RVA: 0x1E8D2F0 Offset: 0x1E8D2F0 VA: 0x1E8D2F0
	public static void SetVector2(string key, Vector2 value) { }

	// RVA: 0x1E8D488 Offset: 0x1E8D488 VA: 0x1E8D488
	public static Vector2 GetVector2(string key) { }

	// RVA: 0x1E8D52C Offset: 0x1E8D52C VA: 0x1E8D52C
	public static Vector2 GetVector2(string key, Vector2 defaultValue) { }

	// RVA: 0x1E8D388 Offset: 0x1E8D388 VA: 0x1E8D388
	private static string EncryptVector2Value(string key, Vector2 value) { }

	// RVA: 0x1E8D638 Offset: 0x1E8D638 VA: 0x1E8D638
	private static Vector2 DecryptVector2Value(string key, string encryptedInput, Vector2 defaultValue) { }

	// RVA: 0x1E8D8EC Offset: 0x1E8D8EC VA: 0x1E8D8EC
	public static void SetVector3(string key, Vector3 value) { }

	// RVA: 0x1E8DAC4 Offset: 0x1E8DAC4 VA: 0x1E8DAC4
	public static Vector3 GetVector3(string key) { }

	// RVA: 0x1E8DB78 Offset: 0x1E8DB78 VA: 0x1E8DB78
	public static Vector3 GetVector3(string key, Vector3 defaultValue) { }

	// RVA: 0x1E8D994 Offset: 0x1E8D994 VA: 0x1E8D994
	private static string EncryptVector3Value(string key, Vector3 value) { }

	// RVA: 0x1E8DC9C Offset: 0x1E8DC9C VA: 0x1E8DC9C
	private static Vector3 DecryptVector3Value(string key, string encryptedInput, Vector3 defaultValue) { }

	// RVA: 0x1E8DFA8 Offset: 0x1E8DFA8 VA: 0x1E8DFA8
	public static void SetQuaternion(string key, Quaternion value) { }

	// RVA: 0x1E8E1B0 Offset: 0x1E8E1B0 VA: 0x1E8E1B0
	public static Quaternion GetQuaternion(string key) { }

	// RVA: 0x1E8E26C Offset: 0x1E8E26C VA: 0x1E8E26C
	public static Quaternion GetQuaternion(string key, Quaternion defaultValue) { }

	// RVA: 0x1E8E058 Offset: 0x1E8E058 VA: 0x1E8E058
	private static string EncryptQuaternionValue(string key, Quaternion value) { }

	// RVA: 0x1E8E3A0 Offset: 0x1E8E3A0 VA: 0x1E8E3A0
	private static Quaternion DecryptQuaternionValue(string key, string encryptedInput, Quaternion defaultValue) { }

	// RVA: 0x1E8E6FC Offset: 0x1E8E6FC VA: 0x1E8E6FC
	public static void SetColor(string key, Color32 value) { }

	// RVA: 0x1E8E844 Offset: 0x1E8E844 VA: 0x1E8E844
	public static Color32 GetColor(string key) { }

	// RVA: 0x1E8E8DC Offset: 0x1E8E8DC VA: 0x1E8E8DC
	public static Color32 GetColor(string key, Color32 defaultValue) { }

	// RVA: 0x1E8E798 Offset: 0x1E8E798 VA: 0x1E8E798
	private static string EncryptColorValue(string key, uint value) { }

	// RVA: 0x1E8EA04 Offset: 0x1E8EA04 VA: 0x1E8EA04
	public static void SetRect(string key, Rect value) { }

	// RVA: 0x1E8EC2C Offset: 0x1E8EC2C VA: 0x1E8EC2C
	public static Rect GetRect(string key) { }

	// RVA: 0x1E8ECC4 Offset: 0x1E8ECC4 VA: 0x1E8ECC4
	public static Rect GetRect(string key, Rect defaultValue) { }

	// RVA: 0x1E8EAB4 Offset: 0x1E8EAB4 VA: 0x1E8EAB4
	private static string EncryptRectValue(string key, Rect value) { }

	// RVA: 0x1E8EDF8 Offset: 0x1E8EDF8 VA: 0x1E8EDF8
	private static Rect DecryptRectValue(string key, string encryptedInput, Rect defaultValue) { }

	// RVA: 0x1E8F184 Offset: 0x1E8F184 VA: 0x1E8F184
	public static void SetRawValue(string key, string encryptedValue) { }

	// RVA: 0x1E8F200 Offset: 0x1E8F200 VA: 0x1E8F200
	public static string GetRawValue(string key) { }

	// RVA: 0x1E8F26C Offset: 0x1E8F26C VA: 0x1E8F26C
	internal static ObscuredPrefs.DataType GetRawValueType(string value) { }

	// RVA: 0x1E89E70 Offset: 0x1E89E70 VA: 0x1E89E70
	internal static string EncryptKey(string key) { }

	// RVA: 0x1E8F5D0 Offset: 0x1E8F5D0 VA: 0x1E8F5D0
	public static bool HasKey(string key) { }

	// RVA: 0x1E8F65C Offset: 0x1E8F65C VA: 0x1E8F65C
	public static void DeleteKey(string key) { }

	// RVA: 0x1E8F6F0 Offset: 0x1E8F6F0 VA: 0x1E8F6F0
	public static void DeleteAll() { }

	// RVA: 0x1E8F6F8 Offset: 0x1E8F6F8 VA: 0x1E8F6F8
	public static void Save() { }

	// RVA: 0x1E8A248 Offset: 0x1E8A248 VA: 0x1E8A248
	private static string GetEncryptedPrefsString(string key, string encryptedKey) { }

	// RVA: 0x1E8A484 Offset: 0x1E8A484 VA: 0x1E8A484
	private static string EncryptData(string key, byte[] cleanBytes, ObscuredPrefs.DataType type) { }

	// RVA: 0x1E8ADA8 Offset: 0x1E8ADA8 VA: 0x1E8ADA8
	internal static byte[] DecryptData(string key, string encryptedInput) { }

	// RVA: 0x1E89B90 Offset: 0x1E89B90 VA: 0x1E89B90
	private static uint CalculateChecksum(string input) { }

	// RVA: 0x1E8FF00 Offset: 0x1E8FF00 VA: 0x1E8FF00
	private static void SavesTampered() { }

	// RVA: 0x1E8FFB4 Offset: 0x1E8FFB4 VA: 0x1E8FFB4
	private static void PossibleForeignSavesDetected() { }

	// RVA: 0x1E8993C Offset: 0x1E8993C VA: 0x1E8993C
	private static string GetDeviceId() { }

	// RVA: 0x1E8F700 Offset: 0x1E8F700 VA: 0x1E8F700
	private static byte[] EncryptDecryptBytes(byte[] bytes, int dataLength, string key) { }

	// RVA: 0x1E8A858 Offset: 0x1E8A858 VA: 0x1E8A858
	private static string DeprecatedDecryptValue(string value) { }

	// RVA: 0x1E90184 Offset: 0x1E90184 VA: 0x1E90184
	private static string DeprecatedCalculateChecksum(string input) { }

	// RVA: 0x1E90094 Offset: 0x1E90094 VA: 0x1E90094
	private static string get_DeprecatedDeviceId() { }

	// RVA: 0x1E9035C Offset: 0x1E9035C VA: 0x1E9035C
	private static void .cctor() { }
}

// Namespace: 
internal enum ObscuredPrefs.DataType // TypeDefIndex: 5274
{
	// Fields
	public byte value__; // 0x0
	public const ObscuredPrefs.DataType Unknown = 0;
	public const ObscuredPrefs.DataType Int = 5;
	public const ObscuredPrefs.DataType UInt = 10;
	public const ObscuredPrefs.DataType String = 15;
	public const ObscuredPrefs.DataType Float = 20;
	public const ObscuredPrefs.DataType Double = 25;
	public const ObscuredPrefs.DataType Long = 30;
	public const ObscuredPrefs.DataType Bool = 35;
	public const ObscuredPrefs.DataType ByteArray = 40;
	public const ObscuredPrefs.DataType Vector2 = 45;
	public const ObscuredPrefs.DataType Vector3 = 50;
	public const ObscuredPrefs.DataType Quaternion = 55;
	public const ObscuredPrefs.DataType Color = 60;
	public const ObscuredPrefs.DataType Rect = 65;
}

// Namespace: 
public enum ObscuredPrefs.DeviceLockLevel // TypeDefIndex: 5275
{
	// Fields
	public byte value__; // 0x0
	public const ObscuredPrefs.DeviceLockLevel None = 0;
	public const ObscuredPrefs.DeviceLockLevel Soft = 1;
	public const ObscuredPrefs.DeviceLockLevel Strict = 2;
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredQuaternion // TypeDefIndex: 5276
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Quaternion initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xC4ABB0 Offset: 0xC4ABB0 VA: 0xC4ABB0
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4ABC0 Offset: 0xC4ABC0 VA: 0xC4ABC0
	private ObscuredQuaternion.RawEncryptedQuaternion hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4ABD0 Offset: 0xC4ABD0 VA: 0xC4ABD0
	private Quaternion fakeValue; // 0x14
	[SerializeField] // RVA: 0xC4ABE0 Offset: 0xC4ABE0 VA: 0xC4ABE0
	private bool inited; // 0x24

	// Methods

	// RVA: 0xD5D934 Offset: 0xD5D934 VA: 0xD5D934
	private void .ctor(ObscuredQuaternion.RawEncryptedQuaternion value) { }

	// RVA: 0x1E90468 Offset: 0x1E90468 VA: 0x1E90468
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1E904D4 Offset: 0x1E904D4 VA: 0x1E904D4
	public static ObscuredQuaternion.RawEncryptedQuaternion Encrypt(Quaternion value) { }

	// RVA: 0x1E90564 Offset: 0x1E90564 VA: 0x1E90564
	public static ObscuredQuaternion.RawEncryptedQuaternion Encrypt(Quaternion value, int key) { }

	// RVA: 0x1E9063C Offset: 0x1E9063C VA: 0x1E9063C
	public static Quaternion Decrypt(ObscuredQuaternion.RawEncryptedQuaternion value) { }

	// RVA: 0x1E906B4 Offset: 0x1E906B4 VA: 0x1E906B4
	public static Quaternion Decrypt(ObscuredQuaternion.RawEncryptedQuaternion value, int key) { }

	// RVA: 0xD5D93C Offset: 0xD5D93C VA: 0xD5D93C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5D944 Offset: 0xD5D944 VA: 0xD5D944
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5D94C Offset: 0xD5D94C VA: 0xD5D94C
	public ObscuredQuaternion.RawEncryptedQuaternion GetEncrypted() { }

	// RVA: 0xD5D978 Offset: 0xD5D978 VA: 0xD5D978
	public void SetEncrypted(ObscuredQuaternion.RawEncryptedQuaternion encrypted) { }

	// RVA: 0xD5D980 Offset: 0xD5D980 VA: 0xD5D980
	private Quaternion InternalDecrypt() { }

	// RVA: 0xD5D988 Offset: 0xD5D988 VA: 0xD5D988
	private bool CompareQuaternionsWithTolerance(Quaternion q1, Quaternion q2) { }

	// RVA: 0x1E90C40 Offset: 0x1E90C40 VA: 0x1E90C40
	public static ObscuredQuaternion op_Implicit(Quaternion value) { }

	// RVA: 0x1E90D2C Offset: 0x1E90D2C VA: 0x1E90D2C
	public static Quaternion op_Implicit(ObscuredQuaternion value) { }

	// RVA: 0xD5D98C Offset: 0xD5D98C VA: 0xD5D98C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5D994 Offset: 0xD5D994 VA: 0xD5D994 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5D99C Offset: 0xD5D99C VA: 0xD5D99C
	public string ToString(string format) { }

	// RVA: 0x1E90DD0 Offset: 0x1E90DD0 VA: 0x1E90DD0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct ObscuredQuaternion.RawEncryptedQuaternion // TypeDefIndex: 5277
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4
	public int z; // 0x8
	public int w; // 0xC
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredSByte : IEquatable<ObscuredSByte>, IFormattable // TypeDefIndex: 5278
{
	// Fields
	private static sbyte cryptoKey; // 0x0
	private sbyte currentCryptoKey; // 0x0
	private sbyte hiddenValue; // 0x1
	private sbyte fakeValue; // 0x2
	private bool inited; // 0x3

	// Methods

	// RVA: 0xD5D9F8 Offset: 0xD5D9F8 VA: 0xD5D9F8
	private void .ctor(sbyte value) { }

	// RVA: 0x1E90EE8 Offset: 0x1E90EE8 VA: 0x1E90EE8
	public static void SetNewCryptoKey(sbyte newKey) { }

	// RVA: 0x1E90F54 Offset: 0x1E90F54 VA: 0x1E90F54
	public static sbyte EncryptDecrypt(sbyte value) { }

	// RVA: 0x1E90FBC Offset: 0x1E90FBC VA: 0x1E90FBC
	public static sbyte EncryptDecrypt(sbyte value, sbyte key) { }

	// RVA: 0xD5DA00 Offset: 0xD5DA00 VA: 0xD5DA00
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5DA08 Offset: 0xD5DA08 VA: 0xD5DA08
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5DA10 Offset: 0xD5DA10 VA: 0xD5DA10
	public sbyte GetEncrypted() { }

	// RVA: 0xD5DA38 Offset: 0xD5DA38 VA: 0xD5DA38
	public void SetEncrypted(sbyte encrypted) { }

	// RVA: 0xD5DA40 Offset: 0xD5DA40 VA: 0xD5DA40
	private sbyte InternalDecrypt() { }

	// RVA: 0x1E91334 Offset: 0x1E91334 VA: 0x1E91334
	public static ObscuredSByte op_Implicit(sbyte value) { }

	// RVA: 0x1E913C8 Offset: 0x1E913C8 VA: 0x1E913C8
	public static sbyte op_Implicit(ObscuredSByte value) { }

	// RVA: 0x1E913EC Offset: 0x1E913EC VA: 0x1E913EC
	public static ObscuredSByte op_Increment(ObscuredSByte input) { }

	// RVA: 0x1E91490 Offset: 0x1E91490 VA: 0x1E91490
	public static ObscuredSByte op_Decrement(ObscuredSByte input) { }

	// RVA: 0xD5DA48 Offset: 0xD5DA48 VA: 0xD5DA48 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5DA50 Offset: 0xD5DA50 VA: 0xD5DA50 Slot: 4
	public bool Equals(ObscuredSByte obj) { }

	// RVA: 0xD5DA5C Offset: 0xD5DA5C VA: 0xD5DA5C Slot: 3
	public override string ToString() { }

	// RVA: 0xD5DA8C Offset: 0xD5DA8C VA: 0xD5DA8C
	public string ToString(string format) { }

	// RVA: 0xD5DAC4 Offset: 0xD5DAC4 VA: 0xD5DAC4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5DAF4 Offset: 0xD5DAF4 VA: 0xD5DAF4
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5DB2C Offset: 0xD5DB2C VA: 0xD5DB2C Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E91774 Offset: 0x1E91774 VA: 0x1E91774
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredShort : IEquatable<ObscuredShort>, IFormattable // TypeDefIndex: 5279
{
	// Fields
	private static short cryptoKey; // 0x0
	private short currentCryptoKey; // 0x0
	private short hiddenValue; // 0x2
	private short fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xD5DBC8 Offset: 0xD5DBC8 VA: 0xD5DBC8
	private void .ctor(short value) { }

	// RVA: 0x1E91854 Offset: 0x1E91854 VA: 0x1E91854
	public static void SetNewCryptoKey(short newKey) { }

	// RVA: 0x1E918C0 Offset: 0x1E918C0 VA: 0x1E918C0
	public static short EncryptDecrypt(short value) { }

	// RVA: 0x1E91928 Offset: 0x1E91928 VA: 0x1E91928
	public static short EncryptDecrypt(short value, short key) { }

	// RVA: 0xD5DBD0 Offset: 0xD5DBD0 VA: 0xD5DBD0
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5DBD8 Offset: 0xD5DBD8 VA: 0xD5DBD8
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5DBE0 Offset: 0xD5DBE0 VA: 0xD5DBE0
	public short GetEncrypted() { }

	// RVA: 0xD5DC08 Offset: 0xD5DC08 VA: 0xD5DC08
	public void SetEncrypted(short encrypted) { }

	// RVA: 0xD5DC10 Offset: 0xD5DC10 VA: 0xD5DC10
	private short InternalDecrypt() { }

	// RVA: 0x1E91CA4 Offset: 0x1E91CA4 VA: 0x1E91CA4
	public static ObscuredShort op_Implicit(short value) { }

	// RVA: 0x1E91D38 Offset: 0x1E91D38 VA: 0x1E91D38
	public static short op_Implicit(ObscuredShort value) { }

	// RVA: 0x1E91D5C Offset: 0x1E91D5C VA: 0x1E91D5C
	public static ObscuredShort op_Increment(ObscuredShort input) { }

	// RVA: 0x1E91DF0 Offset: 0x1E91DF0 VA: 0x1E91DF0
	public static ObscuredShort op_Decrement(ObscuredShort input) { }

	// RVA: 0xD5DC18 Offset: 0xD5DC18 VA: 0xD5DC18 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5DC20 Offset: 0xD5DC20 VA: 0xD5DC20 Slot: 4
	public bool Equals(ObscuredShort obj) { }

	// RVA: 0xD5DC28 Offset: 0xD5DC28 VA: 0xD5DC28 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5DC58 Offset: 0xD5DC58 VA: 0xD5DC58
	public string ToString(string format) { }

	// RVA: 0xD5DC90 Offset: 0xD5DC90 VA: 0xD5DC90 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5DCC0 Offset: 0xD5DCC0 VA: 0xD5DCC0
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5DCF8 Offset: 0xD5DCF8 VA: 0xD5DCF8 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E920C0 Offset: 0x1E920C0 VA: 0x1E920C0
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public sealed class ObscuredString // TypeDefIndex: 5280
{
	// Fields
	private static string cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4ABF0 Offset: 0xC4ABF0 VA: 0xC4ABF0
	private string currentCryptoKey; // 0x10
	[SerializeField] // RVA: 0xC4AC00 Offset: 0xC4AC00 VA: 0xC4AC00
	private byte[] hiddenValue; // 0x18
	[SerializeField] // RVA: 0xC4AC10 Offset: 0xC4AC10 VA: 0xC4AC10
	private string fakeValue; // 0x20
	[SerializeField] // RVA: 0xC4AC20 Offset: 0xC4AC20 VA: 0xC4AC20
	private bool inited; // 0x28

	// Methods

	// RVA: 0x1E92114 Offset: 0x1E92114 VA: 0x1E92114
	private void .ctor() { }

	// RVA: 0x1E9211C Offset: 0x1E9211C VA: 0x1E9211C
	private void .ctor(byte[] value) { }

	// RVA: 0x1E921B0 Offset: 0x1E921B0 VA: 0x1E921B0
	public static void SetNewCryptoKey(string newKey) { }

	// RVA: 0x1E9221C Offset: 0x1E9221C VA: 0x1E9221C
	public static string EncryptDecrypt(string value) { }

	// RVA: 0x1E8F3B4 Offset: 0x1E8F3B4 VA: 0x1E8F3B4
	public static string EncryptDecrypt(string value, string key) { }

	// RVA: 0x1E922B4 Offset: 0x1E922B4 VA: 0x1E922B4
	public void ApplyNewCryptoKey() { }

	// RVA: 0x1E9261C Offset: 0x1E9261C VA: 0x1E9261C
	public void RandomizeCryptoKey() { }

	// RVA: 0x1E92740 Offset: 0x1E92740 VA: 0x1E92740
	public string GetEncrypted() { }

	// RVA: 0x1E92854 Offset: 0x1E92854 VA: 0x1E92854
	public void SetEncrypted(string encrypted) { }

	// RVA: 0x1E925AC Offset: 0x1E925AC VA: 0x1E925AC
	private static byte[] InternalEncrypt(string value) { }

	// RVA: 0x1E926C8 Offset: 0x1E926C8 VA: 0x1E926C8
	private static byte[] InternalEncrypt(string value, string key) { }

	// RVA: 0x1E923A8 Offset: 0x1E923A8 VA: 0x1E923A8
	private string InternalDecrypt() { }

	// RVA: 0x1E929A8 Offset: 0x1E929A8 VA: 0x1E929A8
	public static ObscuredString op_Implicit(string value) { }

	// RVA: 0x1E92A60 Offset: 0x1E92A60 VA: 0x1E92A60
	public static string op_Implicit(ObscuredString value) { }

	// RVA: 0x1E92C30 Offset: 0x1E92C30 VA: 0x1E92C30 Slot: 3
	public override string ToString() { }

	// RVA: 0x1E92AF0 Offset: 0x1E92AF0 VA: 0x1E92AF0
	public static bool op_Equality(ObscuredString a, ObscuredString b) { }

	// RVA: 0x1E92CF8 Offset: 0x1E92CF8 VA: 0x1E92CF8
	public static bool op_Inequality(ObscuredString a, ObscuredString b) { }

	// RVA: 0x1E92D78 Offset: 0x1E92D78 VA: 0x1E92D78 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1E92DF8 Offset: 0x1E92DF8 VA: 0x1E92DF8
	public bool Equals(ObscuredString value) { }

	// RVA: 0x1E92F58 Offset: 0x1E92F58 VA: 0x1E92F58
	public bool Equals(ObscuredString value, StringComparison comparisonType) { }

	// RVA: 0x1E93044 Offset: 0x1E93044 VA: 0x1E93044 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1E928EC Offset: 0x1E928EC VA: 0x1E928EC
	private static byte[] GetBytes(string str) { }

	// RVA: 0x1E927B0 Offset: 0x1E927B0 VA: 0x1E927B0
	private static string GetString(byte[] bytes) { }

	// RVA: 0x1E92C34 Offset: 0x1E92C34 VA: 0x1E92C34
	private static bool ArraysEquals(byte[] a1, byte[] a2) { }

	// RVA: 0x1E93078 Offset: 0x1E93078 VA: 0x1E93078
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredUInt : IEquatable<ObscuredUInt>, IFormattable // TypeDefIndex: 5281
{
	// Fields
	private static uint cryptoKey; // 0x0
	private uint currentCryptoKey; // 0x0
	private uint hiddenValue; // 0x4
	private uint fakeValue; // 0x8
	private bool inited; // 0xC

	// Methods

	// RVA: 0xD5DD94 Offset: 0xD5DD94 VA: 0xD5DD94
	private void .ctor(uint value) { }

	// RVA: 0x1E9315C Offset: 0x1E9315C VA: 0x1E9315C
	public static void SetNewCryptoKey(uint newKey) { }

	// RVA: 0x1E931C8 Offset: 0x1E931C8 VA: 0x1E931C8
	public static uint Encrypt(uint value) { }

	// RVA: 0x1E932B0 Offset: 0x1E932B0 VA: 0x1E932B0
	public static uint Decrypt(uint value) { }

	// RVA: 0x1E93230 Offset: 0x1E93230 VA: 0x1E93230
	public static uint Encrypt(uint value, uint key) { }

	// RVA: 0x1E93318 Offset: 0x1E93318 VA: 0x1E93318
	public static uint Decrypt(uint value, uint key) { }

	// RVA: 0xD5DD9C Offset: 0xD5DD9C VA: 0xD5DD9C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5DDA4 Offset: 0xD5DDA4 VA: 0xD5DDA4
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5DDAC Offset: 0xD5DDAC VA: 0xD5DDAC
	public uint GetEncrypted() { }

	// RVA: 0xD5DDD4 Offset: 0xD5DDD4 VA: 0xD5DDD4
	public void SetEncrypted(uint encrypted) { }

	// RVA: 0xD5DDDC Offset: 0xD5DDDC VA: 0xD5DDDC
	private uint InternalDecrypt() { }

	// RVA: 0x1E888B0 Offset: 0x1E888B0 VA: 0x1E888B0
	public static ObscuredUInt op_Implicit(uint value) { }

	// RVA: 0x1E93680 Offset: 0x1E93680 VA: 0x1E93680
	public static uint op_Implicit(ObscuredUInt value) { }

	// RVA: 0x1E936A4 Offset: 0x1E936A4 VA: 0x1E936A4
	public static ObscuredInt op_Explicit(ObscuredUInt value) { }

	// RVA: 0x1E93720 Offset: 0x1E93720 VA: 0x1E93720
	public static ObscuredUInt op_Increment(ObscuredUInt input) { }

	// RVA: 0x1E937C0 Offset: 0x1E937C0 VA: 0x1E937C0
	public static ObscuredUInt op_Decrement(ObscuredUInt input) { }

	// RVA: 0xD5DDE4 Offset: 0xD5DDE4 VA: 0xD5DDE4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5DDEC Offset: 0xD5DDEC VA: 0xD5DDEC Slot: 4
	public bool Equals(ObscuredUInt obj) { }

	// RVA: 0xD5DDF4 Offset: 0xD5DDF4 VA: 0xD5DDF4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5DE24 Offset: 0xD5DE24 VA: 0xD5DE24
	public string ToString(string format) { }

	// RVA: 0xD5DE5C Offset: 0xD5DE5C VA: 0xD5DE5C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5DE8C Offset: 0xD5DE8C VA: 0xD5DE8C
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5DEC4 Offset: 0xD5DEC4 VA: 0xD5DEC4 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E93A9C Offset: 0x1E93A9C VA: 0x1E93A9C
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredULong : IEquatable<ObscuredULong>, IFormattable // TypeDefIndex: 5282
{
	// Fields
	private static ulong cryptoKey; // 0x0
	private ulong currentCryptoKey; // 0x0
	private ulong hiddenValue; // 0x8
	private ulong fakeValue; // 0x10
	private bool inited; // 0x18

	// Methods

	// RVA: 0xD5DF60 Offset: 0xD5DF60 VA: 0xD5DF60
	private void .ctor(ulong value) { }

	// RVA: 0x1E93B7C Offset: 0x1E93B7C VA: 0x1E93B7C
	public static void SetNewCryptoKey(ulong newKey) { }

	// RVA: 0x1E93BE8 Offset: 0x1E93BE8 VA: 0x1E93BE8
	public static ulong Encrypt(ulong value) { }

	// RVA: 0x1E93CD0 Offset: 0x1E93CD0 VA: 0x1E93CD0
	public static ulong Decrypt(ulong value) { }

	// RVA: 0x1E93C50 Offset: 0x1E93C50 VA: 0x1E93C50
	public static ulong Encrypt(ulong value, ulong key) { }

	// RVA: 0x1E93D38 Offset: 0x1E93D38 VA: 0x1E93D38
	public static ulong Decrypt(ulong value, ulong key) { }

	// RVA: 0xD5DF68 Offset: 0xD5DF68 VA: 0xD5DF68
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5DF70 Offset: 0xD5DF70 VA: 0xD5DF70
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5DF78 Offset: 0xD5DF78 VA: 0xD5DF78
	public ulong GetEncrypted() { }

	// RVA: 0xD5DFA0 Offset: 0xD5DFA0 VA: 0xD5DFA0
	public void SetEncrypted(ulong encrypted) { }

	// RVA: 0xD5DFA8 Offset: 0xD5DFA8 VA: 0xD5DFA8
	private ulong InternalDecrypt() { }

	// RVA: 0x1E940A0 Offset: 0x1E940A0 VA: 0x1E940A0
	public static ObscuredULong op_Implicit(ulong value) { }

	// RVA: 0x1E94148 Offset: 0x1E94148 VA: 0x1E94148
	public static ulong op_Implicit(ObscuredULong value) { }

	// RVA: 0x1E9414C Offset: 0x1E9414C VA: 0x1E9414C
	public static ObscuredULong op_Increment(ObscuredULong input) { }

	// RVA: 0x1E941FC Offset: 0x1E941FC VA: 0x1E941FC
	public static ObscuredULong op_Decrement(ObscuredULong input) { }

	// RVA: 0xD5DFB0 Offset: 0xD5DFB0 VA: 0xD5DFB0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5DFB8 Offset: 0xD5DFB8 VA: 0xD5DFB8 Slot: 4
	public bool Equals(ObscuredULong obj) { }

	// RVA: 0xD5DFF0 Offset: 0xD5DFF0 VA: 0xD5DFF0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5E020 Offset: 0xD5E020 VA: 0xD5E020 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5E050 Offset: 0xD5E050 VA: 0xD5E050
	public string ToString(string format) { }

	// RVA: 0xD5E088 Offset: 0xD5E088 VA: 0xD5E088
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5E0C0 Offset: 0xD5E0C0 VA: 0xD5E0C0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E944FC Offset: 0x1E944FC VA: 0x1E944FC
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredUShort : IEquatable<ObscuredUShort>, IFormattable // TypeDefIndex: 5283
{
	// Fields
	private static ushort cryptoKey; // 0x0
	private ushort currentCryptoKey; // 0x0
	private ushort hiddenValue; // 0x2
	private ushort fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xD5E15C Offset: 0xD5E15C VA: 0xD5E15C
	private void .ctor(ushort value) { }

	// RVA: 0x1E945E0 Offset: 0x1E945E0 VA: 0x1E945E0
	public static void SetNewCryptoKey(ushort newKey) { }

	// RVA: 0x1E9464C Offset: 0x1E9464C VA: 0x1E9464C
	public static ushort EncryptDecrypt(ushort value) { }

	// RVA: 0x1E946B4 Offset: 0x1E946B4 VA: 0x1E946B4
	public static ushort EncryptDecrypt(ushort value, ushort key) { }

	// RVA: 0xD5E164 Offset: 0xD5E164 VA: 0xD5E164
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5E16C Offset: 0xD5E16C VA: 0xD5E16C
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5E174 Offset: 0xD5E174 VA: 0xD5E174
	public ushort GetEncrypted() { }

	// RVA: 0xD5E19C Offset: 0xD5E19C VA: 0xD5E19C
	public void SetEncrypted(ushort encrypted) { }

	// RVA: 0xD5E1A4 Offset: 0xD5E1A4 VA: 0xD5E1A4
	private ushort InternalDecrypt() { }

	// RVA: 0x1E94A28 Offset: 0x1E94A28 VA: 0x1E94A28
	public static ObscuredUShort op_Implicit(ushort value) { }

	// RVA: 0x1E94ABC Offset: 0x1E94ABC VA: 0x1E94ABC
	public static ushort op_Implicit(ObscuredUShort value) { }

	// RVA: 0x1E94AE0 Offset: 0x1E94AE0 VA: 0x1E94AE0
	public static ObscuredUShort op_Increment(ObscuredUShort input) { }

	// RVA: 0x1E94B84 Offset: 0x1E94B84 VA: 0x1E94B84
	public static ObscuredUShort op_Decrement(ObscuredUShort input) { }

	// RVA: 0xD5E1AC Offset: 0xD5E1AC VA: 0xD5E1AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5E1B4 Offset: 0xD5E1B4 VA: 0xD5E1B4 Slot: 4
	public bool Equals(ObscuredUShort obj) { }

	// RVA: 0xD5E1BC Offset: 0xD5E1BC VA: 0xD5E1BC Slot: 3
	public override string ToString() { }

	// RVA: 0xD5E1EC Offset: 0xD5E1EC VA: 0xD5E1EC
	public string ToString(string format) { }

	// RVA: 0xD5E224 Offset: 0xD5E224 VA: 0xD5E224 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5E254 Offset: 0xD5E254 VA: 0xD5E254
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5E28C Offset: 0xD5E28C VA: 0xD5E28C Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E94E64 Offset: 0x1E94E64 VA: 0x1E94E64
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[DefaultMemberAttribute] // RVA: 0xC24E98 Offset: 0xC24E98 VA: 0xC24E98
[Serializable]
public struct ObscuredVector2 // TypeDefIndex: 5284
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Vector2 initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xC4AC30 Offset: 0xC4AC30 VA: 0xC4AC30
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AC40 Offset: 0xC4AC40 VA: 0xC4AC40
	private ObscuredVector2.RawEncryptedVector2 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4AC50 Offset: 0xC4AC50 VA: 0xC4AC50
	private Vector2 fakeValue; // 0xC
	[SerializeField] // RVA: 0xC4AC60 Offset: 0xC4AC60 VA: 0xC4AC60
	private bool inited; // 0x14

	// Properties
	public float x { get; set; }
	public float y { get; set; }
	public float Item { get; set; }

	// Methods

	// RVA: 0xD5E328 Offset: 0xD5E328 VA: 0xD5E328
	private void .ctor(ObscuredVector2.RawEncryptedVector2 value) { }

	// RVA: 0xD5E330 Offset: 0xD5E330 VA: 0xD5E330
	public float get_x() { }

	// RVA: 0xD5E338 Offset: 0xD5E338 VA: 0xD5E338
	public void set_x(float value) { }

	// RVA: 0xD5E340 Offset: 0xD5E340 VA: 0xD5E340
	public float get_y() { }

	// RVA: 0xD5E348 Offset: 0xD5E348 VA: 0xD5E348
	public void set_y(float value) { }

	// RVA: 0xD5E350 Offset: 0xD5E350 VA: 0xD5E350
	public float get_Item(int index) { }

	// RVA: 0xD5E358 Offset: 0xD5E358 VA: 0xD5E358
	public void set_Item(int index, float value) { }

	// RVA: 0x1E95480 Offset: 0x1E95480 VA: 0x1E95480
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1E954EC Offset: 0x1E954EC VA: 0x1E954EC
	public static ObscuredVector2.RawEncryptedVector2 Encrypt(Vector2 value) { }

	// RVA: 0x1E95564 Offset: 0x1E95564 VA: 0x1E95564
	public static ObscuredVector2.RawEncryptedVector2 Encrypt(Vector2 value, int key) { }

	// RVA: 0x1E95618 Offset: 0x1E95618 VA: 0x1E95618
	public static Vector2 Decrypt(ObscuredVector2.RawEncryptedVector2 value) { }

	// RVA: 0x1E95680 Offset: 0x1E95680 VA: 0x1E95680
	public static Vector2 Decrypt(ObscuredVector2.RawEncryptedVector2 value, int key) { }

	// RVA: 0xD5E360 Offset: 0xD5E360 VA: 0xD5E360
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5E368 Offset: 0xD5E368 VA: 0xD5E368
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5E370 Offset: 0xD5E370 VA: 0xD5E370
	public ObscuredVector2.RawEncryptedVector2 GetEncrypted() { }

	// RVA: 0xD5E398 Offset: 0xD5E398 VA: 0xD5E398
	public void SetEncrypted(ObscuredVector2.RawEncryptedVector2 encrypted) { }

	// RVA: 0xD5E3A0 Offset: 0xD5E3A0 VA: 0xD5E3A0
	private Vector2 InternalDecrypt() { }

	// RVA: 0xD5E3A8 Offset: 0xD5E3A8 VA: 0xD5E3A8
	private bool CompareVectorsWithTolerance(Vector2 vector1, Vector2 vector2) { }

	// RVA: 0xD5E3AC Offset: 0xD5E3AC VA: 0xD5E3AC
	private float InternalDecryptField(int encrypted) { }

	// RVA: 0xD5E3B4 Offset: 0xD5E3B4 VA: 0xD5E3B4
	private int InternalEncryptField(float encrypted) { }

	// RVA: 0x1E95B24 Offset: 0x1E95B24 VA: 0x1E95B24
	public static ObscuredVector2 op_Implicit(Vector2 value) { }

	// RVA: 0x1E95BDC Offset: 0x1E95BDC VA: 0x1E95BDC
	public static Vector2 op_Implicit(ObscuredVector2 value) { }

	// RVA: 0x1E95BE0 Offset: 0x1E95BE0 VA: 0x1E95BE0
	public static Vector3 op_Implicit(ObscuredVector2 value) { }

	// RVA: 0xD5E3B8 Offset: 0xD5E3B8 VA: 0xD5E3B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5E3E8 Offset: 0xD5E3E8 VA: 0xD5E3E8 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5E418 Offset: 0xD5E418 VA: 0xD5E418
	public string ToString(string format) { }

	// RVA: 0x1E95CA8 Offset: 0x1E95CA8 VA: 0x1E95CA8
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct ObscuredVector2.RawEncryptedVector2 // TypeDefIndex: 5285
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[DefaultMemberAttribute] // RVA: 0xC24ED0 Offset: 0xC24ED0 VA: 0xC24ED0
[Serializable]
public struct ObscuredVector3 // TypeDefIndex: 5286
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Vector3 initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xC4AC70 Offset: 0xC4AC70 VA: 0xC4AC70
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AC80 Offset: 0xC4AC80 VA: 0xC4AC80
	private ObscuredVector3.RawEncryptedVector3 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4AC90 Offset: 0xC4AC90 VA: 0xC4AC90
	private Vector3 fakeValue; // 0x10
	[SerializeField] // RVA: 0xC4ACA0 Offset: 0xC4ACA0 VA: 0xC4ACA0
	private bool inited; // 0x1C

	// Properties
	public float x { get; set; }
	public float y { get; set; }
	public float z { get; set; }
	public float Item { get; set; }

	// Methods

	// RVA: 0xD5E4C4 Offset: 0xD5E4C4 VA: 0xD5E4C4
	private void .ctor(ObscuredVector3.RawEncryptedVector3 encrypted) { }

	// RVA: 0xD5E4D0 Offset: 0xD5E4D0 VA: 0xD5E4D0
	public float get_x() { }

	// RVA: 0xD5E4D8 Offset: 0xD5E4D8 VA: 0xD5E4D8
	public void set_x(float value) { }

	// RVA: 0xD5E4E0 Offset: 0xD5E4E0 VA: 0xD5E4E0
	public float get_y() { }

	// RVA: 0xD5E4E8 Offset: 0xD5E4E8 VA: 0xD5E4E8
	public void set_y(float value) { }

	// RVA: 0xD5E4F0 Offset: 0xD5E4F0 VA: 0xD5E4F0
	public float get_z() { }

	// RVA: 0xD5E4F8 Offset: 0xD5E4F8 VA: 0xD5E4F8
	public void set_z(float value) { }

	// RVA: 0xD5E500 Offset: 0xD5E500 VA: 0xD5E500
	public float get_Item(int index) { }

	// RVA: 0xD5E508 Offset: 0xD5E508 VA: 0xD5E508
	public void set_Item(int index, float value) { }

	// RVA: 0x1E96498 Offset: 0x1E96498 VA: 0x1E96498
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1E96504 Offset: 0x1E96504 VA: 0x1E96504
	public static ObscuredVector3.RawEncryptedVector3 Encrypt(Vector3 value) { }

	// RVA: 0x1E96594 Offset: 0x1E96594 VA: 0x1E96594
	public static ObscuredVector3.RawEncryptedVector3 Encrypt(Vector3 value, int key) { }

	// RVA: 0x1E9665C Offset: 0x1E9665C VA: 0x1E9665C
