	private static string EncryptQuaternionValue(string key, Quaternion value) { }

	// RVA: 0x21357C8 Offset: 0x21357C8 VA: 0x21357C8
	private static Quaternion DecryptQuaternionValue(string key, string encryptedInput, Quaternion defaultValue) { }

	// RVA: 0x2135B24 Offset: 0x2135B24 VA: 0x2135B24
	public static void SetColor(string key, Color32 value) { }

	// RVA: 0x2135C6C Offset: 0x2135C6C VA: 0x2135C6C
	public static Color32 GetColor(string key) { }

	// RVA: 0x2135D04 Offset: 0x2135D04 VA: 0x2135D04
	public static Color32 GetColor(string key, Color32 defaultValue) { }

	// RVA: 0x2135BC0 Offset: 0x2135BC0 VA: 0x2135BC0
	private static string EncryptColorValue(string key, uint value) { }

	// RVA: 0x2135E2C Offset: 0x2135E2C VA: 0x2135E2C
	public static void SetRect(string key, Rect value) { }

	// RVA: 0x2136054 Offset: 0x2136054 VA: 0x2136054
	public static Rect GetRect(string key) { }

	// RVA: 0x21360EC Offset: 0x21360EC VA: 0x21360EC
	public static Rect GetRect(string key, Rect defaultValue) { }

	// RVA: 0x2135EDC Offset: 0x2135EDC VA: 0x2135EDC
	private static string EncryptRectValue(string key, Rect value) { }

	// RVA: 0x2136220 Offset: 0x2136220 VA: 0x2136220
	private static Rect DecryptRectValue(string key, string encryptedInput, Rect defaultValue) { }

	// RVA: 0x21365AC Offset: 0x21365AC VA: 0x21365AC
	public static void SetRawValue(string key, string encryptedValue) { }

	// RVA: 0x2136628 Offset: 0x2136628 VA: 0x2136628
	public static string GetRawValue(string key) { }

	// RVA: 0x2136694 Offset: 0x2136694 VA: 0x2136694
	internal static ObscuredPrefs.DataType GetRawValueType(string value) { }

	// RVA: 0x2131298 Offset: 0x2131298 VA: 0x2131298
	internal static string EncryptKey(string key) { }

	// RVA: 0x21369F8 Offset: 0x21369F8 VA: 0x21369F8
	public static bool HasKey(string key) { }

	// RVA: 0x2136A84 Offset: 0x2136A84 VA: 0x2136A84
	public static void DeleteKey(string key) { }

	// RVA: 0x2136B18 Offset: 0x2136B18 VA: 0x2136B18
	public static void DeleteAll() { }

	// RVA: 0x2136B20 Offset: 0x2136B20 VA: 0x2136B20
	public static void Save() { }

	// RVA: 0x2131670 Offset: 0x2131670 VA: 0x2131670
	private static string GetEncryptedPrefsString(string key, string encryptedKey) { }

	// RVA: 0x21318AC Offset: 0x21318AC VA: 0x21318AC
	private static string EncryptData(string key, byte[] cleanBytes, ObscuredPrefs.DataType type) { }

	// RVA: 0x21321D0 Offset: 0x21321D0 VA: 0x21321D0
	internal static byte[] DecryptData(string key, string encryptedInput) { }

	// RVA: 0x2130FB8 Offset: 0x2130FB8 VA: 0x2130FB8
	private static uint CalculateChecksum(string input) { }

	// RVA: 0x2137328 Offset: 0x2137328 VA: 0x2137328
	private static void SavesTampered() { }

	// RVA: 0x21373DC Offset: 0x21373DC VA: 0x21373DC
	private static void PossibleForeignSavesDetected() { }

	// RVA: 0x2130D64 Offset: 0x2130D64 VA: 0x2130D64
	private static string GetDeviceId() { }

	// RVA: 0x2136B28 Offset: 0x2136B28 VA: 0x2136B28
	private static byte[] EncryptDecryptBytes(byte[] bytes, int dataLength, string key) { }

	// RVA: 0x2131C80 Offset: 0x2131C80 VA: 0x2131C80
	private static string DeprecatedDecryptValue(string value) { }

	// RVA: 0x21375AC Offset: 0x21375AC VA: 0x21375AC
	private static string DeprecatedCalculateChecksum(string input) { }

	// RVA: 0x21374BC Offset: 0x21374BC VA: 0x21374BC
	private static string get_DeprecatedDeviceId() { }

	// RVA: 0x2137784 Offset: 0x2137784 VA: 0x2137784
	private static void .cctor() { }
}

// Namespace: 
internal enum ObscuredPrefs.DataType // TypeDefIndex: 5274
{
	// Fields
	public byte value__; // 0x0
	public const ObscuredPrefs.DataType Unknown = 0;
	public const ObscuredPrefs.DataType Int = 5;
	public const ObscuredPrefs.DataType UInt = 10;
	public const ObscuredPrefs.DataType String = 15;
	public const ObscuredPrefs.DataType Float = 20;
	public const ObscuredPrefs.DataType Double = 25;
	public const ObscuredPrefs.DataType Long = 30;
	public const ObscuredPrefs.DataType Bool = 35;
	public const ObscuredPrefs.DataType ByteArray = 40;
	public const ObscuredPrefs.DataType Vector2 = 45;
	public const ObscuredPrefs.DataType Vector3 = 50;
	public const ObscuredPrefs.DataType Quaternion = 55;
	public const ObscuredPrefs.DataType Color = 60;
	public const ObscuredPrefs.DataType Rect = 65;
}

// Namespace: 
public enum ObscuredPrefs.DeviceLockLevel // TypeDefIndex: 5275
{
	// Fields
	public byte value__; // 0x0
	public const ObscuredPrefs.DeviceLockLevel None = 0;
	public const ObscuredPrefs.DeviceLockLevel Soft = 1;
	public const ObscuredPrefs.DeviceLockLevel Strict = 2;
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredQuaternion // TypeDefIndex: 5276
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Quaternion initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xCB6C3C Offset: 0xCB6C3C VA: 0xCB6C3C
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6C4C Offset: 0xCB6C4C VA: 0xCB6C4C
	private ObscuredQuaternion.RawEncryptedQuaternion hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6C5C Offset: 0xCB6C5C VA: 0xCB6C5C
	private Quaternion fakeValue; // 0x14
	[SerializeField] // RVA: 0xCB6C6C Offset: 0xCB6C6C VA: 0xCB6C6C
	private bool inited; // 0x24

	// Methods

	// RVA: 0xDC7898 Offset: 0xDC7898 VA: 0xDC7898
	private void .ctor(ObscuredQuaternion.RawEncryptedQuaternion value) { }

	// RVA: 0x2137890 Offset: 0x2137890 VA: 0x2137890
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x21378FC Offset: 0x21378FC VA: 0x21378FC
	public static ObscuredQuaternion.RawEncryptedQuaternion Encrypt(Quaternion value) { }

	// RVA: 0x213798C Offset: 0x213798C VA: 0x213798C
	public static ObscuredQuaternion.RawEncryptedQuaternion Encrypt(Quaternion value, int key) { }

	// RVA: 0x2137AA0 Offset: 0x2137AA0 VA: 0x2137AA0
	public static Quaternion Decrypt(ObscuredQuaternion.RawEncryptedQuaternion value) { }

	// RVA: 0x2137B18 Offset: 0x2137B18 VA: 0x2137B18
	public static Quaternion Decrypt(ObscuredQuaternion.RawEncryptedQuaternion value, int key) { }

	// RVA: 0xDC78A0 Offset: 0xDC78A0 VA: 0xDC78A0
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC78A8 Offset: 0xDC78A8 VA: 0xDC78A8
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC78B0 Offset: 0xDC78B0 VA: 0xDC78B0
	public ObscuredQuaternion.RawEncryptedQuaternion GetEncrypted() { }

	// RVA: 0xDC78DC Offset: 0xDC78DC VA: 0xDC78DC
	public void SetEncrypted(ObscuredQuaternion.RawEncryptedQuaternion encrypted) { }

	// RVA: 0xDC78E4 Offset: 0xDC78E4 VA: 0xDC78E4
	private Quaternion InternalDecrypt() { }

	// RVA: 0xDC78EC Offset: 0xDC78EC VA: 0xDC78EC
	private bool CompareQuaternionsWithTolerance(Quaternion q1, Quaternion q2) { }

	// RVA: 0x2138100 Offset: 0x2138100 VA: 0x2138100
	public static ObscuredQuaternion op_Implicit(Quaternion value) { }

	// RVA: 0x21381EC Offset: 0x21381EC VA: 0x21381EC
	public static Quaternion op_Implicit(ObscuredQuaternion value) { }

	// RVA: 0xDC78F0 Offset: 0xDC78F0 VA: 0xDC78F0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC78F8 Offset: 0xDC78F8 VA: 0xDC78F8 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC7900 Offset: 0xDC7900 VA: 0xDC7900
	public string ToString(string format) { }

	// RVA: 0x2138290 Offset: 0x2138290 VA: 0x2138290
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct ObscuredQuaternion.RawEncryptedQuaternion // TypeDefIndex: 5277
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4
	public int z; // 0x8
	public int w; // 0xC
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredSByte : IEquatable<ObscuredSByte>, IFormattable // TypeDefIndex: 5278
{
	// Fields
	private static sbyte cryptoKey; // 0x0
	private sbyte currentCryptoKey; // 0x0
	private sbyte hiddenValue; // 0x1
	private sbyte fakeValue; // 0x2
	private bool inited; // 0x3

	// Methods

	// RVA: 0xDC795C Offset: 0xDC795C VA: 0xDC795C
	private void .ctor(sbyte value) { }

	// RVA: 0x21383A8 Offset: 0x21383A8 VA: 0x21383A8
	public static void SetNewCryptoKey(sbyte newKey) { }

	// RVA: 0x2138414 Offset: 0x2138414 VA: 0x2138414
	public static sbyte EncryptDecrypt(sbyte value) { }

	// RVA: 0x213847C Offset: 0x213847C VA: 0x213847C
	public static sbyte EncryptDecrypt(sbyte value, sbyte key) { }

	// RVA: 0xDC7964 Offset: 0xDC7964 VA: 0xDC7964
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC796C Offset: 0xDC796C VA: 0xDC796C
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC7974 Offset: 0xDC7974 VA: 0xDC7974
	public sbyte GetEncrypted() { }

	// RVA: 0xDC799C Offset: 0xDC799C VA: 0xDC799C
	public void SetEncrypted(sbyte encrypted) { }

	// RVA: 0xDC79A4 Offset: 0xDC79A4 VA: 0xDC79A4
	private sbyte InternalDecrypt() { }

	// RVA: 0x21387F4 Offset: 0x21387F4 VA: 0x21387F4
	public static ObscuredSByte op_Implicit(sbyte value) { }

	// RVA: 0x2138888 Offset: 0x2138888 VA: 0x2138888
	public static sbyte op_Implicit(ObscuredSByte value) { }

	// RVA: 0x21388AC Offset: 0x21388AC VA: 0x21388AC
	public static ObscuredSByte op_Increment(ObscuredSByte input) { }

	// RVA: 0x2138950 Offset: 0x2138950 VA: 0x2138950
	public static ObscuredSByte op_Decrement(ObscuredSByte input) { }

	// RVA: 0xDC79AC Offset: 0xDC79AC VA: 0xDC79AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC79B4 Offset: 0xDC79B4 VA: 0xDC79B4 Slot: 4
	public bool Equals(ObscuredSByte obj) { }

	// RVA: 0xDC79C0 Offset: 0xDC79C0 VA: 0xDC79C0 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC79F0 Offset: 0xDC79F0 VA: 0xDC79F0
	public string ToString(string format) { }

	// RVA: 0xDC7A28 Offset: 0xDC7A28 VA: 0xDC7A28 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC7A58 Offset: 0xDC7A58 VA: 0xDC7A58
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC7A90 Offset: 0xDC7A90 VA: 0xDC7A90 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x2138C34 Offset: 0x2138C34 VA: 0x2138C34
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredShort : IEquatable<ObscuredShort>, IFormattable // TypeDefIndex: 5279
{
	// Fields
	private static short cryptoKey; // 0x0
	private short currentCryptoKey; // 0x0
	private short hiddenValue; // 0x2
	private short fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xDC7B2C Offset: 0xDC7B2C VA: 0xDC7B2C
	private void .ctor(short value) { }

	// RVA: 0x2138D14 Offset: 0x2138D14 VA: 0x2138D14
	public static void SetNewCryptoKey(short newKey) { }

	// RVA: 0x2138D80 Offset: 0x2138D80 VA: 0x2138D80
	public static short EncryptDecrypt(short value) { }

	// RVA: 0x2138DE8 Offset: 0x2138DE8 VA: 0x2138DE8
	public static short EncryptDecrypt(short value, short key) { }

	// RVA: 0xDC7B34 Offset: 0xDC7B34 VA: 0xDC7B34
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC7B3C Offset: 0xDC7B3C VA: 0xDC7B3C
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC7B44 Offset: 0xDC7B44 VA: 0xDC7B44
	public short GetEncrypted() { }

	// RVA: 0xDC7B6C Offset: 0xDC7B6C VA: 0xDC7B6C
	public void SetEncrypted(short encrypted) { }

	// RVA: 0xDC7B74 Offset: 0xDC7B74 VA: 0xDC7B74
	private short InternalDecrypt() { }

	// RVA: 0x2139164 Offset: 0x2139164 VA: 0x2139164
	public static ObscuredShort op_Implicit(short value) { }

	// RVA: 0x21391F8 Offset: 0x21391F8 VA: 0x21391F8
	public static short op_Implicit(ObscuredShort value) { }

	// RVA: 0x213921C Offset: 0x213921C VA: 0x213921C
	public static ObscuredShort op_Increment(ObscuredShort input) { }

	// RVA: 0x21392B0 Offset: 0x21392B0 VA: 0x21392B0
	public static ObscuredShort op_Decrement(ObscuredShort input) { }

	// RVA: 0xDC7B7C Offset: 0xDC7B7C VA: 0xDC7B7C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC7B84 Offset: 0xDC7B84 VA: 0xDC7B84 Slot: 4
	public bool Equals(ObscuredShort obj) { }

	// RVA: 0xDC7B8C Offset: 0xDC7B8C VA: 0xDC7B8C Slot: 3
	public override string ToString() { }

	// RVA: 0xDC7BBC Offset: 0xDC7BBC VA: 0xDC7BBC
	public string ToString(string format) { }

	// RVA: 0xDC7BF4 Offset: 0xDC7BF4 VA: 0xDC7BF4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC7C24 Offset: 0xDC7C24 VA: 0xDC7C24
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC7C5C Offset: 0xDC7C5C VA: 0xDC7C5C Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x2139580 Offset: 0x2139580 VA: 0x2139580
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public sealed class ObscuredString // TypeDefIndex: 5280
{
	// Fields
	private static string cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6C7C Offset: 0xCB6C7C VA: 0xCB6C7C
	private string currentCryptoKey; // 0x10
	[SerializeField] // RVA: 0xCB6C8C Offset: 0xCB6C8C VA: 0xCB6C8C
	private byte[] hiddenValue; // 0x18
	[SerializeField] // RVA: 0xCB6C9C Offset: 0xCB6C9C VA: 0xCB6C9C
	private string fakeValue; // 0x20
	[SerializeField] // RVA: 0xCB6CAC Offset: 0xCB6CAC VA: 0xCB6CAC
	private bool inited; // 0x28

	// Methods

	// RVA: 0x21395D4 Offset: 0x21395D4 VA: 0x21395D4
	private void .ctor() { }

	// RVA: 0x21395DC Offset: 0x21395DC VA: 0x21395DC
	private void .ctor(byte[] value) { }

	// RVA: 0x2139670 Offset: 0x2139670 VA: 0x2139670
	public static void SetNewCryptoKey(string newKey) { }

	// RVA: 0x21396DC Offset: 0x21396DC VA: 0x21396DC
	public static string EncryptDecrypt(string value) { }

	// RVA: 0x21367DC Offset: 0x21367DC VA: 0x21367DC
	public static string EncryptDecrypt(string value, string key) { }

	// RVA: 0x2139774 Offset: 0x2139774 VA: 0x2139774
	public void ApplyNewCryptoKey() { }

	// RVA: 0x2139ADC Offset: 0x2139ADC VA: 0x2139ADC
	public void RandomizeCryptoKey() { }

	// RVA: 0x2139C00 Offset: 0x2139C00 VA: 0x2139C00
	public string GetEncrypted() { }

	// RVA: 0x2139D14 Offset: 0x2139D14 VA: 0x2139D14
	public void SetEncrypted(string encrypted) { }

	// RVA: 0x2139A6C Offset: 0x2139A6C VA: 0x2139A6C
	private static byte[] InternalEncrypt(string value) { }

	// RVA: 0x2139B88 Offset: 0x2139B88 VA: 0x2139B88
	private static byte[] InternalEncrypt(string value, string key) { }

	// RVA: 0x2139868 Offset: 0x2139868 VA: 0x2139868
	private string InternalDecrypt() { }

	// RVA: 0x2139E68 Offset: 0x2139E68 VA: 0x2139E68
	public static ObscuredString op_Implicit(string value) { }

	// RVA: 0x2139F20 Offset: 0x2139F20 VA: 0x2139F20
	public static string op_Implicit(ObscuredString value) { }

	// RVA: 0x213A0F0 Offset: 0x213A0F0 VA: 0x213A0F0 Slot: 3
	public override string ToString() { }

	// RVA: 0x2139FB0 Offset: 0x2139FB0 VA: 0x2139FB0
	public static bool op_Equality(ObscuredString a, ObscuredString b) { }

	// RVA: 0x213A1B8 Offset: 0x213A1B8 VA: 0x213A1B8
	public static bool op_Inequality(ObscuredString a, ObscuredString b) { }

	// RVA: 0x213A238 Offset: 0x213A238 VA: 0x213A238 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x213A2B8 Offset: 0x213A2B8 VA: 0x213A2B8
	public bool Equals(ObscuredString value) { }

	// RVA: 0x213A418 Offset: 0x213A418 VA: 0x213A418
	public bool Equals(ObscuredString value, StringComparison comparisonType) { }

	// RVA: 0x213A504 Offset: 0x213A504 VA: 0x213A504 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2139DAC Offset: 0x2139DAC VA: 0x2139DAC
	private static byte[] GetBytes(string str) { }

	// RVA: 0x2139C70 Offset: 0x2139C70 VA: 0x2139C70
	private static string GetString(byte[] bytes) { }

	// RVA: 0x213A0F4 Offset: 0x213A0F4 VA: 0x213A0F4
	private static bool ArraysEquals(byte[] a1, byte[] a2) { }

	// RVA: 0x213A538 Offset: 0x213A538 VA: 0x213A538
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredUInt : IEquatable<ObscuredUInt>, IFormattable // TypeDefIndex: 5281
{
	// Fields
	private static uint cryptoKey; // 0x0
	private uint currentCryptoKey; // 0x0
	private uint hiddenValue; // 0x4
	private uint fakeValue; // 0x8
	private bool inited; // 0xC

	// Methods

	// RVA: 0xDC7CF8 Offset: 0xDC7CF8 VA: 0xDC7CF8
	private void .ctor(uint value) { }

	// RVA: 0x213A61C Offset: 0x213A61C VA: 0x213A61C
	public static void SetNewCryptoKey(uint newKey) { }

	// RVA: 0x213A688 Offset: 0x213A688 VA: 0x213A688
	public static uint Encrypt(uint value) { }

	// RVA: 0x213A770 Offset: 0x213A770 VA: 0x213A770
	public static uint Decrypt(uint value) { }

	// RVA: 0x213A6F0 Offset: 0x213A6F0 VA: 0x213A6F0
	public static uint Encrypt(uint value, uint key) { }

	// RVA: 0x213A7D8 Offset: 0x213A7D8 VA: 0x213A7D8
	public static uint Decrypt(uint value, uint key) { }

	// RVA: 0xDC7D00 Offset: 0xDC7D00 VA: 0xDC7D00
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC7D08 Offset: 0xDC7D08 VA: 0xDC7D08
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC7D10 Offset: 0xDC7D10 VA: 0xDC7D10
	public uint GetEncrypted() { }

	// RVA: 0xDC7D38 Offset: 0xDC7D38 VA: 0xDC7D38
	public void SetEncrypted(uint encrypted) { }

	// RVA: 0xDC7D40 Offset: 0xDC7D40 VA: 0xDC7D40
	private uint InternalDecrypt() { }

	// RVA: 0x213AB40 Offset: 0x213AB40 VA: 0x213AB40
	public static ObscuredUInt op_Implicit(uint value) { }

	// RVA: 0x213ABD4 Offset: 0x213ABD4 VA: 0x213ABD4
	public static uint op_Implicit(ObscuredUInt value) { }

	// RVA: 0x213ABF8 Offset: 0x213ABF8 VA: 0x213ABF8
	public static ObscuredInt op_Explicit(ObscuredUInt value) { }

	// RVA: 0x213AC78 Offset: 0x213AC78 VA: 0x213AC78
	public static ObscuredUInt op_Increment(ObscuredUInt input) { }

	// RVA: 0x213AD18 Offset: 0x213AD18 VA: 0x213AD18
	public static ObscuredUInt op_Decrement(ObscuredUInt input) { }

	// RVA: 0xDC7D48 Offset: 0xDC7D48 VA: 0xDC7D48 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC7D50 Offset: 0xDC7D50 VA: 0xDC7D50 Slot: 4
	public bool Equals(ObscuredUInt obj) { }

	// RVA: 0xDC7D58 Offset: 0xDC7D58 VA: 0xDC7D58 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC7D88 Offset: 0xDC7D88 VA: 0xDC7D88
	public string ToString(string format) { }

	// RVA: 0xDC7DC0 Offset: 0xDC7DC0 VA: 0xDC7DC0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC7DF0 Offset: 0xDC7DF0 VA: 0xDC7DF0
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC7E28 Offset: 0xDC7E28 VA: 0xDC7E28 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x213AFF4 Offset: 0x213AFF4 VA: 0x213AFF4
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredULong : IEquatable<ObscuredULong>, IFormattable // TypeDefIndex: 5282
{
	// Fields
	private static ulong cryptoKey; // 0x0
	private ulong currentCryptoKey; // 0x0
	private ulong hiddenValue; // 0x8
	private ulong fakeValue; // 0x10
	private bool inited; // 0x18

	// Methods

	// RVA: 0xDC7EC4 Offset: 0xDC7EC4 VA: 0xDC7EC4
	private void .ctor(ulong value) { }

	// RVA: 0x213B0D4 Offset: 0x213B0D4 VA: 0x213B0D4
	public static void SetNewCryptoKey(ulong newKey) { }

	// RVA: 0x213B140 Offset: 0x213B140 VA: 0x213B140
	public static ulong Encrypt(ulong value) { }

	// RVA: 0x213B228 Offset: 0x213B228 VA: 0x213B228
	public static ulong Decrypt(ulong value) { }

	// RVA: 0x213B1A8 Offset: 0x213B1A8 VA: 0x213B1A8
	public static ulong Encrypt(ulong value, ulong key) { }

	// RVA: 0x213B290 Offset: 0x213B290 VA: 0x213B290
	public static ulong Decrypt(ulong value, ulong key) { }

	// RVA: 0xDC7ECC Offset: 0xDC7ECC VA: 0xDC7ECC
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC7ED4 Offset: 0xDC7ED4 VA: 0xDC7ED4
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC7EDC Offset: 0xDC7EDC VA: 0xDC7EDC
	public ulong GetEncrypted() { }

	// RVA: 0xDC7F04 Offset: 0xDC7F04 VA: 0xDC7F04
	public void SetEncrypted(ulong encrypted) { }

	// RVA: 0xDC7F0C Offset: 0xDC7F0C VA: 0xDC7F0C
	private ulong InternalDecrypt() { }

	// RVA: 0x213B5F8 Offset: 0x213B5F8 VA: 0x213B5F8
	public static ObscuredULong op_Implicit(ulong value) { }

	// RVA: 0x213B6A0 Offset: 0x213B6A0 VA: 0x213B6A0
	public static ulong op_Implicit(ObscuredULong value) { }

	// RVA: 0x213B6A4 Offset: 0x213B6A4 VA: 0x213B6A4
	public static ObscuredULong op_Increment(ObscuredULong input) { }

	// RVA: 0x213B754 Offset: 0x213B754 VA: 0x213B754
	public static ObscuredULong op_Decrement(ObscuredULong input) { }

	// RVA: 0xDC7F14 Offset: 0xDC7F14 VA: 0xDC7F14 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC7F1C Offset: 0xDC7F1C VA: 0xDC7F1C Slot: 4
	public bool Equals(ObscuredULong obj) { }

	// RVA: 0xDC7F54 Offset: 0xDC7F54 VA: 0xDC7F54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC7F84 Offset: 0xDC7F84 VA: 0xDC7F84 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC7FB4 Offset: 0xDC7FB4 VA: 0xDC7FB4
	public string ToString(string format) { }

	// RVA: 0xDC7FEC Offset: 0xDC7FEC VA: 0xDC7FEC
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC8024 Offset: 0xDC8024 VA: 0xDC8024 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x213BA54 Offset: 0x213BA54 VA: 0x213BA54
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredUShort : IEquatable<ObscuredUShort>, IFormattable // TypeDefIndex: 5283
{
	// Fields
	private static ushort cryptoKey; // 0x0
	private ushort currentCryptoKey; // 0x0
	private ushort hiddenValue; // 0x2
	private ushort fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xDC80C0 Offset: 0xDC80C0 VA: 0xDC80C0
	private void .ctor(ushort value) { }

	// RVA: 0x213BB38 Offset: 0x213BB38 VA: 0x213BB38
	public static void SetNewCryptoKey(ushort newKey) { }

	// RVA: 0x213BBA4 Offset: 0x213BBA4 VA: 0x213BBA4
	public static ushort EncryptDecrypt(ushort value) { }

	// RVA: 0x213BC0C Offset: 0x213BC0C VA: 0x213BC0C
	public static ushort EncryptDecrypt(ushort value, ushort key) { }

	// RVA: 0xDC80C8 Offset: 0xDC80C8 VA: 0xDC80C8
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC80D0 Offset: 0xDC80D0 VA: 0xDC80D0
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC80D8 Offset: 0xDC80D8 VA: 0xDC80D8
	public ushort GetEncrypted() { }

	// RVA: 0xDC8100 Offset: 0xDC8100 VA: 0xDC8100
	public void SetEncrypted(ushort encrypted) { }

	// RVA: 0xDC8108 Offset: 0xDC8108 VA: 0xDC8108
	private ushort InternalDecrypt() { }

	// RVA: 0x213BF80 Offset: 0x213BF80 VA: 0x213BF80
	public static ObscuredUShort op_Implicit(ushort value) { }

	// RVA: 0x213C014 Offset: 0x213C014 VA: 0x213C014
	public static ushort op_Implicit(ObscuredUShort value) { }

	// RVA: 0x213C038 Offset: 0x213C038 VA: 0x213C038
	public static ObscuredUShort op_Increment(ObscuredUShort input) { }

	// RVA: 0x213C0DC Offset: 0x213C0DC VA: 0x213C0DC
	public static ObscuredUShort op_Decrement(ObscuredUShort input) { }

	// RVA: 0xDC8110 Offset: 0xDC8110 VA: 0xDC8110 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC8118 Offset: 0xDC8118 VA: 0xDC8118 Slot: 4
	public bool Equals(ObscuredUShort obj) { }

	// RVA: 0xDC8120 Offset: 0xDC8120 VA: 0xDC8120 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC8150 Offset: 0xDC8150 VA: 0xDC8150
	public string ToString(string format) { }

	// RVA: 0xDC8188 Offset: 0xDC8188 VA: 0xDC8188 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC81B8 Offset: 0xDC81B8 VA: 0xDC81B8
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC81F0 Offset: 0xDC81F0 VA: 0xDC81F0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x213C3BC Offset: 0x213C3BC VA: 0x213C3BC
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[DefaultMemberAttribute] // RVA: 0xC90FC0 Offset: 0xC90FC0 VA: 0xC90FC0
[Serializable]
public struct ObscuredVector2 // TypeDefIndex: 5284
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Vector2 initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xCB6CBC Offset: 0xCB6CBC VA: 0xCB6CBC
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6CCC Offset: 0xCB6CCC VA: 0xCB6CCC
	private ObscuredVector2.RawEncryptedVector2 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6CDC Offset: 0xCB6CDC VA: 0xCB6CDC
	private Vector2 fakeValue; // 0xC
	[SerializeField] // RVA: 0xCB6CEC Offset: 0xCB6CEC VA: 0xCB6CEC
	private bool inited; // 0x14

	// Properties
	public float x { get; set; }
	public float y { get; set; }
	public float Item { get; set; }

	// Methods

	// RVA: 0xDC828C Offset: 0xDC828C VA: 0xDC828C
	private void .ctor(ObscuredVector2.RawEncryptedVector2 value) { }

	// RVA: 0xDC8294 Offset: 0xDC8294 VA: 0xDC8294
	public float get_x() { }

	// RVA: 0xDC829C Offset: 0xDC829C VA: 0xDC829C
	public void set_x(float value) { }

	// RVA: 0xDC82A4 Offset: 0xDC82A4 VA: 0xDC82A4
	public float get_y() { }

	// RVA: 0xDC82AC Offset: 0xDC82AC VA: 0xDC82AC
	public void set_y(float value) { }

	// RVA: 0xDC82B4 Offset: 0xDC82B4 VA: 0xDC82B4
	public float get_Item(int index) { }

	// RVA: 0xDC82BC Offset: 0xDC82BC VA: 0xDC82BC
	public void set_Item(int index, float value) { }

	// RVA: 0x213C9E0 Offset: 0x213C9E0 VA: 0x213C9E0
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x213CA4C Offset: 0x213CA4C VA: 0x213CA4C
	public static ObscuredVector2.RawEncryptedVector2 Encrypt(Vector2 value) { }

	// RVA: 0x213CAC4 Offset: 0x213CAC4 VA: 0x213CAC4
	public static ObscuredVector2.RawEncryptedVector2 Encrypt(Vector2 value, int key) { }

	// RVA: 0x213CB94 Offset: 0x213CB94 VA: 0x213CB94
	public static Vector2 Decrypt(ObscuredVector2.RawEncryptedVector2 value) { }

	// RVA: 0x213CBFC Offset: 0x213CBFC VA: 0x213CBFC
	public static Vector2 Decrypt(ObscuredVector2.RawEncryptedVector2 value, int key) { }

	// RVA: 0xDC82C4 Offset: 0xDC82C4 VA: 0xDC82C4
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC82CC Offset: 0xDC82CC VA: 0xDC82CC
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC82D4 Offset: 0xDC82D4 VA: 0xDC82D4
	public ObscuredVector2.RawEncryptedVector2 GetEncrypted() { }

	// RVA: 0xDC82FC Offset: 0xDC82FC VA: 0xDC82FC
	public void SetEncrypted(ObscuredVector2.RawEncryptedVector2 encrypted) { }

	// RVA: 0xDC8304 Offset: 0xDC8304 VA: 0xDC8304
	private Vector2 InternalDecrypt() { }

	// RVA: 0xDC830C Offset: 0xDC830C VA: 0xDC830C
	private bool CompareVectorsWithTolerance(Vector2 vector1, Vector2 vector2) { }

	// RVA: 0xDC8310 Offset: 0xDC8310 VA: 0xDC8310
	private float InternalDecryptField(int encrypted) { }

	// RVA: 0xDC8318 Offset: 0xDC8318 VA: 0xDC8318
	private int InternalEncryptField(float encrypted) { }

	// RVA: 0x213D0C8 Offset: 0x213D0C8 VA: 0x213D0C8
	public static ObscuredVector2 op_Implicit(Vector2 value) { }

	// RVA: 0x213D180 Offset: 0x213D180 VA: 0x213D180
	public static Vector2 op_Implicit(ObscuredVector2 value) { }

	// RVA: 0x213D184 Offset: 0x213D184 VA: 0x213D184
	public static Vector3 op_Implicit(ObscuredVector2 value) { }

	// RVA: 0xDC831C Offset: 0xDC831C VA: 0xDC831C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC834C Offset: 0xDC834C VA: 0xDC834C Slot: 3
	public override string ToString() { }

	// RVA: 0xDC837C Offset: 0xDC837C VA: 0xDC837C
	public string ToString(string format) { }

	// RVA: 0x213D24C Offset: 0x213D24C VA: 0x213D24C
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct ObscuredVector2.RawEncryptedVector2 // TypeDefIndex: 5285
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[DefaultMemberAttribute] // RVA: 0xC90FF8 Offset: 0xC90FF8 VA: 0xC90FF8
[Serializable]
public struct ObscuredVector3 // TypeDefIndex: 5286
{
	// Fields
	private static int cryptoKey; // 0x0
	private static readonly Vector3 initialFakeValue; // 0x4
	[SerializeField] // RVA: 0xCB6CFC Offset: 0xCB6CFC VA: 0xCB6CFC
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6D0C Offset: 0xCB6D0C VA: 0xCB6D0C
	private ObscuredVector3.RawEncryptedVector3 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6D1C Offset: 0xCB6D1C VA: 0xCB6D1C
	private Vector3 fakeValue; // 0x10
	[SerializeField] // RVA: 0xCB6D2C Offset: 0xCB6D2C VA: 0xCB6D2C
	private bool inited; // 0x1C

	// Properties
	public float x { get; set; }
	public float y { get; set; }
	public float z { get; set; }
	public float Item { get; set; }

	// Methods

	// RVA: 0xDC8428 Offset: 0xDC8428 VA: 0xDC8428
	private void .ctor(ObscuredVector3.RawEncryptedVector3 encrypted) { }

	// RVA: 0xDC8434 Offset: 0xDC8434 VA: 0xDC8434
	public float get_x() { }

	// RVA: 0xDC843C Offset: 0xDC843C VA: 0xDC843C
	public void set_x(float value) { }

	// RVA: 0xDC8444 Offset: 0xDC8444 VA: 0xDC8444
	public float get_y() { }

	// RVA: 0xDC844C Offset: 0xDC844C VA: 0xDC844C
	public void set_y(float value) { }

	// RVA: 0xDC8454 Offset: 0xDC8454 VA: 0xDC8454
	public float get_z() { }

	// RVA: 0xDC845C Offset: 0xDC845C VA: 0xDC845C
	public void set_z(float value) { }

	// RVA: 0xDC8464 Offset: 0xDC8464 VA: 0xDC8464
	public float get_Item(int index) { }

	// RVA: 0xDC846C Offset: 0xDC846C VA: 0xDC846C
	public void set_Item(int index, float value) { }

	// RVA: 0x213DA44 Offset: 0x213DA44 VA: 0x213DA44
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x213DAB0 Offset: 0x213DAB0 VA: 0x213DAB0
	public static ObscuredVector3.RawEncryptedVector3 Encrypt(Vector3 value) { }

	// RVA: 0x213DB40 Offset: 0x213DB40 VA: 0x213DB40
	public static ObscuredVector3.RawEncryptedVector3 Encrypt(Vector3 value, int key) { }

	// RVA: 0x213DC3C Offset: 0x213DC3C VA: 0x213DC3C
	public static Vector3 Decrypt(ObscuredVector3.RawEncryptedVector3 value) { }

	// RVA: 0x213DCB4 Offset: 0x213DCB4 VA: 0x213DCB4
	public static Vector3 Decrypt(ObscuredVector3.RawEncryptedVector3 value, int key) { }

	// RVA: 0xDC8474 Offset: 0xDC8474 VA: 0xDC8474
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC847C Offset: 0xDC847C VA: 0xDC847C
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC8484 Offset: 0xDC8484 VA: 0xDC8484
	public ObscuredVector3.RawEncryptedVector3 GetEncrypted() { }

	// RVA: 0xDC84B0 Offset: 0xDC84B0 VA: 0xDC84B0
	public void SetEncrypted(ObscuredVector3.RawEncryptedVector3 encrypted) { }

	// RVA: 0xDC84BC Offset: 0xDC84BC VA: 0xDC84BC
	private Vector3 InternalDecrypt() { }

	// RVA: 0xDC84C4 Offset: 0xDC84C4 VA: 0xDC84C4
	private bool CompareVectorsWithTolerance(Vector3 vector1, Vector3 vector2) { }

	// RVA: 0xDC84C8 Offset: 0xDC84C8 VA: 0xDC84C8
	private float InternalDecryptField(int encrypted) { }

	// RVA: 0xDC84D0 Offset: 0xDC84D0 VA: 0xDC84D0
	private int InternalEncryptField(float encrypted) { }

	// RVA: 0x213E224 Offset: 0x213E224 VA: 0x213E224
	public static ObscuredVector3 op_Implicit(Vector3 value) { }

	// RVA: 0x213E2FC Offset: 0x213E2FC VA: 0x213E2FC
	public static Vector3 op_Implicit(ObscuredVector3 value) { }

	// RVA: 0x213E300 Offset: 0x213E300 VA: 0x213E300
	public static ObscuredVector3 op_Addition(ObscuredVector3 a, ObscuredVector3 b) { }

	// RVA: 0x213E40C Offset: 0x213E40C VA: 0x213E40C
	public static ObscuredVector3 op_Addition(Vector3 a, ObscuredVector3 b) { }

	// RVA: 0x213E50C Offset: 0x213E50C VA: 0x213E50C
	public static ObscuredVector3 op_Addition(ObscuredVector3 a, Vector3 b) { }

	// RVA: 0x213E60C Offset: 0x213E60C VA: 0x213E60C
	public static ObscuredVector3 op_Subtraction(ObscuredVector3 a, ObscuredVector3 b) { }

	// RVA: 0x213E718 Offset: 0x213E718 VA: 0x213E718
	public static ObscuredVector3 op_Subtraction(Vector3 a, ObscuredVector3 b) { }

	// RVA: 0x213E818 Offset: 0x213E818 VA: 0x213E818
	public static ObscuredVector3 op_Subtraction(ObscuredVector3 a, Vector3 b) { }

	// RVA: 0x213E918 Offset: 0x213E918 VA: 0x213E918
	public static ObscuredVector3 op_UnaryNegation(ObscuredVector3 a) { }

	// RVA: 0x213E9F8 Offset: 0x213E9F8 VA: 0x213E9F8
	public static ObscuredVector3 op_Multiply(ObscuredVector3 a, float d) { }

	// RVA: 0x213EAE0 Offset: 0x213EAE0 VA: 0x213EAE0
	public static ObscuredVector3 op_Multiply(float d, ObscuredVector3 a) { }

	// RVA: 0x213EBC8 Offset: 0x213EBC8 VA: 0x213EBC8
	public static ObscuredVector3 op_Division(ObscuredVector3 a, float d) { }

	// RVA: 0x213ECB0 Offset: 0x213ECB0 VA: 0x213ECB0
	public static bool op_Equality(ObscuredVector3 lhs, ObscuredVector3 rhs) { }

	// RVA: 0x213ED78 Offset: 0x213ED78 VA: 0x213ED78
	public static bool op_Equality(Vector3 lhs, ObscuredVector3 rhs) { }

	// RVA: 0x213EE2C Offset: 0x213EE2C VA: 0x213EE2C
	public static bool op_Equality(ObscuredVector3 lhs, Vector3 rhs) { }

	// RVA: 0x213EEE0 Offset: 0x213EEE0 VA: 0x213EEE0
	public static bool op_Inequality(ObscuredVector3 lhs, ObscuredVector3 rhs) { }

	// RVA: 0x213EFA8 Offset: 0x213EFA8 VA: 0x213EFA8
	public static bool op_Inequality(Vector3 lhs, ObscuredVector3 rhs) { }

	// RVA: 0x213F05C Offset: 0x213F05C VA: 0x213F05C
	public static bool op_Inequality(ObscuredVector3 lhs, Vector3 rhs) { }

	// RVA: 0xDC84D4 Offset: 0xDC84D4 VA: 0xDC84D4 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xDC84DC Offset: 0xDC84DC VA: 0xDC84DC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC84E4 Offset: 0xDC84E4 VA: 0xDC84E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC84EC Offset: 0xDC84EC VA: 0xDC84EC
	public string ToString(string format) { }

	// RVA: 0x213F1F4 Offset: 0x213F1F4 VA: 0x213F1F4
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct ObscuredVector3.RawEncryptedVector3 // TypeDefIndex: 5287
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4
	public int z; // 0x8
}

// Namespace: CodeStage.AntiCheat.Utils
internal class xxHash // TypeDefIndex: 5288
{
	// Fields
	private const uint PRIME32_1 = 2654435761;
	private const uint PRIME32_2 = 2246822519;
	private const uint PRIME32_3 = 3266489917;
	private const uint PRIME32_4 = 668265263;
	private const uint PRIME32_5 = 374761393;

	// Methods

	// RVA: 0x213F284 Offset: 0x213F284 VA: 0x213F284
