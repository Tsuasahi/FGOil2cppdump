	// RVA: 0xFA0848 Offset: 0xFA0848 VA: 0xFA0848
	public static FsmColor op_Implicit(Color value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmEnum : NamedVariable // TypeDefIndex: 3348
{
	// Fields
	[SerializeField] // RVA: 0xC846E4 Offset: 0xC846E4 VA: 0xC846E4
	private string enumName; // 0x38
	[SerializeField] // RVA: 0xC846F4 Offset: 0xC846F4 VA: 0xC846F4
	private int intValue; // 0x40
	private Enum value; // 0x48
	private int parsedIntValue; // 0x50
	private Type enumType; // 0x58

	// Properties
	public override object RawValue { get; set; }
	public Type EnumType { get; set; }
	public string EnumName { get; set; }
	public Enum Value { get; set; }
	public override VariableType VariableType { get; }
	public override Type ObjectType { get; set; }

	// Methods

	// RVA: 0xFA0D68 Offset: 0xFA0D68 VA: 0xFA0D68 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFA0EE4 Offset: 0xFA0EE4 VA: 0xFA0EE4 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFA103C Offset: 0xFA103C VA: 0xFA103C
	public Type get_EnumType() { }

	// RVA: 0xFA119C Offset: 0xFA119C VA: 0xFA119C
	public void set_EnumType(Type value) { }

	// RVA: 0xFA1098 Offset: 0xFA1098 VA: 0xFA1098
	private void InitEnumType() { }

	// RVA: 0xFA1348 Offset: 0xFA1348 VA: 0xFA1348
	public string get_EnumName() { }

	// RVA: 0xFA1340 Offset: 0xFA1340 VA: 0xFA1340
	public void set_EnumName(string value) { }

	// RVA: 0xFA0D6C Offset: 0xFA0D6C VA: 0xFA0D6C
	public Enum get_Value() { }

	// RVA: 0xFA0FBC Offset: 0xFA0FBC VA: 0xFA0FBC
	public void set_Value(Enum value) { }

	// RVA: 0xFA1350 Offset: 0xFA1350 VA: 0xFA1350
	public void ResetValue() { }

	// RVA: 0xFA149C Offset: 0xFA149C VA: 0xFA149C
	public void .ctor() { }

	// RVA: 0xFA14AC Offset: 0xFA14AC VA: 0xFA14AC
	public void .ctor(string name, Type enumType, int intValue) { }

	// RVA: 0xFA1634 Offset: 0xFA1634 VA: 0xFA1634
	public void .ctor(string name) { }

	// RVA: 0xFA1704 Offset: 0xFA1704 VA: 0xFA1704
	public void .ctor(FsmEnum source) { }

	// RVA: 0xFA1784 Offset: 0xFA1784 VA: 0xFA1784 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFA17E4 Offset: 0xFA17E4 VA: 0xFA17E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xFA1818 Offset: 0xFA1818 VA: 0xFA1818 Slot: 33
	public override int ToInt() { }

	// RVA: 0xFA1820 Offset: 0xFA1820 VA: 0xFA1820 Slot: 34
	public override void Clear() { }

	// RVA: 0xFA1824 Offset: 0xFA1824 VA: 0xFA1824 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFA182C Offset: 0xFA182C VA: 0xFA182C Slot: 23
	public override Type get_ObjectType() { }

	// RVA: 0xFA1830 Offset: 0xFA1830 VA: 0xFA1830 Slot: 24
	public override void set_ObjectType(Type value) { }

	// RVA: 0xFA1834 Offset: 0xFA1834 VA: 0xFA1834 Slot: 29
	public override bool TestTypeConstraint(VariableType variableType, Type _enumType) { }

	// RVA: 0xFA1914 Offset: 0xFA1914 VA: 0xFA1914
	public static FsmEnum op_Implicit(Enum value) { }
}

// Namespace: HutongGames.PlayMaker
public enum None // TypeDefIndex: 3349
{
	// Fields
	public int value__; // 0x0
	public const None None = 0;
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmFloat : NamedVariable // TypeDefIndex: 3350
{
	// Fields
	[SerializeField] // RVA: 0xC84704 Offset: 0xC84704 VA: 0xC84704
	private float value; // 0x38

	// Properties
	public float Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFA7AB0 Offset: 0xFA7AB0 VA: 0xFA7AB0
	public float get_Value() { }

	// RVA: 0xFA7B10 Offset: 0xFA7B10 VA: 0xFA7B10
	public void set_Value(float value) { }

	// RVA: 0xFA7B18 Offset: 0xFA7B18 VA: 0xFA7B18 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFA7B7C Offset: 0xFA7B7C VA: 0xFA7B7C Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFA7BE4 Offset: 0xFA7BE4 VA: 0xFA7BE4 Slot: 30
	public override void SafeAssign(object val) { }

	// RVA: 0xFA7C8C Offset: 0xFA7C8C VA: 0xFA7C8C
	public void .ctor() { }

	// RVA: 0xFA7C94 Offset: 0xFA7C94 VA: 0xFA7C94
	public void .ctor(string name) { }

	// RVA: 0xFA7C9C Offset: 0xFA7C9C VA: 0xFA7C9C
	public void .ctor(FsmFloat source) { }

	// RVA: 0xFA7CD0 Offset: 0xFA7CD0 VA: 0xFA7CD0 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFA7D40 Offset: 0xFA7D40 VA: 0xFA7D40 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFA7D48 Offset: 0xFA7D48 VA: 0xFA7D48 Slot: 3
	public override string ToString() { }

	// RVA: 0xFA7D74 Offset: 0xFA7D74 VA: 0xFA7D74 Slot: 33
	public override int ToInt() { }

	// RVA: 0xFA7D80 Offset: 0xFA7D80 VA: 0xFA7D80 Slot: 34
	public override void Clear() { }

	// RVA: 0xFA7D88 Offset: 0xFA7D88 VA: 0xFA7D88
	public static FsmFloat op_Implicit(float value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmGameObject : NamedVariable // TypeDefIndex: 3351
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC84714 Offset: 0xC84714 VA: 0xC84714
	private Action OnChange; // 0x38
	[SerializeField] // RVA: 0xC84724 Offset: 0xC84724 VA: 0xC84724
	private GameObject value; // 0x40

	// Properties
	public GameObject Value { get; set; }
	public override Type ObjectType { get; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xC85AF4 Offset: 0xC85AF4 VA: 0xC85AF4
	// RVA: 0xFA7E30 Offset: 0xFA7E30 VA: 0xFA7E30
	public void add_OnChange(Action value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC85B04 Offset: 0xC85B04 VA: 0xC85B04
	// RVA: 0xFA7F1C Offset: 0xFA7F1C VA: 0xFA7F1C
	public void remove_OnChange(Action value) { }

	// RVA: 0xFA8008 Offset: 0xFA8008 VA: 0xFA8008
	public GameObject get_Value() { }

	// RVA: 0xFA80A8 Offset: 0xFA80A8 VA: 0xFA80A8
	public void set_Value(GameObject value) { }

	// RVA: 0xFA80D0 Offset: 0xFA80D0 VA: 0xFA80D0 Slot: 23
	public override Type get_ObjectType() { }

	// RVA: 0xFA8140 Offset: 0xFA8140 VA: 0xFA8140 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFA8148 Offset: 0xFA8148 VA: 0xFA8148 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFA81BC Offset: 0xFA81BC VA: 0xFA81BC Slot: 30
	public override void SafeAssign(object val) { }

	// RVA: 0xFA8230 Offset: 0xFA8230 VA: 0xFA8230
	public void .ctor() { }

	// RVA: 0xFA8238 Offset: 0xFA8238 VA: 0xFA8238
	public void .ctor(string name) { }

	// RVA: 0xFA8240 Offset: 0xFA8240 VA: 0xFA8240
	public void .ctor(FsmGameObject source) { }

	// RVA: 0xFA8274 Offset: 0xFA8274 VA: 0xFA8274 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFA82E4 Offset: 0xFA82E4 VA: 0xFA82E4 Slot: 34
	public override void Clear() { }

	// RVA: 0xFA82EC Offset: 0xFA82EC VA: 0xFA82EC Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFA82F4 Offset: 0xFA82F4 VA: 0xFA82F4 Slot: 3
	public override string ToString() { }

	// RVA: 0xFA83AC Offset: 0xFA83AC VA: 0xFA83AC
	public static FsmGameObject op_Implicit(GameObject value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmInt : NamedVariable // TypeDefIndex: 3352
{
	// Fields
	[SerializeField] // RVA: 0xC84734 Offset: 0xC84734 VA: 0xC84734
	private int value; // 0x38

	// Properties
	public int Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFA8454 Offset: 0xFA8454 VA: 0xFA8454
	public int get_Value() { }

	// RVA: 0xFA84B4 Offset: 0xFA84B4 VA: 0xFA84B4
	public void set_Value(int value) { }

	// RVA: 0xFA84BC Offset: 0xFA84BC VA: 0xFA84BC Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFA8520 Offset: 0xFA8520 VA: 0xFA8520 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFA8588 Offset: 0xFA8588 VA: 0xFA8588 Slot: 30
	public override void SafeAssign(object val) { }

	// RVA: 0xFA8658 Offset: 0xFA8658 VA: 0xFA8658
	public void .ctor() { }

	// RVA: 0xFA8660 Offset: 0xFA8660 VA: 0xFA8660
	public void .ctor(string name) { }

	// RVA: 0xFA8668 Offset: 0xFA8668 VA: 0xFA8668
	public void .ctor(FsmInt source) { }

	// RVA: 0xFA869C Offset: 0xFA869C VA: 0xFA869C Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFA870C Offset: 0xFA870C VA: 0xFA870C Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFA8714 Offset: 0xFA8714 VA: 0xFA8714 Slot: 3
	public override string ToString() { }

	// RVA: 0xFA8740 Offset: 0xFA8740 VA: 0xFA8740 Slot: 32
	public override float ToFloat() { }

	// RVA: 0xFA874C Offset: 0xFA874C VA: 0xFA874C Slot: 33
	public override int ToInt() { }

	// RVA: 0xFA8754 Offset: 0xFA8754 VA: 0xFA8754 Slot: 34
	public override void Clear() { }

	// RVA: 0xFA875C Offset: 0xFA875C VA: 0xFA875C
	public static FsmInt op_Implicit(int value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmMaterial : FsmObject // TypeDefIndex: 3353
{
	// Properties
	public override Type ObjectType { get; }
	public Material Value { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFAACF8 Offset: 0xFAACF8 VA: 0xFAACF8 Slot: 23
	public override Type get_ObjectType() { }

	// RVA: 0xFAAD68 Offset: 0xFAAD68 VA: 0xFAAD68
	public Material get_Value() { }

	// RVA: 0xFAAF64 Offset: 0xFAAF64 VA: 0xFAAF64
	public void set_Value(Material value) { }

	// RVA: 0xFAAF74 Offset: 0xFAAF74 VA: 0xFAAF74
	public void .ctor() { }

	// RVA: 0xFAAF84 Offset: 0xFAAF84 VA: 0xFAAF84
	public void .ctor(string name) { }

	// RVA: 0xFAB050 Offset: 0xFAB050 VA: 0xFAB050
	public void .ctor(FsmObject source) { }

	// RVA: 0xFAB0CC Offset: 0xFAB0CC VA: 0xFAB0CC Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFAB12C Offset: 0xFAB12C VA: 0xFAB12C Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFAB134 Offset: 0xFAB134 VA: 0xFAB134 Slot: 29
	public override bool TestTypeConstraint(VariableType variableType, Type _objectType) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmObject : NamedVariable // TypeDefIndex: 3354
{
	// Fields
	[SerializeField] // RVA: 0xC84744 Offset: 0xC84744 VA: 0xC84744
	private string typeName; // 0x38
	[SerializeField] // RVA: 0xC84754 Offset: 0xC84754 VA: 0xC84754
	private Object value; // 0x40
	private Type objectType; // 0x48

	// Properties
	public override Type ObjectType { get; set; }
	public string TypeName { get; }
	public Object Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFAB14C Offset: 0xFAB14C VA: 0xFAB14C Slot: 23
	public override Type get_ObjectType() { }

	// RVA: 0xFAB260 Offset: 0xFAB260 VA: 0xFAB260 Slot: 24
	public override void set_ObjectType(Type value) { }

	// RVA: 0xFAB374 Offset: 0xFAB374 VA: 0xFAB374
	public string get_TypeName() { }

	// RVA: 0xFAADF0 Offset: 0xFAADF0 VA: 0xFAADF0
	public Object get_Value() { }

	// RVA: 0xFAAF6C Offset: 0xFAAF6C VA: 0xFAAF6C
	public void set_Value(Object value) { }

	// RVA: 0xFAB37C Offset: 0xFAB37C VA: 0xFAB37C Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFAB384 Offset: 0xFAB384 VA: 0xFAB384 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFAAF7C Offset: 0xFAAF7C VA: 0xFAAF7C
	public void .ctor() { }

	// RVA: 0xFAAF88 Offset: 0xFAAF88 VA: 0xFAAF88
	public void .ctor(string name) { }

	// RVA: 0xFAB054 Offset: 0xFAB054 VA: 0xFAB054
	public void .ctor(FsmObject source) { }

	// RVA: 0xFAB454 Offset: 0xFAB454 VA: 0xFAB454 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFAB4B4 Offset: 0xFAB4B4 VA: 0xFAB4B4 Slot: 34
	public override void Clear() { }

	// RVA: 0xFAB4BC Offset: 0xFAB4BC VA: 0xFAB4BC Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFAB4C4 Offset: 0xFAB4C4 VA: 0xFAB4C4 Slot: 3
	public override string ToString() { }

	// RVA: 0xFAB580 Offset: 0xFAB580 VA: 0xFAB580
	public static FsmObject op_Implicit(Object value) { }

	// RVA: 0xFAB5F0 Offset: 0xFAB5F0 VA: 0xFAB5F0 Slot: 29
	public override bool TestTypeConstraint(VariableType variableType, Type _objectType) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmOwnerDefault // TypeDefIndex: 3355
{
	// Fields
	[SerializeField] // RVA: 0xC84764 Offset: 0xC84764 VA: 0xC84764
	private OwnerDefaultOption ownerOption; // 0x10
	[SerializeField] // RVA: 0xC84774 Offset: 0xC84774 VA: 0xC84774
	private FsmGameObject gameObject; // 0x18

	// Properties
	public OwnerDefaultOption OwnerOption { get; set; }
	public FsmGameObject GameObject { get; set; }

	// Methods

	// RVA: 0xFAB704 Offset: 0xFAB704 VA: 0xFAB704
	public OwnerDefaultOption get_OwnerOption() { }

	// RVA: 0xFAB70C Offset: 0xFAB70C VA: 0xFAB70C
	public void set_OwnerOption(OwnerDefaultOption value) { }

	// RVA: 0xFAB714 Offset: 0xFAB714 VA: 0xFAB714
	public FsmGameObject get_GameObject() { }

	// RVA: 0xFAB71C Offset: 0xFAB71C VA: 0xFAB71C
	public void set_GameObject(FsmGameObject value) { }

	// RVA: 0xFAB724 Offset: 0xFAB724 VA: 0xFAB724
	public void .ctor() { }

	// RVA: 0xFA71FC Offset: 0xFA71FC VA: 0xFA71FC
	public void .ctor(FsmOwnerDefault source) { }
}

// Namespace: HutongGames.PlayMaker
public enum OwnerDefaultOption // TypeDefIndex: 3356
{
	// Fields
	public int value__; // 0x0
	public const OwnerDefaultOption UseOwner = 0;
	public const OwnerDefaultOption SpecifyGameObject = 1;
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmQuaternion : NamedVariable // TypeDefIndex: 3357
{
	// Fields
	[SerializeField] // RVA: 0xC84784 Offset: 0xC84784 VA: 0xC84784
	private Quaternion value; // 0x38

	// Properties
	public Quaternion Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFADF80 Offset: 0xFADF80 VA: 0xFADF80
	public Quaternion get_Value() { }

	// RVA: 0xFAEEF8 Offset: 0xFAEEF8 VA: 0xFAEEF8
	public void set_Value(Quaternion value) { }

	// RVA: 0xFAEFB4 Offset: 0xFAEFB4 VA: 0xFAEFB4 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFAF018 Offset: 0xFAF018 VA: 0xFAF018 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFAEFA4 Offset: 0xFAEFA4 VA: 0xFAEFA4
	public void .ctor() { }

	// RVA: 0xFAF090 Offset: 0xFAF090 VA: 0xFAF090
	public void .ctor(string name) { }

	// RVA: 0xFABE38 Offset: 0xFABE38 VA: 0xFABE38
	public void .ctor(FsmQuaternion source) { }

	// RVA: 0xFAF098 Offset: 0xFAF098 VA: 0xFAF098 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFAF0F8 Offset: 0xFAF0F8 VA: 0xFAF0F8 Slot: 34
	public override void Clear() { }

	// RVA: 0xFAF168 Offset: 0xFAF168 VA: 0xFAF168 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFAF170 Offset: 0xFAF170 VA: 0xFAF170 Slot: 3
	public override string ToString() { }

	// RVA: 0xFAF1A8 Offset: 0xFAF1A8 VA: 0xFAF1A8
	public static FsmQuaternion op_Implicit(Quaternion value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmRect : NamedVariable // TypeDefIndex: 3358
{
	// Fields
	[SerializeField] // RVA: 0xC84794 Offset: 0xC84794 VA: 0xC84794
	private Rect value; // 0x38

	// Properties
	public Rect Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFADF74 Offset: 0xFADF74 VA: 0xFADF74
	public Rect get_Value() { }

	// RVA: 0xFAEEEC Offset: 0xFAEEEC VA: 0xFAEEEC
	public void set_Value(Rect value) { }

	// RVA: 0xFAF268 Offset: 0xFAF268 VA: 0xFAF268 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFAF2CC Offset: 0xFAF2CC VA: 0xFAF2CC Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFAEF9C Offset: 0xFAEF9C VA: 0xFAEF9C
	public void .ctor() { }

	// RVA: 0xFAF344 Offset: 0xFAF344 VA: 0xFAF344
	public void .ctor(string name) { }

	// RVA: 0xFABDF4 Offset: 0xFABDF4 VA: 0xFABDF4
	public void .ctor(FsmRect source) { }

	// RVA: 0xFAF34C Offset: 0xFAF34C VA: 0xFAF34C Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFAF3AC Offset: 0xFAF3AC VA: 0xFAF3AC Slot: 34
	public override void Clear() { }

	// RVA: 0xFAF3B4 Offset: 0xFAF3B4 VA: 0xFAF3B4 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFAF3BC Offset: 0xFAF3BC VA: 0xFAF3BC Slot: 3
	public override string ToString() { }

	// RVA: 0xFAF3C8 Offset: 0xFAF3C8 VA: 0xFAF3C8
	public static FsmRect op_Implicit(Rect value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmString : NamedVariable // TypeDefIndex: 3359
{
	// Fields
	[SerializeField] // RVA: 0xC847A4 Offset: 0xC847A4 VA: 0xC847A4
	private string value; // 0x38

	// Properties
	public string Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFADF18 Offset: 0xFADF18 VA: 0xFADF18
	public string get_Value() { }

	// RVA: 0xFAEEE4 Offset: 0xFAEEE4 VA: 0xFAEEE4
	public void set_Value(string value) { }

	// RVA: 0xFB2AB0 Offset: 0xFB2AB0 VA: 0xFB2AB0 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFB2AB8 Offset: 0xFB2AB8 VA: 0xFB2AB8 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFB2B6C Offset: 0xFB2B6C VA: 0xFB2B6C
	public void .ctor() { }

	// RVA: 0xFB2BC4 Offset: 0xFB2BC4 VA: 0xFB2BC4
	public void .ctor(string name) { }

	// RVA: 0xFA7294 Offset: 0xFA7294 VA: 0xFA7294
	public void .ctor(FsmString source) { }

	// RVA: 0xFB2C2C Offset: 0xFB2C2C VA: 0xFB2C2C Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFB2C8C Offset: 0xFB2C8C VA: 0xFB2C8C Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFB2C94 Offset: 0xFB2C94 VA: 0xFB2C94 Slot: 3
	public override string ToString() { }

	// RVA: 0xFB2C98 Offset: 0xFB2C98 VA: 0xFB2C98 Slot: 33
	public override int ToInt() { }

	// RVA: 0xFB2CCC Offset: 0xFB2CCC VA: 0xFB2CCC Slot: 34
	public override void Clear() { }

	// RVA: 0xFB2D1C Offset: 0xFB2D1C VA: 0xFB2D1C Slot: 32
	public override float ToFloat() { }

	// RVA: 0xFA730C Offset: 0xFA730C VA: 0xFA730C
	public static FsmString op_Implicit(string value) { }

	// RVA: 0xFAEF0C Offset: 0xFAEF0C VA: 0xFAEF0C
	public static bool IsNullOrEmpty(FsmString fsmString) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmTexture : FsmObject // TypeDefIndex: 3360
{
	// Properties
	public override Type ObjectType { get; }
	public Texture Value { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFB3624 Offset: 0xFB3624 VA: 0xFB3624 Slot: 23
	public override Type get_ObjectType() { }

	// RVA: 0xFADF8C Offset: 0xFADF8C VA: 0xFADF8C
	public Texture get_Value() { }

	// RVA: 0xFAEF04 Offset: 0xFAEF04 VA: 0xFAEF04
	public void set_Value(Texture value) { }

	// RVA: 0xFAEFAC Offset: 0xFAEFAC VA: 0xFAEFAC
	public void .ctor() { }

	// RVA: 0xFB3694 Offset: 0xFB3694 VA: 0xFB3694
	public void .ctor(string name) { }

	// RVA: 0xFABE7C Offset: 0xFABE7C VA: 0xFABE7C
	public void .ctor(FsmObject source) { }

	// RVA: 0xFB3698 Offset: 0xFB3698 VA: 0xFB3698 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFB36F8 Offset: 0xFB36F8 VA: 0xFB36F8 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFB3700 Offset: 0xFB3700 VA: 0xFB3700 Slot: 29
	public override bool TestTypeConstraint(VariableType variableType, Type _objectType) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmVar // TypeDefIndex: 3361
{
	// Fields
	public string variableName; // 0x10
	public string objectType; // 0x18
	public bool useVariable; // 0x20
	private NamedVariable namedVar; // 0x28
	private Type namedVarType; // 0x30
	private Type enumType; // 0x38
	private Enum enumValue; // 0x40
	private Type _objectType; // 0x48
	[SerializeField] // RVA: 0xC847B4 Offset: 0xC847B4 VA: 0xC847B4
	private VariableType type; // 0x50
	public float floatValue; // 0x54
	public int intValue; // 0x58
	public bool boolValue; // 0x5C
	public string stringValue; // 0x60
	public Vector4 vector4Value; // 0x68
	public Object objectReference; // 0x78
	public FsmArray arrayValue; // 0x80
	private Vector2 vector2; // 0x88
	private Vector3 vector3; // 0x90
	private Rect rect; // 0x9C

	// Properties
	public NamedVariable NamedVar { get; set; }
	public Type NamedVarType { get; }
	public Type EnumType { get; set; }
	public Enum EnumValue { get; set; }
	public Type ObjectType { get; set; }
	public VariableType Type { get; set; }
	public Type RealType { get; }
	public bool IsNone { get; }
	public Vector2 vector2Value { get; set; }
	public Vector3 vector3Value { get; set; }
	public Color colorValue { get; set; }
	public Rect rectValue { get; set; }
	public Quaternion quaternionValue { get; set; }
	public GameObject gameObjectValue { get; set; }
	public Material materialValue { get; set; }
	public Texture textureValue { get; set; }

	// Methods

	// RVA: 0xFB7788 Offset: 0xFB7788 VA: 0xFB7788
	public NamedVariable get_NamedVar() { }

	// RVA: 0xFB7DA4 Offset: 0xFB7DA4 VA: 0xFB7DA4
	public void set_NamedVar(NamedVariable value) { }

	// RVA: 0xFB7FAC Offset: 0xFB7FAC VA: 0xFB7FAC
	public Type get_NamedVarType() { }

	// RVA: 0xFB7FFC Offset: 0xFB7FFC VA: 0xFB7FFC
	public Type get_EnumType() { }

	// RVA: 0xFB8130 Offset: 0xFB8130 VA: 0xFB8130
	public void set_EnumType(Type value) { }

	// RVA: 0xFB837C Offset: 0xFB837C VA: 0xFB837C
	public Enum get_EnumValue() { }

	// RVA: 0xFB84B8 Offset: 0xFB84B8 VA: 0xFB84B8
	public void set_EnumValue(Enum value) { }

	// RVA: 0xFB85F8 Offset: 0xFB85F8 VA: 0xFB85F8
	public Type get_ObjectType() { }

	// RVA: 0xFB829C Offset: 0xFB829C VA: 0xFB829C
	public void set_ObjectType(Type value) { }

	// RVA: 0xFB86E4 Offset: 0xFB86E4 VA: 0xFB86E4
	public VariableType get_Type() { }

	// RVA: 0xFB86EC Offset: 0xFB86EC VA: 0xFB86EC
	public void set_Type(VariableType value) { }

	// RVA: 0xFB8704 Offset: 0xFB8704 VA: 0xFB8704
	public Type get_RealType() { }

	// RVA: 0xFB8930 Offset: 0xFB8930 VA: 0xFB8930
	public bool get_IsNone() { }

	// RVA: 0xFB89B4 Offset: 0xFB89B4 VA: 0xFB89B4
	public Vector2 get_vector2Value() { }

	// RVA: 0xFB89E4 Offset: 0xFB89E4 VA: 0xFB89E4
	public void set_vector2Value(Vector2 value) { }

	// RVA: 0xFB89F8 Offset: 0xFB89F8 VA: 0xFB89F8
	public Vector3 get_vector3Value() { }

	// RVA: 0xFB8A30 Offset: 0xFB8A30 VA: 0xFB8A30
	public void set_vector3Value(Vector3 value) { }

	// RVA: 0xFB8A40 Offset: 0xFB8A40 VA: 0xFB8A40
	public Color get_colorValue() { }

	// RVA: 0xFB8A78 Offset: 0xFB8A78 VA: 0xFB8A78
	public void set_colorValue(Color value) { }

	// RVA: 0xFB8A84 Offset: 0xFB8A84 VA: 0xFB8A84
	public Rect get_rectValue() { }

	// RVA: 0xFB8ABC Offset: 0xFB8ABC VA: 0xFB8ABC
	public void set_rectValue(Rect value) { }

	// RVA: 0xFB8B50 Offset: 0xFB8B50 VA: 0xFB8B50
	public Quaternion get_quaternionValue() { }

	// RVA: 0xFB8B88 Offset: 0xFB8B88 VA: 0xFB8B88
	public void set_quaternionValue(Quaternion value) { }

	// RVA: 0xFB8B94 Offset: 0xFB8B94 VA: 0xFB8B94
	public GameObject get_gameObjectValue() { }

	// RVA: 0xFB8BFC Offset: 0xFB8BFC VA: 0xFB8BFC
	public void set_gameObjectValue(GameObject value) { }

	// RVA: 0xFB8C04 Offset: 0xFB8C04 VA: 0xFB8C04
	public Material get_materialValue() { }

	// RVA: 0xFB8C88 Offset: 0xFB8C88 VA: 0xFB8C88
	public void set_materialValue(Material value) { }

	// RVA: 0xFB8C90 Offset: 0xFB8C90 VA: 0xFB8C90
	public Texture get_textureValue() { }

	// RVA: 0xFB8D14 Offset: 0xFB8D14 VA: 0xFB8D14
	public void set_textureValue(Texture value) { }

	// RVA: 0xFB8D1C Offset: 0xFB8D1C VA: 0xFB8D1C
	public void .ctor() { }

	// RVA: 0xFB8D2C Offset: 0xFB8D2C VA: 0xFB8D2C
	public void .ctor(Type type) { }

	// RVA: 0xFB8F88 Offset: 0xFB8F88 VA: 0xFB8F88
	public void .ctor(FsmVar source) { }

	// RVA: 0xFB9F44 Offset: 0xFB9F44 VA: 0xFB9F44
	public void .ctor(INamedVariable variable) { }

	// RVA: 0xFBA114 Offset: 0xFBA114 VA: 0xFBA114
	public void Init(NamedVariable variable) { }

	// RVA: 0xFB7E34 Offset: 0xFB7E34 VA: 0xFB7E34
	private void UpdateType(INamedVariable sourceVar) { }

	// RVA: 0xFB77B8 Offset: 0xFB77B8 VA: 0xFB77B8
	private void InitNamedVar() { }

	// RVA: 0xFB802C Offset: 0xFB802C VA: 0xFB802C
	private void InitEnumType() { }

	// RVA: 0xFBA1A4 Offset: 0xFBA1A4 VA: 0xFBA1A4
	public object GetValue() { }

	// RVA: 0xFB9034 Offset: 0xFB9034 VA: 0xFB9034
	public void GetValueFrom(INamedVariable variable) { }

	// RVA: 0xFB3528 Offset: 0xFB3528 VA: 0xFB3528
	public void UpdateValue() { }

	// RVA: 0xFBA3B4 Offset: 0xFBA3B4 VA: 0xFBA3B4
	public void ApplyValueTo(INamedVariable targetVariable) { }

	// RVA: 0xFBB3D8 Offset: 0xFBB3D8 VA: 0xFBB3D8
	public string DebugString() { }

	// RVA: 0xFBB4B8 Offset: 0xFBB4B8 VA: 0xFBB4B8 Slot: 3
	public override string ToString() { }

	// RVA: 0xFBB530 Offset: 0xFBB530 VA: 0xFBB530
	public void SetValue(object value) { }

	// RVA: 0xFBBAA8 Offset: 0xFBBAA8 VA: 0xFBBAA8
	private void DebugLog() { }

	// RVA: 0xFACB8C Offset: 0xFACB8C VA: 0xFACB8C
	public static VariableType GetVariableType(Type type) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmVector2 : NamedVariable // TypeDefIndex: 3362
{
	// Fields
	[SerializeField] // RVA: 0xC847C4 Offset: 0xC847C4 VA: 0xC847C4
	private Vector2 value; // 0x38

	// Properties
	public Vector2 Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFC2828 Offset: 0xFC2828 VA: 0xFC2828
	public Vector2 get_Value() { }

	// RVA: 0xFC2830 Offset: 0xFC2830 VA: 0xFC2830
	public void set_Value(Vector2 value) { }

	// RVA: 0xFC7FD8 Offset: 0xFC7FD8 VA: 0xFC7FD8 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFC803C Offset: 0xFC803C VA: 0xFC803C Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFC80A4 Offset: 0xFC80A4 VA: 0xFC80A4
	public void .ctor() { }

	// RVA: 0xFC5CF8 Offset: 0xFC5CF8 VA: 0xFC5CF8
	public void .ctor(string name) { }

	// RVA: 0xFC0800 Offset: 0xFC0800 VA: 0xFC0800
	public void .ctor(FsmVector2 source) { }

	// RVA: 0xFC81A0 Offset: 0xFC81A0 VA: 0xFC81A0 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFC820C Offset: 0xFC820C VA: 0xFC820C Slot: 34
	public override void Clear() { }

	// RVA: 0xFC8214 Offset: 0xFC8214 VA: 0xFC8214 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFC821C Offset: 0xFC821C VA: 0xFC821C Slot: 3
	public override string ToString() { }

	// RVA: 0xFC8228 Offset: 0xFC8228 VA: 0xFC8228
	public static FsmVector2 op_Implicit(Vector2 value) { }
}

// Namespace: HutongGames.PlayMaker
[Serializable]
public class FsmVector3 : NamedVariable // TypeDefIndex: 3363
{
	// Fields
	[SerializeField] // RVA: 0xC847D4 Offset: 0xC847D4 VA: 0xC847D4
	private Vector3 value; // 0x38

	// Properties
	public Vector3 Value { get; set; }
	public override object RawValue { get; set; }
	public override VariableType VariableType { get; }

	// Methods

	// RVA: 0xFC2838 Offset: 0xFC2838 VA: 0xFC2838
	public Vector3 get_Value() { }

	// RVA: 0xFC28FC Offset: 0xFC28FC VA: 0xFC28FC
	public void set_Value(Vector3 value) { }

	// RVA: 0xFC8354 Offset: 0xFC8354 VA: 0xFC8354 Slot: 27
	public override object get_RawValue() { }

	// RVA: 0xFC83C0 Offset: 0xFC83C0 VA: 0xFC83C0 Slot: 26
	public override void set_RawValue(object value) { }

	// RVA: 0xFC8430 Offset: 0xFC8430 VA: 0xFC8430
	public void .ctor() { }

	// RVA: 0xFC5ED8 Offset: 0xFC5ED8 VA: 0xFC5ED8
	public void .ctor(string name) { }

	// RVA: 0xFC0830 Offset: 0xFC0830 VA: 0xFC0830
	public void .ctor(FsmVector3 source) { }

	// RVA: 0xFC8434 Offset: 0xFC8434 VA: 0xFC8434 Slot: 31
	public override NamedVariable Clone() { }

	// RVA: 0xFC84A8 Offset: 0xFC84A8 VA: 0xFC84A8 Slot: 34
	public override void Clear() { }

	// RVA: 0xFC84B4 Offset: 0xFC84B4 VA: 0xFC84B4 Slot: 22
	public override VariableType get_VariableType() { }

	// RVA: 0xFC84BC Offset: 0xFC84BC VA: 0xFC84BC Slot: 3
	public override string ToString() { }

	// RVA: 0xFC84EC Offset: 0xFC84EC VA: 0xFC84EC
	public static FsmVector3 op_Implicit(Vector3 value) { }
}

// Namespace: HutongGames.PlayMaker
public interface INameable // TypeDefIndex: 3364
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();
}

// Namespace: HutongGames.PlayMaker
public interface INamedVariable // TypeDefIndex: 3365
{
	// Properties
	public abstract string Name { get; }
	public abstract bool UseVariable { get; set; }
	public abstract bool UsesVariable { get; }
	public abstract bool NetworkSync { get; set; }
	public abstract bool IsNone { get; }
	public abstract VariableType VariableType { get; }
	public abstract VariableType TypeConstraint { get; }
	public abstract Type ObjectType { get; set; }
	public abstract object RawValue { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_UseVariable();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_UseVariable(bool value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_UsesVariable();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_NetworkSync();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_NetworkSync(bool value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsNone();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string GetDisplayName();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract VariableType get_VariableType();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract VariableType get_TypeConstraint();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract Type get_ObjectType();

	// RVA: -1 Offset: -1 Slot: 11
