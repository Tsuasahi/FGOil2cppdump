// Image 0: mscorlib.dll - 0
// Image 1: System.dll - 1111
// Image 2: Mono.Security.dll - 1799
// Image 3: System.Core.dll - 1964
// Image 4: UnityEngine.SharedInternalsModule.dll - 2025
// Image 5: UnityEngine.CoreModule.dll - 2063
// Image 6: UnityEngine.AssetBundleModule.dll - 2577
// Image 7: UnityEngine.UnityWebRequestModule.dll - 2582
// Image 8: UnityEngine.AudioModule.dll - 2596
// Image 9: UnityEngine.ImageConversionModule.dll - 2617
// Image 10: UnityEngine.PhysicsModule.dll - 2619
// Image 11: UnityEngine.TextRenderingModule.dll - 2638
// Image 12: UnityEngine.UnityWebRequestAssetBundleModule.dll - 2653
// Image 13: Purchasing.Common.dll - 2656
// Image 14: Unity.Compat.dll - 2665
// Image 15: UnityEngine.AIModule.dll - 2668
// Image 16: UnityEngine.AnimationModule.dll - 2672
// Image 17: UnityEngine.ClothModule.dll - 2724
// Image 18: UnityEngine.IMGUIModule.dll - 2728
// Image 19: UnityEngine.JSONSerializeModule.dll - 2766
// Image 20: UnityEngine.ParticleSystemModule.dll - 2768
// Image 21: UnityEngine.Physics2DModule.dll - 2788
// Image 22: UnityEngine.ScreenCaptureModule.dll - 2809
// Image 23: UnityEngine.SpriteMaskModule.dll - 2812
// Image 24: UnityEngine.UIModule.dll - 2814
// Image 25: UnityEngine.UnityAnalyticsModule.dll - 2824
// Image 26: UnityEngine.UnityWebRequestAudioModule.dll - 2835
// Image 27: UnityEngine.UnityWebRequestTextureModule.dll - 2838
// Image 28: UnityEngine.UnityWebRequestWWWModule.dll - 2841
// Image 29: UnityEngine.VideoModule.dll - 2843
// Image 30: UnityEngine.WindModule.dll - 2858
// Image 31: AppleCore.dll - 2861
// Image 32: Unity.Tasks.dll - 2863
// Image 33: UnityEngine.dll - 2882
// Image 34: Apple.dll - 2883
// Image 35: AppleMacos.dll - 2885
// Image 36: FacebookStore.dll - 2887
// Image 37: Firebase.Platform.dll - 2890
// Image 38: Security.dll - 2928
// Image 39: UnityEngine.Purchasing.dll - 2954
// Image 40: UnityEngine.UI.dll - 2995
// Image 41: winrt.dll - 3184
// Image 42: Firebase.App.dll - 3189
// Image 43: PlayMaker.dll - 3249
// Image 44: Stores.dll - 3404
// Image 45: sharedRuntime.dll - 3613
// Image 46: ConditionalExpression.dll - 3641
// Image 47: Firebase.Messaging.dll - 3645
// Image 48: ICSharpCode.SharpZipLib.dll - 3662
// Image 49: SimpleAnimationComponent.dll - 3706
// Image 50: usequencerRuntime.dll - 3724
// Image 51: Google.Play.Common.dll - 3794
// Image 52: Google.Play.Core.dll - 3806
// Image 53: Assembly-CSharp-firstpass.dll - 3817
// Image 54: Assembly-CSharp.dll - 4275

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2C78 Offset: 0xBC2C78 VA: 0xBC2C78
[ClassInterfaceAttribute] // RVA: 0xBC2C78 Offset: 0xBC2C78 VA: 0xBC2C78
[Serializable]
public class Object // TypeDefIndex: 1
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCB7EC Offset: 0xBCB7EC VA: 0xBCB7EC
	// RVA: 0x21E2380 Offset: 0x21E2380 VA: 0x21E2380
	public void .ctor() { }

	// RVA: 0x21F0D64 Offset: 0x21F0D64 VA: 0x21F0D64 Slot: 0
	public virtual bool Equals(object obj) { }

	// RVA: 0x21F0D70 Offset: 0x21F0D70 VA: 0x21F0D70
	public static bool Equals(object objA, object objB) { }

	[ReliabilityContractAttribute] // RVA: 0xBCB804 Offset: 0xBCB804 VA: 0xBCB804
	// RVA: 0x21E2638 Offset: 0x21E2638 VA: 0x21E2638 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x21F0D9C Offset: 0x21F0D9C VA: 0x21F0D9C Slot: 2
	public virtual int GetHashCode() { }

	// RVA: 0x21E3B90 Offset: 0x21E3B90 VA: 0x21E3B90
	public Type GetType() { }

	// RVA: 0x21F0D4C Offset: 0x21F0D4C VA: 0x21F0D4C
	protected object MemberwiseClone() { }

	// RVA: 0x21F0DA4 Offset: 0x21F0DA4 VA: 0x21F0DA4 Slot: 3
	public virtual string ToString() { }

	[ReliabilityContractAttribute] // RVA: 0xBCB81C Offset: 0xBCB81C VA: 0xBCB81C
	// RVA: 0x21F0DD8 Offset: 0x21F0DD8 VA: 0x21F0DD8
	public static bool ReferenceEquals(object objA, object objB) { }

	// RVA: 0x21F0DA0 Offset: 0x21F0DA0 VA: 0x21F0DA0
	internal static int InternalGetHashCode(object o) { }

	// RVA: 0x21F0DE4 Offset: 0x21F0DE4 VA: 0x21F0DE4
	private void FieldGetter(string typeName, string fieldName, ref object val) { }

	// RVA: 0x21F0DE8 Offset: 0x21F0DE8 VA: 0x21F0DE8
	private void FieldSetter(string typeName, string fieldName, object val) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2CB8 Offset: 0xBC2CB8 VA: 0xBC2CB8
[Serializable]
public abstract class ValueType // TypeDefIndex: 2
{
	// Methods

	// RVA: 0x2AF7064 Offset: 0x2AF7064 VA: 0x2AF7064
	protected void .ctor() { }

	// RVA: 0x2AF706C Offset: 0x2AF706C VA: 0x2AF706C
	private static bool InternalEquals(object o1, object o2, out object[] fields) { }

	// RVA: 0x2AF7070 Offset: 0x2AF7070 VA: 0x2AF7070
	internal static bool DefaultEquals(object o1, object o2) { }

	// RVA: 0x2AF7180 Offset: 0x2AF7180 VA: 0x2AF7180 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2AF7184 Offset: 0x2AF7184 VA: 0x2AF7184
	internal static int InternalGetHashCode(object o, out object[] fields) { }

	// RVA: 0x2AF7188 Offset: 0x2AF7188 VA: 0x2AF7188 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2AF7284 Offset: 0x2AF7284 VA: 0x2AF7284 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2CCC Offset: 0xBC2CCC VA: 0xBC2CCC
[ComDefaultInterfaceAttribute] // RVA: 0xBC2CCC Offset: 0xBC2CCC VA: 0xBC2CCC
[AttributeUsageAttribute] // RVA: 0xBC2CCC Offset: 0xBC2CCC VA: 0xBC2CCC
[ClassInterfaceAttribute] // RVA: 0xBC2CCC Offset: 0xBC2CCC VA: 0xBC2CCC
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Properties
	public virtual object TypeId { get; }

	// Methods

	// RVA: 0x2281B38 Offset: 0x2281B38 VA: 0x2281B38
	protected void .ctor() { }

	// RVA: 0x2281B40 Offset: 0x2281B40 VA: 0x2281B40 Slot: 4
	public virtual object get_TypeId() { }

	// RVA: 0x2281B48 Offset: 0x2281B48 VA: 0x2281B48
	private static void CheckParameters(object element, Type attributeType) { }

	// RVA: 0x2281CAC Offset: 0x2281CAC VA: 0x2281CAC
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType) { }

	// RVA: 0x2281CB4 Offset: 0x2281CB4 VA: 0x2281CB4
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x2281D40 Offset: 0x2281D40 VA: 0x2281D40 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2281D48 Offset: 0x2281D48 VA: 0x2281D48 Slot: 5
	public virtual bool IsDefaultAttribute() { }

	// RVA: 0x2281D50 Offset: 0x2281D50 VA: 0x2281D50
	public static bool IsDefined(ParameterInfo element, Type attributeType) { }

	// RVA: 0x2281DE0 Offset: 0x2281DE0 VA: 0x2281DE0
	public static bool IsDefined(MemberInfo element, Type attributeType) { }

	// RVA: 0x2281DE8 Offset: 0x2281DE8 VA: 0x2281DE8
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x2281D58 Offset: 0x2281D58 VA: 0x2281D58
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x2281F40 Offset: 0x2281F40 VA: 0x2281F40 Slot: 6
	public virtual bool Match(object obj) { }

	// RVA: 0x2281F4C Offset: 0x2281F4C VA: 0x2281F4C Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xBC2D6C Offset: 0xBC2D6C VA: 0xBC2D6C
[CLSCompliantAttribute] // RVA: 0xBC2D6C Offset: 0xBC2D6C VA: 0xBC2D6C
[InterfaceTypeAttribute] // RVA: 0xBC2D6C Offset: 0xBC2D6C VA: 0xBC2D6C
[GuidAttribute] // RVA: 0xBC2D6C Offset: 0xBC2D6C VA: 0xBC2D6C
[TypeLibImportClassAttribute] // RVA: 0xBC2D6C Offset: 0xBC2D6C VA: 0xBC2D6C
public interface _Attribute // TypeDefIndex: 4
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2E30 Offset: 0xBC2E30 VA: 0xBC2E30
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable<int>, IEquatable<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647;
	public const int MinValue = -2147483648;
	internal int m_value; // 0x0

	// Methods

	// RVA: 0xD719E4 Offset: 0xD719E4 VA: 0xD719E4 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD719EC Offset: 0xD719EC VA: 0xD719EC Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD719F4 Offset: 0xD719F4 VA: 0xD719F4 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD719FC Offset: 0xD719FC VA: 0xD719FC Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD71A04 Offset: 0xD71A04 VA: 0xD71A04 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD71A0C Offset: 0xD71A0C VA: 0xD71A0C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD71A14 Offset: 0xD71A14 VA: 0xD71A14 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD71A1C Offset: 0xD71A1C VA: 0xD71A1C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD71A24 Offset: 0xD71A24 VA: 0xD71A24 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD71A2C Offset: 0xD71A2C VA: 0xD71A2C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD71A34 Offset: 0xD71A34 VA: 0xD71A34 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD71A3C Offset: 0xD71A3C VA: 0xD71A3C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD71A44 Offset: 0xD71A44 VA: 0xD71A44 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD71A4C Offset: 0xD71A4C VA: 0xD71A4C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD71A54 Offset: 0xD71A54 VA: 0xD71A54 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD71A5C Offset: 0xD71A5C VA: 0xD71A5C Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD71A64 Offset: 0xD71A64 VA: 0xD71A64 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD71A6C Offset: 0xD71A6C VA: 0xD71A6C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD71A74 Offset: 0xD71A74 VA: 0xD71A74 Slot: 22
	public int CompareTo(int value) { }

	// RVA: 0xD71A8C Offset: 0xD71A8C VA: 0xD71A8C Slot: 23
	public bool Equals(int obj) { }

	// RVA: 0x264FD20 Offset: 0x264FD20 VA: 0x264FD20
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, ref Exception exc) { }

	// RVA: 0x2650984 Offset: 0x2650984 VA: 0x2650984
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x2650C44 Offset: 0x2650C44 VA: 0x2650C44
	public static int Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2650C54 Offset: 0x2650C54 VA: 0x2650C54
	public static int Parse(string s, NumberStyles style) { }

	// RVA: 0x2650C5C Offset: 0x2650C5C VA: 0x2650C5C
	internal static bool CheckStyle(NumberStyles style, bool tryParse, ref Exception exc) { }

	// RVA: 0x2650D34 Offset: 0x2650D34 VA: 0x2650D34
	internal static bool JumpOverWhite(ref int pos, string s, bool reportError, bool tryParse, ref Exception exc) { }

	// RVA: 0x2650E70 Offset: 0x2650E70 VA: 0x2650E70
	internal static void FindSign(ref int pos, string s, NumberFormatInfo nfi, ref bool foundSign, ref bool negative) { }

	// RVA: 0x2651134 Offset: 0x2651134 VA: 0x2651134
	internal static void FindCurrency(ref int pos, string s, NumberFormatInfo nfi, ref bool foundCurrency) { }

	// RVA: 0x26512E0 Offset: 0x26512E0 VA: 0x26512E0
	internal static bool FindExponent(ref int pos, string s, ref int exponent, bool tryParse, ref Exception exc) { }

	// RVA: 0x265162C Offset: 0x265162C VA: 0x265162C
	internal static bool FindOther(ref int pos, string s, string other) { }

	// RVA: 0x2651774 Offset: 0x2651774 VA: 0x2651774
	internal static bool ValidDigit(char e, bool allowHex) { }

	// RVA: 0x264FCB8 Offset: 0x264FCB8 VA: 0x264FCB8
	internal static Exception GetFormatException() { }

	// RVA: 0x2651844 Offset: 0x2651844 VA: 0x2651844
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x26523F0 Offset: 0x26523F0 VA: 0x26523F0
	public static int Parse(string s) { }

	// RVA: 0x264FEF0 Offset: 0x264FEF0 VA: 0x264FEF0
	public static int Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x2652478 Offset: 0x2652478 VA: 0x2652478
	public static bool TryParse(string s, out int result) { }

	// RVA: 0x26524C4 Offset: 0x26524C4 VA: 0x26524C4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result) { }

	// RVA: 0xD71A9C Offset: 0xD71A9C VA: 0xD71A9C Slot: 3
	public override string ToString() { }

	// RVA: 0xD71AA4 Offset: 0xD71AA4 VA: 0xD71AA4 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD71AAC Offset: 0xD71AAC VA: 0xD71AAC
	public string ToString(string format) { }

	// RVA: 0xD71AB8 Offset: 0xD71AB8 VA: 0xD71AB8 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD71AC0 Offset: 0xD71AC0 VA: 0xD71AC0 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2E44 Offset: 0xBC2E44 VA: 0xBC2E44
public interface IFormattable // TypeDefIndex: 6
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(string format, IFormatProvider formatProvider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2E58 Offset: 0xBC2E58 VA: 0xBC2E58
[CLSCompliantAttribute] // RVA: 0xBC2E58 Offset: 0xBC2E58 VA: 0xBC2E58
public interface IConvertible // TypeDefIndex: 7
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool ToBoolean(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte ToByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract char ToChar(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract DateTime ToDateTime(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Decimal ToDecimal(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract double ToDouble(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract short ToInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ToInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long ToInt64(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract sbyte ToSByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract float ToSingle(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract string ToString(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object ToType(Type conversionType, IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract ushort ToUInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract uint ToUInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract ulong ToUInt64(IFormatProvider provider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2E98 Offset: 0xBC2E98 VA: 0xBC2E98
public interface IComparable // TypeDefIndex: 8
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object obj);
}

// Namespace: System
public interface IComparable<T> // TypeDefIndex: 9
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparable<object>.CompareTo
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2EAC Offset: 0xBC2EAC VA: 0xBC2EAC
[AttributeUsageAttribute] // RVA: 0xBC2EAC Offset: 0xBC2EAC VA: 0xBC2EAC
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Methods

	// RVA: 0x1F63DEC Offset: 0x1F63DEC VA: 0x1F63DEC
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBC2F10 Offset: 0xBC2F10 VA: 0xBC2F10
[ComVisibleAttribute] // RVA: 0xBC2F10 Offset: 0xBC2F10 VA: 0xBC2F10
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x10
	private bool allow_multiple; // 0x14
	private bool inherited; // 0x15

	// Properties
	public bool AllowMultiple { get; set; }
	public bool Inherited { get; set; }

	// Methods

	// RVA: 0x2281FF0 Offset: 0x2281FF0 VA: 0x2281FF0
	public void .ctor(AttributeTargets validOn) { }

	// RVA: 0x2282024 Offset: 0x2282024 VA: 0x2282024
	public bool get_AllowMultiple() { }

	// RVA: 0x228202C Offset: 0x228202C VA: 0x228202C
	public void set_AllowMultiple(bool value) { }

	// RVA: 0x2282038 Offset: 0x2282038 VA: 0x2282038
	public bool get_Inherited() { }

	// RVA: 0x2282040 Offset: 0x2282040 VA: 0x2282040
	public void set_Inherited(bool value) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xBC2F50 Offset: 0xBC2F50 VA: 0xBC2F50
[AttributeUsageAttribute] // RVA: 0xBC2F50 Offset: 0xBC2F50 VA: 0xBC2F50
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x10

	// Methods

	// RVA: 0x1F8E6A0 Offset: 0x1F8E6A0 VA: 0x1F8E6A0
	public void .ctor(bool visibility) { }
}

// Namespace: System
public interface IEquatable<T> // TypeDefIndex: 13
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEquatable<object>.Equals
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2FA4 Offset: 0xBC2FA4 VA: 0xBC2FA4
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable<long>, IEquatable<long> // TypeDefIndex: 14
{
	// Fields
	public const long MaxValue = 9223372036854775807;
	public const long MinValue = -9223372036854775808;
	internal long m_value; // 0x0

	// Methods

	// RVA: 0xD67814 Offset: 0xD67814 VA: 0xD67814 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD6781C Offset: 0xD6781C VA: 0xD6781C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD67824 Offset: 0xD67824 VA: 0xD67824 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD6782C Offset: 0xD6782C VA: 0xD6782C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD67834 Offset: 0xD67834 VA: 0xD67834 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD6783C Offset: 0xD6783C VA: 0xD6783C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD67844 Offset: 0xD67844 VA: 0xD67844 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD6784C Offset: 0xD6784C VA: 0xD6784C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD67854 Offset: 0xD67854 VA: 0xD67854 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD6785C Offset: 0xD6785C VA: 0xD6785C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD67864 Offset: 0xD67864 VA: 0xD67864 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD6786C Offset: 0xD6786C VA: 0xD6786C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD67874 Offset: 0xD67874 VA: 0xD67874 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD6787C Offset: 0xD6787C VA: 0xD6787C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD67884 Offset: 0xD67884 VA: 0xD67884 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD6788C Offset: 0xD6788C VA: 0xD6788C Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD67894 Offset: 0xD67894 VA: 0xD67894 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD6789C Offset: 0xD6789C VA: 0xD6789C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD678A8 Offset: 0xD678A8 VA: 0xD678A8 Slot: 22
	public int CompareTo(long value) { }

	// RVA: 0xD678C0 Offset: 0xD678C0 VA: 0xD678C0 Slot: 23
	public bool Equals(long obj) { }

	// RVA: 0x21E0400 Offset: 0x21E0400 VA: 0x21E0400
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x21E0700 Offset: 0x21E0700 VA: 0x21E0700
	public static long Parse(string s, IFormatProvider provider) { }

	// RVA: 0x21E07AC Offset: 0x21E07AC VA: 0x21E07AC
	public static long Parse(string s, NumberStyles style) { }

	// RVA: 0x21E07B4 Offset: 0x21E07B4 VA: 0x21E07B4
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x21E17F8 Offset: 0x21E17F8 VA: 0x21E17F8
	public static long Parse(string s) { }

	// RVA: 0x21E0710 Offset: 0x21E0710 VA: 0x21E0710
	public static long Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x21E187C Offset: 0x21E187C VA: 0x21E187C
	public static bool TryParse(string s, out long result) { }

	// RVA: 0x21E18C8 Offset: 0x21E18C8 VA: 0x21E18C8
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result) { }

	// RVA: 0xD678D0 Offset: 0xD678D0 VA: 0xD678D0 Slot: 3
	public override string ToString() { }

	// RVA: 0xD678D8 Offset: 0xD678D8 VA: 0xD678D8 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD678E0 Offset: 0xD678E0 VA: 0xD678E0
	public string ToString(string format) { }

	// RVA: 0xD678EC Offset: 0xD678EC VA: 0xD678EC Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD678F4 Offset: 0xD678F4 VA: 0xD678F4 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC2FB8 Offset: 0xBC2FB8 VA: 0xBC2FB8
[CLSCompliantAttribute] // RVA: 0xBC2FB8 Offset: 0xBC2FB8 VA: 0xBC2FB8
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295;
	public const uint MinValue = 0;
	internal uint m_value; // 0x0

	// Methods

	// RVA: 0xD73A14 Offset: 0xD73A14 VA: 0xD73A14 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD73A1C Offset: 0xD73A1C VA: 0xD73A1C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD73A24 Offset: 0xD73A24 VA: 0xD73A24 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD73A2C Offset: 0xD73A2C VA: 0xD73A2C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD73A34 Offset: 0xD73A34 VA: 0xD73A34 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD73A3C Offset: 0xD73A3C VA: 0xD73A3C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD73A44 Offset: 0xD73A44 VA: 0xD73A44 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD73A4C Offset: 0xD73A4C VA: 0xD73A4C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD73A54 Offset: 0xD73A54 VA: 0xD73A54 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD73A5C Offset: 0xD73A5C VA: 0xD73A5C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD73A64 Offset: 0xD73A64 VA: 0xD73A64 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD73A6C Offset: 0xD73A6C VA: 0xD73A6C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD73A74 Offset: 0xD73A74 VA: 0xD73A74 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD73A7C Offset: 0xD73A7C VA: 0xD73A7C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD73A84 Offset: 0xD73A84 VA: 0xD73A84 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD73A8C Offset: 0xD73A8C VA: 0xD73A8C Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD73A94 Offset: 0xD73A94 VA: 0xD73A94 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD73A9C Offset: 0xD73A9C VA: 0xD73A9C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD73AA4 Offset: 0xD73AA4 VA: 0xD73AA4 Slot: 22
	public int CompareTo(uint value) { }

	// RVA: 0xD73ABC Offset: 0xD73ABC VA: 0xD73ABC Slot: 23
	public bool Equals(uint obj) { }

	// RVA: 0x2AF3B20 Offset: 0x2AF3B20 VA: 0x2AF3B20
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc) { }

	// RVA: 0x2AF3DD0 Offset: 0x2AF3DD0 VA: 0x2AF3DD0
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xBCB834 Offset: 0xBCB834 VA: 0xBCB834
	// RVA: 0x2AF4924 Offset: 0x2AF4924 VA: 0x2AF4924
	public static uint Parse(string s) { }

	[CLSCompliantAttribute] // RVA: 0xBCB848 Offset: 0xBCB848 VA: 0xBCB848
	// RVA: 0x2AF300C Offset: 0x2AF300C VA: 0x2AF300C
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB85C Offset: 0xBCB85C VA: 0xBCB85C
	// RVA: 0x2AF49AC Offset: 0x2AF49AC VA: 0x2AF49AC
	public static uint Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB870 Offset: 0xBCB870 VA: 0xBCB870
	// RVA: 0x2AF49BC Offset: 0x2AF49BC VA: 0x2AF49BC
	public static bool TryParse(string s, out uint result) { }

	[CLSCompliantAttribute] // RVA: 0xBCB884 Offset: 0xBCB884 VA: 0xBCB884
	// RVA: 0x2AF312C Offset: 0x2AF312C VA: 0x2AF312C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result) { }

	// RVA: 0xD73ACC Offset: 0xD73ACC VA: 0xD73ACC Slot: 3
	public override string ToString() { }

	// RVA: 0xD73AD4 Offset: 0xD73AD4 VA: 0xD73AD4 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD73ADC Offset: 0xD73ADC VA: 0xD73ADC
	public string ToString(string format) { }

	// RVA: 0xD73AE8 Offset: 0xD73AE8 VA: 0xD73AE8 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD73AF0 Offset: 0xD73AF0 VA: 0xD73AF0 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBC2FF8 Offset: 0xBC2FF8 VA: 0xBC2FF8
[ComVisibleAttribute] // RVA: 0xBC2FF8 Offset: 0xBC2FF8 VA: 0xBC2FF8
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x10

	// Methods

	// RVA: 0x2285000 Offset: 0x2285000 VA: 0x2285000
	public void .ctor(bool isCompliant) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3038 Offset: 0xBC3038 VA: 0xBC3038
[CLSCompliantAttribute] // RVA: 0xBC3038 Offset: 0xBC3038 VA: 0xBC3038
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 17
{
	// Fields
	public const ulong MaxValue = 18446744073709551615;
	public const ulong MinValue = 0;
	internal ulong m_value; // 0x0

	// Methods

	// RVA: 0xD73AF8 Offset: 0xD73AF8 VA: 0xD73AF8 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD73B00 Offset: 0xD73B00 VA: 0xD73B00 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD73B08 Offset: 0xD73B08 VA: 0xD73B08 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD73B10 Offset: 0xD73B10 VA: 0xD73B10 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD73B18 Offset: 0xD73B18 VA: 0xD73B18 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD73B20 Offset: 0xD73B20 VA: 0xD73B20 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD73B28 Offset: 0xD73B28 VA: 0xD73B28 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD73B30 Offset: 0xD73B30 VA: 0xD73B30 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD73B38 Offset: 0xD73B38 VA: 0xD73B38 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD73B40 Offset: 0xD73B40 VA: 0xD73B40 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD73B48 Offset: 0xD73B48 VA: 0xD73B48 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD73B50 Offset: 0xD73B50 VA: 0xD73B50 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD73B58 Offset: 0xD73B58 VA: 0xD73B58 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD73B60 Offset: 0xD73B60 VA: 0xD73B60 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD73B68 Offset: 0xD73B68 VA: 0xD73B68 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD73B70 Offset: 0xD73B70 VA: 0xD73B70 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD73B78 Offset: 0xD73B78 VA: 0xD73B78 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD73B80 Offset: 0xD73B80 VA: 0xD73B80 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD73B8C Offset: 0xD73B8C VA: 0xD73B8C Slot: 22
	public int CompareTo(ulong value) { }

	// RVA: 0xD73BA4 Offset: 0xD73BA4 VA: 0xD73BA4 Slot: 23
	public bool Equals(ulong obj) { }

	[CLSCompliantAttribute] // RVA: 0xBCB898 Offset: 0xBCB898 VA: 0xBCB898
	// RVA: 0x2AF53BC Offset: 0x2AF53BC VA: 0x2AF53BC
	public static ulong Parse(string s) { }

	[CLSCompliantAttribute] // RVA: 0xBCB8AC Offset: 0xBCB8AC VA: 0xBCB8AC
	// RVA: 0x2AF5464 Offset: 0x2AF5464 VA: 0x2AF5464
	public static ulong Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB8C0 Offset: 0xBCB8C0 VA: 0xBCB8C0
	// RVA: 0x2AF5474 Offset: 0x2AF5474 VA: 0x2AF5474
	public static ulong Parse(string s, NumberStyles style) { }

	// RVA: 0x2AF547C Offset: 0x2AF547C VA: 0x2AF547C
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xBCB8D4 Offset: 0xBCB8D4 VA: 0xBCB8D4
	// RVA: 0x2AF53C8 Offset: 0x2AF53C8 VA: 0x2AF53C8
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCB8E8 Offset: 0xBCB8E8 VA: 0xBCB8E8
	// RVA: 0x2AF6004 Offset: 0x2AF6004 VA: 0x2AF6004
	public static bool TryParse(string s, out ulong result) { }

	[CLSCompliantAttribute] // RVA: 0xBCB8FC Offset: 0xBCB8FC VA: 0xBCB8FC
	// RVA: 0x2AF6058 Offset: 0x2AF6058 VA: 0x2AF6058
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ulong result) { }

	// RVA: 0xD73BB4 Offset: 0xD73BB4 VA: 0xD73BB4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD73BBC Offset: 0xD73BBC VA: 0xD73BBC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD73BC4 Offset: 0xD73BC4 VA: 0xD73BC4
	public string ToString(string format) { }

	// RVA: 0xD73BD0 Offset: 0xD73BD0 VA: 0xD73BD0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3078 Offset: 0xBC3078 VA: 0xBC3078
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0;
	public const byte MaxValue = 255;
	internal byte m_value; // 0x0

	// Methods

	// RVA: 0xD67E0C Offset: 0xD67E0C VA: 0xD67E0C Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD67E14 Offset: 0xD67E14 VA: 0xD67E14 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD67E1C Offset: 0xD67E1C VA: 0xD67E1C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD67E24 Offset: 0xD67E24 VA: 0xD67E24 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD67E2C Offset: 0xD67E2C VA: 0xD67E2C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD67E38 Offset: 0xD67E38 VA: 0xD67E38 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD67E40 Offset: 0xD67E40 VA: 0xD67E40 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD67E48 Offset: 0xD67E48 VA: 0xD67E48 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD67E50 Offset: 0xD67E50 VA: 0xD67E50 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD67E58 Offset: 0xD67E58 VA: 0xD67E58 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD67E60 Offset: 0xD67E60 VA: 0xD67E60 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD67E68 Offset: 0xD67E68 VA: 0xD67E68 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD67E70 Offset: 0xD67E70 VA: 0xD67E70 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD67E78 Offset: 0xD67E78 VA: 0xD67E78 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD67E80 Offset: 0xD67E80 VA: 0xD67E80 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD67E88 Offset: 0xD67E88 VA: 0xD67E88 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD67E90 Offset: 0xD67E90 VA: 0xD67E90 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67E98 Offset: 0xD67E98 VA: 0xD67E98 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD67EA0 Offset: 0xD67EA0 VA: 0xD67EA0 Slot: 22
	public int CompareTo(byte value) { }

	// RVA: 0xD67EB8 Offset: 0xD67EB8 VA: 0xD67EB8 Slot: 23
	public bool Equals(byte obj) { }

	// RVA: 0x2284CE8 Offset: 0x2284CE8 VA: 0x2284CE8
	public static byte Parse(string s, IFormatProvider provider) { }

	// RVA: 0x2284DBC Offset: 0x2284DBC VA: 0x2284DBC
	public static byte Parse(string s, NumberStyles style) { }

	// RVA: 0x2284CF8 Offset: 0x2284CF8 VA: 0x2284CF8
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x2284DC4 Offset: 0x2284DC4 VA: 0x2284DC4
	public static byte Parse(string s) { }

	// RVA: 0x2284DD0 Offset: 0x2284DD0 VA: 0x2284DD0
	public static bool TryParse(string s, out byte result) { }

	// RVA: 0x2284E30 Offset: 0x2284E30 VA: 0x2284E30
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result) { }

	// RVA: 0xD67EC8 Offset: 0xD67EC8 VA: 0xD67EC8 Slot: 3
	public override string ToString() { }

	// RVA: 0xD67ED0 Offset: 0xD67ED0 VA: 0xD67ED0
	public string ToString(string format) { }

	// RVA: 0xD67EDC Offset: 0xD67EDC VA: 0xD67EDC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD67EE4 Offset: 0xD67EE4 VA: 0xD67EE4 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xBC308C Offset: 0xBC308C VA: 0xBC308C
[ComVisibleAttribute] // RVA: 0xBC308C Offset: 0xBC308C VA: 0xBC308C
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 19
{
	// Fields
	internal sbyte m_value; // 0x0

	// Methods

	// RVA: 0xD69184 Offset: 0xD69184 VA: 0xD69184 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD6918C Offset: 0xD6918C VA: 0xD6918C Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD69194 Offset: 0xD69194 VA: 0xD69194 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD6919C Offset: 0xD6919C VA: 0xD6919C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD691A4 Offset: 0xD691A4 VA: 0xD691A4 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD691AC Offset: 0xD691AC VA: 0xD691AC Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD691B4 Offset: 0xD691B4 VA: 0xD691B4 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD691BC Offset: 0xD691BC VA: 0xD691BC Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD691C4 Offset: 0xD691C4 VA: 0xD691C4 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD691CC Offset: 0xD691CC VA: 0xD691CC Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD691D4 Offset: 0xD691D4 VA: 0xD691D4 Slot: 15
