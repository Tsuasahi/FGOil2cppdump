// Image 0: mscorlib.dll - 0
// Image 1: System.dll - 1111
// Image 2: Mono.Security.dll - 1799
// Image 3: System.Core.dll - 1964
// Image 4: UnityEngine.SharedInternalsModule.dll - 2025
// Image 5: UnityEngine.CoreModule.dll - 2063
// Image 6: UnityEngine.AssetBundleModule.dll - 2577
// Image 7: UnityEngine.UnityWebRequestModule.dll - 2582
// Image 8: UnityEngine.AudioModule.dll - 2596
// Image 9: UnityEngine.ImageConversionModule.dll - 2617
// Image 10: UnityEngine.PhysicsModule.dll - 2619
// Image 11: UnityEngine.TextRenderingModule.dll - 2638
// Image 12: UnityEngine.UnityWebRequestAssetBundleModule.dll - 2653
// Image 13: Purchasing.Common.dll - 2656
// Image 14: Unity.Compat.dll - 2665
// Image 15: UnityEngine.AIModule.dll - 2668
// Image 16: UnityEngine.AnimationModule.dll - 2672
// Image 17: UnityEngine.ClothModule.dll - 2724
// Image 18: UnityEngine.IMGUIModule.dll - 2728
// Image 19: UnityEngine.JSONSerializeModule.dll - 2766
// Image 20: UnityEngine.ParticleSystemModule.dll - 2768
// Image 21: UnityEngine.Physics2DModule.dll - 2788
// Image 22: UnityEngine.ScreenCaptureModule.dll - 2809
// Image 23: UnityEngine.SpriteMaskModule.dll - 2812
// Image 24: UnityEngine.UIModule.dll - 2814
// Image 25: UnityEngine.UnityAnalyticsModule.dll - 2824
// Image 26: UnityEngine.UnityWebRequestAudioModule.dll - 2835
// Image 27: UnityEngine.UnityWebRequestTextureModule.dll - 2838
// Image 28: UnityEngine.UnityWebRequestWWWModule.dll - 2841
// Image 29: UnityEngine.VideoModule.dll - 2843
// Image 30: UnityEngine.WindModule.dll - 2858
// Image 31: AppleCore.dll - 2861
// Image 32: Unity.Tasks.dll - 2863
// Image 33: UnityEngine.dll - 2882
// Image 34: Apple.dll - 2883
// Image 35: AppleMacos.dll - 2885
// Image 36: FacebookStore.dll - 2887
// Image 37: Firebase.Platform.dll - 2890
// Image 38: Security.dll - 2928
// Image 39: UnityEngine.Purchasing.dll - 2954
// Image 40: UnityEngine.UI.dll - 2995
// Image 41: winrt.dll - 3184
// Image 42: Firebase.App.dll - 3189
// Image 43: PlayMaker.dll - 3249
// Image 44: Stores.dll - 3404
// Image 45: sharedRuntime.dll - 3613
// Image 46: ConditionalExpression.dll - 3641
// Image 47: Firebase.Messaging.dll - 3645
// Image 48: ICSharpCode.SharpZipLib.dll - 3662
// Image 49: SimpleAnimationComponent.dll - 3706
// Image 50: usequencerRuntime.dll - 3724
// Image 51: Google.Play.Common.dll - 3794
// Image 52: Google.Play.Core.dll - 3806
// Image 53: Assembly-CSharp-firstpass.dll - 3817
// Image 54: Assembly-CSharp.dll - 4275

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EDA0 Offset: 0xC2EDA0 VA: 0xC2EDA0
[ClassInterfaceAttribute] // RVA: 0xC2EDA0 Offset: 0xC2EDA0 VA: 0xC2EDA0
[Serializable]
public class Object // TypeDefIndex: 1
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC37914 Offset: 0xC37914 VA: 0xC37914
	// RVA: 0x106D5E8 Offset: 0x106D5E8 VA: 0x106D5E8
	public void .ctor() { }

	// RVA: 0x107BFCC Offset: 0x107BFCC VA: 0x107BFCC Slot: 0
	public virtual bool Equals(object obj) { }

	// RVA: 0x107BFD8 Offset: 0x107BFD8 VA: 0x107BFD8
	public static bool Equals(object objA, object objB) { }

	[ReliabilityContractAttribute] // RVA: 0xC3792C Offset: 0xC3792C VA: 0xC3792C
	// RVA: 0x106D8A0 Offset: 0x106D8A0 VA: 0x106D8A0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x107C004 Offset: 0x107C004 VA: 0x107C004 Slot: 2
	public virtual int GetHashCode() { }

	// RVA: 0x106EDF8 Offset: 0x106EDF8 VA: 0x106EDF8
	public Type GetType() { }

	// RVA: 0x107BFB4 Offset: 0x107BFB4 VA: 0x107BFB4
	protected object MemberwiseClone() { }

	// RVA: 0x107C00C Offset: 0x107C00C VA: 0x107C00C Slot: 3
	public virtual string ToString() { }

	[ReliabilityContractAttribute] // RVA: 0xC37944 Offset: 0xC37944 VA: 0xC37944
	// RVA: 0x107C040 Offset: 0x107C040 VA: 0x107C040
	public static bool ReferenceEquals(object objA, object objB) { }

	// RVA: 0x107C008 Offset: 0x107C008 VA: 0x107C008
	internal static int InternalGetHashCode(object o) { }

	// RVA: 0x107C04C Offset: 0x107C04C VA: 0x107C04C
	private void FieldGetter(string typeName, string fieldName, ref object val) { }

	// RVA: 0x107C050 Offset: 0x107C050 VA: 0x107C050
	private void FieldSetter(string typeName, string fieldName, object val) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EDE0 Offset: 0xC2EDE0 VA: 0xC2EDE0
[Serializable]
public abstract class ValueType // TypeDefIndex: 2
{
	// Methods

	// RVA: 0x1304400 Offset: 0x1304400 VA: 0x1304400
	protected void .ctor() { }

	// RVA: 0x1304408 Offset: 0x1304408 VA: 0x1304408
	private static bool InternalEquals(object o1, object o2, out object[] fields) { }

	// RVA: 0x130440C Offset: 0x130440C VA: 0x130440C
	internal static bool DefaultEquals(object o1, object o2) { }

	// RVA: 0x130451C Offset: 0x130451C VA: 0x130451C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1304520 Offset: 0x1304520 VA: 0x1304520
	internal static int InternalGetHashCode(object o, out object[] fields) { }

	// RVA: 0x1304524 Offset: 0x1304524 VA: 0x1304524 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1304620 Offset: 0x1304620 VA: 0x1304620 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EDF4 Offset: 0xC2EDF4 VA: 0xC2EDF4
[ComDefaultInterfaceAttribute] // RVA: 0xC2EDF4 Offset: 0xC2EDF4 VA: 0xC2EDF4
[AttributeUsageAttribute] // RVA: 0xC2EDF4 Offset: 0xC2EDF4 VA: 0xC2EDF4
[ClassInterfaceAttribute] // RVA: 0xC2EDF4 Offset: 0xC2EDF4 VA: 0xC2EDF4
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Properties
	public virtual object TypeId { get; }

	// Methods

	// RVA: 0x10D3324 Offset: 0x10D3324 VA: 0x10D3324
	protected void .ctor() { }

	// RVA: 0x10D332C Offset: 0x10D332C VA: 0x10D332C Slot: 4
	public virtual object get_TypeId() { }

	// RVA: 0x10D3334 Offset: 0x10D3334 VA: 0x10D3334
	private static void CheckParameters(object element, Type attributeType) { }

	// RVA: 0x10D3498 Offset: 0x10D3498 VA: 0x10D3498
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType) { }

	// RVA: 0x10D34A0 Offset: 0x10D34A0 VA: 0x10D34A0
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x10D352C Offset: 0x10D352C VA: 0x10D352C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10D3534 Offset: 0x10D3534 VA: 0x10D3534 Slot: 5
	public virtual bool IsDefaultAttribute() { }

	// RVA: 0x10D353C Offset: 0x10D353C VA: 0x10D353C
	public static bool IsDefined(ParameterInfo element, Type attributeType) { }

	// RVA: 0x10D35CC Offset: 0x10D35CC VA: 0x10D35CC
	public static bool IsDefined(MemberInfo element, Type attributeType) { }

	// RVA: 0x10D35D4 Offset: 0x10D35D4 VA: 0x10D35D4
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x10D3544 Offset: 0x10D3544 VA: 0x10D3544
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit) { }

	// RVA: 0x10D372C Offset: 0x10D372C VA: 0x10D372C Slot: 6
	public virtual bool Match(object obj) { }

	// RVA: 0x10D3738 Offset: 0x10D3738 VA: 0x10D3738 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2EE94 Offset: 0xC2EE94 VA: 0xC2EE94
[CLSCompliantAttribute] // RVA: 0xC2EE94 Offset: 0xC2EE94 VA: 0xC2EE94
[InterfaceTypeAttribute] // RVA: 0xC2EE94 Offset: 0xC2EE94 VA: 0xC2EE94
[GuidAttribute] // RVA: 0xC2EE94 Offset: 0xC2EE94 VA: 0xC2EE94
[TypeLibImportClassAttribute] // RVA: 0xC2EE94 Offset: 0xC2EE94 VA: 0xC2EE94
public interface _Attribute // TypeDefIndex: 4
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EF58 Offset: 0xC2EF58 VA: 0xC2EF58
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable<int>, IEquatable<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647;
	public const int MinValue = -2147483648;
	internal int m_value; // 0x0

	// Methods

	// RVA: 0xDD351C Offset: 0xDD351C VA: 0xDD351C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xDD3524 Offset: 0xDD3524 VA: 0xDD3524 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xDD352C Offset: 0xDD352C VA: 0xDD352C Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xDD3534 Offset: 0xDD3534 VA: 0xDD3534 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xDD353C Offset: 0xDD353C VA: 0xDD353C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xDD3544 Offset: 0xDD3544 VA: 0xDD3544 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xDD354C Offset: 0xDD354C VA: 0xDD354C Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xDD3554 Offset: 0xDD3554 VA: 0xDD3554 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xDD355C Offset: 0xDD355C VA: 0xDD355C Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xDD3564 Offset: 0xDD3564 VA: 0xDD3564 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xDD356C Offset: 0xDD356C VA: 0xDD356C Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xDD3574 Offset: 0xDD3574 VA: 0xDD3574 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xDD357C Offset: 0xDD357C VA: 0xDD357C Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xDD3584 Offset: 0xDD3584 VA: 0xDD3584 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xDD358C Offset: 0xDD358C VA: 0xDD358C Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xDD3594 Offset: 0xDD3594 VA: 0xDD3594 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xDD359C Offset: 0xDD359C VA: 0xDD359C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDD35A4 Offset: 0xDD35A4 VA: 0xDD35A4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDD35AC Offset: 0xDD35AC VA: 0xDD35AC Slot: 22
	public int CompareTo(int value) { }

	// RVA: 0xDD35C4 Offset: 0xDD35C4 VA: 0xDD35C4 Slot: 23
	public bool Equals(int obj) { }

	// RVA: 0x273B4DC Offset: 0x273B4DC VA: 0x273B4DC
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, ref Exception exc) { }

	// RVA: 0x273C140 Offset: 0x273C140 VA: 0x273C140
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x273C400 Offset: 0x273C400 VA: 0x273C400
	public static int Parse(string s, IFormatProvider provider) { }

	// RVA: 0x273C410 Offset: 0x273C410 VA: 0x273C410
	public static int Parse(string s, NumberStyles style) { }

	// RVA: 0x273C418 Offset: 0x273C418 VA: 0x273C418
	internal static bool CheckStyle(NumberStyles style, bool tryParse, ref Exception exc) { }

	// RVA: 0x273C4F0 Offset: 0x273C4F0 VA: 0x273C4F0
	internal static bool JumpOverWhite(ref int pos, string s, bool reportError, bool tryParse, ref Exception exc) { }

	// RVA: 0x273C62C Offset: 0x273C62C VA: 0x273C62C
	internal static void FindSign(ref int pos, string s, NumberFormatInfo nfi, ref bool foundSign, ref bool negative) { }

	// RVA: 0x273C8F0 Offset: 0x273C8F0 VA: 0x273C8F0
	internal static void FindCurrency(ref int pos, string s, NumberFormatInfo nfi, ref bool foundCurrency) { }

	// RVA: 0x273CA9C Offset: 0x273CA9C VA: 0x273CA9C
	internal static bool FindExponent(ref int pos, string s, ref int exponent, bool tryParse, ref Exception exc) { }

	// RVA: 0x273CDE8 Offset: 0x273CDE8 VA: 0x273CDE8
	internal static bool FindOther(ref int pos, string s, string other) { }

	// RVA: 0x273CF30 Offset: 0x273CF30 VA: 0x273CF30
	internal static bool ValidDigit(char e, bool allowHex) { }

	// RVA: 0x273B474 Offset: 0x273B474 VA: 0x273B474
	internal static Exception GetFormatException() { }

	// RVA: 0x273D000 Offset: 0x273D000 VA: 0x273D000
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc) { }

	// RVA: 0x273DBAC Offset: 0x273DBAC VA: 0x273DBAC
	public static int Parse(string s) { }

	// RVA: 0x273B6AC Offset: 0x273B6AC VA: 0x273B6AC
	public static int Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x273DC34 Offset: 0x273DC34 VA: 0x273DC34
	public static bool TryParse(string s, out int result) { }

	// RVA: 0x273DC80 Offset: 0x273DC80 VA: 0x273DC80
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result) { }

	// RVA: 0xDD35D4 Offset: 0xDD35D4 VA: 0xDD35D4 Slot: 3
	public override string ToString() { }

	// RVA: 0xDD35DC Offset: 0xDD35DC VA: 0xDD35DC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDD35E4 Offset: 0xDD35E4 VA: 0xDD35E4
	public string ToString(string format) { }

	// RVA: 0xDD35F0 Offset: 0xDD35F0 VA: 0xDD35F0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xDD35F8 Offset: 0xDD35F8 VA: 0xDD35F8 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EF6C Offset: 0xC2EF6C VA: 0xC2EF6C
public interface IFormattable // TypeDefIndex: 6
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(string format, IFormatProvider formatProvider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EF80 Offset: 0xC2EF80 VA: 0xC2EF80
[CLSCompliantAttribute] // RVA: 0xC2EF80 Offset: 0xC2EF80 VA: 0xC2EF80
public interface IConvertible // TypeDefIndex: 7
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool ToBoolean(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte ToByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract char ToChar(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract DateTime ToDateTime(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Decimal ToDecimal(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract double ToDouble(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract short ToInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ToInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long ToInt64(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract sbyte ToSByte(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract float ToSingle(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract string ToString(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object ToType(Type conversionType, IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract ushort ToUInt16(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract uint ToUInt32(IFormatProvider provider);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract ulong ToUInt64(IFormatProvider provider);
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EFC0 Offset: 0xC2EFC0 VA: 0xC2EFC0
public interface IComparable // TypeDefIndex: 8
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object obj);
}

// Namespace: System
public interface IComparable<T> // TypeDefIndex: 9
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IComparable<object>.CompareTo
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2EFD4 Offset: 0xC2EFD4 VA: 0xC2EFD4
[AttributeUsageAttribute] // RVA: 0xC2EFD4 Offset: 0xC2EFD4 VA: 0xC2EFD4
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Methods

	// RVA: 0xEFE760 Offset: 0xEFE760 VA: 0xEFE760
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC2F038 Offset: 0xC2F038 VA: 0xC2F038
[ComVisibleAttribute] // RVA: 0xC2F038 Offset: 0xC2F038 VA: 0xC2F038
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x10
	private bool allow_multiple; // 0x14
	private bool inherited; // 0x15

	// Properties
	public bool AllowMultiple { get; set; }
	public bool Inherited { get; set; }

	// Methods

	// RVA: 0x10D37DC Offset: 0x10D37DC VA: 0x10D37DC
	public void .ctor(AttributeTargets validOn) { }

	// RVA: 0x10D3810 Offset: 0x10D3810 VA: 0x10D3810
	public bool get_AllowMultiple() { }

	// RVA: 0x10D3818 Offset: 0x10D3818 VA: 0x10D3818
	public void set_AllowMultiple(bool value) { }

	// RVA: 0x10D3824 Offset: 0x10D3824 VA: 0x10D3824
	public bool get_Inherited() { }

	// RVA: 0x10D382C Offset: 0x10D382C VA: 0x10D382C
	public void set_Inherited(bool value) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2F078 Offset: 0xC2F078 VA: 0xC2F078
[AttributeUsageAttribute] // RVA: 0xC2F078 Offset: 0xC2F078 VA: 0xC2F078
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x10

	// Methods

	// RVA: 0xF29014 Offset: 0xF29014 VA: 0xF29014
	public void .ctor(bool visibility) { }
}

// Namespace: System
public interface IEquatable<T> // TypeDefIndex: 13
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T other);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEquatable<object>.Equals
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F0CC Offset: 0xC2F0CC VA: 0xC2F0CC
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable<long>, IEquatable<long> // TypeDefIndex: 14
{
	// Fields
	public const long MaxValue = 9223372036854775807;
	public const long MinValue = -9223372036854775808;
	internal long m_value; // 0x0

	// Methods

	// RVA: 0xBBA79C Offset: 0xBBA79C VA: 0xBBA79C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBA7A4 Offset: 0xBBA7A4 VA: 0xBBA7A4 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBA7AC Offset: 0xBBA7AC VA: 0xBBA7AC Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBA7B4 Offset: 0xBBA7B4 VA: 0xBBA7B4 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBA7BC Offset: 0xBBA7BC VA: 0xBBA7BC Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBA7C4 Offset: 0xBBA7C4 VA: 0xBBA7C4 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBA7CC Offset: 0xBBA7CC VA: 0xBBA7CC Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBA7D4 Offset: 0xBBA7D4 VA: 0xBBA7D4 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBA7DC Offset: 0xBBA7DC VA: 0xBBA7DC Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBA7E4 Offset: 0xBBA7E4 VA: 0xBBA7E4 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBA7EC Offset: 0xBBA7EC VA: 0xBBA7EC Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBA7F4 Offset: 0xBBA7F4 VA: 0xBBA7F4 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBA7FC Offset: 0xBBA7FC VA: 0xBBA7FC Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBA804 Offset: 0xBBA804 VA: 0xBBA804 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBA80C Offset: 0xBBA80C VA: 0xBBA80C Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBBA814 Offset: 0xBBA814 VA: 0xBBA814 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBBA81C Offset: 0xBBA81C VA: 0xBBA81C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBA824 Offset: 0xBBA824 VA: 0xBBA824 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBA830 Offset: 0xBBA830 VA: 0xBBA830 Slot: 22
	public int CompareTo(long value) { }

	// RVA: 0xBBA848 Offset: 0xBBA848 VA: 0xBBA848 Slot: 23
	public bool Equals(long obj) { }

	// RVA: 0x106B668 Offset: 0x106B668 VA: 0x106B668
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x106B968 Offset: 0x106B968 VA: 0x106B968
	public static long Parse(string s, IFormatProvider provider) { }

	// RVA: 0x106BA14 Offset: 0x106BA14 VA: 0x106BA14
	public static long Parse(string s, NumberStyles style) { }

	// RVA: 0x106BA1C Offset: 0x106BA1C VA: 0x106BA1C
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc) { }

	// RVA: 0x106CA60 Offset: 0x106CA60 VA: 0x106CA60
	public static long Parse(string s) { }

	// RVA: 0x106B978 Offset: 0x106B978 VA: 0x106B978
	public static long Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x106CAE4 Offset: 0x106CAE4 VA: 0x106CAE4
	public static bool TryParse(string s, out long result) { }

	// RVA: 0x106CB30 Offset: 0x106CB30 VA: 0x106CB30
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result) { }

	// RVA: 0xBBA858 Offset: 0xBBA858 VA: 0xBBA858 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBA860 Offset: 0xBBA860 VA: 0xBBA860 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBBA868 Offset: 0xBBA868 VA: 0xBBA868
	public string ToString(string format) { }

	// RVA: 0xBBA874 Offset: 0xBBA874 VA: 0xBBA874 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xBBA87C Offset: 0xBBA87C VA: 0xBBA87C Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F0E0 Offset: 0xC2F0E0 VA: 0xC2F0E0
[CLSCompliantAttribute] // RVA: 0xC2F0E0 Offset: 0xC2F0E0 VA: 0xC2F0E0
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295;
	public const uint MinValue = 0;
	internal uint m_value; // 0x0

	// Methods

	// RVA: 0xBC09A8 Offset: 0xBC09A8 VA: 0xBC09A8 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBC09B0 Offset: 0xBC09B0 VA: 0xBC09B0 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBC09B8 Offset: 0xBC09B8 VA: 0xBC09B8 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBC09C0 Offset: 0xBC09C0 VA: 0xBC09C0 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBC09C8 Offset: 0xBC09C8 VA: 0xBC09C8 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBC09D0 Offset: 0xBC09D0 VA: 0xBC09D0 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBC09D8 Offset: 0xBC09D8 VA: 0xBC09D8 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBC09E0 Offset: 0xBC09E0 VA: 0xBC09E0 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBC09E8 Offset: 0xBC09E8 VA: 0xBC09E8 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBC09F0 Offset: 0xBC09F0 VA: 0xBC09F0 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBC09F8 Offset: 0xBC09F8 VA: 0xBC09F8 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBC0A00 Offset: 0xBC0A00 VA: 0xBC0A00 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBC0A08 Offset: 0xBC0A08 VA: 0xBC0A08 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBC0A10 Offset: 0xBC0A10 VA: 0xBC0A10 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBC0A18 Offset: 0xBC0A18 VA: 0xBC0A18 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBC0A20 Offset: 0xBC0A20 VA: 0xBC0A20 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBC0A28 Offset: 0xBC0A28 VA: 0xBC0A28 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBC0A30 Offset: 0xBC0A30 VA: 0xBC0A30 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0A38 Offset: 0xBC0A38 VA: 0xBC0A38 Slot: 22
	public int CompareTo(uint value) { }

	// RVA: 0xBC0A50 Offset: 0xBC0A50 VA: 0xBC0A50 Slot: 23
	public bool Equals(uint obj) { }

	// RVA: 0x1300EBC Offset: 0x1300EBC VA: 0x1300EBC
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc) { }

	// RVA: 0x130116C Offset: 0x130116C VA: 0x130116C
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xC3795C Offset: 0xC3795C VA: 0xC3795C
	// RVA: 0x1301CC0 Offset: 0x1301CC0 VA: 0x1301CC0
	public static uint Parse(string s) { }

	[CLSCompliantAttribute] // RVA: 0xC37970 Offset: 0xC37970 VA: 0xC37970
	// RVA: 0x13003A8 Offset: 0x13003A8 VA: 0x13003A8
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37984 Offset: 0xC37984 VA: 0xC37984
	// RVA: 0x1301D48 Offset: 0x1301D48 VA: 0x1301D48
	public static uint Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37998 Offset: 0xC37998 VA: 0xC37998
	// RVA: 0x1301D58 Offset: 0x1301D58 VA: 0x1301D58
	public static bool TryParse(string s, out uint result) { }

	[CLSCompliantAttribute] // RVA: 0xC379AC Offset: 0xC379AC VA: 0xC379AC
	// RVA: 0x13004C8 Offset: 0x13004C8 VA: 0x13004C8
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result) { }

	// RVA: 0xBC0A60 Offset: 0xBC0A60 VA: 0xBC0A60 Slot: 3
	public override string ToString() { }

	// RVA: 0xBC0A68 Offset: 0xBC0A68 VA: 0xBC0A68 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBC0A70 Offset: 0xBC0A70 VA: 0xBC0A70
	public string ToString(string format) { }

	// RVA: 0xBC0A7C Offset: 0xBC0A7C VA: 0xBC0A7C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xBC0A84 Offset: 0xBC0A84 VA: 0xBC0A84 Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC2F120 Offset: 0xC2F120 VA: 0xC2F120
[ComVisibleAttribute] // RVA: 0xC2F120 Offset: 0xC2F120 VA: 0xC2F120
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x10

	// Methods

	// RVA: 0x10D67EC Offset: 0x10D67EC VA: 0x10D67EC
	public void .ctor(bool isCompliant) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F160 Offset: 0xC2F160 VA: 0xC2F160
[CLSCompliantAttribute] // RVA: 0xC2F160 Offset: 0xC2F160 VA: 0xC2F160
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 17
{
	// Fields
	public const ulong MaxValue = 18446744073709551615;
	public const ulong MinValue = 0;
	internal ulong m_value; // 0x0

	// Methods

	// RVA: 0xBC0A8C Offset: 0xBC0A8C VA: 0xBC0A8C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBC0A94 Offset: 0xBC0A94 VA: 0xBC0A94 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBC0A9C Offset: 0xBC0A9C VA: 0xBC0A9C Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBC0AA4 Offset: 0xBC0AA4 VA: 0xBC0AA4 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBC0AAC Offset: 0xBC0AAC VA: 0xBC0AAC Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBC0AB4 Offset: 0xBC0AB4 VA: 0xBC0AB4 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBC0ABC Offset: 0xBC0ABC VA: 0xBC0ABC Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBC0AC4 Offset: 0xBC0AC4 VA: 0xBC0AC4 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBC0ACC Offset: 0xBC0ACC VA: 0xBC0ACC Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBC0AD4 Offset: 0xBC0AD4 VA: 0xBC0AD4 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBC0ADC Offset: 0xBC0ADC VA: 0xBC0ADC Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBC0AE4 Offset: 0xBC0AE4 VA: 0xBC0AE4 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBC0AEC Offset: 0xBC0AEC VA: 0xBC0AEC Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBC0AF4 Offset: 0xBC0AF4 VA: 0xBC0AF4 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBC0AFC Offset: 0xBC0AFC VA: 0xBC0AFC Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBC0B04 Offset: 0xBC0B04 VA: 0xBC0B04 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBC0B0C Offset: 0xBC0B0C VA: 0xBC0B0C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBC0B14 Offset: 0xBC0B14 VA: 0xBC0B14 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0B20 Offset: 0xBC0B20 VA: 0xBC0B20 Slot: 22
	public int CompareTo(ulong value) { }

	// RVA: 0xBC0B38 Offset: 0xBC0B38 VA: 0xBC0B38 Slot: 23
	public bool Equals(ulong obj) { }

	[CLSCompliantAttribute] // RVA: 0xC379C0 Offset: 0xC379C0 VA: 0xC379C0
	// RVA: 0x1302758 Offset: 0x1302758 VA: 0x1302758
	public static ulong Parse(string s) { }

	[CLSCompliantAttribute] // RVA: 0xC379D4 Offset: 0xC379D4 VA: 0xC379D4
	// RVA: 0x1302800 Offset: 0x1302800 VA: 0x1302800
	public static ulong Parse(string s, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC379E8 Offset: 0xC379E8 VA: 0xC379E8
	// RVA: 0x1302810 Offset: 0x1302810 VA: 0x1302810
	public static ulong Parse(string s, NumberStyles style) { }

	// RVA: 0x1302818 Offset: 0x1302818 VA: 0x1302818
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc) { }

	[CLSCompliantAttribute] // RVA: 0xC379FC Offset: 0xC379FC VA: 0xC379FC
	// RVA: 0x1302764 Offset: 0x1302764 VA: 0x1302764
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC37A10 Offset: 0xC37A10 VA: 0xC37A10
	// RVA: 0x13033A0 Offset: 0x13033A0 VA: 0x13033A0
	public static bool TryParse(string s, out ulong result) { }

	[CLSCompliantAttribute] // RVA: 0xC37A24 Offset: 0xC37A24 VA: 0xC37A24
	// RVA: 0x13033F4 Offset: 0x13033F4 VA: 0x13033F4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ulong result) { }

	// RVA: 0xBC0B48 Offset: 0xBC0B48 VA: 0xBC0B48 Slot: 3
	public override string ToString() { }

	// RVA: 0xBC0B50 Offset: 0xBC0B50 VA: 0xBC0B50 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBC0B58 Offset: 0xBC0B58 VA: 0xBC0B58
	public string ToString(string format) { }

	// RVA: 0xBC0B64 Offset: 0xBC0B64 VA: 0xBC0B64 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F1A0 Offset: 0xC2F1A0 VA: 0xC2F1A0
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0;
	public const byte MaxValue = 255;
	internal byte m_value; // 0x0

	// Methods

	// RVA: 0xBBAD94 Offset: 0xBBAD94 VA: 0xBBAD94 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBAD9C Offset: 0xBBAD9C VA: 0xBBAD9C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBADA4 Offset: 0xBBADA4 VA: 0xBBADA4 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBADAC Offset: 0xBBADAC VA: 0xBBADAC Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBADB4 Offset: 0xBBADB4 VA: 0xBBADB4 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBADC0 Offset: 0xBBADC0 VA: 0xBBADC0 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBADC8 Offset: 0xBBADC8 VA: 0xBBADC8 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBADD0 Offset: 0xBBADD0 VA: 0xBBADD0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBADD8 Offset: 0xBBADD8 VA: 0xBBADD8 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBADE0 Offset: 0xBBADE0 VA: 0xBBADE0 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBADE8 Offset: 0xBBADE8 VA: 0xBBADE8 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBADF0 Offset: 0xBBADF0 VA: 0xBBADF0 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBADF8 Offset: 0xBBADF8 VA: 0xBBADF8 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBAE00 Offset: 0xBBAE00 VA: 0xBBAE00 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBAE08 Offset: 0xBBAE08 VA: 0xBBAE08 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBBAE10 Offset: 0xBBAE10 VA: 0xBBAE10 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBBAE18 Offset: 0xBBAE18 VA: 0xBBAE18 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBAE20 Offset: 0xBBAE20 VA: 0xBBAE20 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBAE28 Offset: 0xBBAE28 VA: 0xBBAE28 Slot: 22
	public int CompareTo(byte value) { }

	// RVA: 0xBBAE40 Offset: 0xBBAE40 VA: 0xBBAE40 Slot: 23
	public bool Equals(byte obj) { }

	// RVA: 0x10D64D4 Offset: 0x10D64D4 VA: 0x10D64D4
	public static byte Parse(string s, IFormatProvider provider) { }

	// RVA: 0x10D65A8 Offset: 0x10D65A8 VA: 0x10D65A8
	public static byte Parse(string s, NumberStyles style) { }

	// RVA: 0x10D64E4 Offset: 0x10D64E4 VA: 0x10D64E4
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x10D65B0 Offset: 0x10D65B0 VA: 0x10D65B0
	public static byte Parse(string s) { }

	// RVA: 0x10D65BC Offset: 0x10D65BC VA: 0x10D65BC
	public static bool TryParse(string s, out byte result) { }

	// RVA: 0x10D661C Offset: 0x10D661C VA: 0x10D661C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result) { }

	// RVA: 0xBBAE50 Offset: 0xBBAE50 VA: 0xBBAE50 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBAE58 Offset: 0xBBAE58 VA: 0xBBAE58
	public string ToString(string format) { }

	// RVA: 0xBBAE64 Offset: 0xBBAE64 VA: 0xBBAE64 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBBAE6C Offset: 0xBBAE6C VA: 0xBBAE6C Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xC2F1B4 Offset: 0xC2F1B4 VA: 0xC2F1B4
[ComVisibleAttribute] // RVA: 0xC2F1B4 Offset: 0xC2F1B4 VA: 0xC2F1B4
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 19
{
	// Fields
	internal sbyte m_value; // 0x0

	// Methods

	// RVA: 0xBBB968 Offset: 0xBBB968 VA: 0xBBB968 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBB970 Offset: 0xBBB970 VA: 0xBBB970 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBB978 Offset: 0xBBB978 VA: 0xBBB978 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBB980 Offset: 0xBBB980 VA: 0xBBB980 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBB988 Offset: 0xBBB988 VA: 0xBBB988 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBB990 Offset: 0xBBB990 VA: 0xBBB990 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBB998 Offset: 0xBBB998 VA: 0xBBB998 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBB9A0 Offset: 0xBBB9A0 VA: 0xBBB9A0 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBB9A8 Offset: 0xBBB9A8 VA: 0xBBB9A8 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBB9B0 Offset: 0xBBB9B0 VA: 0xBBB9B0 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBB9B8 Offset: 0xBBB9B8 VA: 0xBBB9B8 Slot: 15
