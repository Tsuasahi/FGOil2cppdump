	// RVA: 0x1C8FA50 Offset: 0x1C8FA50 VA: 0x1C8FA50 Slot: 4
	public void begin(EventPointVsResultAction that) { }

	// RVA: 0x1C8FAAC Offset: 0x1C8FAAC VA: 0x1C8FAAC Slot: 5
	public void update(EventPointVsResultAction that) { }

	// RVA: 0x1C8FC8C Offset: 0x1C8FC8C VA: 0x1C8FC8C Slot: 6
	public void end(EventPointVsResultAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A10 Offset: 0xCB1A10 VA: 0xCB1A10
private sealed class EventPointVsResultAction.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 10979
{
	// Fields
	internal EventPointVsResultAction that; // 0x10

	// Methods

	// RVA: 0x1C8FC84 Offset: 0x1C8FC84 VA: 0x1C8FC84
	public void .ctor() { }

	// RVA: 0x1C8FC90 Offset: 0x1C8FC90 VA: 0x1C8FC90
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19F0 Offset: 0xCB19F0 VA: 0xCB19F0
private sealed class EventPointVsResultAction.<Setup>c__AnonStorey0 // TypeDefIndex: 10980
{
	// Fields
	internal int resultNo; // 0x10
	internal Action callBack; // 0x18
	internal EventPointVsResultAction $this; // 0x20

	// Methods

	// RVA: 0x1C8E86C Offset: 0x1C8E86C VA: 0x1C8E86C
	public void .ctor() { }

	// RVA: 0x1C8F314 Offset: 0x1C8F314 VA: 0x1C8F314
	internal void <>m__0() { }

	// RVA: 0x1C8F49C Offset: 0x1C8F49C VA: 0x1C8F49C
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A00 Offset: 0xCB1A00 VA: 0xCB1A00
private sealed class EventPointVsResultAction.<LoadSvts>c__AnonStorey1 // TypeDefIndex: 10981
{
	// Fields
	internal int cnt; // 0x10
	internal int[] servants; // 0x18
	internal Face.Type[] faces; // 0x20
	internal EventPointVsResultAction.GROUP_WIN winType; // 0x28
	internal Action callBack; // 0x30
	internal EventPointVsResultAction $this; // 0x38

	// Methods

	// RVA: 0x1C8F1E4 Offset: 0x1C8F1E4 VA: 0x1C8F1E4
	public void .ctor() { }

	// RVA: 0x1C8F2B8 Offset: 0x1C8F2B8 VA: 0x1C8F2B8
	internal void <>m__0() { }
}

// Namespace: 
public class EventRaceBoostEffect : MonoBehaviour // TypeDefIndex: 10982
{
	// Fields
	private static readonly string SP_NAME; // 0x0
	private static readonly string ANIM_NAME; // 0x8
	[SerializeField] // RVA: 0xCE8918 Offset: 0xCE8918 VA: 0xCE8918
	private UISprite[] effectSp; // 0x18
	[SerializeField] // RVA: 0xCE8928 Offset: 0xCE8928 VA: 0xCE8928
	private UISprite boostItemSp; // 0x20
	[SerializeField] // RVA: 0xCE8938 Offset: 0xCE8938 VA: 0xCE8938
	private UILabel boostCntLb; // 0x28
	private Action callBack; // 0x30
	private bool seEnded; // 0x38
	private bool animEnded; // 0x39
	private int randvoiceSvt; // 0x3C
	private string randvoiceId; // 0x40
	private bool destroyedBeforeVoiceStop; // 0x48

	// Methods

	// RVA: 0x1C91360 Offset: 0x1C91360 VA: 0x1C91360
	public void .ctor() { }

	// RVA: 0x1C91368 Offset: 0x1C91368 VA: 0x1C91368
	public void SetUpAndPlay(QuestRacePointEntity boostEnt, EventRaceBoostEffect.BoostGrade boostGrade, int boostPoint, int itemImgId, bool playVoice, Action callback) { }

	// RVA: 0x1C91838 Offset: 0x1C91838 VA: 0x1C91838
	private void setupLocal(QuestRacePointEntity boostEnt, EventRaceBoostEffect.BoostGrade boostGrade, int boostPoint, int itemImgId, Action callback) { }

	// RVA: 0x1C91F5C Offset: 0x1C91F5C VA: 0x1C91F5C
	private void afterSE() { }

	// RVA: 0x1C92138 Offset: 0x1C92138 VA: 0x1C92138
	private void afterVoice() { }

	// RVA: 0x1C91630 Offset: 0x1C91630 VA: 0x1C91630
	private int GetSvtId(string voiceStr) { }

	// RVA: 0x1C9171C Offset: 0x1C9171C VA: 0x1C9171C
	private string GetVoiceId(string voiceStr) { }

	// RVA: 0x1C921C8 Offset: 0x1C921C8 VA: 0x1C921C8
	private void onEndAnim() { }

	// RVA: 0x1C92110 Offset: 0x1C92110 VA: 0x1C92110
	private void CheckCallback() { }

	// RVA: 0x1C921E0 Offset: 0x1C921E0 VA: 0x1C921E0
	public void OnDestroy() { }

	// RVA: 0x1C922D0 Offset: 0x1C922D0 VA: 0x1C922D0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4029C Offset: 0xD4029C VA: 0xD4029C
	// RVA: 0x1C92344 Offset: 0x1C92344 VA: 0x1C92344
	private void <setupLocal>m__0() { }
}

// Namespace: 
public enum EventRaceBoostEffect.BoostColor // TypeDefIndex: 10983
{
	// Fields
	public int value__; // 0x0
	public const EventRaceBoostEffect.BoostColor NONE = 0;
	public const EventRaceBoostEffect.BoostColor BURST = 1;
	public const EventRaceBoostEffect.BoostColor QUICK = 2;
	public const EventRaceBoostEffect.BoostColor ARTS = 3;
}

// Namespace: 
public enum EventRaceBoostEffect.BoostGrade // TypeDefIndex: 10984
{
	// Fields
	public int value__; // 0x0
	public const EventRaceBoostEffect.BoostGrade NONE = 1;
	public const EventRaceBoostEffect.BoostGrade BOOSTED = 2;
	public const EventRaceBoostEffect.BoostGrade BOOSTED_LOT = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A20 Offset: 0xCB1A20 VA: 0xCB1A20
private sealed class EventRaceBoostEffect.<SetUpAndPlay>c__AnonStorey0 // TypeDefIndex: 10985
{
	// Fields
	internal QuestRacePointEntity boostEnt; // 0x10
	internal EventRaceBoostEffect.BoostGrade boostGrade; // 0x18
	internal int boostPoint; // 0x1C
	internal int itemImgId; // 0x20
	internal Action callback; // 0x28
	internal EventRaceBoostEffect $this; // 0x30

	// Methods

	// RVA: 0x1C91628 Offset: 0x1C91628 VA: 0x1C91628
	public void .ctor() { }

	// RVA: 0x1C92348 Offset: 0x1C92348 VA: 0x1C92348
	internal void <>m__0() { }
}

// Namespace: 
public class EventRaceResultEffect : MonoBehaviour // TypeDefIndex: 10986
{
	// Fields
	private static readonly string TEAM_NAME_SP_NAME; // 0x0
	private static readonly int REST_DISTANCE_FONT_SIZE; // 0x8
	[SerializeField] // RVA: 0xCE8948 Offset: 0xCE8948 VA: 0xCE8948
	private ExUITexture mBg; // 0x18
	[SerializeField] // RVA: 0xCE8958 Offset: 0xCE8958 VA: 0xCE8958
	private UISprite[] teams; // 0x20
	[SerializeField] // RVA: 0xCE8968 Offset: 0xCE8968 VA: 0xCE8968
	private UILabel[] teamTimes; // 0x28
	[SerializeField] // RVA: 0xCE8978 Offset: 0xCE8978 VA: 0xCE8978
	private int bgId; // 0x30
	[SerializeField] // RVA: 0xCE8988 Offset: 0xCE8988 VA: 0xCE8988
	private GameObject mScreenTouchInfo; // 0x38
	private CStateManager<EventRaceResultEffect> mFSM; // 0x40
	private SimpleAnimation mSimpleAnimation; // 0x48
	private Animation mAnimation; // 0x50
	private Action mEndAct; // 0x58

	// Methods

	// RVA: 0x1C93B4C Offset: 0x1C93B4C VA: 0x1C93B4C
	public void .ctor() { }

	// RVA: 0x1C93B54 Offset: 0x1C93B54 VA: 0x1C93B54
	private void Awake() { }

	// RVA: 0x1C93D38 Offset: 0x1C93D38 VA: 0x1C93D38
	private void Update() { }

	// RVA: 0x1C93D98 Offset: 0x1C93D98 VA: 0x1C93D98
	public void SetUp(int eventId, int[] teamIconIds, long[] goalTimes, long[] restDistances, Action onSetupEnd) { }

	// RVA: 0x1C942A0 Offset: 0x1C942A0 VA: 0x1C942A0
	private string MakeTimeStr(long utime) { }

	// RVA: 0x1C94414 Offset: 0x1C94414 VA: 0x1C94414
	private string MakeRestDistanceStr(long restDistance) { }

	// RVA: 0x1C944E4 Offset: 0x1C944E4 VA: 0x1C944E4
	public void Play(Action end_act) { }

	// RVA: 0x1C94860 Offset: 0x1C94860 VA: 0x1C94860
	public EventRaceResultEffect.STATE GetState() { }

	// RVA: 0x1C93CC8 Offset: 0x1C93CC8 VA: 0x1C93CC8
	public void SetState(EventRaceResultEffect.STATE state) { }

	// RVA: 0x1C948C0 Offset: 0x1C948C0 VA: 0x1C948C0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD402AC Offset: 0xD402AC VA: 0xD402AC
	// RVA: 0x1C9492C Offset: 0x1C9492C VA: 0x1C9492C
	private void <Play>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD402BC Offset: 0xD402BC VA: 0xD402BC
	// RVA: 0x1C94934 Offset: 0x1C94934 VA: 0x1C94934
	private void <Play>m__1() { }
}

// Namespace: 
public enum EventRaceResultEffect.STATE // TypeDefIndex: 10987
{
	// Fields
	public int value__; // 0x0
	public const EventRaceResultEffect.STATE NONE = 0;
	public const EventRaceResultEffect.STATE PLAY = 1;
	public const EventRaceResultEffect.STATE TOUCH_WAIT = 2;
	public const EventRaceResultEffect.STATE SIZEOF = 3;
}

// Namespace: 
private class EventRaceResultEffect.StateNone : IState<EventRaceResultEffect> // TypeDefIndex: 10988
{
	// Methods

	// RVA: 0x1C93CB0 Offset: 0x1C93CB0 VA: 0x1C93CB0
	public void .ctor() { }

	// RVA: 0x1C9493C Offset: 0x1C9493C VA: 0x1C9493C Slot: 4
	public void begin(EventRaceResultEffect that) { }

	// RVA: 0x1C94940 Offset: 0x1C94940 VA: 0x1C94940 Slot: 5
	public void update(EventRaceResultEffect that) { }

	// RVA: 0x1C94944 Offset: 0x1C94944 VA: 0x1C94944 Slot: 6
	public void end(EventRaceResultEffect that) { }
}

// Namespace: 
private class EventRaceResultEffect.StatePlay : IState<EventRaceResultEffect> // TypeDefIndex: 10989
{
	// Fields
	private SimpleAnimation.State mSimpleAnimState; // 0x10
	private AnimationState mAnimState; // 0x18

	// Methods

	// RVA: 0x1C93CB8 Offset: 0x1C93CB8 VA: 0x1C93CB8
	public void .ctor() { }

	// RVA: 0x1C94948 Offset: 0x1C94948 VA: 0x1C94948 Slot: 4
	public void begin(EventRaceResultEffect that) { }

	// RVA: 0x1C94C40 Offset: 0x1C94C40 VA: 0x1C94C40 Slot: 5
	public void update(EventRaceResultEffect that) { }

	// RVA: 0x1C94E0C Offset: 0x1C94E0C VA: 0x1C94E0C Slot: 6
	public void end(EventRaceResultEffect that) { }
}

// Namespace: 
private class EventRaceResultEffect.StateTouchWait : IState<EventRaceResultEffect> // TypeDefIndex: 10990
{
	// Methods

	// RVA: 0x1C93CC0 Offset: 0x1C93CC0 VA: 0x1C93CC0
	public void .ctor() { }

	// RVA: 0x1C94E10 Offset: 0x1C94E10 VA: 0x1C94E10 Slot: 4
	public void begin(EventRaceResultEffect that) { }

	// RVA: 0x1C94E54 Offset: 0x1C94E54 VA: 0x1C94E54 Slot: 5
	public void update(EventRaceResultEffect that) { }

	// RVA: 0x1C95038 Offset: 0x1C95038 VA: 0x1C95038 Slot: 6
	public void end(EventRaceResultEffect that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A30 Offset: 0xCB1A30 VA: 0xCB1A30
private sealed class EventRaceResultEffect.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 10991
{
	// Fields
	internal EventRaceResultEffect that; // 0x10

	// Methods

	// RVA: 0x1C95030 Offset: 0x1C95030 VA: 0x1C95030
	public void .ctor() { }

	// RVA: 0x1C9503C Offset: 0x1C9503C VA: 0x1C9503C
	internal void <>m__0() { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC96B0C Offset: 0xC96B0C VA: 0xC96B0C
public static class ActionExtensions // TypeDefIndex: 10992
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD402CC Offset: 0xD402CC VA: 0xD402CC
	[DebuggerHiddenAttribute] // RVA: 0xD402CC Offset: 0xD402CC VA: 0xD402CC
	[DebuggerStepThroughAttribute] // RVA: 0xD402CC Offset: 0xD402CC VA: 0xD402CC
	// RVA: 0x159B408 Offset: 0x159B408 VA: 0x159B408
	public static void Call(Action action) { }

	[ExtensionAttribute] // RVA: 0xD40314 Offset: 0xD40314 VA: 0xD40314
	[DebuggerHiddenAttribute] // RVA: 0xD40314 Offset: 0xD40314 VA: 0xD40314
	[DebuggerStepThroughAttribute] // RVA: 0xD40314 Offset: 0xD40314 VA: 0xD40314
	// RVA: -1 Offset: -1
	public static void Call<T>(Action<T> action, T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CD940 Offset: 0x21CD940 VA: 0x21CD940
	|-ActionExtensions.Call<ShowAllEx.DamageFuncArgument>
	|
	|-RVA: 0x21CDA44 Offset: 0x21CDA44 VA: 0x21CDA44
	|-ActionExtensions.Call<MaterialEventLogListViewItem>
	|-ActionExtensions.Call<MissionNotifyComponent>
	|-ActionExtensions.Call<PurchaseByBank_UnityIap_Request.PurchaseResult[]>
	|-ActionExtensions.Call<SubmarineMapPanelData>
	|-ActionExtensions.Call<Action>
	|-ActionExtensions.Call<object>
	|-ActionExtensions.Call<string>
	|
	|-RVA: 0x21CD98C Offset: 0x21CD98C VA: 0x21CD98C
	|-ActionExtensions.Call<bool>
	|
	|-RVA: 0x21CD9FC Offset: 0x21CD9FC VA: 0x21CD9FC
	|-ActionExtensions.Call<int>
	|
	|-RVA: 0x21CDA5C Offset: 0x21CDA5C VA: 0x21CDA5C
	|-ActionExtensions.Call<float>
	*/

	[ExtensionAttribute] // RVA: 0xD4035C Offset: 0xD4035C VA: 0xD4035C
	[DebuggerHiddenAttribute] // RVA: 0xD4035C Offset: 0xD4035C VA: 0xD4035C
	[DebuggerStepThroughAttribute] // RVA: 0xD4035C Offset: 0xD4035C VA: 0xD4035C
	// RVA: -1 Offset: -1
	public static void Call<T1, T2>(Action<T1, T2> action, T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CD9C8 Offset: 0x21CD9C8 VA: 0x21CD9C8
	|-ActionExtensions.Call<int, bool>
	|
	|-RVA: 0x21CD9E4 Offset: 0x21CD9E4 VA: 0x21CD9E4
	|-ActionExtensions.Call<int, int>
	|
	|-RVA: 0x21CDA2C Offset: 0x21CDA2C VA: 0x21CDA2C
	|-ActionExtensions.Call<object, object>
	*/

	[ExtensionAttribute] // RVA: 0xD403A4 Offset: 0xD403A4 VA: 0xD403A4
	[DebuggerHiddenAttribute] // RVA: 0xD403A4 Offset: 0xD403A4 VA: 0xD403A4
	[DebuggerStepThroughAttribute] // RVA: 0xD403A4 Offset: 0xD403A4 VA: 0xD403A4
	// RVA: -1 Offset: -1
	public static void Call<T1, T2, T3>(Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CD9A8 Offset: 0x21CD9A8 VA: 0x21CD9A8
	|-ActionExtensions.Call<int, bool, bool>
	|
	|-RVA: 0x21CDA14 Offset: 0x21CDA14 VA: 0x21CDA14
	|-ActionExtensions.Call<object, object, object>
	*/
}

// Namespace: 
public class BlinkingComponent : MonoBehaviour // TypeDefIndex: 10993
{
	// Fields
	public const float ITVL_TIME = 0.75;
	private float mOldTime; // 0x18
	private Vector3 mOrgScl; // 0x1C
	private bool mIsPlay; // 0x28
	private bool mIsDisp; // 0x29

	// Methods

	// RVA: 0x1EF2308 Offset: 0x1EF2308 VA: 0x1EF2308
	public void .ctor() { }

	// RVA: 0x1EF2310 Offset: 0x1EF2310 VA: 0x1EF2310
	private void Awake() { }

	// RVA: 0x1EF2344 Offset: 0x1EF2344 VA: 0x1EF2344
	private void OnEnable() { }

	// RVA: 0x1EF2364 Offset: 0x1EF2364 VA: 0x1EF2364
	private void Update() { }

	// RVA: 0x1EF2354 Offset: 0x1EF2354 VA: 0x1EF2354
	public void Play() { }

	// RVA: 0x1EF23C8 Offset: 0x1EF23C8 VA: 0x1EF23C8
	public void Stop() { }

	// RVA: 0x1EF2368 Offset: 0x1EF2368 VA: 0x1EF2368
	private void PlayExec() { }

	// RVA: 0x1EF23D4 Offset: 0x1EF23D4 VA: 0x1EF23D4
	private void SetDisp(bool is_disp) { }
}

// Namespace: 
public class CachableMonoBehaviour : MonoBehaviour // TypeDefIndex: 10994
{
	// Fields
	private Renderer mRenderer; // 0x18
	private Rigidbody mRigidbody; // 0x20
	private Transform mTransform; // 0x28

	// Properties
	public Renderer renderer { get; }
	public Rigidbody rigidbody { get; }
	public Transform transform { get; }

	// Methods

	// RVA: 0x19261F0 Offset: 0x19261F0 VA: 0x19261F0
	public void .ctor() { }

	// RVA: 0x19261F8 Offset: 0x19261F8 VA: 0x19261F8
	public Renderer get_renderer() { }

	// RVA: 0x1926290 Offset: 0x1926290 VA: 0x1926290
	public Rigidbody get_rigidbody() { }

	// RVA: 0x1926328 Offset: 0x1926328 VA: 0x1926328
	public Transform get_transform() { }
}

// Namespace: 
public interface IState<T> // TypeDefIndex: 10995
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void begin(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.begin
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void update(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.update
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void end(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.end
	*/
}

// Namespace: 
public class CFSM<T> // TypeDefIndex: 10996
{
	// Fields
	private IState<T> m_current; // 0x0
	private T that; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252575C Offset: 0x252575C VA: 0x252575C
	|-CFSM<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public IState<T> getState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525794 Offset: 0x2525794 VA: 0x2525794
	|-CFSM<object>.getState
	*/

	// RVA: -1 Offset: -1
	public void _set(IState<T> val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252579C Offset: 0x252579C VA: 0x252579C
	|-CFSM<object>._set
	*/

	// RVA: -1 Offset: -1
	public void setState(IState<T> val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25257A4 Offset: 0x25257A4 VA: 0x25257A4
	|-CFSM<object>.setState
	*/

	// RVA: -1 Offset: -1
	public void update() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252592C Offset: 0x252592C VA: 0x252592C
	|-CFSM<object>.update
	*/

	// RVA: -1 Offset: -1
	public void destroy() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25259E8 Offset: 0x25259E8 VA: 0x25259E8
	|-CFSM<object>.destroy
	*/
}

// Namespace: 
public class CStateManager<T> // TypeDefIndex: 10997
{
	// Fields
	private CFSM<T> m_fsm; // 0x0
	private int m_state; // 0x0
	private IState<T>[] m_state_table; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T that, int max) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525AA4 Offset: 0x2525AA4 VA: 0x2525AA4
	|-CStateManager<CylinderCore>..ctor
	|-CStateManager<EarthCore>..ctor
	|-CStateManager<EventPointVsResultAction>..ctor
	|-CStateManager<EventRaceResultEffect>..ctor
	|-CStateManager<MapGimmickComponent>..ctor
	|-CStateManager<MissionNotifyComponent>..ctor
	|-CStateManager<MyRoomControl>..ctor
	|-CStateManager<MyRoomStateMaterial>..ctor
	|-CStateManager<QuestAfterAction>..ctor
	|-CStateManager<QuestBoardListEffectComponent>..ctor
	|-CStateManager<QuestBoardListViewEarthLine>..ctor
	|-CStateManager<QuestPhaseRewardComponent>..ctor
	|-CStateManager<QuestRewardBoxAction>..ctor
	|-CStateManager<QuestRewardCostumeAction>..ctor
	|-CStateManager<QuestRewardHarvestAction>..ctor
	|-CStateManager<QuestRewardItemAction>..ctor
	|-CStateManager<QuestRewardOrderGradeAction>..ctor
	|-CStateManager<QuestRewardTokenAction>..ctor
	|-CStateManager<ServantRewardAction>..ctor
	|-CStateManager<SpotLargeComponent>..ctor
	|-CStateManager<SrcSpotBasePrefab>..ctor
	|-CStateManager<StandFigureSlideComponent>..ctor
	|-CStateManager<object>..ctor
	|-CStateManager<TerminalSceneComponent>..ctor
	|-CStateManager<TitleInfoWarBoardTitleComponent>..ctor
	|-CStateManager<srcLineSprite>..ctor
	*/

	// RVA: -1 Offset: -1
	public void add(int idx, IState<T> si) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525B60 Offset: 0x2525B60 VA: 0x2525B60
	|-CStateManager<CylinderCore>.add
	|-CStateManager<EarthCore>.add
	|-CStateManager<EventPointVsResultAction>.add
	|-CStateManager<EventRaceResultEffect>.add
	|-CStateManager<MapGimmickComponent>.add
	|-CStateManager<MissionNotifyComponent>.add
	|-CStateManager<MyRoomControl>.add
	|-CStateManager<MyRoomStateMaterial>.add
	|-CStateManager<QuestAfterAction>.add
	|-CStateManager<QuestBoardListEffectComponent>.add
	|-CStateManager<QuestBoardListViewEarthLine>.add
	|-CStateManager<QuestPhaseRewardComponent>.add
	|-CStateManager<QuestRewardBoxAction>.add
	|-CStateManager<QuestRewardCostumeAction>.add
	|-CStateManager<QuestRewardHarvestAction>.add
	|-CStateManager<QuestRewardItemAction>.add
	|-CStateManager<QuestRewardOrderGradeAction>.add
	|-CStateManager<QuestRewardTokenAction>.add
	|-CStateManager<ServantRewardAction>.add
	|-CStateManager<SpotLargeComponent>.add
	|-CStateManager<SrcSpotBasePrefab>.add
	|-CStateManager<StandFigureSlideComponent>.add
	|-CStateManager<object>.add
	|-CStateManager<TerminalSceneComponent>.add
	|-CStateManager<TitleInfoWarBoardTitleComponent>.add
	|-CStateManager<srcLineSprite>.add
	*/

	// RVA: -1 Offset: -1
	public void update() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525BF0 Offset: 0x2525BF0 VA: 0x2525BF0
	|-CStateManager<CylinderCore>.update
	|-CStateManager<EarthCore>.update
	|-CStateManager<EventPointVsResultAction>.update
	|-CStateManager<EventRaceResultEffect>.update
	|-CStateManager<MapGimmickComponent>.update
	|-CStateManager<MissionNotifyComponent>.update
	|-CStateManager<MyRoomControl>.update
	|-CStateManager<MyRoomStateMaterial>.update
	|-CStateManager<QuestAfterAction>.update
	|-CStateManager<QuestBoardListEffectComponent>.update
	|-CStateManager<QuestBoardListViewEarthLine>.update
	|-CStateManager<QuestPhaseRewardComponent>.update
	|-CStateManager<QuestRewardBoxAction>.update
	|-CStateManager<QuestRewardCostumeAction>.update
	|-CStateManager<QuestRewardHarvestAction>.update
	|-CStateManager<QuestRewardItemAction>.update
	|-CStateManager<QuestRewardOrderGradeAction>.update
	|-CStateManager<QuestRewardTokenAction>.update
	|-CStateManager<ServantRewardAction>.update
	|-CStateManager<SpotLargeComponent>.update
	|-CStateManager<SrcSpotBasePrefab>.update
	|-CStateManager<StandFigureSlideComponent>.update
	|-CStateManager<object>.update
	|-CStateManager<TerminalSceneComponent>.update
	|-CStateManager<TitleInfoWarBoardTitleComponent>.update
	|-CStateManager<srcLineSprite>.update
	*/

	// RVA: -1 Offset: -1
	public void setState(int idx) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525C30 Offset: 0x2525C30 VA: 0x2525C30
	|-CStateManager<CylinderCore>.setState
	|-CStateManager<EarthCore>.setState
	|-CStateManager<EventPointVsResultAction>.setState
	|-CStateManager<EventRaceResultEffect>.setState
	|-CStateManager<MapGimmickComponent>.setState
	|-CStateManager<MissionNotifyComponent>.setState
	|-CStateManager<MyRoomControl>.setState
	|-CStateManager<MyRoomStateMaterial>.setState
	|-CStateManager<QuestAfterAction>.setState
	|-CStateManager<QuestBoardListEffectComponent>.setState
	|-CStateManager<QuestBoardListViewEarthLine>.setState
	|-CStateManager<QuestPhaseRewardComponent>.setState
	|-CStateManager<QuestRewardBoxAction>.setState
	|-CStateManager<QuestRewardCostumeAction>.setState
	|-CStateManager<QuestRewardHarvestAction>.setState
	|-CStateManager<QuestRewardItemAction>.setState
	|-CStateManager<QuestRewardOrderGradeAction>.setState
	|-CStateManager<QuestRewardTokenAction>.setState
	|-CStateManager<ServantRewardAction>.setState
	|-CStateManager<SpotLargeComponent>.setState
	|-CStateManager<SrcSpotBasePrefab>.setState
	|-CStateManager<StandFigureSlideComponent>.setState
	|-CStateManager<object>.setState
	|-CStateManager<TerminalSceneComponent>.setState
	|-CStateManager<TitleInfoWarBoardTitleComponent>.setState
	|-CStateManager<srcLineSprite>.setState
	*/

	// RVA: -1 Offset: -1
	public int getState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525CBC Offset: 0x2525CBC VA: 0x2525CBC
	|-CStateManager<CylinderCore>.getState
	|-CStateManager<EarthCore>.getState
	|-CStateManager<EventPointVsResultAction>.getState
	|-CStateManager<EventRaceResultEffect>.getState
	|-CStateManager<MapGimmickComponent>.getState
	|-CStateManager<MissionNotifyComponent>.getState
	|-CStateManager<MyRoomControl>.getState
	|-CStateManager<MyRoomStateMaterial>.getState
	|-CStateManager<QuestAfterAction>.getState
	|-CStateManager<QuestBoardListEffectComponent>.getState
	|-CStateManager<QuestBoardListViewEarthLine>.getState
	|-CStateManager<QuestPhaseRewardComponent>.getState
	|-CStateManager<QuestRewardBoxAction>.getState
	|-CStateManager<QuestRewardCostumeAction>.getState
	|-CStateManager<QuestRewardHarvestAction>.getState
	|-CStateManager<QuestRewardItemAction>.getState
	|-CStateManager<QuestRewardOrderGradeAction>.getState
	|-CStateManager<QuestRewardTokenAction>.getState
	|-CStateManager<ServantRewardAction>.getState
	|-CStateManager<SpotLargeComponent>.getState
	|-CStateManager<SrcSpotBasePrefab>.getState
	|-CStateManager<StandFigureSlideComponent>.getState
	|-CStateManager<object>.getState
	|-CStateManager<TerminalSceneComponent>.getState
	|-CStateManager<TitleInfoWarBoardTitleComponent>.getState
	|-CStateManager<srcLineSprite>.getState
	*/

	// RVA: -1 Offset: -1
	public void destroy() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2525CC4 Offset: 0x2525CC4 VA: 0x2525CC4
	|-CStateManager<object>.destroy
	*/
}

// Namespace: 
public class ColorChange : MonoBehaviour // TypeDefIndex: 10998
{
	// Fields
	private bool mIsChangeColor; // 0x18
	private Color mFromColor; // 0x1C
	private Color mToColor; // 0x2C
	private Color mNowColor; // 0x3C
	private float mStartTime; // 0x4C
	private float mTime; // 0x50
	private ColorChange.CHANGE_STYLE mStyle; // 0x54
	private int mCount; // 0x58
	private int mNowCount; // 0x5C
	private float mDelay; // 0x60
	private Action mProcessAct; // 0x68
	private Action mEndAct; // 0x70
	private bool mPause; // 0x78
	private float mPauseStartTime; // 0x7C
	private Easing.TYPE mEasingType; // 0x80
	private bool mIsSkip; // 0x84

	// Methods

	// RVA: 0x1571470 Offset: 0x1571470 VA: 0x1571470
	public void .ctor() { }

	// RVA: 0x1571478 Offset: 0x1571478 VA: 0x1571478
	private void Awake() { }

	// RVA: 0x1571484 Offset: 0x1571484 VA: 0x1571484
	private void Update() { }

	// RVA: 0x1571718 Offset: 0x1571718 VA: 0x1571718
	public void Play(Color from, Color to, float sec, ColorChange.CHANGE_STYLE style = 0, int count = 1, Action procAct, Action endAct, float delay = 0, Easing.TYPE easingType = 0) { }

	// RVA: 0x15717D4 Offset: 0x15717D4 VA: 0x15717D4
	public Color GetColor() { }

	// RVA: 0x15717E0 Offset: 0x15717E0 VA: 0x15717E0
	public void SetColor(Color color) { }

	// RVA: 0x15717EC Offset: 0x15717EC VA: 0x15717EC
	public void Pause() { }

	// RVA: 0x1571824 Offset: 0x1571824 VA: 0x1571824
	public void Resume() { }

	// RVA: 0x1571868 Offset: 0x1571868 VA: 0x1571868
	public void SetPause(bool isPause) { }

	// RVA: 0x15718CC Offset: 0x15718CC VA: 0x15718CC
	public void Stop() { }

	// RVA: 0x15718D4 Offset: 0x15718D4 VA: 0x15718D4
	public void Skip() { }

	// RVA: 0x157163C Offset: 0x157163C VA: 0x157163C
	private Color PingPong(Color from, Color to, float time, Easing.TYPE easingType = 0) { }
}

// Namespace: 
public enum ColorChange.CHANGE_STYLE // TypeDefIndex: 10999
{
	// Fields
	public int value__; // 0x0
	public const ColorChange.CHANGE_STYLE ONE = 0;
	public const ColorChange.CHANGE_STYLE PINGPONG = 1;
}

// Namespace: 
public static class CTouch // TypeDefIndex: 11000
{
	// Fields
	public const int TOUCH_MAX = 1;
	public static float FLICK_LEN; // 0x0
	public static float DRAG_LEN; // 0x4
	private static Touch[] mTouch; // 0x8
	private static bool mIsTchNow; // 0x10
	private static bool mIsTchMouseNow; // 0x11
	private static CTouch.TCH_STATE mState; // 0x14
	private static Vector2 mPosNow; // 0x18
	private static Vector2 mPosPush; // 0x20
	private static Vector2 mScrPosNow; // 0x28
	private static Vector2 mScrPosPush; // 0x30
	private static Vector2 mScrPosOld; // 0x38
	private static Vector2 mScrPosDelta; // 0x40
	private static Vector2 mScrPosDeltaOld; // 0x48
	private static float mScrPosDeltaLen; // 0x50
	private static float mScrPosDeltaLenOld; // 0x54
	private static int mDragFrameCnt; // 0x58
	private static float mDragLen; // 0x5C
	private static Camera mScreenCam; // 0x60
	private static bool mIsClassEnabled; // 0x68
	private static bool mIsReq_MultiTouchEnabled; // 0x69
	[CompilerGeneratedAttribute] // RVA: 0xCE8998 Offset: 0xCE8998 VA: 0xCE8998
	[DebuggerBrowsableAttribute] // RVA: 0xCE8998 Offset: 0xCE8998 VA: 0xCE8998
	private static CTouch.TouchEventHandler mOnTouchReleaseEvent; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCE89D4 Offset: 0xCE89D4 VA: 0xCE89D4
	[DebuggerBrowsableAttribute] // RVA: 0xCE89D4 Offset: 0xCE89D4 VA: 0xCE89D4
	private static CTouch.TouchEventHandler mOnTouchPressEvent; // 0x78
	private static List<int> ignoreFingerIDList; // 0x80
	private static bool mIsInitDone; // 0x88
	private static int mProcessOldFrameCount; // 0x8C

	// Methods

	// RVA: 0x192394C Offset: 0x192394C VA: 0x192394C
	public static void SetClassEnabled(bool isEnabled) { }

	// RVA: 0x19239BC Offset: 0x19239BC VA: 0x19239BC
	public static void SetMultiTouchEnabled(bool is_enabled) { }

	// RVA: 0x1923A2C Offset: 0x1923A2C VA: 0x1923A2C
	private static void add_mOnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923B6C Offset: 0x1923B6C VA: 0x1923B6C
	private static void remove_mOnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923CAC Offset: 0x1923CAC VA: 0x1923CAC
	public static void add_OnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923D10 Offset: 0x1923D10 VA: 0x1923D10
	public static void remove_OnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923D74 Offset: 0x1923D74 VA: 0x1923D74
	private static void add_mOnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923EB4 Offset: 0x1923EB4 VA: 0x1923EB4
	private static void remove_mOnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1923FF4 Offset: 0x1923FF4 VA: 0x1923FF4
	public static void add_OnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x1924058 Offset: 0x1924058 VA: 0x1924058
	public static void remove_OnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x19240BC Offset: 0x19240BC VA: 0x19240BC
	public static void reboot() { }

	// RVA: 0x1924124 Offset: 0x1924124 VA: 0x1924124
	public static void init() { }

	// RVA: 0x19241C4 Offset: 0x19241C4 VA: 0x19241C4
	public static void setParam(float flick_len, float drag_len, Camera screen_cam) { }

	// RVA: 0x1924284 Offset: 0x1924284 VA: 0x1924284
	public static void setScreenCamera(Camera cam) { }

	// RVA: 0x19242F0 Offset: 0x19242F0 VA: 0x19242F0
	public static void process() { }

	// RVA: 0x1924D58 Offset: 0x1924D58 VA: 0x1924D58
	public static CTouch.TCH_STATE getTouchState() { }

	// RVA: 0x1924DC0 Offset: 0x1924DC0 VA: 0x1924DC0
	public static bool isTouchNone() { }

	// RVA: 0x1924E30 Offset: 0x1924E30 VA: 0x1924E30
	public static bool isTouchPush() { }

	// RVA: 0x1924EA0 Offset: 0x1924EA0 VA: 0x1924EA0
	public static bool isTouchKeep() { }

	// RVA: 0x1924F10 Offset: 0x1924F10 VA: 0x1924F10
	public static bool isTouchRelease() { }

	// RVA: 0x1924F80 Offset: 0x1924F80 VA: 0x1924F80
	public static bool isFlick() { }

	// RVA: 0x1924FE8 Offset: 0x1924FE8 VA: 0x1924FE8
	public static bool isFlick(float flickLen) { }

	// RVA: 0x19250F0 Offset: 0x19250F0 VA: 0x19250F0
	public static int getFlickDirX() { }

	// RVA: 0x19252C0 Offset: 0x19252C0 VA: 0x19252C0
	public static int getFlickDirY() { }

	// RVA: 0x1925428 Offset: 0x1925428 VA: 0x1925428
	public static bool isDragMode() { }

	// RVA: 0x1925498 Offset: 0x1925498 VA: 0x1925498
	public static bool isDrag() { }

	// RVA: 0x1925528 Offset: 0x1925528 VA: 0x1925528
	public static int getDragFrameCnt() { }

	// RVA: 0x1925590 Offset: 0x1925590 VA: 0x1925590
	public static Vector2 getPosNow() { }

	// RVA: 0x19255F8 Offset: 0x19255F8 VA: 0x19255F8
	public static Vector2 GetTouchPos() { }

	// RVA: 0x1925A04 Offset: 0x1925A04 VA: 0x1925A04
	public static Vector2 getScreenPosition() { }

	// RVA: 0x1925A6C Offset: 0x1925A6C VA: 0x1925A6C
	public static Vector2 getScreenPosition(Vector2 tch_pos) { }

	// RVA: 0x1925D1C Offset: 0x1925D1C VA: 0x1925D1C
	public static Vector2 getScreenPosition(Camera cam) { }

	// RVA: 0x1925AEC Offset: 0x1925AEC VA: 0x1925AEC
	public static Vector2 getScreenPosition(Vector2 tch_pos, Camera cam) { }

	// RVA: 0x1925258 Offset: 0x1925258 VA: 0x1925258
	public static Vector2 getScrPosDelta() { }

	// RVA: 0x1925D88 Offset: 0x1925D88 VA: 0x1925D88
	public static Vector2 getScrPosDeltaOld() { }

	// RVA: 0x1925088 Offset: 0x1925088 VA: 0x1925088
	public static float getScrPosDeltaLen() { }

	// RVA: 0x1925DF0 Offset: 0x1925DF0 VA: 0x1925DF0
	public static float getScrPosDeltaLenOld() { }

	// RVA: 0x1924494 Offset: 0x1924494 VA: 0x1924494
	private static void processSingleTouch() { }

	// RVA: 0x1925760 Offset: 0x1925760 VA: 0x1925760
	public static int GetValidTouchCount() { }

	// RVA: 0x1926058 Offset: 0x1926058 VA: 0x1926058
	public static List<int> GetIgnoreFingerIDList() { }

	// RVA: 0x19257FC Offset: 0x19257FC VA: 0x19257FC
	public static int GetValidTouchLastID(bool isReverse = True) { }

	// RVA: 0x19260C0 Offset: 0x19260C0 VA: 0x19260C0
	private static void .cctor() { }
}

// Namespace: 
public enum CTouch.TCH_STATE // TypeDefIndex: 11001
{
	// Fields
	public int value__; // 0x0
	public const CTouch.TCH_STATE NONE = 0;
	public const CTouch.TCH_STATE PUSH = 1;
	public const CTouch.TCH_STATE KEEP = 2;
	public const CTouch.TCH_STATE RELEASE = 3;
}

// Namespace: 
public sealed class CTouch.TouchEventHandler : MulticastDelegate // TypeDefIndex: 11002
{
	// Methods

	// RVA: 0x19261A0 Offset: 0x19261A0 VA: 0x19261A0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1925E58 Offset: 0x1925E58 VA: 0x1925E58 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x19261B0 Offset: 0x19261B0 VA: 0x19261B0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x19261E4 Offset: 0x19261E4 VA: 0x19261E4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public static class Easing // TypeDefIndex: 11003
{
	// Methods

	// RVA: 0x1CC6560 Offset: 0x1CC6560 VA: 0x1CC6560
	public static Vector3 Func(Vector3 from, Vector3 to, float t, Easing.TYPE type = 0) { }

	// RVA: 0x1CC6F90 Offset: 0x1CC6F90 VA: 0x1CC6F90
	public static Color Func(Color from, Color to, float t, Easing.TYPE type = 0) { }

	// RVA: 0x1CC7788 Offset: 0x1CC7788 VA: 0x1CC7788
